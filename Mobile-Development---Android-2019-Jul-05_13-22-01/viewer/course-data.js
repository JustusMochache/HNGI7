window.COURSE_DATA = {"language":"en-GB","lastDownload":"2019-07-05T16:20:13+03:00","title":"Mobile Development - Android","modules":[{"id":28,"name":"Pre-work: Introduction to Android","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"i17039317dcd1da1a87a42cac25c75aea","items":[{"id":936,"title":"Pre-course work: Welcome to Android","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWelcome to the exciting world of Android development!\u003c/p\u003e\r\n\u003cp\u003eIn this course, we'll learn how to build Android apps, including how to create user interfaces, communicate with a backend server, and take advantage of device features.\u003c/p\u003e\r\n\u003cp\u003eIn the first week, we'll focus on the basics of Android user interfaces. We'll start by exploring how to create a new project, use standard Android development tools, customize how things look, provide navigation through an app, and display information. Just like learning any new toolset, there is an awful lot of information and context required to get up and running. Expect to spend more time than previous courses on Android homework.\u003c/p\u003e\r\n\u003ch2\u003ePre-Work\u003c/h2\u003e\r\n\u003cp\u003eThe goal for this weekend's pre-work homework is learning how to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a new Android app;\u003c/li\u003e\r\n\u003cli\u003eBuild a simple user interface;\u003c/li\u003e\r\n\u003cli\u003eCustomize user interface elements;\u003c/li\u003e\r\n\u003cli\u003eAllow users to navigate to different parts of the app;\u003c/li\u003e\r\n\u003cli\u003eGather user input; and\u003c/li\u003e\r\n\u003cli\u003ePass data to another activity.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eOngoing Project from Curriculum\u003c/h2\u003e\r\n\u003cp\u003eAndroid applications are complex. There are many moving pieces, and a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto keep track of. In order to teach the concepts we cover in the most context possible, many of the lessons and homework in this course will build upon an ongoing project called MyRestaurants.\u003c/p\u003e\r\n\u003cp\u003eWhen a new concept is introduced the curriculum will also walk through the process of implementing this concept or feature into MyRestaurants. When the homework adds new content to MyRestaurants, you will usually begin class the next day by following along with the homework to integrate this content into\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003eMyRestaurants application, too.\u003c/p\u003e\r\n\u003cp\u003eThis allows us to focus on learning\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econcepts instead of each lesson spending time establishing the individual circumstances of its own example; and provides an extra opportunity for guided hands-on practice. It also ensures you're on the same page with the curriculum, since you'll already be familiar with the application used in the examples! Additionally, you'll be able to maintain a repo of your own that continually reflects the curriculum, and can easily be used as a reference.\u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants Examples\u003c/h3\u003e\r\n\u003cp\u003eBecause many of the lessons throughout the curriculum use MyRestaurants as an example, it's important to ensure your own project is always carefully updated to include the most recent additions. For this reason, example MyRestaurants repos are linked at the bottom of every lesson that makes any changes to this ongoing project. These links look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eEach lesson's link will take you to a MyRestaurants repo that reflects the project's current state in development\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe features described in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elesson have been implemented.\u003c/p\u003e\r\n\u003ch2\u003eIndependent Projects\u003c/h2\u003e\r\n\u003cp\u003eUnlike other courses, Independent Projects for this course will be an ongoing personal project of your choosing. Each Friday you’ll continue to build upon your independent project from the previous week. Begin brainstorming ideas for an ongoing project now; you'll need to propose a project idea to your instructor by the first Thursday of the course. \u003cspan\u003eThis means that you must keep your project’s codebase in good shape at all times; thoughtful comments, and appropriate workflow practices (branch-work-merge in small batches) will help achieve this goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eCategory Options\u003c/h3\u003e\r\n\u003cp\u003eYou and your classmates will not be required to create the exact same application either. Instead, you will be provided several categories to choose from. By selecting from a pre-defined category you’ll ensure your application's scope is not too large to reasonably complete in four Fridays, nor too small to accurately demonstrate each week’s concepts and objectives.\u003c/p\u003e\r\n\u003ch3\u003eAPI Requirement\u003c/h3\u003e\r\n\u003cp\u003eIn the second week we’ll also learn how to integrate web service backends (also known as APIs) into applications. You will be required to research, select, and implement an API of your choosing into your project on the second Friday of the course. Take this into consideration when selecting a project category, and/or the theme or focus of your application. (More information on selecting APIs can be found in this lesson \u003ca href=\"pages/pre-course-work-android-weekly-independent-projects?module_item_id=i8bea7f867c3c744e1d8d3f01e57aff7d\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/pre-course-work-android-weekly-independent-projects\" data-api-returntype=\"Page\"\u003ehere\u003c/a\u003e).\u003c/p\u003e\r\n\u003ch1\u003eInstallation\u003c/h1\u003e\r\n\u003cp\u003eFor this course, we will be using Android Studio - the official IDE (Integrated Development Environment) for Android application development. Android Studio provides us with all of the tools we need to write, test, and build apps and even interact with our apps using a built-in emulator.\u003c/p\u003e\r\n\u003ch2\u003eJDK\u003c/h2\u003e\r\n\u003cp\u003eBefore downloading and installing Android Studio, make sure your computer is equipped with JDK 6 or higher. To check which version of the JDK is currently on your computer, type the following into the terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-shell\"\u003e$ javac -version\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf the output does not read 1.6.0 or higher, go back to the Java setup instructions: Installing Java: OSX or Installing Java: Windows\u003c/p\u003e\r\n\u003ch2\u003eAndroid Studio\u003c/h2\u003e\r\n\u003cp\u003eAndroid Studio can be downloaded from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/index.html\" target=\"_blank\"\u003eAndroid Studio Website\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, make sure to check out and bookmark the Android Studio documentation\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/intro/index.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e","exportId":"pre-course-work-welcome-to-android"},{"id":937,"title":"Pre-course work: Android Documentation and Resources","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAndroid is a platform. Unlike iOS, it is used across many different devices from the Samsung Galaxy to the Google Nexus (now pixel). Manufacturers take the base Android software components and customize them, which makes developing for Android a bit more challenging than developing for iOS.\u003c/p\u003e\r\n\u003cp\u003eTo get started, let’s get familiar with the Android Documentation and other helpful resources. On the Android Developers site, we can find anything from material design guidelines to how-to references - and even information on distributing your completed apps on Google Play.\u003c/p\u003e\r\n\u003ch2\u003eEssential Resources\u003c/h2\u003e\r\n\u003cp\u003eThe following resources will be essential when starting with Android. Take a few moments to glance through them now:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/index.html\"\u003eAndroid Developers Site\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki\"\u003eCodePath Android Cliffnotes\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developers.google.com/android/for-all/vocab-words/\"\u003eGoogle Developers Android Vocabulary Glossary\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eDesign Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://labs.ribot.co.uk/exploring-the-new-android-design-support-library-b7cda56d2c32#.qqvzr4doe\"\u003eAndroid Design Support Library\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://jgilfelt.github.io/android-actionbarstylegenerator\"\u003eActionBar Style Generator\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.codementor.io/android/tutorial/android-ui-layouts-animations-mirror\"\u003eLayouts and Animations\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eTutorials\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://android-developers.blogspot.com/2015/12/invitation-your-ultimate-31-course.html\"\u003eAndroid Developers Blog\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://vogella.com/\"\u003eVogella.com\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/training/index.html\"\u003eAndroid Developers Getting Started Training\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eTesting Resources\u003c/h2\u003e\r\n\u003cp\u003eBeyond setting up your project for testing, we will not delve into testing quite yet. However, it is often a desirable skill for junior Android developers, and testing may be part of your internship. Spend some time during this course learning about the fundamentals of unit and integration testing in Android:\u003c/p\u003e\r\n\u003ch3\u003eUnit Testing\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1iDhPreOut0T7B2qARhq8BCBbeLMWZnP1STQp4I7hCrM/edit#slide=id.gd264f346c_0_159\"\u003eAndroid Unit Testing w/ Robolectric\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eInstrumentation Testing\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/UI-Testing-with-Espresso\"\u003eUI Testing with Espresso\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/jordanterry/Espresso-Examples\"\u003eEspresso Examples\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/jordanterry/Espresso-Examples/blob/master/app/src/androidTest/java/uk/co/jordanterry/espressoexamples/MainActivityTests.java\"\u003eMore Espresso Examples\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eData Persistence with SQLite\u003c/h2\u003e\r\n\u003cp\u003eIn this course, we will be using a JSON database called Firebase to store our data. We won’t cover relational database storage with databases like SQLite. but like testing, SQLite may be used during your internship, so familiarizing yourself with it will make you that much more marketable:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.techotopia.com/index.php/An_Android_SQLite_Database_Tutorial\" target=\"_blank\"\u003eAn Android SQLite Database Tutorial\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eHelpful Libraries\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/google/ExoPlayer\" target=\"_blank\"\u003eExoPlayer for Audio and Video\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/vbartacek/aacdecoder-android\" target=\"_blank\"\u003eAAC Decoder for radio streaming playback\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAndroid Studio\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.android.com/studio/intro/index.html\" target=\"_blank\"\u003eAndroid Studio IDE Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAndroid Interview Questions\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCMEmNnHT69aZuaOrE-dF6ug\" target=\"_blank\"\u003eAndroid Dialogs: Interview questions, tips and tricks\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003eAndroid Installation and Setup\u003c/h1\u003e\r\n\u003cp\u003eBefore class, take time to ensure all necessary tools are correctly installed on your personal machine. For Android, this primarily includes making sure your machine is equipped with JDK 6 or higher and installing Android Studio.\u003c/p\u003e\r\n\u003cp\u003eDouble-check your version of JDK by running the following command in the terminal:\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e$ javac -version\u003c/code\u003e If the output is not 1.6.0 or higher, install an updated version of Java using one of the following two lessons:\u003c/p\u003e\r\n\u003cp\u003eIf you encounter any issues installing or configuring any of these technologies, there will be an opportunity to receive setup assistance from Moringa school staff. It's important to try setting up these tools up now, so that you may take advantage of installation and setup assistance if any errors or issues occur.\u003c/p\u003e","exportId":"pre-course-work-android-documentation-and-resources"},{"id":938,"title":"Pre-course work: Android Weekly Independent Projects","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eWeekly Independent Project Overview\u003c/h2\u003e\r\n\u003cp\u003eDue to the complexity of Android applications, you will not complete 4 separate independent projects each Friday as you’ve done in previous courses. Instead, your weekly independent project will be ongoing. Each Friday you’ll implement the new concepts you’ve learned that week into last week’s independent project. This means that you must keep your project’s codebase in good shape at all times; thoughtful comments, and appropriate workflow practices (branch-work-merge in small batches) will help achieve this goal.\u003c/p\u003e\r\n\u003ch3\u003eCategory Options\u003c/h3\u003e\r\n\u003cp\u003eHowever, you and your classmates will not be required to create the same application each week as you’ve done in other courses. Instead, you will be provided several categories to choose from.\u003c/p\u003e\r\n\u003cp\u003eBy selecting from a pre-defined category you’ll ensure your application's scope is not\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoo large\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto reasonably complete in four Fridays, nor\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoo small\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto accurately demonstrate each week’s concepts and objectives.\u003c/p\u003e\r\n\u003cp\u003eProject category options are listed below. Begin considering which you’d like to create throughout the course. You will begin work this Friday.\u003c/p\u003e\r\n\u003ch3\u003eAPI Requirement\u003c/h3\u003e\r\n\u003cp\u003eIn the second week, we’ll also learn how to integrate web service backends (also known as APIs) into applications.\u003c/p\u003e\r\n\u003cp\u003eYou will be required to implement an API into your project on the second Friday of the course. Take this into consideration when selecting a project category, and/or the theme or focus of your application.\u003c/p\u003e\r\n\u003cp\u003eRecommended APIs are also provided below.\u003c/p\u003e\r\n\u003ch2\u003eProject Categories\u003c/h2\u003e\r\n\u003ch3\u003e1.) Tracking and Collecting Custom Objects\u003c/h3\u003e\r\n\u003cp\u003eThis type of application collects, tracks, and displays data that the user inputs themselves.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this category of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.oristats.habitbull\u0026amp;hl=en\"\u003eHabitBull\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.pilanites.streaks\"\u003eStreaks\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.journey.app\"\u003eJourney\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.evernote\"\u003eEvernote\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.myfitnesspal.android\"\u003eMyFitnessPal\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.clue.android\"\u003eClue\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this category of app. (These are simply examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e: To search for and retrieve recipe and food data.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e: Gather information from your or others’ profiles.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedIn\u003c/a\u003e: To retrieve information from LinkedIn.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e2.) Tracking and Collecting Objects from an API\u003c/h3\u003e\r\n\u003cp\u003eThis type of application tracks organizes or collects information that is retrieved from an API. For instance, applications that collect information on microbrews, wine, movies, or hiking trails and allow you to either compose favorites lists, rate them, or save them for later reference.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eExamples of this category of application include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMyRestaurants project from the curriculum. The main “object” (restaurants) is from information provided from an outside resource. The application allows users to track and organize information from this outside resource.\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.untappdllc.app\"\u003eUntappd\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.hellovino.android\"\u003eHello Vino\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.alltrails.alltrails\"\u003eAllTrails\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (Again, these are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub\u003c/a\u003e: To keep track of ongoing projects, whether yours or other developers’.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://strava.github.io/api/\"\u003eStrava\u003c/a\u003e: To organize/record/maintain/track information about your and others’ workouts, specifically running and biking, routes, gear, and other information.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://www.petfinder.com/developers/api-docs\"\u003ePetfinder\u003c/a\u003e: To track information about available pets for adoption in your area.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://www.brewerydb.com/developers\"\u003eBreweryDB\u003c/a\u003e: To track information about various beers.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e: To compile lists of meetups in your region.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e3.) Social Networking and Engagement\u003c/h3\u003e\r\n\u003cp\u003eApplications that allow users to interact with others. These apps can allow a general platform for interaction of all kinds, or focus on a specific interest, hobby or community.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this type of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.facebook.katana\"\u003eFacebook\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/developer?id=Twitter,+Inc.\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.instagram.android\"\u003eInstagram\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.bumble.app\"\u003eBumble\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.nextdoor\"\u003eNextDoor\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (These are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e: To share entries and information from your social network with your followers on another popular social network.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://api.imgflip.com/\"\u003eMeme Maker\u003c/a\u003e: To create funny images and memes to share on your social network.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e: To incorporate in-person meetups into your online social life.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://www.flickr.com/services/developer/api/\"\u003eFlickr\u003c/a\u003e: To share images from your Flickr account with friends.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedIn\u003c/a\u003e: To share information or incorporate data from your LinkedIn network.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e4.) Marketplace\u003c/h3\u003e\r\n\u003cp\u003eThis application allows users to buy (and oftentimes sell) items and experiences. Some are focused on a specific field or hobby, and others are more generalized.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this type of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.abtnprojects.ambatana\u0026amp;hl=en\"\u003eLetGo\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.poshmark.app\u0026amp;hl=en\"\u003ePoshmark\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.threadflip.android\u0026amp;hl=en\"\u003eThreadflip\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.groupon\u0026amp;hl=en\"\u003eGroupon\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.etsy.android\u0026amp;hl=en\"\u003eEtsy\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (These are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e: To cross-post or advertise your new store listings.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.walmartlabs.com/\"\u003eWalmart Labs\u003c/a\u003e: To gather information on various products.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developers.pinterest.com/\"\u003ePinterest\u003c/a\u003e: To share or advertise products.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e5.) Reference\u003c/h3\u003e\r\n\u003cp\u003eThis type of application allows users to search for and view reference materials and data on a wide variety of topics.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this type of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/search?q=weather\u0026amp;c=apps\u0026amp;hl=en\"\u003eVarious Weather applications\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=org.wikipedia\u0026amp;hl=en\"\u003eWikipedia\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.allrecipes.spinner.free\u0026amp;hl=en\"\u003eAllRecipes\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/search?q=song%20lyrics\u0026amp;c=apps\u0026amp;hl=en\"\u003eVarious Song Lyrics applications\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (These are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e: To search for and retrieve recipe and food data.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://www.recipepuppy.com/api/\"\u003eRecipe Puppy\u003c/a\u003e: To gather and reference recipe and food information.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://betterdoctor.com/developers\"\u003eBetter Doctor\u003c/a\u003e: To gather and reference healthcare resources.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.musixmatch.com/\"\u003eMusix Match\u003c/a\u003e: To retrieve and display music information.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://www.giantbomb.com/api\"\u003eGiant Bomb\u003c/a\u003e: To retrieve and display information on various video games and devices.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://darksky.net/dev/\"\u003eDarkSky\u003c/a\u003e: To gather and display weather information from around the world.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAPIs\u003c/h2\u003e\r\n\u003cp\u003eBelow is list of recommended APIs you may implement into any of the project categories above. Each has been successfully used in applications by past students, and vetted by Android instructors. You’re encouraged to explore this list and research what information you can collect from each API.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedin\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.pinterest.com/\"\u003ePinterest\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.flickr.com/services/developer/api/\"\u003eFlickr\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.meetup.com/meetup_api/\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://darksky.net/dev/\"\u003eDarkSky\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/overview\"\u003eYelp\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://strava.github.io/api/\"\u003eStrava\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://sunlightlabs.github.io/congress/\"\u003eSunlight Congress\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.petfinder.com/developers/api-docs\"\u003ePetfinder\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.brewerydb.com/developers\"\u003eBreweryDB\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.giantbomb.com/api\"\u003eGiant Bomb\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.walmartlabs.com/\"\u003eWalmart Labs\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.recipepuppy.com/api/\"\u003eRecipe Puppy\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.musixmatch.com/\"\u003eMusixMatch\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://betterdoctor.com/developers\"\u003eBetter Doctor\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eOther APIs\u003c/h3\u003e\r\n\u003cp\u003eIt may be possible to use an API\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eincluded in the list above, but you must complete the following steps. In the past, students have struggled (and consequently failed to meet deadlines) when using API’s that were not carefully researched beforehand. We want to ensure you spend as much time developing as possible and have the greatest chance of success! The following research process will be time well spent:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eResearch the API thoroughly.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eNot every resource is the same. Not every API is accessed in the same manner. Some APIs require complex multi-step authentication, others provide data in formats you may not be familiar with. Thoroughly research the API to ensure it\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtain the information you’re seeking, and it\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ework with your project. Do not assume integrating Google products (such as Google Maps, Places, etc.) will be straightforward. They can be time-consuming to configure, integrate, and use.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMake test requests to the API.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eConfirm your research is accurate by actually requesting and receiving data from the API. Thankfully, you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon’t\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehave to build an entire application to do this. Instead, check out the free Chrome extension\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.getpostman.com/\"\u003ePostman\u003c/a\u003e. It allows you to make test API requests with parameters of your choice, and browse response data. There is a series of brief\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLM-7VG-sgbtD8qBnGeQM5nvlpqB_ktaLZ\"\u003etutorial videos available on YouTube\u003c/a\u003e demonstrating how to install, access, and use Postman.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDemonstrate the API to your instructor.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter confirming your API will work in your application, you must demonstrate this to your instructor. Explain to your instructor what the API is, how you will access it, the format it will return data in, and how you’ll use this data in your application. Provide an example request and response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eUnderstand that the same objectives and deadlines apply.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThe same deadlines and objectives will apply to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estudents, regardless of their API choice. You will not be excused from objectives or deadlines due to unforeseen API issues. It is your responsibility to research your API, and confirm it will work\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eadding it to your project.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"pre-course-work-android-weekly-independent-projects"},{"id":939,"title":"Pre-course work: Creating a New Project","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we have Android Studio installed, let’s get started by creating a basic app. We are going to create a restaurant app that will display a list of restaurants by location. We will continue to build on this app throughout the course, adding additional features as we learn the tools we need to implement them.\u003c/p\u003e\r\n\u003ch2\u003eCreating a New Project\u003c/h2\u003e\r\n\u003cp\u003eWith Android Studio open, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStart a new Android Studio project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create a new project.\u003c/p\u003e\r\n\u003cp\u003eWe’ll fill out the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApplication Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efield with the name of the app,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurants\u003c/em\u003e, exactly how we want it to appear on the device and in the Google Play Store.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNote: Application names can only contain letters, numbers, spaces or underscores.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCompany Domain\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecan be anything. You are welcome to use your personal website as you will see throughout these lessons. If you choose to use a different domain, please note that your package name will be different as well. The package name will be used to differentiate our app from others in the Play Store.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNote: The package name should never contain capital letters.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/nfcgscrm26yuiof/new-project1.png?raw=1\" alt=\"Configure your new project\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eSelecting Android Versions\u003c/h2\u003e\r\n\u003cp\u003eOn the next screen, we need to select the version of Android our app will run on. We will be writing this app to run on a phone, so let’s leave the first box checked. In the adjacent drop down, we need to select the minimum\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSDK (Software Development Kit)\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we would like our app to be able to run on.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAPI and SDK versions are often used interchangeably. All SDKs have a corresponding API version.\u003c/p\u003e\r\n\u003cp\u003eClick on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHelp me choose\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton to figure out which version to select.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/gqin9gftn8iffq3/new-project2.png?raw=1\" alt=\"API Version Distribution\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis graph shows us the distribution of Android versions currently used in the world. Looking at the cumulative distribution, we can see that 94.8% of devices are currently running on Android 4.0 (API 15) or above. By choosing API 15 (Android 4.0 - Ice Cream Sandwich) we can be confident that our app will run smoothly on 94.8% of devices. The API level only really matters when we are using features that have either lost support in newer versions, or when accessing features that are only available in a brand new release. For the purposes of this basic app, we do not need to worry about this.\u003c/p\u003e\r\n\u003ch2\u003eAdding Pre-Built Activities\u003c/h2\u003e\r\n\u003cp\u003eOn the next screen, we can choose from a variety of pre-built activities. Think of these like templates included in Microsoft Word. When starting a new project, we generally want to start with blank files so let’s select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEmpty Activity\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNote: Do not select \u003c/em\u003eBlank Activity\u003cem\u003e as a \u003c/em\u003eBlank Activity\u003cem\u003e includes a few additional code snippets that will be a bit confusing at first.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eSo what is an activity anyway?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eActivities\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ecan be thought of as the different screens that make up an app. On the next page, we will choose a name for our first activity. Similar to using the name\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor a website's main page, it is common practice in Android to name our primary activity\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e. Let’s keep the activity name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e. We are finished creating a new project. Click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinish\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand wait while Android Studio builds our project.\u003c/p\u003e","exportId":"pre-course-work-creating-a-new-project"},{"id":2276,"title":"Pre-course work: Android Emulator","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eWhen we start a new project, Android Studio creates all of the initial files and folders we need. We can see the structure of these files and folders in the panel on the left side of the screen.\u003c/p\u003e\r\n\u003cp\u003eThere are a variety of different views to choose from that allow us to visualize our project structure. We will use the default\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroid\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject view as it provides quick access to the key source files of an Android project.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eNote: Sometimes this panel does not automatically open along with your project. To open it manually, either type \u003c/em\u003eCommand + 1\u003cem\u003e on a Mac, click on the vertical text \u003c/em\u003e1:Project\u003cem\u003e on the left side of the window, or select \u003c/em\u003eView \u0026gt; Tool Windows \u0026gt; Project\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eLet’s run the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eMy Restaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproject we just created to make sure everything is working. Type\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl + R, \u003c/em\u003eor click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eicon from the toolbar (the green play arrow).\u003c/p\u003e\r\n\u003cp\u003eFrom the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDevice Chooser\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu, we can select the device we want to run our app on. We haven’t created a virtual device yet, so let’s do that now.\u003c/p\u003e\r\n\u003cp\u003eWe can create and manage our virtual devices in the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAndroid Virtual Device (AVD) Manager\u003c/strong\u003e. Select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAVD Manager\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eicon (the little green android guy in front of the purple phone) in the toolbar and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate a virtual device\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eFrom here, we can choose from a variety of different hardwares to emulate. We will be concentrating on apps for mobile phones throughout this course, so let’s choose a standard phone such as the Google Nexus 6.\u003c/p\u003e\r\n\u003cp\u003eNext, we need to select a system image. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esystem image\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepresents the version of Android we want on our virtual device. Let’s choose Marshmallow API 23 x86 with Google APIs which means it will come preloaded with Google apps such as Google Maps.\u003c/p\u003e\r\n\u003cp\u003eOn the next screen, we are presented with a number of customization options. Here you can control the size of the emulator in relation to your computer’s screen size and even set the emulator’s camera to your computer’s built-in camera.\u003c/p\u003e\r\n\u003cp\u003eNow that we have created a device, let’s select it from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDevice Chooser\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOK\u003c/em\u003e. Android Studio takes a bit of time to load the emulator so it’s best to always keep it running in the background.\u003c/p\u003e\r\n\u003cp\u003eOnce the emulator is done loading, we should be able to navigate to our app and interact with it.\u003c/p\u003e\r\n\u003cp\u003eThis video walks through the steps in this lesson:\u003c/p\u003e\r\n\u003cdiv id=\"video\" class=\"tab-pane active in video\"\u003e\u003ciframe src=\"https://player.vimeo.com/video/158109088\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/div\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAndroid Virtual Device (AVD) Manager\u003c/strong\u003e: A tool for the creation and management of virtual devices.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSystem image\u003c/strong\u003e: A representation of the version of Android on a virtual device.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor this course, we will use the Google Nexus 6 hardware and Marshmallow API 23 x86 for our standard emulator. Additionally, select the option to use the computer's built-in webcam as the emulator's camera.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eShortcuts\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cem\u003eCtrl + R\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill run the application in the emulator.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"pre-course-work-android-emulator"},{"id":2277,"title":"Pre-course work: GitHub Integration","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this lesson we'll address how to integrate Git and GitHub into Android studio, to continue using them as the version control system for your Android projects. As usual, setup will differ slightly depending on whether you're working independently, or working with a partner.\u003c/p\u003e\r\n\u003ch2\u003eWorking Independently\u003c/h2\u003e\r\n\u003cp\u003eConveniently, Android Studio makes it easy to sync a project to GitHub by using a series of options built directly into their GUI (graphical user interface). This section will walk through using those options to create a Git repo, add and commit changes, create a remote repository on GitHub, and push your project to the remote repo.\u003c/p\u003e\r\n\u003ch3\u003eGradle Sync\u003c/h3\u003e\r\n\u003cp\u003eFirst, before adding anything to Git, we'll want to sync our project with Gradle. This will ensure our module files are included in the project. When you\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecreate a project, these files have likely not yet been created. So, we'll manually tell Android Studio to sync our project with Gradle.\u003c/p\u003e\r\n\u003cp\u003eYou can do this by selecting the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Sync Project Files with Gradle\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eicon in the menu. This icon looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/80rfwzmz77zwf4p/gradle-sync-icon-in-menu.png?raw=1\" alt=\"gradle-sync-icon-emphasis\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/mtsws8eljode806/gradle-sync-icon-hover.png?raw=1\" alt=\"gradle-sync-icon-hover-description\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we click this button, our project will sync with Gradle.\u003c/p\u003e\r\n\u003ch3\u003eEnable Version Control\u003c/h3\u003e\r\n\u003cp\u003eNext, we need to tell Android Studio to enable version control for this project. We can do this by visiting the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eVCS\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption in the top menu, and selecting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnable Version Control Integration\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/7hl813zmlttzefs/enable-vcs-integration-menu-option.png?raw=1\" alt=\"enable-version-control-integration-menu-option\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eSet Git as VCS\u003c/h3\u003e\r\n\u003cp\u003eSelecting this option will result in a pop-up that allows us to select which VCS our project should use. We'll select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGit\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the drop-down menu:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/ag0mryusrdk8b7m/select-version-control-system.png?raw=1\" alt=\"selecting-git-as-vcs-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOK\u003c/em\u003e. This will create a local Git repository in the project folder.\u003c/p\u003e\r\n\u003ch4\u003eAutomatic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.gitignore\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eFiles\u003c/h4\u003e\r\n\u003cp\u003eAs you learned in your Java course, we don't need to add every single file to our Git repository. For instance, we don't need to track our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles because their contents are simply compiled from our source code. When someone clones down our project, they'll re-compile their own build files on their own machine using the source code. So, we can use a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to exclude this content from our Git repository.\u003c/p\u003e\r\n\u003cp\u003eHowever, as soon as we set our VCS to Git, you'll find that Android Studio will make us a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile by default.\u003c/p\u003e\r\n\u003cp\u003eIf you're currently in the \"Android\" view, you may not yet see this\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. However, if you switch to \"Project\" view, you should see it in the file tree on the left-hand side. You can switch between view types by simply clicking the drop-down menu directly above the file tree:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/o7ea9smza9qon9g/switch-to-project-view.png?raw=1\" alt=\"switching-view-modes-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOnce you're in \"Project\" view, you should notice a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the top-level of your project directory:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/te7pnzttyan56sf/project-view-file-tree.png?raw=1\" alt=\"project-view-file-tree\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you open it, you'll see that all file types we need to ignore are already present, including the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e/build \u003c/em\u003edirectory:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-text\"\u003e*.iml\r\n.gradle\r\n/local.properties\r\n/.idea/workspace.xml\r\n/.idea/libraries\r\n.DS_Store\r\n/build\r\n/captures\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn Android Studio \"Project\" view simply displays all files in a project directory, whereas \"Android\" view only displays the files you'll edit most while developing an Android project. You're welcome to switch between the two freely at any point.\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eCommit as Usual in Terminal\u003c/h3\u003e\r\n\u003cp\u003eOnce Git is set up, you should be able to add and commit changes as usual using the Terminal located within Android Studio.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/6kxo66e1x2lj3t3/terminal-in-android-studio.png?raw=1\" alt=\"android-studio-terminal-option\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eShare on Github\u003c/h3\u003e\r\n\u003cp\u003eOnce you're ready to share your project on GitHub, you may use options built directly into the Android Studio GUI to do so. Once again, select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eVCS\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu option, then\u003cspan\u003e \u003c/span\u003e\u003cem\u003eImport into Version Control\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShare Project on Github\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/iue4e42wqt0ak1p/share-project-on-github.png?raw=1\" alt=\"share-project-on-github-from-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter selecting this option, you should be prompted to provide your GitHub login information:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/89o4efjz3lrpv1e/github-login-info.png?raw=1\" alt=\"github-login-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, after logging in, you should be provided another popup window. Here, you can choose your GitHub repository's name and description, as well as the name of the remote URL:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/7u0psoloqbe950z/github-repo-name-and-description.png?raw=1\" alt=\"github-remote-repo-info\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhenever you're ready, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShare\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto push the project to GitHub.\u003c/p\u003e\r\n\u003ch3\u003eTerminal Option\u003c/h3\u003e\r\n\u003cp\u003eDo note that you may\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse the Terminal in Android Studio to use the same Git commands you've been executing in the command line to track projects for previous courses. (ie:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit config\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e, etc.)\u003c/p\u003e\r\n\u003cp\u003eYou are not required to use the Android GUI options to create, configure, and push to a GitHub repository, as described above. This is simply another option provided by Android Studio.\u003c/p\u003e\r\n\u003ch2\u003eWorking in Pairs\u003c/h2\u003e\r\n\u003cp\u003eWhile at Moringa we will continue to use pivotal-git-scripts to give both partners credit for their commits. In order to do this, locate the \"Terminal\" option in the lower-left corner of Android Studio. Select this option to reveal a command line terminal right inside Android Studio:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/6kxo66e1x2lj3t3/terminal-in-android-studio.png?raw=1\" alt=\"android-studio-terminal-option\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn this terminal, we may include and configure our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, and run commands to commit as a pair.\u003c/p\u003e","exportId":"pre-course-work-github-integration"},{"id":940,"title":"Pre-course work: Introduction to XML and Android Layouts","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAs we'll see firsthand when we create our first layout in the next lesson, Android layouts are written in\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eeXtensible Markup Language\u003c/strong\u003e, also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eXML\u003c/strong\u003e. Much like HTML (or HyperText\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMarkup Language\u003c/em\u003e), XML is also a markup language. It was created as a standard way to encode data in internet-based applications. However,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunlike\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eHTML, XML is case-sensitive, requires each tag is closed properly and preserves whitespace.\u003c/p\u003e\r\n\u003cp\u003eMuch like creating an HTML layout and later altering it with jQuery, as we've done in previous courses, we can create XML layouts in Android, and later alter them using Java logic.\u003c/p\u003e\r\n\u003cp\u003eAndroid XML layouts are also part of a larger umbrella of Android files and components called resources.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eResources\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare the additional files and static content an application needs, such as animations, color schemes, layouts, menu layouts.\u003c/p\u003e\r\n\u003ch2\u003eAnatomy of Android XML Layouts\u003c/h2\u003e\r\n\u003cp\u003eEach layout file must contain one (and only one!) root element. Linear Layouts, Relative Layouts, and Frame Layouts (see Root Views section below) may all be root elements. Other layouts may not be. All other XML elements will reside within this root object.\u003c/p\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eView\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply an object from Android's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. It represents a rectangular area of the screen, and is responsible for displaying information or content, and event handling. Text, images, and buttons are all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews \u003c/code\u003ein Android.\u003c/p\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eViewGroup\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a subclass of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e, and is essentially an 'invisible container' that holds multiple\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003es together, and defines their layout properties.\u003c/p\u003e\r\n\u003ch3\u003eRoot Views\u003c/h3\u003e\r\n\u003cp\u003eThe following three layout types may be the root element in an Android XML Layout:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/linear.html\"\u003eLinear Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ealigns its contents into a single direction, whether vertical or horizontal.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/relative.html\"\u003eRelative Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays its child content in positions relative to the parent. (ie: lining an element up to the top edge of a parent, centering it within a parent, etc.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/FrameLayout.html\"\u003eFrame Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a placeholder on a screen that can display only a single view. (For this reason, Frame Layouts should be used sparingly; usually as a placeholder for Fragments, which we will cover later.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCommon ViewGroups\u003c/h3\u003e\r\n\u003cp\u003eOther commonly used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003es are as follows. These may not be the root element of a layout, but they may reside within the root element:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/listview.html\"\u003eList View\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays a list of scrollable items.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/gridview.html\"\u003eGrid View\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays items in a two-dimensional, scrollable grid.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/TableLayout.html\"\u003eTable Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003egroups views into rows and columns.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eLayout Attributes\u003c/h3\u003e\r\n\u003cp\u003eEvery type of layout has attributes that define the way its elements appear. There are both common attributes that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayouts share, and attributes specific to some of the layout types listed above. The following are attributes that apply to all layouts:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:id\u003c/code\u003e: A unique ID that corresponds to the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_width\u003c/code\u003e: The width of the layout. (required for every view)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_height\u003c/code\u003e: The height of the layout. (required for every view)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginTop\u003c/code\u003e: Extra space on the top of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginBottom\u003c/code\u003e: Extra space on the bottom of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginLeft\u003c/code\u003e: Extra space to the left of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginRight\u003c/code\u003e: Extra space to the right of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_weight\u003c/code\u003e: Specifies how much of the extra space in the layout should be allocated to the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingLeft\u003c/code\u003e: Padding to the left of the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingRight\u003c/code\u003e: Padding to the right of the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingTop\u003c/code\u003e: Padding at the top of the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingBottom\u003c/code\u003e: Padding at the bottom of the view.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eRelative Sizing\u003c/h4\u003e\r\n\u003cp\u003eHeight and width properties can be set to specific measurements, but the following are much more common:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_width=wrap_content\u003c/code\u003e: Sets the width of the view to whatever size is required by its contents. This may also be used with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eheight\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_width=match_parent\u003c/code\u003e: Sets the width of the view to the width of its parent. This may also be used with with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eheight\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eSetting Properties and IDs\u003c/h3\u003e\r\n\u003cp\u003eMuch like in HTML, we can also add id attributes to XML elements. You'll often need to do this in order to later locate and interact with a specific view. However, the syntax for assigning an ID differs from that in HTML.\u003c/p\u003e\r\n\u003cp\u003eAssigning an id attribute looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003eandroid:id=\"@+id/search_button\"\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@+id/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eportion indicates that the name following is a string containing this element's ID, and that it is a new resource that should be created and added to our resources.\u003c/p\u003e\r\n\u003cp\u003eFor instance, the following XML will create a Button with the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearch_button\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/search_button\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/my_button_text\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the above, you will notice the line\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/my_button_text\"\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e, this means that the name has been defined in the \u003cem\u003estrings.xml\u003c/em\u003e file. You can decide to hardcode the name of the button on the button like this\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Click Me!\".\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003ch3\u003eTargeting Views by ID\u003c/h3\u003e\r\n\u003cp\u003eSimilar to the way we used jQuery to target individual HTML elements and alter them in some fashion, we can also target individual XML elements and interact with them. The following code can be used to target the example XML button from above:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eButton myButton = (Button) findViewById(R.id.search_button);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod can locate both\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand root views. Don't worry too much about this specific syntax\u003cspan\u003e \u003c/span\u003e\u003cem\u003equite\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eyet; we'll explore this more in future lessons. Just notice that we're re-using the same\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute we assigned in the XML to later locate this element in our Java logic.\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson, we'll walk through creating an Android XML layout from scratch in our MyRestaurants application.\u003c/p\u003e","exportId":"pre-course-work-introduction-to-xml-and-android-layouts"},{"id":2282,"title":"Pre-course work: Creating a Basic Layout","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we successfully have our app up and running in the emulator, let’s get to work! First, we are going to make a basic welcome page with a button that will eventually link to a page with a list of restaurants.\u003c/p\u003e\r\n\u003cp\u003eWhile in the Android project view, navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/layout/activity_main.xml\u003c/em\u003e. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains all of the static resources that comprise our app. This folder will house all of our images, layout files, launcher icon, and string, color, and style values. We will learn about all of these resources over time.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile is where we are going to style what the user sees and interacts with when they are viewing the welcome page of our app. As the filename specifies, layouts in Android are written in\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eeXtensible Markup Language (XML)\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- that means no more CSS for us!\u003c/p\u003e\r\n\u003cp\u003eNote: \u003cspan\u003eMany of our Android lessons refer to features from Android Studio 2.1. However, many students are working with the newer versions. One of the primary differences from the old version is the introduction of \u003cstrong\u003eConstraintLayout\u003c/strong\u003e. Constraint layouts are relatively new, and not all companies or applications use them yet. Therefore, we think it's important to learn \u003cem\u003eboth\u003c/em\u003e newer Constraint layouts, \u003cem\u003eand\u003c/em\u003e standard Relative layouts to best prepare for what you'll likely see on the job.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe'll focus on using standard Relative layouts for the first part of this week. Then, on Wednesday night we'll discuss using Constraint layouts in greater detail in the \u003c/span\u003e\u003cem\u003eFurther Exploration: Working with Constraint Layouts\u003c/em\u003e\u003cspan\u003e lesson.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eBut there's just one tiny hiccup: In newer version of Android Studio (2.2+), Constraint Layouts are automatically created for new activities by default. So, in order to practice Relative layouts we'll need to turn these Constraint layouts back into their Relative cousins. But don't worry, it's not too hard. This lesson will address how to turn the default \u003cstrong\u003eConstraintLayout\u003c/strong\u003e back into a \u003cstrong\u003eRelativeLayout\u003c/strong\u003e. If you don't understand what all this constraint is all about don't worry, they'll both be common conjecture pretty soon.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSo while following along with lessons to create the MyRestaurants app, it's recommended that you turn your default constraint layouts back into relative layouts, in order to follow the lessons exactly - but you are familiar with android layouts may want to experiment with integrating constraint layouts into your own projects. Again, \u003cstrong\u003ethis is completely optional\u003c/strong\u003e. But, for those that would like to try them out, the videos \u003ca href=\"pages/wednesday-working-with-constraint-layouts?module_item_id=i1c40fef33c171d8de8011f485abbd728\"\u003e\u003cstrong\u003eHERE\u003c/strong\u003e\u003c/a\u003e will walk through creating this new type of layout, including how to use the new layout editor tool. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 18pt;\"\u003eTurning Constraint Layouts into Relative Layouts\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt;\"\u003e\u003cspan\u003eWe can replace an activity's auto-generated \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eConstraintLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e with a standard \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e by doing the following, as shown below:\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWhile in the Android project view, navigate to \u003cem\u003eres/layout/activity_main.xml\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete the constraint layout file created automatically when you made a new activity. A pop-up alert will ask you to confirm. Select OK. A second pop-up will alert you that this layout is being used in other parts of the app. Select Delete anyway. (Since we're going to immediately create a new layout to replace the one we're deleting, this is okay.)\u003c/li\u003e\r\n\u003cli\u003eCreate a new layout file by right-clicking the \u003cem\u003eres/layout\u003c/em\u003e directory, and selecting \u003cem\u003eNew \u0026gt; Layout Resource\u003c/em\u003e files.\u003c/li\u003e\r\n\u003cli\u003eGive the new layout file the same name as the constraint layout file you've just deleted. This ensures it will be correctly associated with the corresponding activity \u003cem\u003eactivity_main.xml\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eErase the default contents of the \u003cem\u003eRoot Element\u003c/em\u003e field, and replace with \u003cem\u003eRelativeLayout. \u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003eClick \u003c/span\u003e\u003cem\u003eOk\u003c/em\u003e\u003cspan\u003e. You should now have a new \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e to work with!\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan\u003eThe GIF below breakdowns how to go about the instructions depicted above. Download the file and play it with your preferred image viewer.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003ca class=\"instructure_file_link instructure_image_thumbnail\" title=\"constraint_to_relative_layout_android_studio.gif\" href=\"viewer/files/constraint_to_relative_layout_android_studio.gif?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/11929\" data-api-returntype=\"File\"\u003econstraint_to_relative_layout_android_studio.gif\u003c/a\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-size: 12pt;\"\u003e\u003cspan\u003eDon't worry about memorizing this right now. We'll review this process in the next lesson when we create our first layouts together.\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch2\u003eAltering the activity_main Layout\u003c/h2\u003e\r\n\u003cp\u003eTo edit our layout's XML directly, we'll need to navigate out of the visual editor and into the XML editor. Near the bottom-left of the screen you should see two tabs reading \u003cstrong\u003eDesign\u003c/strong\u003e and \u003cstrong\u003eText\u003c/strong\u003e (see image below). Select the Text tab to toggle into the XML editor.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/xmlDesign_edit_screenshot.png\" alt=\"xmlDesign_edit_screenshot.png\" width=\"564\" height=\"621\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/11930\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eMake sure to go back and revisit the Creating Relative Layouts lesson if any of this feels unclear.\u003c/p\u003e\r\n\u003cp\u003eIf we open\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e, we can see that it came pre-populated with XML! Currently, this file should look something like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-xml prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;RelativeLayout\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003exmlns:android\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_width\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_height\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/RelativeLayout\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt;\"\u003eLet's add a \"Hello World\" message, like our default-created Constraint layout previously had. We can do so by adding the following XML:\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp class=\"filename\"\u003eactivity_main.xml\u003c/p\u003e\r\n\u003cpre class=\"filename\"\u003e\u003cbr\u003e\u003ccode class=\"prettyprint lang-xml prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;RelativeLayout\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003exmlns:android\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_width\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_height\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n    \u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;TextView\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_width\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"wrap_content\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_height\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"wrap_content\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:text\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"Hello World!\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"tag\"\u003e/\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/RelativeLayout\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt;\"\u003eAt any point, we can also toggle back to the Design tab to preview what our layout XML looks like.\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch3\u003eAdding and Altering Views\u003c/h3\u003e\r\n\u003cp\u003eLet’s change the existing \"Hello World!\" text and add a button. Each of these elements is what we will refer to in Android as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eview\u003c/strong\u003e. As we covered previously, a view is anything on the screen that we can see and/or interact with such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButtons\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageViews\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\u003cp\u003eTo change the text, double click the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e. We’ll change it to the name of our app, \"MyRestaurants\", and then reposition it so that it is centered horizontally. Let’s take a look at the resulting XML by switching to the text view. To switch to the text view, select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etext\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the bottom of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePalette\u003c/em\u003e. It should look like the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e\u0026lt;TextView\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_width=\u003c/span\u003e\u003cspan\u003e\"wrap_content\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_height=\u003c/span\u003e\u003cspan\u003e\"wrap_content\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:text=\u003c/span\u003e\u003cspan\u003e\"MyRestaurants\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_alignParentTop=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_centerHorizontal=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_marginTop=\u003c/span\u003e\u003cspan\u003e\"35dp\"\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see in the design view, setting the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elayout_marginTop\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to \u003ccode\u003e35dp\u003c/code\u003e will automatically reposition the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edp\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for density independent pixel and it is the unit of measurement we will use when specifying the size of our views in Android. Because Android devices have a variety of different screen resolutions, using pixels would result in views that would appear very small on the higher density devices and much larger on lower density devices. Using dps helps our apps to look consistent across devices.\u003c/p\u003e\r\n\u003ch2\u003eAdding Views\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s drag and drop a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePalette\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu into our layout. We’ll place it at the bottom center of the layout. Double click and change the text to \"Find restaurants\". The XML should now look like:\u003c/p\u003e\r\n\u003cp\u003eNOTE: The drag and drop feature may not work but - in retrospect this is a good thing (for now) moving a view will re position other views because each views position is \u003cstrong\u003e\u003cem\u003erelative\u003c/em\u003e\u003c/strong\u003e to others, therefore familiarize yourself with moving the views using the \u003cspan style=\"background-color: #808080;\"\u003eandroid:layout_*\u003c/span\u003e view property. (The as\u003cspan\u003eterisk\u003c/span\u003e * here stands for various layout features like the screen width, height that are defined by the RelativeLayout). For instance the centered position of the \u003cstrong\u003e\u003cem\u003eTextView\u003c/em\u003e\u003c/strong\u003e below within the layout is determined by the \u003cspan style=\"background-color: #808080;\"\u003eandroid:layout_centerHorizontal=\"true\"\u003cspan style=\"background-color: #808080;\"\u003e \u003cspan style=\"background-color: #ffffff;\"\u003e property.\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003cbr\u003e\u0026lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003cbr\u003e    xmlns:tools=\"http://schemas.android.com/tools\"\u003cbr\u003e    android:layout_width=\"match_parent\"\u003cbr\u003e    android:layout_height=\"match_parent\"\u003cbr\u003e    tools:context=\"com.epicodus.myrestaurants.MainActivity\"\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;TextView\u003cbr\u003e        android:layout_width=\"wrap_content\"\u003cbr\u003e        android:layout_height=\"wrap_content\"\u003cbr\u003e        android:text=\"MyRestaurants\"\u003cbr\u003e        android:layout_alignParentTop=\"true\"\u003cbr\u003e        android:layout_centerHorizontal=\"true\"\u003cbr\u003e        android:layout_marginTop=\"35dp\"\u003cbr\u003e        android:id=\"@+id/textView\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;Button\u003cbr\u003e        android:layout_width=\"wrap_content\"\u003cbr\u003e        android:layout_height=\"wrap_content\"\u003cbr\u003e        android:text=\"Find Restaurants\"\u003cbr\u003e        android:id=\"@+id/button\"\u003cbr\u003e        android:layout_alignParentBottom=\"true\"\u003cbr\u003e        android:layout_centerHorizontal=\"true\" /\u0026gt;\u003cbr\u003e\u0026lt;/RelativeLayout\u0026gt;\u003ccode class=\"xml hljs\"\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding Colors\u003c/h2\u003e\r\n\u003cp\u003eOur welcome page doesn’t look all that great yet. Let’s go ahead and add some basic styles such as colors and a background image. Feel free to use any colors/images that you like. If you need help deciding on a color scheme, try this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.materialpalette.com/\"\u003eMaterial Design Color Palette\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esite.\u003c/p\u003e\r\n\u003ch3\u003ecolors.xml Resource\u003c/h3\u003e\r\n\u003cp\u003eNow that we have decided on a color scheme, let's go ahead and copy and paste the colors into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/values\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. It's generally considered a best practice in Android to not hardcode strings and color values into your user interface, but rather to consolidate them into their corresponding files inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/values\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Read more about Android resources here:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Understanding-App-Resources\"\u003eUnderstanding App Resources\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eCopying our colors into this\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile will allow us to reference our colors all throughout our app by their \"nicknames\" instead of the more complex hex codes. Your colors file should now look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/colors.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u0026lt;color name=\"colorPrimary\"\u0026gt;#FF5722\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorPrimaryDark\"\u0026gt;#E64A19\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorPrimaryLight\"\u0026gt;#FFCCBC\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorTextIcons\"\u0026gt;#FFFFFF\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorAccent\"\u0026gt;#009688\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorPrimaryText\"\u0026gt;#212121\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorSecondaryText\"\u0026gt;#727272\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorDivider\"\u0026gt;#B6B6B6\u0026lt;/color\u0026gt;\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eApplying Colors\u003c/h3\u003e\r\n\u003cp\u003eNow let's apply our colors to style our welcome page. With the \"MyRestaurants\" text selected, find the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextColor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and then click on the three little dots to open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eResources\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. In the color tab, we can choose from one of the many preset color values, specify a color using hexadecimal or RGB values, or scroll down to find the values we added to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Let's select one of the colors we just added to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. I will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolorTextIcons\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue which is simply white. The XML should now look like this with a link to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e@colors\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"35dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur background is currently white, so let's change it’s color for now so we can see what we are working on. Select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRelativeLayout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eComponentTree\u003c/em\u003e, select the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#000000\u003c/code\u003e. Our background should now be black.\u003c/p\u003e\r\n\u003ch2\u003eAltering Font and Other Styles\u003c/h2\u003e\r\n\u003cp\u003eBack to our \"MyRestaurants\" text, let’s make the font bigger so that it is easier to read. Select the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextSize\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and give it a value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e40sp\u003c/code\u003e. When specifying the size of text in Android, you should always use\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esp\u003c/strong\u003e. sp stands for scale-independent pixel and it helps text to look the same across different screen sizes and different pixel densities. It is also affected by the font size preferences in the user’s settings. Let’s also make our text bold by checking the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebold\u003c/em\u003e\u003cspan\u003e \u003c/span\u003echeckbox from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextStyle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty dropdown.\u003c/p\u003e\r\n\u003cp\u003eBack in the design view, let’s add some styles to our button. With the button selected, click on \u003cspan style=\"background-color: #999999;\"\u003elayout:width\u003c/span\u003e option on the top left of the design view and change t to expand the width of the button to match the width of the parent. This icon looks like a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esquare with two arrows inside pointing at the the center to a dotted vertical line.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eLet’s also change the background color of the Button and change the font color of the text inside. Here is the resulting XML.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/button\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhile we are in the Text view of our layout, let’s also give our button an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003es are important because they give us a way to refer to these views within our code. Let’s give our button an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof ‘findRestaurantsButton’ by changing the existing line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:id=\"@+id/button\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e... to instead read\u003c/code\u003eandroid:id=\"@+id/findRestaurantsButton\"`.\u003c/p\u003e\r\n\u003ch2\u003eAdding Images\u003c/h2\u003e\r\n\u003cp\u003eLast, let's use an image as a background for our welcome page layout. For free images, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://unsplash.com/\"\u003eunsplash\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAll images for an Android project are stored in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/drawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eUnfortunately, Android Studio does not let you drag and drop images directly into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Instead, Right click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReveal in Finder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto reveal the folder and drag and drop your images that way.\u003c/p\u003e\r\n\u003cp\u003eNext, let's add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our layout and set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. Double click on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e, click on the three little dots, navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder under the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProject\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab and select the name of your image.\u003c/p\u003e\r\n\u003cp\u003eWe want the image to fill the background so let’s change its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escaleType\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecenterCrop\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elayout_height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efill_parent\u003c/code\u003e. Uh oh, our image is covering our text! To fix that, open the XML view and copy and paste the ImageView XML so that it is above your first TextView. Let's also delete all of the padding properties from our RelativeLayout.\u003c/p\u003e\r\n\u003cp\u003eNow we are done with our activity_main layout. The resulting XML should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u003c/span\u003e\u003c/code\u003e\u003cbr\u003e\u003cbr\u003e\u0026lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003cbr\u003exmlns:tools=\"http://schemas.android.com/tools\"\u003cbr\u003eandroid:layout_width=\"match_parent\"\u003cbr\u003eandroid:layout_height=\"match_parent\"\u003cbr\u003etools:context=\"com.epicodus.myrestaurants.MainActivity\"\u003cbr\u003eandroid:background=\"#000000\"\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;ImageView\u003cbr\u003eandroid:layout_width=\"wrap_content\"\u003cbr\u003eandroid:layout_height=\"match_parent\"\u003cbr\u003eandroid:id=\"@+id/imageView\"\u003cbr\u003eandroid:src=\"@drawable/background\"\u003cbr\u003eandroid:scaleType=\"centerCrop\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;TextView\u003cbr\u003eandroid:layout_width=\"wrap_content\"\u003cbr\u003eandroid:layout_height=\"wrap_content\"\u003cbr\u003eandroid:text=\"MyRestaurants\"\u003cbr\u003eandroid:layout_marginTop=\"35dp\"\u003cbr\u003eandroid:id=\"@+id/textView\"\u003cbr\u003eandroid:textColor=\"@color/colorTextIcons\"\u003cbr\u003eandroid:textSize=\"40sp\"\u003cbr\u003eandroid:layout_alignParentTop=\"true\"\u003cbr\u003eandroid:layout_centerHorizontal=\"true\"\u003cbr\u003eandroid:textStyle=\"bold\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;Button\u003cbr\u003eandroid:layout_width=\"match_parent\"\u003cbr\u003eandroid:layout_height=\"wrap_content\"\u003cbr\u003eandroid:text=\"Find Restaurants\"\u003cbr\u003eandroid:id=\"@+id/findRestaurantsButton\"\u003cbr\u003eandroid:layout_alignParentBottom=\"true\"\u003cbr\u003eandroid:layout_centerHorizontal=\"true\"\u003cbr\u003eandroid:background=\"@color/colorAccent\"\u003cbr\u003eandroid:textColor=\"@color/colorTextIcons\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eWarning:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eMake sure your image file sizes aren’t too big. Excessively large images will cause the following error when attempting to run your app:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejava.lang.OutOfMemoryError\u003c/code\u003e. Resize your images to 1000pixels x 1000pixels or less to solve this issue.\u003c/p\u003e","exportId":"pre-course-work-creating-a-basic-layout"},{"id":941,"title":"Pre-course work: Buttons and Toasts","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we have our welcome page in place, or rather our MainActivity layout, let’s add some code so that our button does something when we click on it.\u003c/p\u003e\r\n\u003cp\u003eNavigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejava \u0026gt; com.moringaschool.myrestaurants \u0026gt; MainActivity.java\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch2\u003eThe onCreate Method\u003c/h2\u003e\r\n\u003cp\u003eInside of this file, we will see that there is already some code that Android Studio added when we initially created this project. For now, we only want to concern ourselves with the code inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is called every time a user visits this activity. Any code that goes inside of it will be run immediately once the activity loads.\u003c/p\u003e\r\n\u003cp\u003eLet's take a closer look at the contents of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003esuper.onCreate(savedInstanceState);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecauses Android to run all of the default behaviors for an activity. It's very rare that you would change this line.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esetContentView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the activity which layout to use for the device screen. In this case, we are using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eactivity_main.xml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich we just styled.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eR.layout.activity_main\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells Android to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emain_activity.xml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout for this activity.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- which is short for Resources - gives us a way to access all of our files in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, let's add a member variable to hold our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that we can access it inside all of our methods. Add the following to the top of the class to declare our Button view variable:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\u003cbr\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eImporting Classes\u003c/h2\u003e\r\n\u003cp\u003eNotice that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill turn red and underlined. This means we need to import it. In Android Studio, we can easily import elements by clicking on them and then typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption + Enter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(on our windows keyboards, try\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlt + Enter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e) and then clicking\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimport class\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch2\u003eAdding Custom Code on onCreate\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s set our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable. Add the following code inside the\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat did we just do?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003efindViewById\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes the ID of the Button in our layout and returns the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eR.id.findRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the view of our button.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e(Button)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etypecasts our view as Button.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill return a generic type View, but our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas declared as the specific View type of Button, so we need to cast it as such. (In recent updates casting already declared view(s) is deemed redundant by the editor but it's always been good practice as beginners to accustom yourself to such).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCreating Click Listeners\u003c/h2\u003e\r\n\u003cp\u003eNow that our button is set, let’s make it do something! Let’s add a click listener which will be triggered when our button is touched:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-comment\"\u003e//do something\u003c/span\u003e\r\n            }\r\n        });\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetOnClickListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod takes a new onClickListener as a parameter. Let’s use\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab Autocompletion\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto write this out. If we starting typing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew View\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab\u003c/em\u003e, the rest of the code will be filled in for us.\u003c/p\u003e\r\n\u003ch2\u003eToasts\u003c/h2\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, let’s add a toast. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etoast\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a simple pop up message that automatically fades in and out of the screen when triggered.\u003c/p\u003e\r\n\u003cp\u003eA toast takes three parameters; a context, a message, and a duration. The context for our toast is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity.this\u003c/code\u003e. We will talk in further detail about\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econtext\u003c/strong\u003e, but for now message and duration should be pretty self-explanatory.\u003c/p\u003e\r\n\u003cp\u003eThe resulting code should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                Toast.makeText(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let’s run our app again and we should see that our toast message appears when we click on our findRestaurantsButton:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/ef76cqf2ajzfmzx/toast-on-main-activity.png\" alt=\"toast-on-main-activity\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"text-decoration: underline;\"\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant\"\u003eExample Github Example for Myrestaurant\u003c/a\u003e\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e","exportId":"pre-course-work-buttons-and-toasts"},{"id":2283,"title":"Pre-course work: Intents","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eNow that we have a functioning\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003es, let’s work towards making it navigate to a new Activity where we will display information about the restaurants.\u003c/p\u003e\r\n\u003ch2\u003eCreating New Activities\u003c/h2\u003e\r\n\u003cp\u003eRight click on the package name and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Activity \u0026gt; Empty Activity\u003c/em\u003e. Let’s name this Activity,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e, and make sure that the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox is checked, so that a corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.xml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout file for this activity is automatically created.\u003c/p\u003e\r\n\u003ch2\u003eNavigating Between Activities\u003c/h2\u003e\r\n\u003cp\u003eWith our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreated, let’s change the code inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod for our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emFindRestaurantsButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that it navigates to this new activity when clicked, instead of displaying a Toast.\u003c/p\u003e\r\n\u003cp\u003eWe can accomplish this by using an intent. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eintent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepresents something our app “intends to do” by describing a simple action you'd like the app to perform. Most often, an intent is used to start another activity or to hand something over to another app.\u003c/p\u003e\r\n\u003cp\u003eErase the toast in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and replace it with the two lines of code detailed below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Button;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we are constructing a new instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass with the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003c/code\u003e. As you can see this takes two parameters: The current context, and the Activity class we want to start.\u003c/p\u003e\r\n\u003cp\u003eThe current context is the environment in which our code is running. Then, we are calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod which takes an intent as a parameter. So, when we click the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes the user from the MainActivity to the RestaurantsActivity will be created and immediately started.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app again. We should now be able to navigate to our new activity by clicking on our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003e!\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"background-color: #999999;\"\u003e\u003cspan style=\"background-color: #ffffff;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e","exportId":"pre-course-work-intents"},{"id":2284,"title":"Pre-course work: User Input","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eOur restaurants app looks great so far, but let’s add an additional feature which will allow users to enter an address or zip code for their desired location. This won't do much at the moment, but we will later implement the user's input as a parameter in our API request.\u003c/p\u003e\r\n\u003ch2\u003eAdding EditText View\u003c/h2\u003e\r\n\u003cp\u003eLet's add a form field, known as an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e, to our welcome page where users can enter a zip code. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis specific type of text field that Allows the user to interact with text in your application; usually by typing text, but cutting, copying and pasting are also supported. Drag and drop a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePlain Text\u003c/em\u003eEditText from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eText Fields\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earea in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePalette\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that it rests centered directly above the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003e. (You can use the \u003cspan style=\"background-color: #999999;\"\u003eandroid:layout_* \u003cspan style=\"background-color: #ffffff;\"\u003e properties from the views below to position your views).\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are a variety of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einputTypes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esuch as ‘Plain Text’ or ‘Phone’. Much like in HTML, these input types restrict the input to specified characters. Specifying an input type also automatically displays the appropriate input keyboard. For example, if we specify a form field as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einputType\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e‘phone’, our device will bring up the on-screen numbers keyboard.\u003c/p\u003e\r\n\u003cp\u003eGive the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean id, a background color so that it is visible, padding, and a bottom margin. Let's also give it a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue to inform users what to enter in the field:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.MainActivity\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#000000\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/imageView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/background\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"35dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"40sp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationEditText\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"5dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Enter Zip Code\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elooks great, but we don't actually do anything with whatever text the user places inside it. Let’s fix that!\u003c/p\u003e\r\n\u003ch2\u003eGathering Data from EditText\u003c/h2\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elet’s initialize and set a new member variable for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e. Then, inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we'll grab the user input and log it to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogcat\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere is the resulting code in our MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.util.Log;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Button;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.EditText;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = MainActivity.class.getSimpleName();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Log.d(TAG, location);\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s talk about what this new code is doing. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to grab the inputted value of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand save it into a new String variable. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod returns an editable data type so we have to convert it to a String using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app, fill out the form, and then check the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogcat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto make sure it is logging the text we inputted. \u003c/p\u003e\r\n\u003cp\u003eTo have another visual confirmation of the parsing of the user input, you can use a \u003cem\u003e\u003cstrong\u003etoast\u003c/strong\u003e\u003c/em\u003e to display what the user has keys in. You can comment out or remove the \u003cspan style=\"background-color: #999999;\"\u003estartActivity(intent); \u003cspan style=\"background-color: #ffffff;\"\u003e to prevent navigation to the next activity. The code snippet for this could resemble something like this:\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"background-color: #999999;\"\u003e\u003cspan style=\"background-color: #ffffff;\"\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003cbr\u003estartActivity(intent);\u003cbr\u003eString location = mLocationEditText.getText().toString();\u003cbr\u003eToast.makeText(MainActivity.this, location, Toast.LENGTH_LONG).show();\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/1_intents\"\u003e Example GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","exportId":"pre-course-work-user-input"},{"id":942,"title":"Pre-course work: Passing Data Between Activities","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eAt the moment we are gathering the user's input and printing it to the log in our MainActivity. However, our goal is to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeventually\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse this information to complete an API request in our RestaurantsActivity. But how do we send data to another activity?\u003c/p\u003e\r\n\u003ch2\u003ePassing Data with Intent Extras\u003c/h2\u003e\r\n\u003cp\u003eData can be passed to our RestaurantsActivity along with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the form of ‘extras’. We attach data to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a key value pair, using a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eputExtra()\u003c/code\u003e, like so:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eintent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"String key\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"value\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's do this for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring value we created in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the previous lesson. (We can also remove the line to print our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the logcat at this time). Our code should look as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.util.Log;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Button;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.EditText;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eGathering Data from Intent Extras\u003c/h2\u003e\r\n\u003cp\u003eNow, when we click our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e, an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto take us from our MainActivity to our RestaurantsActivity should be initiated. This\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill now include an extra key-value pair of data containing the value the user placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eform field.\u003c/p\u003e\r\n\u003cp\u003eNow, let’s pull the data\u003cspan\u003e \u003c/span\u003e\u003cem\u003eout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the intent extra in our RestaurantsActivity. To do this, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetIntent()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to recreate the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetStringExtra()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to pull out the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue based using the string key we provided:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, we aren't displaying the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata anywhere, so we can't see if this is working! Let's change this: To test that we can successfully retrieve data from the intent extra, we'll first add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout that will be responsible for displaying this information: (If you need a refresher on how to create a RelativeLayout refer back to \u003ca href=\"pages/pre-course-work-creating-a-basic-layout?module_item_id=i39097043baea41b6d7a6f8b8c204f330\"\u003ethis lesson\u003c/a\u003e)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/layout/activity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurants near \"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e, set its height and width to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewrap_content\u003c/code\u003e, which will allow the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto simply expand to whatever size its inner content requires, added the filler text \"Restaurants near\", assigned it the ID\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto reference later in our Java logic, and centered it within the layout.\u003c/p\u003e\r\n\u003cp\u003eThen, back in our RestaurantsActivity, we'll declare\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the top of the file, define it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, then update its content to display the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.TextView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto update its text to contain the sentence we include, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring we previously defined.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app and make sure that our message displays as expected. Great work!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/1_intents\" target=\"_blank\"\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eThis video walks through the steps in this lesson:\u003c/p\u003e\r\n\u003cdiv id=\"video\" class=\"tab-pane active in video\"\u003e\u003ciframe src=\"https://player.vimeo.com/video/158240167\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eIntent Extra\u003c/strong\u003e: Additional data attached to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, in the form of a key-value pair. This data is assigned to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand retrieved using the methods described below.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMethods\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eputExtra()\u003c/code\u003e: Is called upon an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, adds additional information to the intent in the form of a key-value pair. Takes two arguments: One representing the key, and the other representing the value corresponding to that key.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003egetStringExtra()\u003c/code\u003e: Called upon an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat has additional data attached to it. If provided an argument representing the string key in the key-value pair described above, it will return the value.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003esetText()\u003c/code\u003e: Similar to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetText()\u003c/code\u003e, can be called upon any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to set the text within it equal to the argument provided to the method.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003emFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the code above...\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis defined by getting the text a user has input into an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efield, and transforming it into a string.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto travel from the MainActivity to the RestaurantsActivity is created.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintent.putExtra(\"location\", location); attaches\u003c/code\u003elocation\u003ccode\u003eto the newly-created\u003c/code\u003eIntent\u003ccode\u003ein the form of an intent extra.\u003c/code\u003e\"location\"\u003ccode\u003eis the key of the key-value pair, and the\u003c/code\u003elocation` variable is the value.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cdiv class=\"filename\"\u003eres/layout/activity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurants near \"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefined in the MainActivity takes the user from the MainActivity to the RestaurantsActivity, the code above is executed.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = getIntent();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erecreates the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat has just taken us to this new activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003emLocationTextView = (TextView) findViewById(R.id.locationTextView);\u003c/code\u003eLocates a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the RestaurantActivity's corresponding XML layout.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString location = intent.getStringExtra(\"location\");\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euses the key\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"location\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto retrieve the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattached to this intent in the form of an intent extra.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThis location is then displayed in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epreviously located on the current layout, when\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView.setText(\"Here are all the restaurants near: \" + location);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"pre-course-work-passing-data-between-activities"},{"id":943,"title":"Pre-course work: Unit Testing Basics with Robolectric","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eTesting is an important aspect of development, especially in Android. There are a number of factors that affect the behavior of a mobile app that we haven't had to consider when writing web apps. Android applications run on devices with limited memory, CPU power, and power supply and can be negatively impacted by external factors like connectivity, general system utilization, etc.\u003c/p\u003e\r\n\u003cp\u003eTesting in Android can be broken down into two categories:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLocal tests which run on the JVM without an emulator or device\u003c/li\u003e\r\n\u003cli\u003eInstrumentation tests which require an android device or emulator to simulate a user\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eLocal Testing\u003c/h2\u003e\r\n\u003cp\u003eTo run local tests we will use the Robolectric unit testing framework. With Robolectric, we will test the behaviors of a particular component in isolation of other components.\u003c/p\u003e\r\n\u003ch3\u003eConfiguration\u003c/h3\u003e\r\n\u003ch4\u003eAdding Libraries and Dependencies\u003c/h4\u003e\r\n\u003cp\u003eLet’s start with a simple test using our MyRestaurants app. To get started, configure your app to use the 'org.apache.http.legacy' library (necessary for testing\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eshadows\u003c/strong\u003e, which we will cover momentarily) and add the following repositories and dependencies to your build.gradle file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003eandroid {\r\n  ...\r\n    testOptions {\u003cbr\u003e        unitTests {\u003cbr\u003e            includeAndroidResources = true\u003cbr\u003e        }\u003cbr\u003e    }\r\n  ...\u003c/code\u003e\u003ccode class=\"groovy hljs bash\"\u003e\r\n}\r\n\r\ndependencies {\r\n    ...\r\n    testImplementation \"org.robolectric:robolectric:3.8\"\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ebuild.gradle(Project:MyRestaurant) \u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e...\r\n\r\n  repositories {\r\n      \u003c/code\u003ejcenter()\u003cbr\u003e//\u003cspan\u003eNote: if you are planning to use the \u003c/span\u003e\u003ccode\u003egoogle() \u003c/code\u003e\u003cspan\u003e, you need Gradle 4.x+, Android Studio 3.x+ and Gradle plugin for Android 3.x+.\u003c/span\u003e\u003cbr\u003egoogle()\u003cbr\u003emaven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\u003ccode class=\"groovy hljs bash\"\u003e\u003cbr\u003e  }\r\n  ...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch4\u003eCreating Test Classes\u003c/h4\u003e\r\n\u003cp\u003eNavigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejava/com.moringaschool.myrestaurants (test)\u003c/em\u003e, right click on the test package name, and create a new class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivityTest\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/vf3xl9oi0pnua1c/creating-new-unit-test-class.png\" alt=\"create-new-test-class-android\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdd the following annotation to our test class to allow our code to be run natively in the JVM instead of on an Android device:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/MainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e@RunWith(RobolectricTestRunner.class)\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, each time a class name appears red, it means the class needs to be imported. You can do this by clicking on the red and underlined class name, and pressing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e. After importing all classes, your MainActivityTest file should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/MainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant;\u003c/span\u003e\r\n\r\nimport org.junit.runner.RunWith;\u003cbr\u003eimport org.robolectric.RobolectricTestRunner;\r\n\r\n@RunWith(RobolectricTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore we write our first test, we'll also want to configure our test class so it knows which Activity we will use to write our tests:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/MainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.\u003cspan\u003eBefore\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.runner.\u003cspan\u003eRunWith\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.Robolectric\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.RobolectricTestRunner\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e@RunWith\u003c/span\u003e(RobolectricTestRunner.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e\u003cbr\u003e\u003cspan\u003epublic class \u003c/span\u003eMainActivityTest {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eMainActivity \u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Before\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003esetup\u003c/span\u003e(){\u003cbr\u003e        \u003cspan\u003eactivity \u003c/span\u003e= Robolectric.\u003cspan\u003esetupActivity\u003c/span\u003e(MainActivity.\u003cspan\u003eclass\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003ch3\u003eWriting Tests\u003c/h3\u003e\r\n\u003cp\u003eFor our first test, we will assert that the text in our MainActivity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis equal to “MyRestaurants”. To do this, we need to give our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean ID:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003e...\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/appNameTextView\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are finally ready to write our first test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eandroid.widget.TextView\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.\u003cspan\u003eBefore\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.\u003cspan\u003eTest\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.runner.\u003cspan\u003eRunWith\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.Robolectric\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.RobolectricTestRunner\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport static \u003c/span\u003ejunit.framework.TestCase.\u003cspan\u003eassertTrue\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e@RunWith\u003c/span\u003e(RobolectricTestRunner.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e\u003cbr\u003e\u003cspan\u003epublic class \u003c/span\u003eMainActivityTest {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eMainActivity \u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Before\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003esetup\u003c/span\u003e(){\u003cbr\u003e        \u003cspan\u003eactivity \u003c/span\u003e= Robolectric.\u003cspan\u003esetupActivity\u003c/span\u003e(MainActivity.\u003cspan\u003eclass\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Test\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003evalidateTextViewContent\u003c/span\u003e(){\u003cbr\u003e        TextView appNameTextView = \u003cspan\u003eactivity\u003c/span\u003e.findViewById(R.id.\u003cspan\u003eappNameTextView\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eassertTrue\u003c/span\u003e(\u003cspan\u003e\"MyRestaurants\"\u003c/span\u003e.equals(appNameTextView.getText().toString()))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWith your cursor over ‘assertTrue’, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption + Enter\u003c/em\u003e, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStatic import method...\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand select the first option to import it. This should add the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimport static junit.framework.Assert.assertTrue;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the top of your file.\u003c/li\u003e\r\n\u003cli\u003eAll JUnit tests require the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Test\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation before the method declaration.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eactivity.findViewById\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the appNameTextView which we will cast as type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eInside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eassertTrue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe test to see that the text from our appNameTextView is equal to “MyRestaurants”\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eRunning Tests\u003c/h3\u003e\r\n\u003cp\u003eLet’s run this test and see if it passes. Right click on class name in the file structure view and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun ‘MainActivityTest’\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/n964c12l2gvv3ii/running-unit-tests-in-android-studio.png\" alt=\"running-unit-tests-android\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe console should automatically open and display the progress of the running test. The progress bar indicator should turn green and read ‘1 test passed’. We just passed our first Android unit test -- nice work!\u003c/p\u003e\r\n\u003cp\u003eNote: Note if your tests fail with an error message like;\u003c/p\u003e\r\n\u003cpre\u003ejava.lang.UnsupportedOperationException: Robolectric does not support API level 28.\u003c/pre\u003e\r\n\u003cp\u003eJust navigate to your: build.gradle(Module: app) and change the value of the \u003cstrong\u003ecompileSdkVersion\u003c/strong\u003e and \u003cstrong\u003etargetSdkVersion \u003c/strong\u003eto \u003cstrong\u003e27 \u003c/strong\u003eand that of the dependency \u003cem\u003eimplementation 'com.android.support:appcompat-v7:28.0.0' \u003c/em\u003eto look like this \u003cem\u003eimplementation 'com.android.support:appcompat-v7:27.1.1' \u003c/em\u003e. They should look like this:\u003c/p\u003e\r\n\u003cpre\u003eandroid {\u003cbr\u003e    compileSdkVersion \u003cspan\u003e27\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003edefaultConfig {\u003cbr\u003e       ...\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etargetSdkVersion \u003cspan\u003e27\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e       ...\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e       \u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003c/pre\u003e\r\n\u003cpre\u003edependencies {\u003cbr\u003e  ...\u003cbr\u003e    implementation \u003cspan\u003e'com.android.support:appcompat-v7:27.1.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e  ...\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e}\u003cspan\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/prkgz0uj2tcmqad/passing-test-in-console.png\" alt=\"passing-test-in-console\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eWriting Tests with Shadows\u003c/h3\u003e\r\n\u003cp\u003eLet's write one more test to verify the RestaurantsActivity is started when findRestaurantsButton is clicked. To do this, we will need to use something called shadows.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eShadows\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare classes that modify or extend behavior of a class in the Android SDK. Robolectric looks for Shadow classes that correspond with any Android classes that are run as part of a Robolectric test.\u003c/p\u003e\r\n\u003ch3\u003eRequired Reading\u003c/h3\u003e\r\n\u003cp\u003eRead about using shadows in Robolectric\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Unit-Testing-with-Robolectric#using-shadows\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand then check out the test below that asserts that the correct activity is launched when we click on our findRestaurantsButton:\u003c/p\u003e\r\n\u003ch3\u003eExample Test Using Shadows\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003e...\u003cbr\u003e@Test\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003esecondActivityStarted\u003c/span\u003e(){\u003cbr\u003e    \u003cspan\u003eactivity\u003c/span\u003e.findViewById(R.id.\u003cspan\u003efindRestaurantsButton\u003c/span\u003e).performClick()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eIntent expectedIntent = \u003cspan\u003enew \u003c/span\u003eIntent(\u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eRestaurantsActivity.\u003cspan\u003eclass\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eShadowActivity shadowActivity = org.robolectric.Shadows.\u003cspan\u003eshadowOf\u003c/span\u003e(\u003cspan\u003eactivity\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eIntent actualIntent = shadowActivity.getNextStartedActivity()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eassertTrue\u003c/span\u003e(actualIntent.filterEquals(expectedIntent))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003cbr\u003e...\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/2_robolectrics\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLocal Testing\u003c/strong\u003e: Tests that run locally on the JVM, without an emulator or device.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInstrumentation Testing:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTests that require an Android device or emulator to simulate a user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRobolectric\u003c/strong\u003e: A unit testing framework for Android applications.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eShadows\u003c/strong\u003e: Classes that modify or extend the behavior of a class in the Android SDK. Robolectric looks for Shadow classes that correspond with any Android classes that are run as part of a Robolectric test.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn order to use shadows, applications must be configured to use the 'org.apache.http.legacy' library.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eUnit test classes should reflect the activity whose logic they're testing. (ie: Tests meant to cover logic present in MainActivity will reside in a MainActivityTest class. Tests covering logic in a WelcomeActivity will reside in a WelcomeActivityTest class.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/2_robolectrics\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://robolectric.org/getting-started/\"\u003eRobolectric Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003eCode Path Tutorial on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Unit-Testing-with-Robolectric\"\u003eUnit Testing with Robolectric\u003c/a\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e","exportId":"pre-course-work-unit-testing-basics-with-robolectric"},{"id":2285,"title":"Pre-course work: Unit Testing Basics with Espresso","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eNext, let’s learn the basics of instrumentation testing in Android. We will use\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eEspresso\u003c/strong\u003e, a UI test framework that creates automated tests that run on an actual device or emulator.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eInstrumentation tests\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare meant to simulate the actions of a user and allow us to test the app through the stages of the android activity lifecycle.\u003c/p\u003e\r\n\u003ch2\u003eConfiguring Espresso\u003c/h2\u003e\r\n\u003cp\u003eFirst, we’ll add the necessary configurations and dependencies to our build.gradle file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eapply\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eplugin\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-string\"\u003e'com.android.application'\u003c/span\u003e\r\n\r\nandroid {\r\n    ...\r\n\r\n    defaultConfig {\r\n        ...\r\n        testInstrumentationRunner \u003cspan class=\"hljs-string\"\u003e\"android.support.test.runner.AndroidJUnitRunner\"\u003c/span\u003e\r\n    }\r\n    ...\r\n}\r\n\r\ndependencies {\r\n    ...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test:runner:1.0.2'\u003cbr\u003e\u003c/span\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test.espresso:espresso-core:3.0.2'\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003c/pre\u003e\r\n\u003cpre\u003eandroidTestImplementation \u003cspan\u003e\"com.android.support.test:rules:1.0.2\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-value\"\u003e} \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCreating Test Classes and Rules\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s create a new test class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivityInstrumentationTest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejava/com.moringaschool.myrestaurants (androidTest)\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epackage. We'll place the following annotation within this file, and import all necessary classes.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003epackage io.github.vinge1718.restaurant;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;MainActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(MainActivity.class);\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Rule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells our device which activity to launch before each test. Here, we're instructing the instrumentation tests to launch the MainActivity before each test.\u003c/p\u003e\r\n\u003ch2\u003eWriting Instrumentation Tests with Espresso\u003c/h2\u003e\r\n\u003cp\u003eNow we are ready to write our first test. Include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Test\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock detailed below. Multiple methods will appear red. This is normal, continue reading the next section to address importing these methods appropriately.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evalidateEditText\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        onView(withId(R.id.locationEditText)).perform(typeText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e))\r\n                .check(matches(withText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e)));\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eImporting Static Methods\u003c/h3\u003e\r\n\u003cp\u003eYou will notice that multiple methods included in this block of code will be red. Each of these are static methods from Espresso that need to be imported, similar to the manner in which we import classes. Click on each, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e, and select \"import static method...\" from the resulting menu.\u003c/p\u003e\r\n\u003cp\u003eOnce complete, your file should have these imports and annotations:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.action.ViewActions.typeText;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.assertion.ViewAssertions.matches;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withId;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withText;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;MainActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(MainActivity.class);\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evalidateEditText\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        onView(withId(R.id.locationEditText)).perform(typeText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e))\r\n                .check(matches(withText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e)));\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAnatomy of an Espresso Instrumentation Test\u003c/h2\u003e\r\n\u003cp\u003eNow that everything is imported correctly, let's look at this test a little closer. This test verifies that the instrumentation test can type the text \"Portland\" into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationEditText\u003c/code\u003e, and the text \"Portland\" will be visible in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003especifies that we want to interact with a view\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewithId()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a ViewMatcher method that allows us to find specific views by ID\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003etypeText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a ViewAction method that allows us to type the specified text into our EditText\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ematches()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a ViewAssertion method that validates the specific properties of the given view\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/\"\u003ethis handy cheat sheet\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see the available Matchers, ViewActions and ViewAssertions.\u003c/p\u003e\r\n\u003ch2\u003eRunning Instrumentation Tests\u003c/h2\u003e\r\n\u003cp\u003eLet’s run our test and make sure it passes. Right click on the class name and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun ‘MainActivityInstrume…’\u003c/em\u003e. Because this is an instrumentation test, the emulator will open, the “Portland” text will appear in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationEditText\u003c/code\u003e, and the progress indicator will notify us that our test passed. Hooray!\u003c/p\u003e\r\n\u003ch2\u003eOther Instrumentation Tests\u003c/h2\u003e\r\n\u003cp\u003eLet’s add one more test to check if the location entered into our form is successfully being passed to our RestaurantsActivity with the intent extra we just recently created.\u003c/p\u003e\r\n\u003cp\u003eThe code for this test will appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elocationIsSentToRestaurantsActivity\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        String location = \u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e;\r\n        onView(withId(R.id.locationEditText)).perform(typeText(location));\r\n        onView(withId(R.id.findRestaurantsButton)).perform(click());\r\n        onView(withId(R.id.locationTextView)).check(matches\r\n            (withText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location)));\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we will need to follow the same process detailed above to import the static\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod for use.\u003c/p\u003e\r\n\u003cp\u003eFor this test, the app will navigate to the RestaurantsActivity where it will display the same location string that was entered in the locationEditText.\u003c/p\u003e\r\n\u003cp\u003eIf you run the MainActivityInstrumentationTest now, you will notice that the test we just wrote fails. Why is this? Instrumentation tests are designed to simulate how a user interacts with an app. When using an app, a user can only click on a view such as the findRestaurantsButton if it is visible and unobstructed by other views or widgets. Our test is failing because the soft input keyboard is covering the findRestaurantsButton when our test was instructed to click on it. To combat this, let's disable the soft input keyboard on our emulator:\u003c/p\u003e\r\n\u003cp\u003eNavigate to your emulator's\u003cspan\u003e \u003c/span\u003e\u003cem\u003esettings\u003c/em\u003e, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLanguage \u0026amp; input\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/z5dajc9x4ralk2k/settings.png\" alt=\"language_and_input\"\u003e\u003c/p\u003e\r\n\u003cp\u003e... select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCurrent Keyboard\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/dwy5uoxmdot91a2/lang_and_input.png\" alt=\"language_and_input\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...and finally, toggle to disable the keyboard:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/8n4t2xtlvke4k4n/disable-keyboard.png\" alt=\"language_and_input\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eAlternatively\u003c/strong\u003e! - If you are getting a security exception that looks something similar to:\u003c/p\u003e\r\n\u003cpre\u003eAndroid :java.lang.SecurityException: Injecting to another application requires INJECT_EVENTS permission\u003c/pre\u003e\r\n\u003cp\u003eYou should implement code to shut down the soft keyboard after text typing, otherwise the next click will be considered as being on a different application. \u003c/p\u003e\r\n\u003cp\u003eTo fix this, simply close the keyboard after typing, also add some sleep/pause to make sure the keyboard is closed, otherwise the test will break every now and then. So the final code looked like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e@Test\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003elocationIsSentToRestaurantsActivity\u003c/span\u003e(){\u003cbr\u003e    String location = \u003cspan\u003e\"Portland\"\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eonView\u003c/span\u003e(\u003cspan\u003ewithId\u003c/span\u003e(R.id.\u003cspan\u003elocationEditText\u003c/span\u003e)).perform(\u003cspan\u003etypeText\u003c/span\u003e(location)).perform(\u003cspan\u003ecloseSoftKeyboard\u003c/span\u003e())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try \u003c/span\u003e{                             // the sleep method requires to be checked and handled so we use try block\u003cbr\u003e        Thread.\u003cspan\u003esleep\u003c/span\u003e(\u003cspan\u003e250\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e} \u003cspan\u003ecatch \u003c/span\u003e(InterruptedException e){\u003cbr\u003e        System.\u003cspan\u003eout\u003c/span\u003e.println(\u003cspan\u003e\"got interrupted!\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    \u003cspan\u003eonView\u003c/span\u003e(\u003cspan\u003ewithId\u003c/span\u003e(R.id.\u003cspan\u003efindRestaurantsButton\u003c/span\u003e)).perform(\u003cspan\u003eclick\u003c/span\u003e())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eonView\u003c/span\u003e(\u003cspan\u003ewithId\u003c/span\u003e(R.id.\u003cspan\u003elocationTextView\u003c/span\u003e)).check(\u003cspan\u003ematches\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e(\u003cspan\u003ewithText\u003c/span\u003e(\u003cspan\u003e\"Here are all the restaurants near: \" \u003c/span\u003e+ location)))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eInterruptedException\u003c/strong\u003e\u003c/em\u003e is used to indicate that the current thread has been interrupted by an external thread while it was performing some blocking operation (e.g. interruptible IO, wait, sleep)\u003c/p\u003e\r\n\u003cp\u003eUsing the provided examples, the linked resources on the helpful resources page, and your research skills, continue to implement both local and instrumentation unit tests.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid Developers Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/training/testing/ui-testing/espresso-testing.html\"\u003eTesting UI for a Single App\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://google.github.io/android-testing-support-library/docs/espresso/\"\u003eEspresso Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/\"\u003eCheat Sheet\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor Matchers, ViewActions and ViewAssertions\u003c/li\u003e\r\n\u003cli\u003eAndroid Developers Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/training/testing/ui-testing/espresso-testing.html\"\u003eTesting UI for a Single App\u003c/a\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/3_Espresso\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants after these changes\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInstrumentation Testing:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTesting for user interfaces that requires an actual emulator or device to simulate user interaction with the application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eEspresso:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eA framework designed to test user interfaces with instrumentation tests.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInstrumentation test classes should have names that reflect the class they are testing. (For instance, instrumentation tests that correspond to the MainActivity will reside in a class called MainActivityInstrumentationTest).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"pre-course-work-unit-testing-basics-with-espresso"}]},{"id":29,"name":"Week 1: User Interface Basics","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"idc2899772722c92b801b80d14fb3fa81","items":[{"id":2112,"title":"Monday: Android Introduction Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDaily Objectives\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eThis week we are going to learn how to implement basic user interface elements in Android. Tools and concepts that we'll cover include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid emulator\u003c/li\u003e\r\n\u003cli\u003eLayouts\u003c/li\u003e\r\n\u003cli\u003eButtons\u003c/li\u003e\r\n\u003cli\u003eToasts\u003c/li\u003e\r\n\u003cli\u003eIntents\u003c/li\u003e\r\n\u003cli\u003eUser input\u003c/li\u003e\r\n\u003cli\u003eButter Knife\u003c/li\u003e\r\n\u003cli\u003eListViews and ArrayAdapters\u003c/li\u003e\r\n\u003cli\u003eApp bar\u003c/li\u003e\r\n\u003cli\u003eHierarchical relationships\u003c/li\u003e\r\n\u003cli\u003eAndroid Manifest\u003c/li\u003e\r\n\u003cli\u003eView.OnClickListener interface\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAt the end of the week, you will submit the first draft of a personal project of your choice which should meet the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse at least 3 activities that the user can navigate to.\u003c/li\u003e\r\n\u003cli\u003eDisplay a list of information.\u003c/li\u003e\r\n\u003cli\u003eGather user input and pass it to another activity.\u003c/li\u003e\r\n\u003cli\u003eUse ButterKnife to bind all of your views.\u003c/li\u003e\r\n\u003cli\u003eImplement the View.OnClickListener interface to set click listeners to view elements.\u003c/li\u003e\r\n\u003cli\u003eContinue to use good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eUse custom fonts\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eImplement at least one List View\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse at least two Android Activities\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003eImplement an Intent with FLAGS\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003e\u003cspan\u003eAdd a README to the GitHub repository that includes:\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of the site \u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-android-introduction-objectives"},{"id":2289,"title":"Monday: Practice: MyRestaurants","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal today is to get comfortable using Android Studio. Practice creating a simple Android application using a basic layout, buttons, toasts, intents and user input.\u003c/p\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow does XML differ from HTML? How are they alike?\u003c/li\u003e\r\n\u003cli\u003eWhat's the difference between\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esp\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edp\u003c/strong\u003e? How do you decide which to use?\u003c/li\u003e\r\n\u003cli\u003eWhen would you use a toast?\u003c/li\u003e\r\n\u003cli\u003eHow are intents used in an Android application?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the weekend videos/lessons and build out the foundation for the MyRestaurants app which we will continue to work on over the next four weeks.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003eTry creating your own themes to style activities differently. Check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Styles-and-Themes\" target=\"_blank\"\u003ethis article\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor some tips and tricks\u003c/p\u003e\r\n\u003cp\u003eHere are some additional resources that might come in handy:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Defining-Views-and-their-Attributes\" target=\"_blank\"\u003eViews and their attributes\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Material-Design-Primer\" target=\"_blank\"\u003eMaterial Design Primer\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app gather user input and pass it to another activity?\u003c/li\u003e\r\n\u003cli\u003eAre the git commits clear and descriptive?\u003c/li\u003e\r\n\u003cli\u003eIs the README detailed and descriptive, with all necessary elements?\u003c/li\u003e\r\n\u003cli\u003eIs the code properly indented? Do naming conventions make sense?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-practice-myrestaurants"},{"id":957,"title":"Monday: Custom Fonts","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eOne way to quickly add aesthetic touches to your Android applications is to implement custom fonts. In this lesson, we'll briefly cover how to import a font into our project's assets, and apply this font to a specific area of our application at runtime.\u003c/p\u003e\r\n\u003ch2\u003eSelecting a Font File\u003c/h2\u003e\r\n\u003cp\u003eFirst, you'll need to locate a specific font you'd like to use. You can download fonts from\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.fontsquirrel.com/fonts/list/popular\" target=\"_blank\"\u003eFontSquirrel\u003c/a\u003e, or feel free to explore other available font providers. Just know that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efonts must be in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eformat, with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile extension.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eFor our MyRestaurants app, we'll download the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.fontsquirrel.com/fonts/ostrich-sans\" target=\"_blank\"\u003eOstrich Sans\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efont from Font Squirrel. Or, feel free to use another font you find more appealing.\u003c/p\u003e\r\n\u003ch2\u003eFont Sub-Directory\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll need an assets folder to store our app's fonts. Right click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and then select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Folder \u0026gt; Assets Folder\u003c/em\u003e. Keep the default\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTarget Source Set\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinish\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9qo28aog6uckw71/create-assets-folder.png?raw=1\" alt=\"create-assets-folder\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, right click on the newly-created\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Directory\u003c/em\u003e. Name this directory\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eRight click on the new\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReveal in Finder\u003c/em\u003e. Copy your\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont file into this folder.\u003c/p\u003e\r\n\u003ch2\u003eApplying Fonts at Runtime\u003c/h2\u003e\r\n\u003cp\u003eWe can now apply the font at runtime by using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003esetTypeface()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto which we want to apply the custom font. Let's apply this font to the \"MyRestaurants\"\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our MainActivity. In a previous lesson we assigned this\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe id of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eappNameTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto use it in an Espresso test. We'll reference that same ID here in the MainActivity.java file to locate it, and set its typeface.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to declare a member variable, and define it at runtime in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eonCreate()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n       ...\r\n...\r\n\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll define our new font as\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTypeface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype (you'll have to import this new class), and call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecreateFromAsset()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto reference the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont file we've just included in the project:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.graphics.Typeface;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n       ...\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter that, we simply call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003esetTypeface()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e, providing the new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTypeface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject we've just created as an argument. Perfect!\u003c/p\u003e\r\n\u003cp\u003eIf we run our application in the emulator, we should see a new, custom font greet us on the MainActivity:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/59j92jyv4tk0o35/custom-font-on-main-activity-small.png\" alt=\"custom-font-main-activity-small\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is great! But this particular font looks just a bit small here. Let's quickly tweak the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e's XML to increase the size of the font:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"35dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/appNameTextView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've simply changed the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eandroid:textSize\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty from\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e40sp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e60sp\u003c/code\u003e. This looks much better!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/wkg0oefr9zmxc08/custom-font-on-main-activity-larger.png\" alt=\"custom-font-main-activity-larger\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFeel free to experiment with different fonts, and sizes in your own application. \u003c/p\u003e\r\n\u003cp\u003eKeep in mind that custom fonts can dramatically slow down your app, including causing skipped frames and sluggish performance, if they are used excessively. Use system fonts when possible, and reserve custom fonts for areas where they make the biggest impact.\u003c/p\u003e\r\n\u003cp\u003eNote: in the example github repo \u003cem\u003e\u003cstrong\u003eCaviarDreams.ttf \u003c/strong\u003e\u003c/em\u003ehas been implemented instead of the \u003cem\u003e\u003cstrong\u003eostrich-regular.ttf\u003c/strong\u003e\u003c/em\u003e used in the demo code - feel free to experiment with other fonts extensions as well like the \u003cstrong\u003e\u003cem\u003e*.otf\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/4_custom_fonts\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFonts must be of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile extension.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFont files should reside in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, in a sub-directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e. If you have not already, you will need to create these directories.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003ethe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003esetTypeface()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod can be called upon a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and will apply the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTypeface\u003c/code\u003eprovided as an argument to that specific\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eView\u003c/code\u003e's text.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003eThe following example assumes a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eostrich-regular.ttf\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-directory of an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory under\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.graphics.Typeface;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n       ...\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/4_custom_fonts\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"monday-custom-fonts"},{"id":958,"title":"Monday: ArrayAdapters and ListViews","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eAs we discussed when learning about Android XML Layouts, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a layout that contains a list of scrollable items. However, in order to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eget\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethose items into that scrollable list, we need to use something called an adapter. In Android, an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eadapter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis essentially a bridge between the components of your user interface, and the data that your user interface should display.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDon't worry about implementing the code seen in this lesson into MyRestaurants yet; we'll walk through that process together in the next lesson.\u003c/p\u003e\r\n\u003ch2\u003eArrayAdapter\u003c/h2\u003e\r\n\u003cp\u003eOne of the most common adapters in Android is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003c/strong\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for taking a Java\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof objects from our business logic and converting them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects that may be displayed in our user interface. Each item in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis converted to an individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout.\u003c/p\u003e\r\n\u003ch3\u003eImplementing an Array Adapter\u003c/h3\u003e\r\n\u003cp\u003eTo use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e, we need to initialize it and attach it to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhose list items it will be responsible for. To create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe must provide its constructor at least three things: The current context (represented by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e), a layout for the list it will create, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003eof items it will be responsible for adapting into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e. This looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we declare our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable, define it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby locating the specific\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby its ID with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Then, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003eproviding three arguments:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e, which represents the current context,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.R.layout.simple_list_item_1\u003c/code\u003e, which is a layout built into Android that provides standard appearance for text in a list, and an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(not seen here). Then, the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emListView.setAdapter(adapter);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstructs the application that the adapter we've just created is responsible for taking the individual items in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e, and displaying them in the current context's layout (using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esimple_list_item_1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout).\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDon't worry about implementing this into our ongoing MyRestaurants project yet; we'll walk through that process together in the next lesson!\u003c/p\u003e\r\n\u003ch2\u003eRecycling\u003c/h2\u003e\r\n\u003cp\u003eBeyond allowing us to create a clean and aesthetically-pleasing user interface, using adapters and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this fashion offers additional functionality as well! As you're probably already aware, developing Android applications differs from developing web applications in many ways. One of these ways is working around the limited memory and resources mobile devices have compared to desktop or laptop computers.\u003c/p\u003e\r\n\u003cp\u003eWhen we display a list of many items using a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e, it populates with individual\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects for each list item containing data provided by its corresponding adapter. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly instantiates enough individual list items to fill its entire height. After that,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eno additional list items are created in memory\u003c/em\u003e. Instead, as the user scrolls down through the list, items that leave the screen are kept in memory. (These are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eScrapViews\u003c/strong\u003e.) Then, every new row that appears in the screen as the user scrolls actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003ere-uses\u003c/em\u003ea ScrapView, but with updated data from the adapter. This process is aptly known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erecycling\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eTherefore, if we had a list of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethousands\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof items, but only 5 items were visible at the time as the user scrolls, only 5\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es are ever held in memory. Pretty cool, huh?\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll walk through creating a hard-coded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof restaurants in our application, and instantiating a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display each restaurant in a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e. In future lessons we'll replace this hard-coded list with data from the Yelp API.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe Android Developers\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/ArrayAdapter.html\" target=\"_blank\"\u003edocumentation entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es.\u003c/li\u003e\r\n\u003cli\u003eThe CodePath Android Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView\" target=\"_blank\"\u003eUsing an ArrayAdapter with ListView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(This contains some excellent visual representations of the recycling process!)\u003c/li\u003e\r\n\u003cli\u003eLucas Rocha's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/\" target=\"_blank\"\u003ePerformance Tips for Androids's ListView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers an optional deeper dive into this process, for those who are interested.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAdapter\u003c/strong\u003e: Essentially a bridge between the components of your user interface, and the data that your user interface should display.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eArrayAdapter`\u003c/strong\u003e: Responsible for taking an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof objects from our business logic and converting them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects to be displayed in our User Interface.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRecycling\u003c/strong\u003e: The act of an adapter re-using the individual\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the user scrolls through a list. After the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas created enough individual list items to fit the full height of the screen, it simply re-uses existing list items to display the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elist items instead of creating more.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eScrapViews\u003c/strong\u003e: During the process of recycling, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat leaves the screen, but is kept in memory to be re-used.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe code above...\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDeclares an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable\u003c/li\u003e\r\n\u003cli\u003eDefines it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby locating the specific\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby its ID with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/li\u003e\r\n\u003cli\u003eCreates a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand provides three arguments:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(the current context),\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.R.layout.simple_list_item_1\u003c/code\u003e, (a layout built into Android that provides standard appearance for text in a list), and an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe Android Developers\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/ArrayAdapter.html\" target=\"_blank\"\u003edocumentation entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es.\u003c/li\u003e\r\n\u003cli\u003eThe CodePath Android Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView\" target=\"_blank\"\u003eUsing an ArrayAdapter with ListView\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eLucas Rocha's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/\" target=\"_blank\"\u003ePerformance Tips for Androids's ListView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(an optional, deeper dive into this process).\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-arrayadapters-and-listviews"},{"id":2290,"title":"Monday: Implementing a ListView and ArrayAdapter","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eSee this video for a walkthrough of the text in this lesson. However, the text of this lesson contains additional information on testing not seen in the video. Check it out!\u003c/p\u003e\r\n\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/158245550\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/p\u003e\r\n\u003cp\u003eSo far, everything we have done with our MyRestaurants app has been in our MainActivity. Let’s work on building out our RestaurantsActivity and its layout. We will eventually display content gathered from an API, but for now let's simply display a list of restaurants we like.\u003c/p\u003e\r\n\u003cp\u003eTo start, let's create a string array of 15-20 restaurant names inside of RestaurantsActivity. These can be any restaurants of your choosing!\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are going to display these restaurant names dynamically using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eListView\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eArrayAdapter\u003c/strong\u003e, as we learned about in the previous lesson.\u003c/p\u003e\r\n\u003ch2\u003eImplementing a ListView\u003c/h2\u003e\r\n\u003ch3\u003eCreating a ListView\u003c/h3\u003e\r\n\u003cp\u003eAdd a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eListView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/listView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentEnd\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eInitializing a ListView\u003c/h3\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivity.java\u003c/em\u003e, initialize the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.findViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eImplementing an ArrayAdapter\u003c/h2\u003e\r\n\u003cp\u003eThen, we'll create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadapter to the new adapter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ArrayAdapter;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding a Toast\u003c/h2\u003e\r\n\u003cp\u003eLet's also add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnItemClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will display a toast containing the restaurant name when a list item is clicked:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Toast;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.AdapterView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                String restaurant = ((TextView)view).getText().toString();\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRun the app and navigate to the RestaurantsActivity. We see a scrollable list of the restaurants from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString[]\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eTesting ListView and ArrayAdapters\u003c/h2\u003e\r\n\u003ch3\u003eLocal Tests\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a quick local test to make sure our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis displaying information correctly. Create a new test class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivityTest\u003c/em\u003e, and complete the following configuration:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003epackage io.github.vinge1718.restaurant;\u003cbr\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\nimport org.robolectric.RobolectricTestRunner;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also add a rule to begin the RestaurantsActivity and define the mRestaurantListView before each test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Build;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Before;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.Robolectric;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.RobolectricGradleTestRunner;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.annotation.Config;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantsActivity activity;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mRestaurantListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Before\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetup\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        activity = Robolectric.setupActivity(RestaurantsActivity.class);\r\n        mRestaurantListView = (ListView) activity.findViewById(R.id.listView);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's create a quick local test to make sure that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epopulates with the number of restaurants we passed into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray, importing all necessary static methods used in the test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Build;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Before;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.Robolectric;\r\nimport org.robolectric.RobolectricTestRunner;\u003cbr\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertEquals;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertNotNull;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantsActivity activity;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mRestaurantListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Before\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetup\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        activity = Robolectric.setupActivity(RestaurantsActivity.class);\r\n        mRestaurantListView = (ListView) activity.findViewById(R.id.listView);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erestaurantListViewPopulates\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        assertNotNull(mRestaurantListView.getAdapter());\r\n        assertEquals(mRestaurantListView.getAdapter().getCount(), \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're simply checking that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantListView.getAdapter();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns anything\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebut \u003c/em\u003e\u003ccode\u003enull\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which implies the adapter is correctly associated with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e), and that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantListView.getAdapter().getCount();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the correct number of restaurants from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for displaying. If this passes, it means the adapter is correctly passing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray content to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich is displaying it properly.\u003c/p\u003e\r\n\u003cp\u003eNote that you may need to change the number 15 in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etest to accurately reflect the number of restaurants in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/2_robolectrics\" target=\"_blank\"\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eInstrumentation Tests\u003c/h3\u003e\r\n\u003cp\u003eWe should also test that our toast displays the correct restaurant name. Create a new instrumentation test class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivityInstrumentationTest\u003c/em\u003e. We'll also create a rule to begin the RestaurantsActivity before each test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(androidTest)/RestaurantsActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;RestaurantsActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(RestaurantsActivity.class);\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll write the following test, importing all necessary classes and static methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(androidTest)/RestaurantsActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onData;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.action.ViewActions.click;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.assertion.ViewAssertions.matches;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.RootMatchers.withDecorView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withId;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withText;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.CoreMatchers.anything;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.core.IsNot.not;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;RestaurantsActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(RestaurantsActivity.class);\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elistItemClickDisplaysToastWithCorrectRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        View activityDecorView = activityTestRule.getActivity().getWindow().getDecorView();\r\n        String restaurantName = \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e;\r\n        onData(anything())\r\n                .inAdapterView(withId(R.id.listView))\r\n                .atPosition(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\r\n                .perform(click());\r\n        onView(withText(restaurantName)).inRoot(withDecorView(not(activityDecorView)))\r\n                .check(matches(withText(restaurantName)));\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're instructing Espresso to check that clicking on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eitem (\u003ccode\u003e.atPosition(0)\u003c/code\u003e) in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eresults in a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat displays \"Mi Mero Mole\" (note that you may need to change \"Mi Mero Mole\" to whatever the first restaurant in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray is) when clicked.\u003c/p\u003e\r\n\u003cp\u003eTo interact with the data in an adapter we must use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonData()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod rather than\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonView()\u003c/code\u003e. We can then grab a particular piece of data and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to test that our Toast displays the correct text.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eListView\u003c/strong\u003e: A container that shows a vertical list of scrollable items.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eArrayAdapter\u003c/strong\u003e: An adapter that converts objects in an ArrayList to View items in a ListView.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIn instrumentation tests, to interact with the data in an adapter we must use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonData()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod rather than\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonView()\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003ch3\u003eCreating a ListView\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eListView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/listView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentEnd\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eInitializing a ListView\u003c/h3\u003e\r\n\u003cp\u003eInitialize the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.findViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eImplementing an ArrayAdapter\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ArrayAdapter;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAdding a Toast\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Toast;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.AdapterView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                String restaurant = ((TextView)view).getText().toString();\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eTests\u003c/h3\u003e\r\n\u003ch4\u003eLocal\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Build;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Before;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.Robolectric;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.RobolectricGradleTestRunner;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.annotation.Config;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertEquals;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertNotNull;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Config\u003c/span\u003e(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantsActivity activity;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mRestaurantListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Before\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetup\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        activity = Robolectric.setupActivity(RestaurantsActivity.class);\r\n        mRestaurantListView = (ListView) activity.findViewById(R.id.listView);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erestaurantListViewPopulates\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        assertNotNull(mRestaurantListView.getAdapter());\r\n        assertEquals(mRestaurantListView.getAdapter().getCount(), \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e);\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eInstrumentation\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(androidTest)/RestaurantsActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onData;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.action.ViewActions.click;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.assertion.ViewAssertions.matches;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.RootMatchers.withDecorView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withId;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withText;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.CoreMatchers.anything;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.core.IsNot.not;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;RestaurantsActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(RestaurantsActivity.class);\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elistItemClickDisplaysToastWithCorrectRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        View activityDecorView = activityTestRule.getActivity().getWindow().getDecorView();\r\n        String restaurantName = \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e;\r\n        onData(anything())\r\n                .inAdapterView(withId(R.id.listView))\r\n                .atPosition(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\r\n                .perform(click());\r\n        onView(withText(restaurantName)).inRoot(withDecorView(not(activityDecorView)))\r\n                .check(matches(withText(restaurantName)));\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","exportId":"monday-implementing-a-listview-and-arrayadapter"},{"id":959,"title":"Monday: ButterKnife","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eYou might be getting tired of declaring variables for all of your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es at the top of your activity classes and then manually locating them by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e's to set variables. Thankfully, there's a tool that can assist us with this! ButterKnife, after a little setup, will cut down on redundant code.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eButterKnife\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an injection library that allows for field and method binding for Android views.\u003c/p\u003e\r\n\u003ch2\u003eButterKnife Overview\u003c/h2\u003e\r\n\u003cp\u003eCurrently, whenever our back-end (or \"business logic\"; remember that term from Intro?) needs to interact with a portion of our user interface, we need to declare individual element of the user interface, then define them by manually locating them by id in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing ButterKnife, we could instead simply include the ID of each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the top of the file, where we previously declared member variables, and rely on ButterKnife to locate the views instead of manually finding them in `onCreate():\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith only three\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es in our MainActivity, this may not look like a large reduction in code, but in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of the ButterKnife version, we only need to call the single line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButterKnife.bind(this);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon every single element manually. As our application continues to grow in size and complexity, this will save us a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof code.\u003c/p\u003e\r\n\u003ch3\u003eJava Annotations\u003c/h3\u003e\r\n\u003cp\u003eTo use ButterKnife, we'll add special\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eannotations\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003especific to the ButterKnife library to our code. Java annotations are simply metadata that can be added to Java code to include additional information about a program. They're preceded by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@\u003c/code\u003e. This symbol informs the compiler that what immediately follows it is an annotation. (The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Override\u003c/code\u003es we see in our existing code are annotations, too!)\u003c/p\u003e\r\n\u003cp\u003eWhen our project compiles, ButterKnife looks for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@BindView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation seen above. When it finds one, it uses the additional information provided with it (the ID attribute, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR.id.findRestaurantsButton\u003c/code\u003e) to find the corresponding view\u003cspan\u003e \u003c/span\u003e\u003cem\u003efor us\u003c/em\u003e, so we don't have to explicitly do so in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eImplementing ButterKnife\u003c/h2\u003e\r\n\u003cp\u003eTo integrate ButterKnife into our project, we'll first need to add the library to our app's dependencies. We'll place the following line into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle(Module: app)\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n    ...\u003cbr\u003e    implementation 'com.jakewharton:butterknife:8.8.1'\u003cbr\u003e    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'\u003cbr\u003e}\u003c/code\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode class=\"groovy hljs bash\"\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, visit\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\"\u003eButterKnife's documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto read more about how it works.\u003c/p\u003e\r\n\u003ch2\u003eRefactoring MainActivity\u003c/h2\u003e\r\n\u003cp\u003eNow, let's use this powerful tool to refactor our MainActivity. We should be able to take our code from this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRefactoring RestaurantsActivity\u003c/h2\u003e\r\n\u003cp\u003eWe'll implement ButterKnife into our RestaurantsActivity, too! We should be able to take our code from this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n      ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationTextView) TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.listView) ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n  ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFrom this point forward, we will use ButterKnife to easily bind our views, and keep our code brief and well-refactored.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Java annotations in general, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/annotations/basics.html\" target=\"_blank\"\u003eAnnotations Basics Tutorial\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom Oracle.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eLuis G. Valle's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/@lgvalle/how-butterknife-actually-works-85be0afbc5ab#.rontyed2h\" target=\"_blank\"\u003eHow ButterKnife actually works?\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers an optional deeper dive on the code behind ButterKnife, for those that are curious.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAnnotations\u003c/strong\u003e: A form of metadata that can be added to Java code to include information about a program that's\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epart of the program itself. For ButterKnife specifically, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Bind\u003c/code\u003eannotation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eButterKnife\u003c/strong\u003e: An injection library that allows for field and method binding for Android views. View documentation\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003ch3\u003eWithout ButterKnife\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWith ButterKnife:\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/butterknife\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eLuis G. Valle's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/@lgvalle/how-butterknife-actually-works-85be0afbc5ab#.rontyed2h\" target=\"_blank\"\u003eHow ButterKnife actually works?\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers an optional deeper dive on the code behind ButterKnife, for those that are curious.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Java annotations in general, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/annotations/basics.html\" target=\"_blank\"\u003eAnnotations Basics Tutorial\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom Oracle.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-butterknife"},{"id":960,"title":"Monday: Debugging: Android Log","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eNow that you're in your level 3 Moringa course, you've probably come to realize how much trial-and-error goes into coding. Sometimes code doesn't work on the first try. Sometimes code that once worked perfectly no longer functions after implementing new code. Bugs occur all the time, and that's simply a normal part of development.\u003c/p\u003e\r\n\u003cp\u003eIn the next two lessons we'll explore two Android-specific approaches to debugging. First, we'll learn how to record helpful information into an area of Android Studio known as the logcat. Then, in the next lesson we'll learn how to add breakpoints to strategically pause our code and narrow down where bugs and errors are occurring. Let's get started!\u003c/p\u003e\r\n\u003ch2\u003eThe Android Log\u003c/h2\u003e\r\n\u003cp\u003eWhen writing JavaScript in your Intro to Programming and JavaScript courses, you probably encountered\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e. It’s a method that allows us to write to the JavaScript console in the browser. This allows us to see what certain variables are defined as, or check whether methods are being called.\u003c/p\u003e\r\n\u003cp\u003eAndroid Studio has the capability to write log messages in a very similar manner. We can add log methods that will write data to Android Studio's logcat. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elogcat\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays system messages, and messages/information you manually record with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods. It both displays messages in real time and also keeps a history so you may view older messages.\u003c/p\u003e\r\n\u003cp\u003eAfter placing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods we can run our app and view the logcat to see what data or information has been recorded.\u003c/p\u003e\r\n\u003ch2\u003eLog Methods\u003c/h2\u003e\r\n\u003cp\u003eHowever, unlike JavaScript's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e, there are\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany different\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods from Android's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/util/Log.html\" target=\"_blank\"\u003e\u003ccode\u003eLog\u003c/code\u003eclass\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewe can use to log information. Let's briefly cover what these different methods are, and when to use each:\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ee\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eerror\u003c/strong\u003e. Use this when you\u003cspan\u003e \u003c/span\u003e\u003cem\u003eknow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean error has occurred, and you're logging details about that error. Developers will commonly use this in a block of code meant to catch an error. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessage can then print details about the error.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.w()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.w()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewarning\u003c/strong\u003e. Use this when you suspect an issue may be occurring, but haven't yet received full-on error messages. Developers usually use this to proactively investigate unusual or unexpected behavior in an application.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.i()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ei\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einformation\u003c/strong\u003e. Use this to post useful information. For instance, maybe you want to double-check a method is being called successfully, you could print an informational message to the log reading something like\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"X method called!\"\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ed\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edebug\u003c/strong\u003e. As you might imagine, you'll use this one for debugging purposes. You'll probably use this one most frequently out of all available\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003everbose\u003c/strong\u003e. Use this when you're implementing many, many different log statements as a debugging approach.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.wtf()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003e(No, we're\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/util/Log.html#wtf(java.lang.String,%20java.lang.String,%20java.lang.Throwable)\" target=\"_blank\"\u003enot making this up\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewtf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.wtf()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis said to stand for\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"What a terrible failure\"\u003c/em\u003e. It's meant to record particularly awful issues that should never, ever happen, but are\u003cspan\u003e \u003c/span\u003e\u003cem\u003esomehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoccurring anyway. It's not used as commonly as the other\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages.\u003c/p\u003e\r\n\u003ch3\u003eBenefits of Different Log Message Types\u003c/h3\u003e\r\n\u003cp\u003eBut why are there 6 different methods to log information anyway? Well, the logcat can contain a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof data. By classifying the importance of the information you're logging using the methods depicted above, we can easily filter messages by their level of importance.\u003c/p\u003e\r\n\u003ch3\u003eLog Statement Importance Level\u003c/h3\u003e\r\n\u003cp\u003eThe list of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods above is ordered by level of importance, also known as \"log level\".\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis considered to be the highest importance and priority, because it logs information about errors that are currently occurring, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis considered the lowest importance and priority because it's meant for logging as much data as possible. (\u003ccode\u003eLog.wtf()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually a bit of an outlier, and isn’t used very often.)\u003c/p\u003e\r\n\u003cp\u003eSo, if you filter to view\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages, you'll see both messages recorded with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003emethod\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethose recorded with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.w()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods, because they are of the same importance level\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor higher\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, if we filtered by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e, we would see any messages printed on the logcat from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.w()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause they are all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e's level of importance\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor higher\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eSimilarly, if we were to filter by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e, we would see\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eother other\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod messages, since\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the lowest importance level, and each of the other methods is of a higher importance.\u003c/p\u003e\r\n\u003ch2\u003eHow to Log Information\u003c/h2\u003e\r\n\u003cp\u003eLet's walk through the process of logging and viewing data in Android Studio. We'll add several\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog \u003c/code\u003emessages to our MyRestaurants application together.\u003c/p\u003e\r\n\u003ch3\u003eAccessing the Logcat\u003c/h3\u003e\r\n\u003cp\u003eFirst, let's locate the logcat in Android Studio, so we'll know where to look for our logged messages. In previous lessons you learned how to access the Terminal in Android Studio. In the same pane near the bottom of the window, select\u003cspan\u003e\u003cem\u003e \u003c/em\u003elogcat\u003c/span\u003e\u003cspan\u003e \u003c/span\u003efrom the lower options bar.\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"instructure_file_link instructure_image_thumbnail\" title=\"logcat.png\" href=\"viewer/files/logcat.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/6796\" data-api-returntype=\"File\"\u003e\u003cimg src=\"viewer/files/logcat.png\" alt=\"logcat.png\" width=\"653\" height=\"367\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/6796\" data-api-returntype=\"File\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3\u003ePlacing a Log Statement\u003c/h3\u003e\r\n\u003cp\u003eNext, just like the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod used in JavaScript, we can place a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod wherever we'd like. Information will be logged when that area of code runs.\u003c/p\u003e\r\n\u003cp\u003eWe'll use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods in two separate spots. First, we'll use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As you begin typing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v(...\u003c/code\u003e, you'll see Android Studio will offer two suggestions in its auto-complete pop-up:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/66ul6cu7wnnmtgr/log-autocomplete.png?raw=1\" alt=\"log-message-autocomplete\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you can see, this method takes either 2 or 3 arguments:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etag\u003c/code\u003e. In terms of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etag\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a quick string that provides context regarding where the log message is coming from: Generally the name of the activity from which information is being logged.\u003c/li\u003e\r\n\u003cli\u003eA second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emsg\u003c/code\u003e. This is the main content of the log message.\u003c/li\u003e\r\n\u003cli\u003eA third argument, of the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eThrowable\u003c/code\u003e, which represents an exception or error being thrown. If you're attempting to log information about an exception or error, you'd provide this exception or argument as a third argument here.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eOur MyRestaurants application shouldn't be throwing any exceptions or errors in its current state, so let's begin by only providing two arguments:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n                Log.v(\u003cspan class=\"hljs-string\"\u003e\"RestaurantsActivity\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"In the onItemClickListener!\"\u003c/span\u003e);\r\n            }\r\n        });\r\n      ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHere, we've included a tag reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"RestaurantsActivity\"\u003c/code\u003e, because we're logging this information from within our RestaurantsActivity.\u003c/li\u003e\r\n\u003cli\u003eAs a second argument, we've included a message reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"In the onItemClickListener!\"\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eSo, when this code is triggered (ie: a restaurant from our list is clicked), the message\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"In the onItemClickListener!\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould appear in our logcat. Putting a log message in this location is great to test and confirm whether a click listener is being triggered successfully.\u003c/p\u003e\r\n\u003cp\u003eIn order to experiment filtering different types of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages, let's include a second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of a different importance level. This time, we'll use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust below our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                Log.v(\u003cspan class=\"hljs-string\"\u003e\"RestaurantsActivity\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"In the onItemClickListener!\"\u003c/span\u003e);\r\n            }\r\n        });\r\n        ...\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"RestaurantsActivity\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"In the onCreate method!\"\u003c/span\u003e);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, we include two arguments. The first is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the location from which we're logging. The second is the message we'd like to print to the logcat.\u003c/p\u003e\r\n\u003ch3\u003eRunning the Log Statement\u003c/h3\u003e\r\n\u003cp\u003eNext, let's launch our application in the emulator. Because we placed our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods of our RestaurantsActivity, we'll need to trigger those methods in order for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods to record data in our logcat.\u003c/p\u003e\r\n\u003cp\u003eWe'll navigate to our RestaurantsActivity. As soon as we do this, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will be triggered. Therefore, we should see our first message appear in the logcat:\u003c/p\u003e\r\n\u003cp\u003eTo ease the location of the custom log-messages being logged on the logcat, search (in the search query box) for the string parameter you have used as the \u003cem\u003e\u003cstrong\u003eTAG \u003c/strong\u003e\u003c/em\u003eparameter.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/aum59gdi88ignj4/first-message-in-logcat.png?raw=1\" alt=\"first-message-in-logcat\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, we can trigger our second log message by clicking any of the restaurants in our list:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/wlyuj4ce5riaxni/two-messages-in-logcat.png?raw=1\" alt=\"two-messages-in-logcat\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSince the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is located in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, notice that it is triggered\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhenever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean item is clicked, instead of just once. For instance, if we clicked a restaurant many times in a row, we would see:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/k47x0f6rj9wutcd/tons-of-click-listener-logcat-messages.png?raw=1\" alt=\"many-click-listener-messages\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eFiltering Messages in the Logcat\u003c/h2\u003e\r\n\u003cp\u003eThis should be fairly reminiscent of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein JavaScript. However, as you can see, there's\u003cspan\u003e \u003c/span\u003ea lot of information in that logcat! Thankfully, we can quickly filter this breadth of information.\u003c/p\u003e\r\n\u003cp\u003eIn the top bar of the logcat panel, there are multiple options to filter logcat contents. Let's explore these options now.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/rrq50wduafma4z4/numbered-ways-to-filter-logcat.png?raw=1\" alt=\"logcat-filtering-options\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e1. Source\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/0i6b33d4bw4m9n3/filter-by-source.png?raw=1\" alt=\"filter-by-source\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis dropdown allows you to select which device's log messages to view. This should be the device you're currently running your application on. This will be the emulator, unless you're running your application on an standalone Android device.\u003c/p\u003e\r\n\u003ch3\u003e2. Application\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s71yjl7bxww3deg/filter-by-application.png?raw=1\" alt=\"filter-by-application\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis dropdown allows you to select which application's log messages to view. This should always be the application you're currently debugging, or attempting to view log messages for.\u003c/p\u003e\r\n\u003ch3\u003e3. Log Level\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/djt2vefa1i9qlcx/filtering-by-log-message-method.png?raw=1\" alt=\"filter-by-log-level\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHere, you can filter by the log level. As we discussed previously, each of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods listed above is of a different priority level. When you filter by a specific log level, you'll only see messages of that priority level\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor higher\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eFor instance, if we filter by verbose, we can see both of our log statements are visible:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9c50y1fg6mpg251/filter-logcat-by-verbose.png?raw=1\" alt=\"filter-by-verbose\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYet, if we filter instead by debug, we can see that only our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement is visible, because we're viewing only log statements of the \"Debug\" priority or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehigher\u003c/em\u003e. Because verbose (\u003ccode\u003eLog.v()\u003c/code\u003e) is of a priority\u003cspan\u003e \u003c/span\u003e\u003cem\u003elower\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethan debug (\u003ccode\u003eLog.d()\u003c/code\u003e), we no longer see it in the logcat:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/7b667bo21trpsxh/filter-logcat-by-debug.png?raw=1\" alt=\"filter-by-debug\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e4. Search Field\u003c/h3\u003e\r\n\u003cp\u003eAs the name implies, the search field allows us to search for particular words, statement, or other content in a log message. For instance, if you logged a certain piece of data with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"RestaurantsActivity\"\u003c/code\u003etag, but couldn't locate the log message, you could search\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"RestaurantsActivity\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto confirm whether or not the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod ever ran and recorded data in the logcat.\u003c/p\u003e\r\n\u003ch3\u003e5. Application Filters\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/u53yw73acbmzrcd/filter-options.png?raw=1\" alt=\"app-filter\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis dropdown allows us to choose whether we'd like to see log messages from only the selected application (the application chosen in #2), or from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecurrently-running applications and processes on the device.\u003c/p\u003e\r\n\u003ch2\u003eDefining Tag Constants\u003c/h2\u003e\r\n\u003cp\u003eAdditionally, it's common practice for Android Developers to add a special\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringacore-java.herokuapp.com/#weekend.html\" target=\"_blank\"\u003econstant\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTAG\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat contains the name of the activity to each class. This constant is then used as the first argument in any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003emethods.\u003c/p\u003e\r\n\u003cp\u003eDefining a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTAG\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstant for use in an activity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = YourActivityName.class.getSimpleName();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBy defining the constant as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYourActivityName.class.getSimpleName();\u003c/code\u003e, instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the activity name, Android Studio's built-in refactoring tools will automatically change the value of this constant if you ever re-name your activity. This is considered best practice.\u003c/p\u003e\r\n\u003cp\u003eLet's add a similar constant to our RestaurantActivity, and use it in both our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantActivity.class.getSimpleName();\r\n  ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n                Log.v(TAG, \u003cspan class=\"hljs-string\"\u003e\"In the onItemClickListener!\"\u003c/span\u003e);\r\n            }\r\n        });\r\n        ...\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n        Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"In the onCreate method!\"\u003c/span\u003e);\r\n   ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eLogging Other Data\u003c/h2\u003e\r\n\u003cp\u003eAs you saw earlier,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods take 2-3 arguments. Most of the time, you'll only ever need to use 2: A tag containing information about the context the log message is coming from, and the contents of the message. Both of these arguments must be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype.\u003c/p\u003e\r\n\u003cp\u003eThis means, you can only log\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einformation. At first this may sound limiting, but note that you can simply use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.toString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to turn non-\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eformat for the purposes of logging.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on debugging in general, checkout the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/debug/index.html#systemLog\" target=\"_blank\"\u003eDebug Your App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eportion of the Android Studio User Guide.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Android Studio's logcat, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/command-line/logcat.html\" target=\"_blank\"\u003elogcat Command-line Tool\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLogcat\u003c/strong\u003e: An area of Android Studio that displays system messages, and messages/information you manually record with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods. It displays messages in real time and also keeps a history so you may view older messages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTag\u003c/strong\u003e: A string that provides context regarding where the log message is coming from: Generally the name of the activity from which information is being logged.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003ch3\u003eAndroid Log Methods\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.d()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDebug\u003c/strong\u003e. You'll use this one for debugging purposes. You'll probably use this one most frequently out of all available\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.e()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eError\u003c/strong\u003e. Use this when you\u003cspan\u003e \u003c/span\u003e\u003cem\u003eknow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean error has occurred, and you're logging details about that error.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.i()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eInformation\u003c/strong\u003e. Use this to post useful information. For instance, maybe you want to double-check a method is being called successfully, you could print an informational message to the log reading something like\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"X method called!\"\u003c/em\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.v()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eVerbose\u003c/strong\u003e. Use this when you're implementing many, many different log statements as a debugging approach.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.w()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eWarning\u003c/strong\u003e. Use this when you suspect an issue may be occurring, but haven't yet received full-on error messages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.wtf()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003cem\u003e\"What a terrible failure\"\u003c/em\u003e\u003c/strong\u003e. Meant to record particularly awful issues that should never, ever happen, but are\u003cspan\u003e \u003c/span\u003e\u003cem\u003esomehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoccurring anyway.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.android.com/studio/debug/index.html#systemLog\" target=\"_blank\"\u003eDebug Your App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom the Android Studio User Guide.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"monday-debugging-android-log"},{"id":2291,"title":"Monday: Debugging: Breakpoints and the Android Debugger","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eIn the last lesson, we learned about the Android Studio logcat, and how to record information to it using various\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods. This process is similar to using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we learned in JavaScript, but with a few expanded options and functionalities.\u003c/p\u003e\r\n\u003cp\u003eDo you remember using the JavaScript console and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Intro to Programming and JavaScript? Android studio\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoffers a feature like this to assist in tracking down bugs and other issues. It can pause code, allow us to walk through code line-by-line, check what variables are, and more.\u003c/p\u003e\r\n\u003ch2\u003eThe Android Studio Debugger\u003c/h2\u003e\r\n\u003cp\u003eSimilar in name, the Android Studio version is also called the debugger. It allows us to monitor our application in real time, and can provide additional insight regarding a connected device or emulator. Let's walk through using the debugger in Android Studio, to familiarize ourselves with this process and make future bugs easier to track down and address.\u003c/p\u003e\r\n\u003cp\u003eFirst, let's remove the two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages we added in the last lesson:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.locationTextView) TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.listView) ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                String restaurant = ((TextView)view).getText().toString();\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eBreakpoints\u003c/h2\u003e\r\n\u003cp\u003eNext, in order to pause the code at a given location, we need to add something called a breakpoint. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebreakpoint\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a language-agnostic term meaning the location at which code is intentionally paused.\u003c/p\u003e\r\n\u003ch3\u003ePlacing Breakpoints\u003c/h3\u003e\r\n\u003cp\u003eWe can insert a breakpoint (or even multiple breakpoints) where we would like our code to pause. There are several ways to add a breakpoint.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eClick the line where you would like to add a breakpoint. Then, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun \u0026gt; Toggle Line Breakpoint\u003c/em\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/tlg8h7ov9gsfkzs/debugger-toggle-breakpoint.png?raw=1\" alt=\"toggle-breakpoint\"\u003e\u003c/p\u003e\r\n\u003cp\u003eA red circle will appear directly to the left of this line of code. The area this red circle resides in is known as the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egutter\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/tth2zfkow259sms/debugger-add-breakpoint-gutter.png?raw=1\" alt=\"breakpoint-in-gutter\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo remove a breakpoint in the same fashion, we can simply select the same line, then select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun \u0026gt; Toggle Line Breakpoint\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eagain to toggle it off.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe can also simply click on the gutter to the immediate left of the line of code we'd like to add a breakpoint to. The same red circle should appear in the gutter where you clicked:\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/tth2zfkow259sms/debugger-add-breakpoint-gutter.png?raw=1\" alt=\"breakpoint-in-gutter\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eHitting Breakpoints\u003c/h3\u003e\r\n\u003cp\u003eThen, we can run our code by selecting the \"Debug\" icon at the top. This will launch our application in the emulator or connected device.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/wpzyl4lilluik72/debugger-icon.png?raw=1\" alt=\"debugger-icon\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf an emulator is not already running, this will prompt you to select an emulator or device to run the application on. Once an emulator is up and running, travel to the activity the breakpoint was placed in. When the code containing the breakpoint is executed, the application will pause, and the debugger console will appear in the lower half of the Android Studio window:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/bpd5qzxgyvp7k3q/debugger-console.png?raw=1\" alt=\"debugger-console\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eUsing the Android Debugger\u003c/h2\u003e\r\n\u003cp\u003eOnce the application is paused, we have several options. We can hover over variables to see their current values:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/yvz4f0dq96ilgvm/debugger-hover-variables.png?raw=1\" alt=\"hover-over-variables\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we click the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol on the left side of the yellow pop-over that appears when we hover over a variable, we can see further details, too:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/2oacn1byjzssqua/debugger-hover-variable-more-info.png?raw=1\" alt=\"more-variable-details\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eNavigating Through Code\u003c/h3\u003e\r\n\u003cp\u003eAdditionally, the Debugger pane will open in the lower half of the Android Studio window. The debugger contains multiple buttons for interacting with code. Here are the 10 you'll use the most:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/w7x5idkazkjgi7y/debugger-navigation-options.png?raw=1\" alt=\"debugger-navigation-options\"\u003e\u003c/p\u003e\r\n\u003ch4\u003e1. Show Execution Point\u003c/h4\u003e\r\n\u003cp\u003eThis will place the cursor back to the spot you're currently debugging. (ie: if you insert a breakpoint somewhere, look around in a few other files, you can hit this to return to your original breakpoint).\u003c/p\u003e\r\n\u003ch4\u003e2. Step Over\u003c/h4\u003e\r\n\u003cp\u003eThis advances to the next line of code\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eentering a method.\u003c/p\u003e\r\n\u003ch4\u003e3. Step Into\u003c/h4\u003e\r\n\u003cp\u003eThis will advance to the first line of code inside a method call.\u003c/p\u003e\r\n\u003ch4\u003e4. Force Step Into\u003c/h4\u003e\r\n\u003cp\u003eThis will forcibly advance to the first line of code inside a method call, if the option above does not work for any reason.\u003c/p\u003e\r\n\u003ch4\u003e5. Step Out\u003c/h4\u003e\r\n\u003cp\u003eThis advances to the next line of code\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the current method.\u003c/p\u003e\r\n\u003ch4\u003e6. Resume Program\u003c/h4\u003e\r\n\u003cp\u003eThis will continue running the app normally.\u003c/p\u003e\r\n\u003ch4\u003e7. Pause Program\u003c/h4\u003e\r\n\u003cp\u003eThis will be greyed-out at first, because the program is\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epaused. If you opt to resume the program, you may pause it again with this option.\u003c/p\u003e\r\n\u003ch4\u003e8. Stop App\u003c/h4\u003e\r\n\u003cp\u003eThis halts the running applicaiton in the emulator or device entirely.\u003c/p\u003e\r\n\u003ch4\u003e9. View Breakpoints\u003c/h4\u003e\r\n\u003cp\u003eThis will open a window that will summarize exactly which breakpoints have been inserted into what areas of your application. In addition, it will allow you to customize settings for each individual breakpoints. For instance, you can select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRemove once hit\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto automatically remove the breakpoint after it pauses your code.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLog message to console\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto include a message in the logcat when this breakpoint is hit, or add conditions, log messages, and filters.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/xd2t03bnly1yqf9/debugger-view-breakpoints.png?raw=1\" alt=\"view-breakpoints\"\u003e\u003c/p\u003e\r\n\u003ch4\u003e10. Mute Breakpoints\u003c/h4\u003e\r\n\u003cp\u003eThis is an option you can toggle on and off that will temporarily ignore other breakpoints in the code while you interact with the code in other ways (primarily stepping into/out of/through/etc.)\u003c/p\u003e\r\n\u003cp\u003eAs you can see, this is a pretty powerful tool. Begin to experiment with using the debugger in your upcoming projects, even before you experience bugs. That way, you should have a decent idea of how to use this powerful tool when you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eneed it.\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"monday-debugging-breakpoints-and-the-android-debugger"},{"id":2295,"title":"Tuesday: Mad Libs","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice gathering input from your users, passing information between intents, and using string resources. Try and implement ArrayAdapters if possible. Also, practice using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages and breakpoints, as seen in last night's homework.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between the five different log types? (v, d, i, w, e)\u003c/li\u003e\r\n\u003cli\u003eWhat is a breakpoint?\u003c/li\u003e\r\n\u003cli\u003eWhat are the two general categories testing in Android may be broken down into? What are the differences between them? Similarities?\u003c/li\u003e\r\n\u003cli\u003eWhat are the differences between Robolectric and Espresso? When do we use one versus the other?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003ch3\u003eMad Libs\u003c/h3\u003e\r\n\u003cp\u003eHave you ever played Mad Libs? Mad Libs are silly stories with some of the words missing. Without looking at the story, you are prompted to fill out a list of nouns, verbs, adjectives, etc. Then, copy them onto another piece of paper that contains a story, missing those crucial words that you are now providing. The idea is to pick bizarre words without knowing what the story is, and then when you fill them in the results can be hilarious.\u003c/p\u003e\r\n\u003cp\u003eMake an app where users can play Mad Libs. Prompt them to provide several types of words. Then, use those words to fill in the blanks of a story. Let the user clear the story and start over if they'd like.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLearn how to use the string.xml file to hold a static string array:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://alvinalexander.com/android/how-to-create-static-array-strings-in-android-xml-file\"\u003eHow to create static array string in Android XML\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eUsing the weekend homework on Robolectric and Espresso as a guide, write tests for your Mad Libs application. Make sure all tests are passing before implementing any new features. Then, write new tests for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethose\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeatures. Do not move on to additional features or functionalities until tests pass.\u003c/li\u003e\r\n\u003cli\u003eAdd multiple stories, and allow users to select the story they'd like to fill in.\u003c/li\u003e\r\n\u003cli\u003eExperiment with different input types. For example, create a field with two possible values (such as day or night, decaf or regular, etc) and use a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/ui/controls/radiobutton.html\"\u003eradio button\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app gather user input and pass it to another activity.\u003c/li\u003e\r\n\u003cli\u003eAre click listeners successfully attached to elements with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e?\u003c/li\u003e\r\n\u003cli\u003eAre the git commits clear and descriptive?\u003c/li\u003e\r\n\u003cli\u003eIs the README detailed and descriptive, with all necessary elements?\u003c/li\u003e\r\n\u003cli\u003eIs the code properly indented? Do naming conventions make sense?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-mad-libs"},{"id":961,"title":"Tuesday: ArrayAdapters - Customization","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cul\u003e\u003c/ul\u003e\r\n\u003cp\u003eNow we know how to work with the standard\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat is part of the Android package. Great! However, the standard\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereally can’t do very much - it can pull items, usually of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eout of an array, and draw a line underneath each one, but that’s about it.\u003c/p\u003e\r\n\u003cp\u003eFurther along in the course, we will learn about more powerful (and complex!) ways to efficiently show data that is part of a collection, especially data that is more structured such as an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e. But for now, let’s ease into this topic by learning about how we can customize an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e. Work through this slowly, as many of these concepts will be used extensively later on.\u003c/p\u003e\r\n\u003ch3\u003eCreate the Custom Adapter\u003c/h3\u003e\r\n\u003cp\u003eFirst, create a new Java class in the main package called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurantsArrayAdapter\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eOur custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMyRestaurantsArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will need to extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMyRestaurantsArrayAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eArrayAdapter\u003c/span\u003e \u003c/span\u003e{\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are already showing the name of the restaurant in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e. Let’s add some more information, such as a cuisine type. We'll store this information in a parallel array to keep things simple. (We could use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHashMap\u003c/code\u003e, but we'll stick with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArray\u003c/code\u003es for now.) We’ll need to pass these two bits of information (restaurants and cuisines) to our constructor, so we can use them when we output the data back to the UI. But we also need to pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e, and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresource\u003c/code\u003e. Make sure the cuisines and the restaurants can be reached via the same index (i.e they match up)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] cuisines = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Vegan Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Breakfast\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fishs Dishs\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Scandinavian\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Coffee\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"English Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Burgers\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fast Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Noodle Soups\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mexican\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"BBQ\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cuban\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Bar Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sports Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Breakfast\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mexican\"\u003c/span\u003e };\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur constructor for our adapter now looks like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMyRestaurantsArrayAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eArrayAdapter\u003c/span\u003e \u003c/span\u003e{\r\n   \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n   \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mRestaurants;\r\n   \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mCuisines;\r\n\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context mContext, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e resource, String[] mRestaurants, String[] mCuisines)\u003c/span\u003e \u003c/span\u003e{\r\n       \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(mContext, resource);\r\n       \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = mContext;\r\n       \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRestaurants = mRestaurants;\r\n       \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCuisines = mCuisines;\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Android is a term that comes up a lot, and is frequently required for many methods to run, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003es. Context, simply put, is the current state of the application or object. We need it to get information regarding our app, or other parts of our app. Depending on where you are located in your app, such as an activity class, you can access Context via different methods such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetApplicationContext()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetBaseContext()\u003c/code\u003e,\u003ccode\u003egetContext()\u003c/code\u003e, or simply falling back on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eContext\u003c/code\u003e is just another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Android, so don’t let it scare you! You can also pass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earound like any other variable, including into a constructor, like we are doing here.\u003c/p\u003e\r\n\u003cp\u003eThe resource here refers to the XML file we are using in order to display our data. We are not changing this at this time. Remember, adapters need three pieces of information, minimum:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInformation about where they are being invoked (\u003ccode\u003eContext\u003c/code\u003e),\u003c/li\u003e\r\n\u003cli\u003eInformation about which layout file they are utilizing (resource, in this case\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esimple_list_item_1\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eSome form of data storage (an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArray\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e's or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObjects\u003c/code\u003e, most likely).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eSo far so good. Our custom adapter is taking shape.\u003c/p\u003e\r\n\u003cp\u003eBecause\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMyRestaurantsArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einherits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e, we need to Override some of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e’s methods and replace them with our own custom versions. This is where we can format out output string! Getting closer.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMyRestaurantsArrayAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eArrayAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mRestaurants;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mCuisines;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context mContext, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e resource, String[] mRestaurants, String[] mCuisines)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(mContext, resource);\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = mContext;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRestaurants = mRestaurants;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCuisines = mCuisines;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        String restaurant = mRestaurants[position];\r\n        String cuisine = mCuisines[position];\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e String.format(\u003cspan class=\"hljs-string\"\u003e\"%s \\nServes great: %s\"\u003c/span\u003e, restaurant, cuisine);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.length;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOK, so let’s take a look at this weird line:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eString formattedString = String.format(\"%s \\nServes great: %s\", restaurant, cuisine);\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003eis what every list item will look like. We could concatenate with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere, but this is a good opportunity to practice String interpolation. The %s represent each value after the closing “, separated by commas. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\\n\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis how we can create a new line in Java, to make our formatting even nicer. String interpolation is a little more sophisticated than concatenating, so make sure you use it!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eWhat else?\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eCalling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom a subclass allows you to reference a method that was overridden. It also allows you to call\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe original and the overridden method from a subclass, or call the method from the superclass from within the overriding method from the subclass. If you remove this line, you'll see that Android Studio will get unhappy. But why? We need this here as we are inheriting from a class that doesn't provide a default, parameterless constructor. In these cases, you'll need to explicitly call super() from the constructor of your subclass, passing in parameters the base constructor needs.\u003c/p\u003e\r\n\u003cp\u003eWe don’t need to worry about where the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eint position\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis coming from, ArrayAdapter takes care of that under the hood.\u003c/p\u003e\r\n\u003cp\u003eSimilarly, as mentioned in the comment, we do not explicitly call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e, but we need this to be here nonetheless.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequires it, so it knows how many items to draw into the UI.\u003c/p\u003e\r\n\u003cp\u003eAlright, we are nearly done with our adapter - now we just need to change how our adapter is called.\u003c/p\u003e\r\n\u003cp\u003eJump back over to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivity.java\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere, we need to change how from invoking boring\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto invoking our cool custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMyRestaurantsArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eMyRestaurantsArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MyRestaurantsArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants, cuisines); \u003cspan class=\"hljs-comment\"\u003e// must match constructor!\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTake it for a spin, you should see something that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/ee2un6tqi6nw43k/custom_arrayadapter_complete.png\" alt=\"custom_arrayadapter_complete\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca class=\"external\" href=\"https://github.com/Vinge1718/Restaurant/tree/6_customArrayAdapters\" target=\"_blank\"\u003e\u003cspan\u003e Example GitHub Repo for MyRestaurants\u003cspan class=\"screenreader-only\"\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003c/span\u003e\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","exportId":"tuesday-arrayadapters-customization"},{"id":962,"title":"Tuesday: The Android Manifest","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eEvery app must have an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManifest.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. This file contains essential information about your app. The Android system must have this information before it can run the app's code correctly.\u003c/p\u003e\r\n\u003ch3\u003eManifest Responsibilities\u003c/h3\u003e\r\n\u003cp\u003eAmong other things, the manifest is responsible for the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eNaming the Java package for the application.\u003c/li\u003e\r\n\u003cli\u003eDescribing what components are present in the application, and under what conditions they may be launched.\u003c/li\u003e\r\n\u003cli\u003eDeclaring which permissions the application requires from the phone and its user to interact with other applications and gather information.\u003c/li\u003e\r\n\u003cli\u003eDeclaring permissions that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eothers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare required to have in order to interact with the application (For instance, an application that cannot function without access to the internet will declare in its manifest that it requires permission to access the internet.)\u003c/li\u003e\r\n\u003cli\u003eDeclaring the minimum level of Android API the app requires.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn our MyRestaurants project, the Android Manifest currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    package=\"io.github.vinge1718.restaurant\"\u0026gt;\u003cbr\u003e\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;manifest\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;application\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003exml tags are required in all Android manifests.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach activity also contains an entry in the manifest.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;action android:name=\"android.intent.action.MAIN\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edenotes which activity will start by default when the app is launched. As we can see in our manifest above, the MainActivity is set to begin automatically when the app launches.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;category android:name=\"android.intent.category.LAUNCHER\" /\u0026gt;\u003c/code\u003edenotes that this activity is the initial activity of a task, and is listed in the device's application launcher.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;intent-filter\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag denotes the types of intents an activity may receive. We can see that the lines\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;action android:name=\"android.intent.action.MAIN\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;category android:name=\"android.intent.category.LAUNCHER\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;intent-filter\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the MainActivity. This is because the act of a device opening our application is actually an Intent from the Android system, and we therefore need to instruct our app to accept these intents. (We'll learn more about intent filters later on when we cover Implicit Intents!)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor additional details, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003eApp Manifest Guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Android Developers documentation.\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eAndroid Manifest\u003c/strong\u003e: A required XML file in any Android application that defines the name of the Java package, what components are present and how they may be launched, what permissions the app requires, and the minimum level Android API required.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003eIn our MyRestaurants project, the Android Manifest currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    package=\"io.github.vinge1718.restaurant\u003cspan class=\"hljs-value\"\u003e\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003eApp Manifest Guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Android Developers documentation.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"tuesday-the-android-manifest"},{"id":963,"title":"Tuesday: App Bar, Hierarchical Parent, and Android Themes","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eThe bar with the ‘MyRestaurants’ text at the top of our app is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eApp Bar\u003c/strong\u003e, App Toolbar, or Action Bar. It is a toolbar used for branding, navigation, search, and actions. Now that we have multiple activities to travel between, let's add some additional navigational functionality to this app bar. When we travel from our MainActivity to our RestaurantsActivity, we should also be able to navigate\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the MainActivity using the App Bar.\u003c/p\u003e\r\n\u003ch2\u003eThe Android Manifest\u003c/h2\u003e\r\n\u003cp\u003eTo do this, we will need to make the MainActivity the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehierarchical parent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof our RestaurantsActivity. This informs our application that RestaurantsActivity is a \"child\" of MainActivity (essentially, that RestaurantsActivity should be accessed by travelling\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethrough\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eMainActivity).\u003c/p\u003e\r\n\u003cp\u003eWe'll open our project's Android Manifest and add the following meta-data to the RestaurantsActivity entry in the manifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eapp/manifests/AndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.PARENT_ACTIVITY\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:value\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eMeta-data\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply data\u003cspan\u003e \u003c/span\u003e\u003cem\u003eabout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata. In this case, we've provided additional data about RestaurantActivity by declaring MainActivity as its hierarchical parent. Declaring MainActivity as the parent of RestaurantActivity will allow our App Bar to contain a button that can navigate back to MainActivity from RestaurantActivity!\u003c/p\u003e\r\n\u003ch2\u003eThe Up Button\u003c/h2\u003e\r\n\u003cp\u003eIf we launch our application and visit our RestaurantsActivity we can see a new arrow button on the left side of the app bar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/evtozrv0v9j1psz/hierarchical_parent_in_app_bar.png?raw=1\" alt=\"up-button-hierarchical-parent-myrestaurants\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eup button\u003c/strong\u003e. It is used to navigate within an app based on the hierarchical relationships between screens. Within our manifest we established that MainActivity is the hierarchical parent of RestaurantsActivity. Therefore, this button will navigate from RestaurantsActivity to its hierarchical parent MainActivity when clicked. (But since MainActivity doesn’t have a hierarchical parent, it won't have an up button.)\u003c/p\u003e\r\n\u003cp\u003eAdditionally know that the up button differs from the device's back button. The back button is used to reverse the chronological order of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003escreens the user has recently visited. This includes traveling between different apps, or the home screen.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003eup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton only navigates to the parent of the current screen\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithin the application\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch2\u003eRemoving the App Bar and Android Themes\u003c/h2\u003e\r\n\u003ch3\u003eApplication-Wide Themes\u003c/h3\u003e\r\n\u003cp\u003eBut, what if we didn’t want an App Bar\u003cspan\u003e \u003c/span\u003e\u003cem\u003eat all\u003c/em\u003e? The App Bar in our MainActivity does not have any functionality. Instead, it simply displays the name of the application. This is alright, but our MainActivity's layout\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edisplays the application name in a nice, custom font.\u003c/p\u003e\r\n\u003cp\u003eIf we revisit the manifest, we see the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:theme=@style/AppTheme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epoints to a pre-existing theme inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyle \u003c/em\u003efile in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalues\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder within in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. If we navigate to this file, we can change this theme's parent theme from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDarkActionBar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNoActionBar\u003c/em\u003e. These are two of the many built-in themes in Android.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will remove the App Bar from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the activities in our app. We can save this change and run our application in the emulator to see the result:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/x9t4nzqdmbi7odx/no-app-bar-example.png?raw=1\" alt=\"no-app-bar-example\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eActivity-Specific Themes\u003c/h3\u003e\r\n\u003cp\u003eIt's valuable to know how to apply a theme to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eentire\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapp in this fashion. However, in the case of our App Bar, we really only want to remove it from the MainActivity where it's unnecessary. We still want our App Bar and its up button present in our RestaurantsActivity. Let's create a new theme that inherits from the built-in NoActionBar theme, and apply it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the Main Activity.\u003c/p\u003e\r\n\u003ch4\u003eCreating a Theme\u003c/h4\u003e\r\n\u003cp\u003eFirst, we'll create a new theme within\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name it ''NoActionBarTheme\". We'll also give this new theme a parent value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTheme.AppCompat.Light.NoActionBar\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.DarkActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"NoActionBarTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we wanted to add additional styles to this theme, we could do so within these\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eXML tags. For example, we can see the colors we previously defined in the theme preceding this one. However, we'll stick to simply removing that app bar in this lesson. Feel free to experiment with themes on your own!\u003c/p\u003e\r\n\u003ch4\u003eApplying a Theme\u003c/h4\u003e\r\n\u003cp\u003eNow we need to apply this theme to our MainActivity and\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eour MainActivity. Back in the Android Manifest, add our ‘NoActionBarTheme’ to MainActivity's entry, like so:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/NoActionBarTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run the app again the app bar should\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eappear on the RestaurantsActivity. Perfect!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/7_appBar_Nav\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAndroid manifest\u003c/strong\u003e: File that presents essential information about an application , such as package name, component details, minimun level of API required to the Android system.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eApp bar\u003c/strong\u003e: A toolbar used for branding, navigation, search and actions; also known as the App toolbar or Action bar.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eHierarchical relationship\u003c/strong\u003e: A relationship between one screen and another that is navigated in \"up\" and \"down\" levels of parent and child. Example: the MainActivity is the hierarchical parent of the RestaurantsActivity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMetadata\u003c/strong\u003e: Data about other data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eUp button\u003c/strong\u003e: Used to navigate within an app based on the hierarchical relationships between screens. A 'child' view will contain an up button back to its hierarchical parent.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cdiv class=\"filename\"\u003eapp/manifests/AndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.PARENT_ACTIVITY\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:value\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis XML establishes MainActivity as the hierarchical parent of RestaurantsActivity in the Android Manifest.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis applying the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoActionBar\u003c/code\u003etheme to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eentire\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapplication.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.DarkActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"NoActionBarTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new theme called \"NoActionBarTheme\" that inherits from the built-in NoActionBar theme.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/NoActionBarTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can apply specific themes defined in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/values/styles.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto specific activities in the activity's entry of the Android Manifest.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/7_appBar_Nav\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"tuesday-app-bar-hierarchical-parent-and-android-themes"},{"id":964,"title":"Tuesday: View.OnClickListener Interface","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eCurrently, we are creating a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor our findRestaurantsButton, like so:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, eventually we'll add another button to take the user to an account registration page. This second button will need its own\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etoo! And we'll need a sign-in button for the user to log in once they create an account. That will also need its own \u003ccode\u003eView.onClickListener\u003c/code\u003e! And what if we wanted to add a link to an About page? Yep! You guessed, it, we'd need\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother \u003c/em\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e! All of these listeners would confound our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod! Not to mention that our code would be redundant and difficult-to-follow.\u003c/p\u003e\r\n\u003cp\u003eThankfully, there's a way we can refactor. Instead of creating a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor each individual button, let’s implement something called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface. The interface is more reusable, and will result in much cleaner code.\u003c/p\u003e\r\n\u003ch2\u003eInterfaces\u003c/h2\u003e\r\n\u003cp\u003eBut what's an interface anyway? Before we begin, let's explore interfaces in general. While Android uses interfaces, they're certainly not Android-specific. They're not even specific to Java. Interfaces are a concept used in many programming languages, including C#, Visual Basic, Python, Java, PHP, and Swift.\u003c/p\u003e\r\n\u003cp\u003eIn simple terms, an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einterface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a group of methods multiple different classes may inherit.\u003c/p\u003e\r\n\u003cp\u003eFor instance, say we had an interface called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e {\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e; \r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e;  \r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface contains two methods: One for making a happy noise, and one for making an angry noise. Now, we know\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethings are capable of being noisy. So,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclasses can implement this interface. For instance, an Elephant could be pretty noisy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eElephant\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"rumble\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"trumpet\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a Dog can be pretty loud, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"growl\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"bark\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, despite both\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eElephant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclasses implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einterface with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame \u003c/em\u003emethods, Dogs and Elephants make\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enoises; so the interface's methods are personalized to each animal's class.\u003c/p\u003e\r\n\u003cp\u003eInterfaces allow us to separate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea class does (make angry noises, for instance) from\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit does it (either rumbling or. growling, depending on the animal).\u003c/p\u003e\r\n\u003ch3\u003eRules for Interfaces\u003c/h3\u003e\r\n\u003cp\u003eThere are several rules to consider when creating and using interfaces:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInterface methods can only be public (and are by default).\u003c/li\u003e\r\n\u003cli\u003eMember variables can only be public, static, and final (and are by default).\u003c/li\u003e\r\n\u003cli\u003eA class must implement\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods of an interface, unless the class is declared as abstract. That means, using the example above, any other People or Animal classes that implement the interface\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust have methods for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehappyNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eangryNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefined in their class.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFor more information, read the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html\"\u003eOracle documentation on Creating Interfaces\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eBuilt-In Android Interfaces\u003c/h2\u003e\r\n\u003cp\u003eIn the example above, we created a rudimentary\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface from scratch. However, Android comes with many of the most commonly-used interfaces built right in! The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis one of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/view/View.html#nestedclasses\"\u003emany interfaces\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eincluded in Android's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003ch3\u003eImplementing an Interface\u003c/h3\u003e\r\n\u003cp\u003eOur MainActivity should currently look something like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo begin using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface, we'll first need to provide the class access to it. We do this by adding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimplements View.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the end of the class declaration, like so:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimplements\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a keyword specific to interfaces, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eextends\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(also seen here) is used to inherit classes. Whenever we add an interface, we always use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimplements\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAs soon as you add this, Android Studio will immediately underline this line in red, and present you with the following error message:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/oog7um305mu7y91/error-implementing-click-listener-interface.png\" alt=\"android-studio-error-on-click-listener\"\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember, the rules for implementing interfaces we just covered? A class must implement\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods of an interface, unless the class is declared as abstract. Therefore, we will need to include every method in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface here in our MainActivity. If we check the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/view/View.OnClickListener.html\"\u003edocumentation for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewe can see that it only has\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may notice that our MainActivity actually already has an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod; but it's not part of the class! It's currently nested in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e. Let's move it outside of this method:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        String location = mLocationEditText.getText().toString();\r\n        Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n        intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n        startActivity(intent);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, instead of creating individual click listeners for anything clickable, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003einterface is available to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eentire class\u003c/em\u003e. Therefore, when we attach a listener to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e, we can pass the current context as an argument:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton.setOnClickListener(this);\u003c/code\u003e, because the current context (MainActivity) now includes the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit requires.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, because the interface applies to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhole class\u003c/em\u003e, its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will be called whenever\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclick listener is triggered. So, let's include a conditional that will execute different code depending on\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis clicked:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, as we add more links and buttons we can simply call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.setOnClickListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003eelement we'd like to attach a click listener to, and add another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003emethod. Awesome!\u003c/p\u003e\r\n\u003cp\u003eFrom now on, we'll implement our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListeners\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this fashion.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInterface\u003c/strong\u003e: A group of methods multiple different classes may inherit. They allow us to separate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea class does from\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit does it.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003ch3\u003eInterface Rules\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInterface methods can only be public (and are by default).\u003c/li\u003e\r\n\u003cli\u003eMember variables can only be public, static, and final (and are by default).\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA class must implement\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods of an interface, unless the class is declared as abstract. That means, using the example above, any other People or Animal classes that implement the interface Noisy must have methods for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehappyNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eangryNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefined in their class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eimplements\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a keyword specific to interfaces, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eextends\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(also seen here) is used to inherit classes. Whenever we add an interface, we always use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimplements\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003ch3\u003eInterfaces\u003c/h3\u003e\r\n\u003cp\u003eFor instance, say we had an interface called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e {\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e; \r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e;  \r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface contains two methods: One for making a happy noise, and one for making an angry noise. Now, we know\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethings are capable of being noisy. So,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclasses can implement this interface. For instance, an Elephant could be pretty noisy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eElephant\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"rumble\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"trumpet\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a Dog can be pretty loud, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"growl\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"bark\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, despite both\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eElephant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclasses implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einterface with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003emethods, Dogs and Elephants make\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enoises; so the interface's methods are personalized to each animal's class.\u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants MainActivity Refactored with View.OnClickListener\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information, read the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html\"\u003eOracle documentation on Creating Interfaces\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid provides a number of built-in interface elements such as the onClickListener. To learn more, check out this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/ui/index.html\"\u003elink to the Android Developers site\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-view-dot-onclicklistener-interface"},{"id":1055,"title":"Wednesday: White Board Interview Practice","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box","graded":true,"pointsPossible":12.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\r\n\u003cp\u003e\u003cspan\u003eTake time this morning and split into groups of 5. You will be practicing for white board interviews that will be touched on more during your project period. Pick one of you to take the mock white board interview, set a toy problem for them to go through, and at the end use the rubric below to grade and give feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"i519bb3452e8371f2e176b2c0482edc8c"},{"id":965,"title":"Wednesday: Creating a GridView with a Custom Layout ","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eWarm Up\u003c/h1\u003e\r\n\u003cdiv\u003e\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDescribe how the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks to generate items in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eWhy is ButterKnife worth implementing in your projects? What does it do?\u003c/li\u003e\r\n\u003cli\u003eWhat is an annotation in Java?\u003c/li\u003e\r\n\u003cli\u003eIn terms of testing, what is a 'shadow'? When and why are they used?\u003c/li\u003e\r\n\u003cli\u003eHow do we interact with data in an adapter?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eBy now, the concept of an adapter should start feeling familiar: When we have a collection of data, we need some way to bind single instances of that data to a layout. Even though we previously customized our ArrayAdapter, and changed the way data is displayed through\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString.format()\u003c/code\u003e, we still used a standard resource that is part of the Android package, namely\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esimple_list_item_1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display our data, which works fine for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etypes, but doesn’t cut the mustard for more complex data types.\u003c/p\u003e\r\n\u003cp\u003eIf we have an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOrange[]\u003c/code\u003e, then we need to have something that can visually represent an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOrange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand all the properties we define an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOrange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas having. In order to represent more complex data, we’ll need to create a custom adapter and a custom layout file - things can get complicated quickly, and we’ll tackle this in full next week.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/vgzhim65pwne6mm/app_object_overview.png\" alt=\"app_object_overview\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSo, let’s start simple - let’s create a gridview, fill it with some data, and style that data with a custom typeface to get our feet wet. This exercise is simple, but will teach you work with custom layouts, custom adapters, and passing information to a custom adapter.\u003c/p\u003e\r\n\u003ch3\u003eIntroduction to GridView\u003c/h3\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGridView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just that - it is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat represents data in a two-dimensional scrolling grid. The items in the grid come from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eassociated with this View. Because a GridView gets its data from a ListAdapter, the only data loaded in memory will be the one displayed on screen. GridViews, much like ListViews reuse and recycle their views for better performance.\u003c/p\u003e\r\n\u003cp\u003eGridLayouts are like LinearLayouts or RelativeLayouts - they organize data on the screen in a grid format. But what they do not do is allow for scrolling, and they do not perform memory management tasks for us. Please don’t try and show images in a GridView or GridLayout until you have a better handle on memory management for Images (see our topics on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#weekend-one.html\" target=\"_blank\"\u003ePicasso\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethis coming weekend), otherwise you will almost certainly have an app that crashes consistently with an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOut Of Memory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eerror, or performs very sluggishly.\u003c/p\u003e\r\n\u003cp\u003eIn this example, we’re going to simply display an alphabet on the screen in a grid, as we might do if we were making an app for kids to learn the alphabet.\u003c/p\u003e\r\n\u003cp\u003eWe’ll style different views with different fonts to differentiate our views.\u003c/p\u003e\r\n\u003cp\u003eLet’s get started!\u003c/p\u003e\r\n\u003ch3\u003eSetup\u003c/h3\u003e\r\n\u003cp\u003eFirst, let’s make a new project in Android Studio using all the standard settings, and choosing “Empty Activity” as our first activity. Name your app and package name whatever you like, but let’s keep the main activity called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto keep things consistent.\u003c/p\u003e\r\n\u003cp\u003eWhen you’re done, jump over to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Let’s write out our alphabet first. Let’s use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString[]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas we did before to hold our letters.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n         GridView gridView;\r\n         String[] letters = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\r\n                 \u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"B\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"C\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"D\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"E\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"F\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"G\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"H\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"I\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"J\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"K\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"L\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"M\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"N\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"O\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"P\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Q\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"R\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"S\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"T\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"U\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"V\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"W\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"X\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Y\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Z\"\u003c/span\u003e};\r\n         \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n         \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n             \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n             setContentView(R.layout.activity_main);\r\n         }\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eCool. That was easy!\u003c/p\u003e\r\n\u003ch3\u003eMaking our Custom Layout\u003c/h3\u003e\r\n\u003cp\u003eTime to make a simple layout that can handle our alphabet display. Our layout will be comprised of two files:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe container, a RelativeLayout that holds our GridView (this will live in the XML for our MainActivity)\u003c/li\u003e\r\n\u003cli\u003eThe individual grid \"item\" - the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat get repeated as many times as necessary inside our GridView. (this will live in a separate file.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eJump over to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e. In here, you should see nothing but a simple TextView, stating “Hello World!” Let’s make the following adjustments:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity\\_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\r\n      \u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/activity_main\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_vertical_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_horizontal_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_horizontal_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_vertical_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myapplication.MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Learn the Alphabet\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/headerTextView\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eGridView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:columnWidth\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"50sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:numColumns\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"auto_fit\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:stretchMode\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"spacingWidthUniform\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/baseGridView\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"left\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:scrollingCache\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"40sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you switch to design view, you should see some placeholder text (don't worry about that for now!) displayed in a grid. That’ll be all we need to do with our GridView for now.\u003c/p\u003e\r\n\u003ch3\u003eStyling our Grid Item\u003c/h3\u003e\r\n\u003cp\u003eNow we need to make the layout that will handle our individual alphabet items. We’ll connect the two in a second step shortly, telling the GridView to load the XML for the GridItem for each alphabet letter.\u003c/p\u003e\r\n\u003cp\u003eLet’s right click on the res folder and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Layout Resource File\u003c/em\u003e. Leaving the layout type as LinearLayout is fine.\u003c/p\u003e\r\n\u003cp\u003eThis is the XML you want to end up with:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote: While you can, of course, tweak the layout, you’ll definitely want to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAVOID\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehaving your letters require scrolling. If they do, the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eposition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(more on that soon) will not correctly retrieve values from your arrays. I am working on a solution for this, but for now, please format your letters that they fit all on one screen.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ealphabet_grid_item.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/grid_item_label\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.8\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Letter\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/grid_item_letter\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe’ll populate this with dynamic data soon. Just a few more steps, then we can test our app!\u003c/p\u003e\r\n\u003ch3\u003eMaking our Custom Adapter\u003c/h3\u003e\r\n\u003cp\u003eNow let’s get a start on making our custom adapter. Create a new class in your main package, name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlphabetAdapter\u003c/em\u003e. Make AlphabetAdapter extend BaseAdapter. We’ve done this before, so if you’re unsure, go back and review how to do this from the Customizing ArrayAdapters\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-arrayadapters-customization?module_item_id=iadd2d63a9971a01d0bb6dd95ea9de1dd\"\u003elesson\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eSimilarly to our customized ArrayAdapter, AlphabetAdapter needs to have some member variables. We’ll definitely need a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere, as well as our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString[]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat we are passing in from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe’ll also need a constructor.\u003c/p\u003e\r\n\u003cp\u003eThis’ll work:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e      \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBaseAdapter\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mLetters;\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-params\"\u003e(Context context, String[] letters)\u003c/span\u003e\u003c/span\u003e{\r\n             \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = context;\r\n             \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLetters = letters;\r\n         }\r\n      }    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut then we see:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/g2p2gs9f9tz121l/adapter-constructor-no-overrides.png\" alt=\"adapter-constructor-no-overrides.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow we still have a angry, red squiggly line - if we hover over it, we might see that we need to implement a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e. This should be familiar from customizing our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e. Remember: Any time we extend a class, we agree that we will implement that class' required methods - Android Studio will stay angry at us until we deliver on our responsibilities.\u003c/p\u003e\r\n\u003cp\u003eLet’s let the IDE do some busywork for us. Right click inside the class, select generate, then choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOverride Methods…\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand select all 4 methods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.widget.Adapter package\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemId()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetView()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eSome boilerplate code appears, and red squiggly lines (should) disappear. Boilerplate code is a term you'll hear frequently, so be sure to know what it refers to. Boilerplate is no frills, bare minimum code that is either a.) supplied to you, the developer, via a website, template file or some other form of documentation, or auto-generated by an application such as a Command Line Interface (CLI) or IDE (Integrated Development Environment - memorize these). It's represents a starting point for us, but almost always needs to be edited extensively so that it provides relevant functionality to our app.\u003c/p\u003e\r\n\u003cp\u003eAs you may now expect, so far all the boilerplate code returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e. Not super interesting or useful.\u003c/p\u003e\r\n\u003cp\u003eLet’s make some changes.\u003c/p\u003e\r\n\u003cp\u003eWe’ll leave\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemId()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealone for now - we need to implement them, but don’t need to customize them at the moment. First, let’s change\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e. We’ll want to return the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.length\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLetters\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray, so make\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturn that instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis necessary so that our app knows how many times the GridView should repeat the Grid Item.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003egetView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis where we’ll want to connect our layout with our grid items. Let’s do that now.\u003c/p\u003e\r\n\u003cp\u003eHere’s where we should arrive.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e      \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBaseAdapter\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mLetters;\r\n         \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-params\"\u003e(Context context, String[] letters)\u003c/span\u003e\u003c/span\u003e{\r\n              \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = context;\r\n              \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLetters = letters;\r\n          }\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLetters.length;\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetItemId\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003egetView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position, View convertView, ViewGroup parent)\u003c/span\u003e \u003c/span\u003e{\r\n         LayoutInflater inflater = (LayoutInflater) mContext\r\n                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n         View gridView;\r\n         \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (convertView == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n             \u003cspan class=\"hljs-comment\"\u003e// get layout from xml file\u003c/span\u003e\r\n             gridView = inflater.inflate(R.layout.alphabet_grid_item, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n                 \u003cspan class=\"hljs-comment\"\u003e// pull views\u003c/span\u003e\r\n                 TextView letterView = (TextView) gridView\r\n                         .findViewById(R.id.grid_item_letter);\r\n                 \u003cspan class=\"hljs-comment\"\u003e// set values into views\u003c/span\u003e\r\n                 letterView.setText(\u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// using dummy data for now\u003c/span\u003e\r\n             } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                 gridView = (View) convertView;\r\n             }\r\n             \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gridView;\r\n         }\r\n      }    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTake the time to go through this and try and understand what we are doing here, step by step.\u003c/p\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod contains some code and arguments we haven’t seen before:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eConvertView\u003c/strong\u003e: If a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConvertView\u003c/code\u003e, it is actually a View that can be converted to a new View, which means new content can get written into the fields contained in said View. What? Why would this be necessary? Well - let’s say you have a list of 150 things to display, but only 10 fit on the screen at any given time. We’re going to start our list at the very top, with the 0th item. As we scroll down, the view that was in the 0th place is now off the screen, and can now be removed from the app’s memory storage, until we start to scroll back up again. When we start our list, the convertView is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e, and therefore we need to start building our list from our layout. If it’s not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e, then the layout already got built, as some scrolling happened. Makes sense! ConvertView is important for your app’s performance.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eLayoutInflater, Viewgroups\u003c/strong\u003e: We’ll get more into this a little later, but for now it’s enough to know that the Views belong to a Viewgroup. This is how we know which views belong to the unit that gets repeated inside of the layout, and this Viewgroup gets\u003cspan\u003e \u003c/span\u003e\u003cem\u003einflated\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith data. Inflating is the process of sorting out which data goes where. Imagine a truck of groceries arriving at a supermarket. Each item in the truck belongs somewhere in the store. Someone has to determine what goes where, someone who knows what the aisles and departments look like, where the store ends, and how big it is. That person needs to issue instructions to the store’s workers, ensuring they know how to place the goods in the correct locations. Part of this process is the LayoutInflater’s job when it aids in correctly matching data to layout.\u003c/p\u003e\r\n\u003ch3\u003eInvoking our Custom Adapter in MainActivity\u003c/h3\u003e\r\n\u003cp\u003eNow all we need to do is invoke our adapter inside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e, and we can test our app. Place this code in your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetContentView(R.layout.activity_main);\u003c/code\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n      gridView = (GridView) findViewById(R.id.baseGridView);\r\n      gridView.setAdapter(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AlphabetAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, letters));\r\n...    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we are writing the whole GridView into one variable - including the views that will end up getting nested inside it. Then we need to a.) make a local copy and b.) connect that with the GridView, feeding it the correct arguments so the constructor can run boot up an object.\u003c/p\u003e\r\n\u003cp\u003eRun your app - and congrats! You should see the a GridView on the screen - repeating the letter A over and over again. Now you can tweak your layout if you’d like to make any changes.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/5advbkikfnj0ua8/gridview-dummydata.png\" alt=\"gridview-dummydata\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eMaking our Data Dynamic\u003c/h3\u003e\r\n\u003cp\u003eOnce our dummy data is up and running, we can use position variable to retrieve\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003es from the letters array - just like we did in the customized\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHead back over to your adapter, and try and see if you can implement that logic now.\u003c/p\u003e\r\n\u003cp\u003eWhen you are done, you should see something like this when your app runs:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/l3co78ojbjua89e/gridview-dynamic-data-no-typeface.png\" alt=\"gridview-dynamic-data-no-typeface\"\u003e\u003c/p\u003e\r\n\u003cp\u003eGood stuff!\u003c/p\u003e\r\n\u003cp\u003eSo far so good, we have a custom adapter and a custom layout. Now, let’s add the finishing touches and learn how to apply a different TypeFace to a View that is not directly referenced in an activity’s XML file, but instead nested inside of a view.\u003c/p\u003e\r\n\u003cp\u003eIf you take a look back at the first Custom Fonts\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#01.html\"\u003elesson\u003c/a\u003e, you’ll see that we were able to run get\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCreateFromAssets()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, retrieve the typeface, then apply it to a view inside of our activity’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eBut the view that we are looking to style is not accessible in the same way here - we cannot directly reference it in the MainActivity, as the Views are part of the GridView’s custom layout. Oh no!\u003c/p\u003e\r\n\u003cp\u003eAnd if we try and apply a font to the whole\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGridView\u003c/code\u003e, or call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCreateFromAssets()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the adapter, we’ll see that this won’t work either, as this method only runs inside of an Activity, not an Adapter. Dang.\u003c/p\u003e\r\n\u003cp\u003eBut there is a solution. Since we wrote the our adapter ourselves, including a new constructor - there is no reason why we can’t pass the Typeface we want to use to the Adapter as an argument to the constructor, and then apply it inside the adapter when the views are bound! This is great! We can pass all kinds of information around through constructors. This will be super useful later on.\u003c/p\u003e\r\n\u003cp\u003eHere’s how:\u003c/p\u003e\r\n\u003cp\u003eFirst, let’s download a font (.ttf please!) we like from FontSquirrel or\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.dafont.com/\"\u003eDaFont.com\u003c/a\u003e, and place it in the assets/fonts folder as we have done previously. Refer back to the earlier lesson if you are unsure how to do this correctly.\u003c/p\u003e\r\n\u003cp\u003eOnce that is completed, return back to your adapter and create a new member variable, called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emTypeface\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mLetters;\r\n      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Typeface mTypeface; \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEdit your constructor and your parameter list accordingly.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-params\"\u003e(Context context, String[] letters, Typeface typeface)\u003c/span\u003e\u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = context;\r\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLetters = letters;\r\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mTypeface = typeface;\r\n      }    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s move down to where the text for the view is set, and we can now apply our new typeface.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// set values into views\u003c/span\u003e\r\n      letterView.setText(mLetters[position]);\r\n      letterView.setTypeface(mTypeface);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let’s return back to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e, where we can now pull in our Typeface from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets/fonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and pass it to our adapter as an argument to the constructor.\u003c/p\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, let’s declare and initialize a new variable of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTypeface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype that can hold our typeface.\u003c/p\u003e\r\n\u003cp\u003eNow, all we need to do is to pass this typeface to our adapter through our constructor. Run your app and see your typeface show up in your super custom layout.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n         \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n             \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n             setContentView(R.layout.activity_main);\r\n             Typeface typeface = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/musicnet.ttf\"\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e//change\u003c/span\u003e\r\n             gridView = (GridView) findViewById(R.id.baseGridView);\r\n             gridView.setAdapter(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AlphabetAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, letters, typeface));\r\n         }\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/sxnksguo0nzdq4v/gridview-final-dynamic-typeface.png\" alt=\"gridview-final-dynamic-typeface\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAwesome! While the final result may not seem all that spectacular, you successfully learned to further enhance your apps with custom adapters, custom layouts, and to pass important data to your nested views via adapters and their constructors. Nice job!\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"wednesday-creating-a-gridview-with-a-custom-layout"},{"id":966,"title":"Wednesday: Boggle Solitaire","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eBoggle Solitaire\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal for today is to practice using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es to display lists of data.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eBoggle Solitaire\u003c/h3\u003e\r\n\u003cp\u003eAre you familiar with the game\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Boggle\"\u003eBoggle\u003c/a\u003e? Players write down words using the letters that appear after rolling lettered dice. Create an app that allows users to play a solitaire version of this game. The gameplay should function like this:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour app randomly generates a string of 8 letters.\u003c/li\u003e\r\n\u003cli\u003eThis string should always contain at least two vowels.\u003c/li\u003e\r\n\u003cli\u003eThe user enters a word that contains at least three of these randomly generated letters.\u003c/li\u003e\r\n\u003cli\u003eYour app confirms that at least three of these randomly generated letters are included in the user's word.\u003c/li\u003e\r\n\u003cli\u003eThe user's word is then added to an array and displayed in a ListView at the end of each round (Hint: use intent extras).\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eDon't forget to use the \u003ccode\u003e.equals()\u003c/code\u003e method if you are comparing String objects!\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement tests for the features listed above. When those tests successfully pass, write tests for the new features you intend on adding. Make sure they fail appropriately,\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einclude code to make them pass. Continue this process for each and every additional feature you add.\u003c/li\u003e\r\n\u003cli\u003eUse a timer to limit the time your users have to complete each round:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/os/CountDownTimer.html\"\u003eCountDownTimer\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eAllow users to scramble the randomly generated string of 8 letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app contain all of the required functionality?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eintegrated correctly?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eIs information being passed between activities successfully?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"wednesday-boggle-solitaire"},{"id":2293,"title":"Wednesday: Using a Builder Class to Create a Dialog (Optional Further Exploration)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eIn the main lesson on DialogFragments, we explored creating a DialogFragment with a custom layout, overriding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to do so. This is a common (and useful) way to interact with your users. Not every DialogFragment needs a custom layout, however, especially if you don't have to interact with its views. In many cases, it will suffice to have a title, a short text, and a yes/no button confirmation:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/soc0jkmofw4x2u9/dialog-builder-standard.png\" alt=\"dialog-builder-standard.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFor this dialog, I supplied no unique layout but instead built it with a Builder. The Builder design pattern is very common and is essentially a way to build a complex object utilizing other subobjects and helper methods.\u003c/p\u003e\r\n\u003ch3\u003eIntroducing: Builder Classes\u003c/h3\u003e\r\n\u003cp\u003eVery briefly, let’s say we have an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject type (yes, I know that this is an unscientific term. Bear with me - get it?). Now let’s say that we wanted to build an instance. But what kind of animal? Animals vary so incredibly widely - from habitat to size to number of appendages to diet to lifespan to reproduction and a million other ways. Consider the difference between a duck and a spider. Both are animals in the broadest sense. But a lot of data that might have a property for spider (say: venomous = true) is impossible to map onto the properties of a duck, because they are quite profoundly different. Now if we add in the difference between chimpanzee and an owl, or a blue whale and a termite, then the complexity of difference becomes pretty boggling. There would be about a million properties that might be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor many of the potential\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003es we might build.\u003c/p\u003e\r\n\u003cp\u003eOne solution would be to write many different constructors in order to build any possible kind of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e, but that becomes inefficient very quickly. We also don't want a ton of different constructors clogging up our code. Protecting against code rot (imagine adding a new global property, say \"endangered\" that wasn't present in the original spec to all of those constructors...!) would be a nightmare. We need a better way.\u003c/p\u003e\r\n\u003cp\u003eIf the above example is too cerebral for you, imagine the builder as sandwich maker. You tick all the appropriate boxes on your order form: bread type, meat, cheese, condiments - and the sandwich maker makes it according to your specs. You can leave out the meat, even leave out the toppings if you like, the sandwich maker still knows how to make you a meal.\u003c/p\u003e\r\n\u003cp\u003eA builder class further abstracts the process of creating complex Objects for us, and we don’t worry too much about how it’s done.\u003c/p\u003e\r\n\u003cp\u003eThere are many articles online on the topic of builders, but if you are looking for a primer, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://jlordiales.me/2012/12/13/the-builder-pattern-in-practice/\"\u003ethis article\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eby Jose Luis Ordiales. It’s quick and easy to follow.\u003c/p\u003e\r\n\u003ch3\u003eHow to Implement a Builder\u003c/h3\u003e\r\n\u003cp\u003eLet’s take a first look at the code I wrote to create the dialog above.\u003c/p\u003e\r\n\u003cp\u003eHere is my class:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMoodDialogFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDialogFragment\u003c/span\u003e\u003c/span\u003e{\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Dialog \u003cspan class=\"hljs-title\"\u003eonCreateDialog\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n       AlertDialog.Builder builder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AlertDialog.Builder(getActivity());\r\n       builder.setTitle(\u003cspan class=\"hljs-string\"\u003e\"Dialog via Builder\"\u003c/span\u003e);\r\n       builder.setMessage(\u003cspan class=\"hljs-string\"\u003e\"Would you like to take a survey?\"\u003c/span\u003e);\r\n\r\n       builder.setPositiveButton(\u003cspan class=\"hljs-string\"\u003e\"Yes\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e DialogInterface.OnClickListener() {\r\n           \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DialogInterface dialog, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e which)\u003c/span\u003e \u003c/span\u003e{\r\n               dismiss();\r\n           }\r\n       });\r\n\r\n       builder.setNegativeButton(\u003cspan class=\"hljs-string\"\u003e\"Nope\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e DialogInterface.OnClickListener() {\r\n           \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DialogInterface dialog, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e which)\u003c/span\u003e \u003c/span\u003e{\r\n               dismiss();\r\n           }\r\n       });\r\n       \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e builder.create();\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSuper short, super concise. Perfect.\u003c/p\u003e\r\n\u003cp\u003eLet’s go through this briefly.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirst\u003c/strong\u003e, I make a new builder object that is knowledgeable in the art of building AlertDialogs and their variants:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eSecond\u003c/strong\u003e, I use some simple methods with supplied arguments to affect how the builder builds the object when I finally tell it to start building. These methods are predefined in the builder class - check\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/AlertDialog.Builder.html\"\u003ethis reference\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see a complete list of available methods.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThird\u003c/strong\u003e, I define some actions I want to take when a button is clicked - these take the form of callbacks (try and read them as if they were jQuery if you are having trouble understanding how they work.) I can set positive, negative, and neutral buttons.\u003c/p\u003e\r\n\u003cp\u003eWhen I’m done setting my settings, all I need to do is tell the builder to “go build!” and it will craft me a dialog window that is exactly how I set it up to be. Nice!\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"wednesday-using-a-builder-class-to-create-a-dialog-optional-further-exploration"},{"id":2922,"title":"Wednesday:Working with Constraint Layouts","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eEarlier in the course we discussed the constraint layouts that Android Studio 2.2+ creates by default for new activities. We also addressed how to turn them back into Relative layouts, so we could practice standard layouts too. But now that we're growing more and more comfortable with layouts and XML in general, let's explore the newer constraint layout options too.\u003c/p\u003e\r\n\u003ch2\u003eIntroduction to Constraint Layouts\u003c/h2\u003e\r\n\u003cp\u003eFirst, a little context: The constraint layout library was released with Android Studio 2.2\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://tools.android.com/recent/constraintlayout10isnowavailable\"\u003ein February 2017\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eConstraintLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003egets its name from the constraints it uses to position items. In terms of Android layouts, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econstraint\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a rule for a view within a layout. It declares\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe element should be positioned on the screen; including its relative alignment to other layout elements.\u003c/p\u003e\r\n\u003cp\u003eBy declaring constraints for view elements, developers can more readily create large, complex layouts with a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eflat view hierarchy\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(this means layout elements are not nested within one another, as they are in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eReducing the number of elements nested within one another reduces load time, as explained in this in-depth article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/topic/performance/rendering/optimizing-view-hierarchies.html\"\u003ePerformance and View Hierarchies\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAndroid Studio versions 2.2 and above also include a special layout editor to assist in the creation of these constraint layouts (we'll see what this editor looks like in the videos below).\u003c/p\u003e\r\n\u003ch3\u003eConstraint Versus Relative Layouts\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eBut what's the difference between the new \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eConstraintLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e and the \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e we've discussed in \u003c/span\u003e\u003ca href=\"pages/pre-course-work-creating-a-basic-layout?module_item_id=i39097043baea41b6d7a6f8b8c204f330\"\u003eprevious lessons\u003c/a\u003e?\u003c/p\u003e\r\n\u003ch4\u003eFlat Versus Deep View Hierarchies\u003c/h4\u003e\r\n\u003cp\u003eAs we just touched on, a constraint layout is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eflat view hierarchy\u003c/strong\u003e, meaning elements are not nested deeply within one another. Whereas relative layouts are often referred to as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edeep view hierarchies\u003c/strong\u003e, because elements can be nested deeply within one another.\u003c/p\u003e\r\n\u003cp\u003eFlat view hierarchies, like constraint layouts, load slightly faster than deep view hierarchies, like relative layouts. Their XML code is also a little easier to manage.\u003c/p\u003e\r\n\u003ch4\u003eBias Values\u003c/h4\u003e\r\n\u003cp\u003eUnlike relative layouts, constraint layouts include a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ebias\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue. This is a percentage between 1% and 100% used to position a view's horizontal and vertical offset in relation to other elements. This allows easy, seamless positioning no matter what the user's screen size may be.\u003c/p\u003e\r\n\u003ch4\u003eLayout Editor\u003c/h4\u003e\r\n\u003cp\u003eIt's also a little easier to use Android Studio's new layout editor (a feature available in versions 2.2.2 and above) with constraint layouts. The editor allows developers to drag and drop elements, and Android Studio generates the corresponding XML automatically. (We'll learn more about this process in the videos below.)\u003c/p\u003e\r\n\u003ch2\u003eWorking with Constraint Layouts\u003c/h2\u003e\r\n\u003cp\u003eYou may want to experiment with integrating constraint layouts into your own projects. Again,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ethis is completely optional\u003c/strong\u003e. But, for those that would like to try them out, the videos below will walk through creating this new type of layout, including how to use the new layout editor tool.\u003c/p\u003e\r\n\u003ch3\u003eBuilding a Constraint Layout with the Android Studio Layout Editor\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca class=\"hoverZoomLink\" href=\"https://www.youtube.com/watch?v=z53Ed0ddxgM\"\u003eAndroid Studio 2.2 Constraint Layouts for Beginners\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(29 mins) video is an excellent introduction to both constraint layouts, and Android Studio's new Layout Editor. It walks through the process of constructing a new layouts from scratch.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eIts sequel, \u003c/span\u003e\u003ca class=\"hoverZoomLink\" href=\"https://www.youtube.com/watch?v=CTYf1qwrXuw\"\u003eAndroid Studio 2.2 Constraints Layout Part 2\u003c/a\u003e\u003cspan\u003e (13 mins), continues where the first video left off, exploring more complex features and capabilities.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eMore Recommended Resources\u003c/h2\u003e\r\n\u003cp\u003eInterested in learning even more about constraint layouts? Or practicing creating and designing them? We recommend the following resources:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://codelabs.developers.google.com/codelabs/constraint-layout/index.html?index=..%2F..%2Findex#0\"\u003eUsing ConstraintLayout to Design your Views\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e- A tutorial from Google, complete with sample code to follow along with and practice.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/reference/android/support/constraint/ConstraintLayout.html\"\u003eAndroid Developer Guide Article on Constraint Layouts\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/training/constraint-layout/index.html\"\u003eBuild a Responsive UI with Constraint Layout\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJoe Birch's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/exploring-android/exploring-the-new-android-constraintlayout-eed37fe8d8f1\"\u003eExploring the new Android ConstraintLayout\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/studio/write/layout-editor.html\"\u003eAndroid Studio Guide to Building a UI with the Layout Editor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eprovides more detail and instruction for using the built-in Layout Editor seen in the videos above.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/googlesamples/android-ConstraintLayoutExamples\"\u003eConstraint Layout Examples on GitHub\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Documentation for the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/support/constraint/ConstraintLayout.html\"\u003eConstraintLayout Class\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-working-with-constraint-layouts"},{"id":967,"title":"Thursday: Working with Simple Fragments - DialogFragment","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between the ‘system back button’ and the ‘up’ button?\u003c/li\u003e\r\n\u003cli\u003eWhat is a hierarchical parent? Where do we denote an activity's parent? What does creating this relationship allow us to do?\u003c/li\u003e\r\n\u003cli\u003eWhat is the Android Manifest? What is placed in here?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eComparing web apps to mobile apps\u003c/h3\u003e\r\n\u003cp\u003eBy now we should be feeling fairly comfortable working with Activities in Android, even if we are still needing a lot of time to accomplish simple things - you are learning a lot of new content this week and that can be overwhelming!\u003c/p\u003e\r\n\u003cp\u003eSometimes it can be useful to zoom out and put things into a little perspective to make the bigger picture easier to comprehend.\u003c/p\u003e\r\n\u003cp\u003eLet's take a minute to do that before we move on.\u003c/p\u003e\r\n\u003cp\u003eIn our apps, as well as in any kind of web application (and the overwhelming majority of other kinds of apps as well), we are trying to respond to one specific kind of circumstance:\u003c/p\u003e\r\n\u003cp\u003eA user uses our app or website to achieve some kind of goal, such as seeing a list of products, tracking her todo’s, sending a message to a friend, or playing a game.\u003c/p\u003e\r\n\u003cp\u003eIf we consider what we develop from this perspective, the central problems we have to solve are always the same:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe need to capture our users' intent correctly.\u003c/li\u003e\r\n\u003cli\u003eWe need to process that intent in some way, in accordance with our own processing code that allows us to store a to-do, save a score to a high score, or send a message.\u003c/li\u003e\r\n\u003cli\u003eWe need to then update our app dependent on the outcome of that intent, updating our user interface, so that our user can make a decision based on this updated set of circumstances.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eConclusion:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eThese overarching principles are the same regardless of what type of app we are trying to create, and also which platform we are trying to create that app on. Consider this for a moment: you’d be hard pressed to find an application we build at Moringa School that does not fulfill the lowest common denominator outlined above.\u003c/p\u003e\r\n\u003cp\u003eBecause this underlying principle always holds, our apps, whether they be in PHP or Ruby, Android, or vanilla JS, all have overarching commonalities.\u003c/p\u003e\r\n\u003cp\u003eConsider the following chart:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/bckh3czqec6um4o/web-vs-android-chart.png\" alt=\"web-vs-android-chart\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eIntroducing Fragments\u003c/h3\u003e\r\n\u003cp\u003eWith that in mind, let's discuss a concept: fragments. The good news is that you are already familiar with fragments, at least conceptually!\u003c/p\u003e\r\n\u003cp\u003eFragments are the components of the Android world. They are the equivalent of breaking down code into re-usable pieces. Imagine having to write all of your code into your Activities - it would quickly get overwhelming and the code would not be modular. Fragments are comprised of both layout code layer, written in XML, and functional code layer, written in Java. They are really very similar to Activities in this sense, just smaller and more modular. The reasons behind breaking the code down into fragments are the same as for any JavaScript framework, or MVC components in another language or framework, for example, Angular JS components. And the complications that arise, such as communicating with fragments, and retrieving information from fragments, are the same as with components in any other framework. But don’t worry, we will go through this step by step!\u003c/p\u003e\r\n\u003cp\u003eLater on, we will work extensively with completely custom fragments, but for now, let’s get familiarized with the intricacies of fragments by working with some stock fragments that are defined in the Android package. We’ll build a simple UI where we utilize one of the most common fragments, a.\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003e This will be useful practice for crafting your UIs for your independent and capstone projects. Making UIs can be time-consuming in Android - do not underestimate the amount of time it can take to build even a simple interface!\u003c/p\u003e\r\n\u003cp\u003eLet's get coding.\u003c/p\u003e\r\n\u003ch3\u003eAdding a DialogFragment to our App\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new project with the settings we have been working with so far.\u003c/li\u003e\r\n\u003cli\u003eName your project and your package whatever you like, and keep the first activity called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNow, define a new class inside of your main package. Name it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoodDialogFragment\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eSimilarly to how we have already practiced extending adapters and customizing them, make\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoodDialogFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eextend\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eImplement the following Override in \u003ccode\u003eMoodDialogFragment\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003eMoodDialogFragment.java\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View rootView = inflater.inflate(R.layout.fragment_mood_dialog, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        getDialog().setTitle(\u003cspan class=\"hljs-string\"\u003e\"Simple Dialog\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rootView;\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter you import the necessary packages, the only thing that Android Studio isn’t happy with is\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_mood_dialog\u003c/em\u003e, which makes sense: We haven’t defined this XML file yet. Let’s do that now.\u003c/p\u003e\r\n\u003cp\u003eCreate a new\u003cspan\u003e \u003c/span\u003e\u003cem\u003eXML/Layout XML File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_mood_dialog\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd in the following XML:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_mood_dialog.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:weightSum\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/baseLayout\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"How are you feeling today?\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/MoodLabel\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryDark\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:typeface\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"monospace\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"normal|bold\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:textAlignment\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"50dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n       \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioGroup\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/moodRadioGroup\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Great\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton1\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Good\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton2\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Okay\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:checked\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton3\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Meh\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton4\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Sad\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton5\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n       \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRadioGroup\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe’re introducing a few new concepts here, but they shouldn’t be entirely unfamiliar.\u003c/p\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRadioGroup\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas to exist inside a,\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eLinearLayout\u003c/code\u003e and it's a layout container that allows you to add radio buttons, and can ensure that no two are checked at the same time! Pretty neat. Also, you can see we used several nested\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayout\u003c/code\u003es to keep our layout organized.\u003c/p\u003e\r\n\u003cp\u003eIf we ran the app now, it should build and run, but we would only see the textview defined in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e. Why? We may have defined our Fragment and its layout, but we actually need to construct a fragment object somewhere in our executable code. What is our executable code? Well our activity, of course!\u003c/p\u003e\r\n\u003ch3\u003eShowing our fragment\u003c/h3\u003e\r\n\u003cp\u003eJump back to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFragmentManager fm = getFragmentManager();\r\nMoodDialogFragment moodDialogFragment = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MoodDialogFragment ();\r\nmoodDialogFragment.show(fm, \u003cspan class=\"hljs-string\"\u003e\"Sample Fragment\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFragmentManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for adding, replacing, removing fragments dynamically, it needs to be invoked anytime we are completing any of those actions (which is most of the time.)\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/r5vkm2stit5ti48/dialogfragment-with-radiobuttons.png\" alt=\"dialogfragment-with-radiobuttons.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we run our app, we see two things. A.) the dialog is opened as soon as the activity’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003emethod runs, which might be appropriate in some circumstances, but isn’t something we want most of the time, and B.) We have no buttons to either submit the form or close the Dialog. We can still close the dialog by clicking outside of the highlighted dialog window, but this is not ideal. Let’s fix the first thing first.\u003c/p\u003e\r\n\u003ch3\u003eAdding buttons and opening our dialog as a click event\u003c/h3\u003e\r\n\u003cp\u003eTry and work through the following steps without checking out the result. Consult the\u003cspan\u003e \u003c/span\u003e\u003ca title=\"\" href=\"https://moringacore-android.herokuapp.com/#droid-cheat-sheet.html\"\u003echeat\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esheet if you get stuck.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIn your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e, create a new button, and call it moodButton.\u003c/li\u003e\r\n\u003cli\u003eAdd\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompile 'com.jakewharton:butterknife:7.0.1'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto your build.gradle dependencies.\u003c/li\u003e\r\n\u003cli\u003eBind your views with ButterKnife. (Don’t forget\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButterKnife.bind(this)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e.\u003c/li\u003e\r\n\u003cli\u003eSet an onClickListener onto your moodButton. Move the code that opens the dialog into that click event.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eCan’t make it work?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSee the \u003ca title=\"\" href=\"https://moringacore-android.herokuapp.com/#droid-cheat-sheet.html\"\u003echeat\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esheet for the full code.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eSecret tip\u003c/strong\u003e: Are you tired of having your button texts show up in uppercase? Change the textAppearance to “AppCompat” or set android:textAllCaps=\"false\" in your XML. As of January, 2017, a Google search for “android lowercase button” yields about 416,000 results...)\u003c/p\u003e\r\n\u003cp\u003eAlright, if you run your app, we should now have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat opens on button click. Yay!\u003c/p\u003e\r\n\u003cp\u003eLet’s take the next step to add some buttons to our Dialog so we can interact with them. Let’s switch over to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_mood_dialog.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eAdd:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_mood_dialog.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Submit\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/submitButton\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cancel\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/cancelButton\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore you close the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/RadioGroup\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag. Run your app, and you should see your buttons at the bottom of your dialog. Great! Now they need some functionality.\u003c/p\u003e\r\n\u003ch3\u003eAdding functionality to our cancel button and closing our dialog\u003c/h3\u003e\r\n\u003cp\u003eLet’s tackle closing the dialog button first.\u003c/p\u003e\r\n\u003cp\u003eBecause we need to respond to the click on the cancel button inside of the dialog, we need to find a way to connect with that view. Recently, we’ve started using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButterKnife\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto help us simplify binding our views, and that works great when we are inside an activity. But when we are trying to bind views inside a fragment, ButterKnife can’t help us - we need to do this the old fashioned way. Here’s how.\u003c/p\u003e\r\n\u003cp\u003eFirst, let’s declare some member variables to hold our cancel and submit buttons in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nButton cancelButton = (Button) rootView.findViewById(R.id.cancelButton);\r\nButton submitButton = (Button) rootView.findViewById(R.id.submitButton);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee that here we are accessing our views through through the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erootView\u003c/code\u003e, as we are not inside an activity, but looking for views currently on top of an activity. The name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erootView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just another variable name: What’s important here is that this variable holds the inflated layout and therefore has access to the Views we need to retrieve. Cool!\u003c/p\u003e\r\n\u003cp\u003eNow we have those buttons, we can begin setting click listeners:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\ncancelButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n       dismiss();\r\n   }\r\n});\r\n...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003edismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a static method we can simple call anytime we want to close the dialog. Try it out, we should now be able to close the dialog by clicking cancel. Here’s the full code for reference so far.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMoodDialogFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDialogFragment\u003c/span\u003e\u003c/span\u003e{\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n       View rootView = inflater.inflate(R.layout.fragment_mood_dialog, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n       Button cancelButton = (Button) rootView.findViewById(R.id.cancelButton);\r\n       Button submitButton = (Button) rootView.findViewById(R.id.submitButton);\r\n       cancelButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n           \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n               dismiss();\r\n           }\r\n       });\r\n       \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rootView;\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat! Now, the logical next step is to be able to retrieve the information from the form. Let’s tackle that next.\u003c/p\u003e\r\n\u003ch3\u003eReturning values from our form\u003c/h3\u003e\r\n\u003cp\u003eThis part is a bit trickier. We can’t just pull the selected radio button directly, instead we need a multi-step process.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eFirst, we need to pull the entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRadioGroup\u003c/code\u003e,\u003c/li\u003e\r\n\u003cli\u003eThen, we can can use that to retrieve the selected radio button’s id.\u003c/li\u003e\r\n\u003cli\u003eNext, we can use that to retrieve the “value” of that selected radio button, and log it out.\u003c/li\u003e\r\n\u003cli\u003eThen, we'll want to close our dialog, just like we did when the cancel button received a click. Phew.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eOK, let’s get cracking.\u003c/p\u003e\r\n\u003cp\u003eImplement the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nRadioGroup surveyRadioGroup = (RadioGroup) rootView.findViewById(R.id.moodRadioGroup); \u003cspan class=\"hljs-comment\"\u003e//pull group\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e selectedId = surveyRadioGroup.getCheckedRadioButtonId(); \u003cspan class=\"hljs-comment\"\u003e//get selected ID\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e RadioButton selectedRadioButton = (RadioButton) rootView.findViewById(selectedId); \u003cspan class=\"hljs-comment\"\u003e//get r button val via ID\u003c/span\u003e\r\n\r\n...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now for the click event:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nsubmitButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n       Log.d(\u003cspan class=\"hljs-string\"\u003e\"testing\"\u003c/span\u003e, selectedRadioButton.getText().toString());\r\n       dismiss();\r\n   }\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTry and get to this point on your own using those code snippets and putting them in the right places. If you get stuck, consult the\u003cspan\u003e \u003c/span\u003e\u003ca title=\"\" href=\"https://moringacore-android.herokuapp.com/#droid-cheat-sheet.html\"\u003echeat\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esheet.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/kvbs3eax1ykucuv/dialog-fragment-working.png\" alt=\"dialog-fragment-working.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter we select a mood and click the submit button, we should see it logged in the console and have the dialog window close. Cool!\u003c/p\u003e\r\n\u003ch3\u003eFinishing Up and More on Dialogs\u003c/h3\u003e\r\n\u003cp\u003eNow you have a blueprint on how to implement one of Android’s most widely used Fragments in your app, as well as getting a handle on some of the most fundamental topics on fragments. This should put you in a great mood.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you are interested in learning how to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003es that do not require a unique layout, there is a great way to make this process quicker and more flexible. See this further exploration lesson if you are interested in learning more about this topic.\u003c/p\u003e\r\n\u003cp\u003eAlso, note we strongly warn against using random code samples off StackOverflow or internet blogs prior to ~2015, especially where any kind of fragment is concerned. The way dialogs and timepickers are now implemented are fundamentally different and earlier approaches are deprecated. Being aware of the age of sources is especially important when researching and implementing code for any kind of fragment, such as \u003ccode\u003eDialogFragment\u003c/code\u003e, \u003ccode\u003eDatePickerFragment\u003c/code\u003e, \u003ccode\u003eTimePickerFragment\u003c/code\u003e, and others. Proceed with caution!\u003c/p\u003e","exportId":"thursday-working-with-simple-fragments-dialogfragment"},{"id":968,"title":"Thursday: Local Business App","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal for today is to practice using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es to display lists of data in addition to using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface to manage your click listeners.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between the ‘system back button’ and the ‘up’ button?\u003c/li\u003e\r\n\u003cli\u003eWhat is a hierarchical parent? Where do we denote an activity's parent? What does creating this relationship allow us to do?\u003c/li\u003e\r\n\u003cli\u003eWhat is the Android Manifest? What is placed in here?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eLocal Business App\u003c/h3\u003e\r\n\u003cp\u003eCreate an app for a business of your choosing. Make sure to style your app to reflect the business using its logo and branded colors. Research how to change the launcher icon and change it to the company's logo. Use ListViews and ArrayAdapters to display information somewhere in your app. Implement tests throughout the course of development.\u003c/p\u003e\r\n\u003ch4\u003eFurther Exploration\u003c/h4\u003e\r\n\u003cp\u003eWhen adding photos, make sure to scale them down as much as possible. If you experience any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutOfMemory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eerrors, try implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePicasso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elibrary to resize images at runtime.\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://square.github.io/picasso/\"\u003eClick here\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto install Picasso and then follow along with\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Displaying-Images-with-the-Picasso-Library\"\u003ethis guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto learn the best ways to employ Picasso.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application include tests? Do they pass?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003es being utilized correctly?\u003c/li\u003e\r\n\u003cli\u003eHave\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es been integrated into the project?\u003c/li\u003e\r\n\u003cli\u003eAre click listeners managed correctly?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eIs the code indented correctly throughout?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"thursday-local-business-app"},{"id":971,"title":"Independent Project","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":18.0,"dueAt":"2019-05-16T18:00:00+03:00","lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch1\u003eIndependent Project\u003c/h1\u003e\r\n\u003cp\u003eFor each independent project in this course, you will be required to successfully implement the objectives listed below into one of the following application types, as detailed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\" target=\"_blank\"\u003eAndroid Independent Projects lesson\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein this course’s pre-work.\u003c/p\u003e\r\n\u003cp\u003eYou will continue to work on this same project for the first four Fridays of the course, implementing new objectives each week.\u003c/p\u003e\r\n\u003ch3\u003e1. Tracking Custom Objects\u003c/h3\u003e\r\n\u003cp\u003eTracking any sort of information/input the user provides (ie: not gathered from an application; custom to do lists, habit trackers, mood trackers, journals, etc. )\u003c/p\u003e\r\n\u003ch3\u003e2. Tracking Objects from an API\u003c/h3\u003e\r\n\u003cp\u003eIe: Rating microbrews, wine, movies, hiking trails, restaurants, etc. to keep track for your own reference.\u003c/p\u003e\r\n\u003ch3\u003e3.) Marketplace\u003c/h3\u003e\r\n\u003cp\u003eApplication to buy and sell any content of your choosing.\u003c/p\u003e\r\n\u003ch3\u003e4.) Reference\u003c/h3\u003e\r\n\u003cp\u003eJust information. Sports stats, weather, traffic delays, bands on tour, Recipes, movie reviews, etc.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eSee the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\" target=\"_blank\"\u003eAndroid Independent Projects lesson\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information, real-world examples, and API suggestions for each of the application types listed above.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate an app with at least 3 activities that the user can navigate to. Build these activities out with designs, UI, and functionality as much as possible. Remember to validate form inputs. Use toasts and hide/show to communicate statuses to your user.\u003c/li\u003e\r\n\u003cli\u003eDisplay a list of information. Build this out as much as possible.\u003c/li\u003e\r\n\u003cli\u003eGather user input and pass it to another activity.\u003c/li\u003e\r\n\u003cli\u003eUse ButterKnife to bind all views.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eImplement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface to set click listeners to view elements.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices,\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003eespecially indenting properly, commenting complex code segments, making logically separate Git commits, including a detailed README, and removing commented-out code and logging statements before committing.\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrates an understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject works as expected\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrates concepts covered this week. If prompted, are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology\u003c/li\u003e\r\n\u003cli\u003ePrevious standards have been met.\u003c/li\u003e\r\n\u003cli\u003eThe project is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTimely project submission\u003c/li\u003e\r\n\u003cli\u003eProject README file is up to standard\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eA minimum of 20 GitHub commits on Github for this project\u003c/li\u003e\r\n\u003cli\u003eUsage of .gitignore with required files and folders ignored\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i062d05d0201b7c1fa77aa45f8f51ca06"},{"id":1097,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1a4b96ca090be03f6f1228317e3e7019"},{"id":2308,"title":"Weekend: Web Service Backends and Custom Fragments Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis week we are going to learn how to implement web services and custom fragments in Android!\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll dive into backend web services by using OkHttp and Signpost to assist in building and authenticating requests to the Yelp API. This will allow us to pull data on local restaurants\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein any zipcode\u003c/em\u003einto our ongoing MyRestaurants project!\u003c/p\u003e\r\n\u003cp\u003eThen we'll learn how to parse through an API's JSON response, select only the information we require, and build objects out of it using constructors and data models.\u003c/p\u003e\r\n\u003cp\u003eAlong the way we'll also refactor and organize our project with subpackages, implement a tool called Picasso to handle displaying images, and build our own custom layouts and adapters to display a wider variety of information within our app.\u003c/p\u003e\r\n\u003cp\u003eWe'll even learn how our app can interact with other applications using something called implicit intent. Our MyRestaurants app will really begin to come together this week!\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eAt the end of the week, your independent project will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement OkHttp to retrieve data from a backend.\u003c/li\u003e\r\n\u003cli\u003eCreate a data model to store the data.\u003c/li\u003e\r\n\u003cli\u003eDisplay a list of information using a RecyclerView, OR use fragments and a PagerAdapter to swipe through views. (Or both.)\u003c/li\u003e\r\n\u003cli\u003eIncorporate at least one implicit intent.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003cli\u003eRequired functionality is present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"weekend-web-service-backends-and-custom-fragments-objectives"},{"id":2309,"title":"Weekend: Managing API Keys","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eNow that we have a decent handle on the basics of User Interfaces in Android applications, let's get more complex! This week we'll begin pulling data from third-party APIs to display in our applications.\u003c/p\u003e\r\n\u003cp\u003eContinuing to develop our MyRestaurants app, we will use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/overview\"\u003eYelp API\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto gather restaurants in the zip code provided by the user and display them in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e. This will allow us to return restaurants in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ezip code Yelp has data in, instead of simply hard-coding a list of several Portland restaurants. That's exponentially more powerful!\u003c/p\u003e\r\n\u003ch2\u003eYelp Fusion API\u003c/h2\u003e\r\n\u003cp\u003eFirst things first, take a glance at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3\"\u003eYelp API Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ebefore we begin. We're going to use the latest version of the API, also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eYelp Fusion\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eYelp API v3\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(note that these are two different names for the same exact API). So, make sure any resources or documentation you reference during this course are specifically meant for v3/Fusion. Previous versions of Yelp's API work differently, so resources meant for v1 and 2 aren't guaranteed to be transferrable.\u003c/p\u003e\r\n\u003ch3\u003eAPI Endpoints\u003c/h3\u003e\r\n\u003cp\u003eAs depicted in the documentation linked above, the API contains many different endpoints. For instance, there's an endpoint to retrieve\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/business_reviews\"\u003ereviews about a business\u003c/a\u003e, an endpoint to locate\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/event_search\"\u003eevents in specific areas\u003c/a\u003e, and even an endpoint to return a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/business_search_phone\"\u003ebusiness' phone number\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eOur MyRestaurants application will specifically use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/business_search\"\u003esearch endpoint\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto locate restaurants and their pertinent details in the zip code provided by the user. Take a look at the parameters and response for this endpoint now.\u003c/p\u003e\r\n\u003ch2\u003eAccessing the Yelp Fusion API\u003c/h2\u003e\r\n\u003cp\u003eHowever, like many other APIs, we'll need to send credentials along with our request to successfully retrieve information from this endpoint. As you learned\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.learnhowtoprogram.com/javascript/asynchrony-and-apis-in-javascript/testing-api-calls-with-postman\"\u003ein JavaScript\u003c/a\u003e, API keys (sometimes also called \"tokens\" or \"credentials\") give us permission to request data. Among other things, this helps API owners ensure people and applications aren't bogging down their API with an unnecessarily large number of requests. Let's walk through how to obtain our own unique credentials.\u003c/p\u003e\r\n\u003cp\u003ePrevious APIs we've used, like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://home.openweathermap.org/users/sign_up\"\u003eOpenWeather\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.betterdoctor.com/\"\u003eBetterDoctor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003erequire we make an account on their website. Yelp does too, but we need to complete a few\u003cspan\u003e \u003c/span\u003e\u003cem\u003eextra\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esteps too. Let's walk through these now:\u003c/p\u003e\r\n\u003ch3\u003e1. Create Yelp Account\u003c/h3\u003e\r\n\u003cp\u003eFirst things first, we'll need a Yelp account. This is the same as the standard account all their users have. So, if you've used Yelp previously, you can use your existing account. Otherwise, you'll need to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/signup\"\u003esign up here\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003eAt this point some attempts to sign up for a YELP account could prompt such and error in the process.\u003c/p\u003e\r\n\u003cpre\u003eOops, Yelp is overworked right now.\u003c/pre\u003e\r\n\u003cp\u003eThis is because if you are signing up from Kenya (Or any other country where Yelp services are not offered), Kenya is not included in \u003cspan\u003ethe list of countries that supports (or is supported) by the Yelp system, so you will have to use a VPN or a proxy site to sign up. The \u003c/span\u003eVPN abbreviation stands for Virtual Private Network. VPN-connection will create the encrypted communication with which you can mask your sign up location to resemble that of a place that is supported by YELP. Alternatively you can use a\u003cspan\u003e US-based proxy site (for example \u003c/span\u003e\u003ca href=\"http://us-webproxy.com\"\u003ehttp://us-webproxy.com\u003c/a\u003e) where you can just paste the \u003ca href=\"https://www.yelp.com/signup\"\u003eyelp signup url\u003c/a\u003e and proceed to sign up. After the sign up process is successful you can proceed to log-in and use your yelp account without the use of a VPN or a proxy site. \u003c/p\u003e\r\n\u003ch3\u003e2. Create New API App\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll need to login to our new or existing account and visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/v3/manage_app\"\u003eCreate New App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earea of the Developer's section of Yelp. You'll be prompted to fill out a form with multiple fields.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApp Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elist\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurants\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDon't worry about including an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApp Website\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eUnder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eIndustry\u003c/em\u003e, select either\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFood \u0026amp; Drink\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEducation\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eYou can list\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCompany\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eIn\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDescription\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeel free to write a brief sentence about your application and/or about how this is a school project.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAfter submitting the form we should be taken to a page with a green success message, and details about our new API Credentials. You should have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eClient ID\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand an\u003cem\u003e API Key\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. You should also notice an API rate limit of 5,000 requests per day. Awesome! \u003c/p\u003e\r\n\u003cp\u003eWe'll use the API key to request information from the Yelp Fusion API. But as you know, API keys, tokens, and credentials should not be stored directly in source code pushed to GitHub. This simply isn't secure; especially if the API has a rate limit, charges for use, or provides access to sensitive information. We don't want others obtaining our credentials!\u003c/p\u003e\r\n\u003cp\u003eThankfully we can easily conceal our API keys, similar to what we did in JavaScript. The process is a tad different in Android, but we think you'll get the hang of it quickly. In this lesson we'll discuss how to obfuscate API credentials in Android apps, as we walk through integrating our Yelp access token into MyRestuarants. Once our API key is safely integrated we'll begin constructing our first API call in upcoming lessons.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003c/span\u003eHiding API Keys\u003c/p\u003e\r\n\u003ch4\u003e1. Add credentials to gradle.properies\u003c/h4\u003e\r\n\u003cp\u003eFirst, we’ll add the actual credentials to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile which is located in the root directory.\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.gradle.org/current/userguide/build_environment.html\"\u003egradle.properties\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis simply a file where we may place properties and configuration settings for any project built with gradle. Add your Consumer token/api key as follows.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003egradle.properties\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003e\u003c/span\u003e\u003c/code\u003e\n\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eYelpToken\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Bearer YOUR-UNIQUE-API-KEY-HERE\"\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003e\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe \u003c/span\u003e\u003cstrong\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einclude a space between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the access token itself. And the term\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe capitalized.\u003c/strong\u003e\u003cspan\u003e This format looks a little funny compared to API credentials you've likely seen in the past, but it's simply what this particular API requires. If we don't follow this exact format, we won't be able to successfully retrieve data.\u003c/span\u003e\u003ccode class=\"hljs ini\"\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003ch4\u003e2. Add gradle.properties to .gitignore\u003c/h4\u003e\r\n\u003cp\u003eNext, let’s hide our gradle.properties file from GitHub by adding it to our .gitignore file so that the credentials we just listed will not be pushed to Github:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e*.iml\r\n...\r\n/gradle.properties\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you don't see a .gitignore file in your project's directory, you may have to switch from Android view to Project view in Android Studio. The Android view displays only the key source files of an Android project, whereas Project displays all files, including build files.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/0k4kbygank4ac0l/switching-to-project-view-in-android-studio.png?raw=1\" alt=\"switching-from-android-to-project-view-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you've already committed your\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to your Git repository, you'll have to retroactively remove it in order to properly ignore it moving forward. To remove any files listed in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile from your local Git repository, run the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git rm -cached -r\u003c/code\u003e. For more details, check out the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRemoving Ignored Files from a Project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#gitignorefiles.html\" target=\"_blank\"\u003ethis Java lesson\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch4\u003e3. Initialize string constants\u003c/h4\u003e\r\n\u003cp\u003eNext we’ll create a class to contain references to our Yelp credentials. Right click on the main package and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Java Class\u003c/em\u003e. Name this new class\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/yondw6nzk38r52o/creating-new-class-in-main-package-android-studio.png?raw=1\" alt=\"creating-new-class-in-android-studio\"\u003e\u003cbr\u003e\u003cbr\u003eWithin this file, we'll include the following code to reference the Yelp credentials in our gradle.properties file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003e    public\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003estatic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003efinal\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e YELP_TOKEN \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eBuildConfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_TOKEN\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e} \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're instructing the application that the values for these constants can be found in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBuildConfig\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBuildConfig.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis a file that is generated automatically when gradle builds our project.\u003c/p\u003e\r\n\u003ch4\u003e4. Connect credentials when the project builds\u003c/h4\u003e\r\n\u003cp\u003eNext, let's instruct our application to include our credentials in the BuildConfig file when it is created. We'll add the following to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eapply\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eplugin\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-string\"\u003e'com.android.application'\u003c/span\u003e\r\n\r\nandroid {\r\n\r\n   ...\r\n\r\n    buildTypes.each {\r\n        it.buildConfigField \u003cspan class=\"hljs-string\"\u003e'String'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\u003cbr\u003e     }\r\n\r\n}\r\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're instructing our application to include the values we placed in\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the BuildConfig file when it is built. The key in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclass will now refer to the string added to\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eat runtime. And none of our credentials will be visible on GitHub!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003ch4\u003e1. Add credentials to gradle.properties\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003egradle.properties\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003eYelpToken = \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003cspan\u003eBearer \u003c/span\u003e\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003e\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\u0026lt;your yelp token here\u0026gt;\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003e2. Add gradle.properties to .gitignore\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e*.iml\r\n...\r\n/gradle.properties\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003e3. Initialize string constants\u003c/h4\u003e\r\n\u003cp\u003eCreate a class to contain references to our Yelp credentials:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String YELP_TOKEN = BuildConfig.YELP_TOKEN;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003e4. Connect credentials when the project builds\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eapply\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eplugin\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-string\"\u003e'com.android.application'\u003c/span\u003e\r\n\r\nandroid {\r\n\r\n   ...\r\n\r\n    buildTypes.each {\r\n        it.buildConfigField \u003cspan class=\"hljs-string\"\u003e'String'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\r\n    }\r\n\r\n}\r\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"weekend-managing-api-keys"},{"id":2310,"title":"Weekend: Backend Web Services With OkHttp","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003eAlmost every Android app interacts with a web server to retrieve information, store data, and interact with users. In this section, we'll begin exploring information retrieval from backend web services using a tool called OkHttp.\u003c/p\u003e\r\n\u003ch2\u003eRequesting Information from an API\u003c/h2\u003e\r\n\u003cp\u003eYou've probably worked with APIs in your previous courses here at Moringa School. APIs are a web service. We can access their information by submitting a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGET\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequest to a specific URL of the API, including any parameters that specify the type or amount of information we're requesting.\u003c/p\u003e\r\n\u003cp\u003eAfter receiving a request, the API's server sends a response containing a status, headers, and a body. If everything is executed successfully, the body will contain the data we have requested.\u003c/p\u003e\r\n\u003ch2\u003eContacting APIs in Android\u003c/h2\u003e\r\n\u003cp\u003eHowever, in mobile development contacting an API can be a bit trickier. For instance, devices often switch back and forth between using a WiFi and cellular connections. And sometimes these connections\u003cspan\u003e \u003c/span\u003e\u003cem\u003earen't that great\u003c/em\u003e. This can make connecting to APIs difficult. Thankfully, there are several tools designed to gracefully handle the inconsistency of mobile connections while simultaneously making it easier to construct and send requests.\u003c/p\u003e\r\n\u003ch2\u003eOkHttp\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eOkHttp\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis one of several HTTP networking libraries available for Android. It manages the process of creating, sending, and receiving HTTP requests and responses. Additionally, it offers several features that make it particularly beneficial to mobile applications:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAutomatically alternates IP addresses (if possible) if a connection to a web service fails for any reason.\u003c/li\u003e\r\n\u003cli\u003ePools connections to reduce latency. (\u003ca href=\"https://en.wikipedia.org/wiki/Connection_pool\"\u003eConnection pooling\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis the act of recycling previous connections for future requests.)\u003c/li\u003e\r\n\u003cli\u003eCaches responses to avoid sending duplicate requests.\u003c/li\u003e\r\n\u003cli\u003eBuilds and sends requests.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eEssentially, if any issues occur in contacting the API, OkHttp will attempt to resolve these issues\u003cspan\u003e \u003c/span\u003e\u003cem\u003efor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eus before giving up, sending errors, or crashing our application entirely.\u003c/p\u003e\r\n\u003ch3\u003eAdding OkHttp to MyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eWe've already added our credentials to our application. Let's also add OkHttp in anticipation of making HTTP requests in the following lessons.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add OkHttp as a dependency in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cdiv class=\"filename\"\u003e\r\n\u003cpre\u003e...\u003cbr\u003edependencies {\u003cbr\u003e          ...             \u003cbr\u003e      implementation \u003cspan\u003e'com.squareup.okhttp3:okhttp:3.10.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e  \u003c/span\u003e... }\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003ch3\u003eRequesting Internet Permissions\u003c/h3\u003e\r\n\u003cp\u003eIn order to contact an API web service, our application will need internet access. In Android applications, internet access is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eprovided by default. Any application that requires internet access must explicitly request access in its manifest.\u003c/p\u003e\r\n\u003cp\u003eTo do this, we can add the following line to our manifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs xml\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/manifest/uses-permission-element.html\"\u003e\u003ccode\u003e\u0026lt;uses-permission\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eelement requests access to the specified resource from the user.\u003c/p\u003e\r\n\u003cp\u003eThe OkHttp library should now be included in our MyRestaurants application. We're almost ready to make API requests! In the next lesson we'll learn about API security, what those credentials we placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass are meant for, and how to use them to successfully gather information from an outside web service.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\"\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOkHttp\u003c/strong\u003e: An Android Networking library developed by Square. It handles making HTTP requests and receiving responses for us, with built-in features to compensate for poor network connections, and minimize data usage.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003eRequesting internet access permissions in the manifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs xml\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://packetzoom.com/blog/which-android-http-library-to-use.html\" target=\"_blank\"\u003ePacket Zoom Blog Post comparing HTTP Libraries\u003c/a\u003e, including a history of multiple different HTTP clients.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCodePath's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-OkHttp\" target=\"_blank\"\u003eUsing OkHttp Guide\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"weekend-backend-web-services-with-okhttp"},{"id":2312,"title":"Weekend: API Requests and Responses","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that we have everything in place, let's begin creating authenticated OAuth API requests to the Yelp API, and return the resulting data into our application.\u003c/p\u003e\r\n\u003ch2\u003eBuilding a Request\u003c/h2\u003e\r\n\u003cp\u003eFirst, we’ll add the base URL and query parameters to our Constants.java file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic class \u003c/span\u003eConstants {\u003cbr\u003e    \u003cspan\u003epublic static final \u003c/span\u003eString \u003cspan\u003eYELP_TOKEN \u003c/span\u003e= BuildConfig.\u003cspan\u003eYELP_TOKEN\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public static final \u003c/span\u003eString \u003cspan\u003eYELP_BASE_URL \u003c/span\u003e= \u003cspan\u003e\"https://api.yelp.com/v3/businesses/search\"\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public static final \u003c/span\u003eString \u003cspan\u003eYELP_LOCATION_QUERY_PARAMETER \u003c/span\u003e= \u003cspan\u003e\"location\"\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003eThere are many different types of information the Yelp API can return. But because our app will only be requesting restaurant information, we can simply re-use this URL \"template\", and insert a different zip code each time. This also keeps our code DRY, because we only ever have to declare the base URL in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eplace.\u003c/p\u003e\r\n\u003ch2\u003eYelpService\u003c/h2\u003e\r\n\u003cp\u003eNext, let's create a new class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eYelpService.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside our main package. This class will contain all logic necessary for interacting with the Yelp API, including using OkHttp and SignPost to create and authenticate requests.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll define a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that takes two parameters: The location a user provides, and a callback that will execute when our API request receives a readable response from Yelp.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eimport okhttp3.Callback;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eYelpService\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efindRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location, Callback callback)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cem\u003e(\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWhen importing necessary classes, several classes listed here (such as\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003c/code\u003e) have multiple options. Make sure to double-check that you're importing the correct classes, as depicted in this lesson's example code.)\u003c/em\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 18pt;\"\u003eOkHttp Client\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, we'll create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclient to create and send our request. We can do this using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003eincluding in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage, like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003epackage io.github.vinge1718.restaurant;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003eclass\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eYelpService\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n    \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003estatic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003evoid\u003c/span\u003e\u003cspan class=\"pln\"\u003e findRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pln\"\u003e callback\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pln\"\u003e client \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003enew\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eOkHttp Client\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOkHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create and send our request. We'll tie it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsumer\u003c/code\u003eSignPost object responsible for creating our signature:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.Callback\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.HttpUrl\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.OkHttpClient\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.Request\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic class \u003c/span\u003eYelpService {\u003cbr\u003e    \u003cspan\u003epublic static void \u003c/span\u003e\u003cspan\u003efindRestaurants\u003c/span\u003e(String location\u003cspan\u003e, \u003c/span\u003eCallback callback){\u003cbr\u003e        OkHttpClient client = \u003cspan\u003enew \u003c/span\u003eOkHttpClient.Builder()\u003cbr\u003e                .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eHttpUrl.Builder urlBuilder = HttpUrl.\u003cspan\u003eparse\u003c/span\u003e(Constants.\u003cspan\u003eYELP_BASE_URL\u003c/span\u003e).newBuilder()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eurlBuilder.addQueryParameter(Constants.\u003cspan\u003eYELP_LOCATION_QUERY_PARAMETER\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003elocation)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eString url = urlBuilder.build().toString()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eRequest request = \u003cspan\u003enew \u003c/span\u003eRequest.Builder()\u003cbr\u003e                .url(url)\u003cbr\u003e                .header(\u003cspan\u003e\"Authorization\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eConstants.\u003cspan\u003eYELP_TOKEN\u003c/span\u003e)\u003cbr\u003e                .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject aptly named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003erequest\u003c/span\u003e\u003c/code\u003e, and provide it the string\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe've just constructed using the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eheader\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto add a header to our request. The Yelp API requires our requests include a header with our unique access token. As explicitly stated in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/authentication\"\u003eYelp Fusion Documentation on Authentication\u003c/a\u003e:\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003eTo authenticate API calls with the access token, set the Authorization HTTP header value as Bearer ACCESS_TOKEN.\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHeaders, like parameters, are key-value pairs. So, in the code above we're adding a header with the key\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"str\"\u003e\"Authorization\"\u003c/span\u003e\u003c/code\u003e, and a value of our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eYELP_TOKEN\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstant, which includes both the term\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand our unique access token, per the requirements of the Yelp API.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAfter adding the header, we call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto build our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCalling a Request Asynchronously\u003c/h3\u003e\r\n\u003cp\u003eAnd finally, we'll execute this request:\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eYelpService.java\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eCall\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eHttpUrl\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003eclass\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eYelpService\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n    \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003estatic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003evoid\u003c/span\u003e\u003cspan class=\"pln\"\u003e findRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pln\"\u003e callback\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pln\"\u003e client \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003enew\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eHttpUrl\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pln\"\u003e urlBuilder \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eHttpUrl\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eparse\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eConstants\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_BASE_URL\u003c/span\u003e\u003cspan class=\"pun\"\u003e).\u003c/span\u003e\u003cspan class=\"pln\"\u003enewBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        urlBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eaddQueryParameter\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eConstants\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_LOCATION_QUERY_PARAMETER\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e url \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e urlBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e().\u003c/span\u003e\u003cspan class=\"pln\"\u003etoString\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003cspan class=\"pln\"\u003e request\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003enew\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eheader\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"str\"\u003e\"Authorization\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eConstants\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_TOKEN\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eCall\u003c/span\u003e\u003cspan class=\"pln\"\u003e call \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e client\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003enewCall\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003erequest\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        call\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003ecallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we create a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eCall\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and place our request in it.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ecall\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003ecallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto execute it. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ecall\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eexecute\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to synchronously dispatch the request, but this would clog the main thread of our application. Instead, we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto perform an asynchronous request.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe OkHttp\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will add our request to a queue. Since this is the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecall in the queue of our app, it will run right away. OkHttp will create a new thread to dispatch our request. Once it has a readable response it will trigger our callback method, where it will send our response data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e(Don't worry too much about threading now. We'll look at thread and threading in detail in an upcoming lesson!)\u003c/p\u003e\r\n\u003ch2\u003eReceiving a Response\u003c/h2\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass is a great place to separate our network call from our user interface code, but because we will be updating the UI with our response data, let's create our callback method inside of RestaurantsActivity. We'll call it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    ...\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n            yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe first thing this method will do is create a new instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e, and call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As we know,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're searching for restaurants in, and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCallback\u003c/code\u003e. We create a new empty\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto provide as the second argument.\u003c/p\u003e\r\n\u003ch3\u003eCallback Methods\u003c/h3\u003e\r\n\u003cp\u003eOur callback will have two methods to override:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis triggered when our request fails (if we create a bad URL, for example).\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis triggered when the request is successful. Let's add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efirst:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Call;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Callback;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\r\n\r\n    ...\r\n\r\n       \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n            yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf the API request executed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efails for any reason, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003ecallback method will execute. It simply calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.printStackTrace();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto print details regarding the error to our output console.\u003c/p\u003e\r\n\u003cp\u003eNext, inside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe will tell our app what to do with the data returned from Yelp. We'll eventually save this data into a model, but for now we'll log it to the logcat:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Call;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Callback;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Response;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n    ...\r\n\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n            yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                    String jsonData = response.body().string();\r\n                    Log.v(TAG, jsonData);\r\n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new string,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsonData\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it to the string of the response body. Then, we print the data to the logcat. If we catch any exceptions, we display their error messages.\u003c/p\u003e\r\n\u003cp\u003eNext, let's call our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of RestaurantsActivity. Because RestaurantsActivity is only ever accessed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea user has submitted the form from MainActivity, we can safely assume that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould be called each time RestaurantsActivity is accessed:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        getRestaurants(location);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to launch the application in the emulator, submit a zip code into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003eon our MainActivity, and see data returned from the Yelp API in the logcat!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003eThe following method builds, signs, and sends an OAuth API request using OkHttp and Signpost:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efindRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location, Callback callback)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        OkHttpClient client = new OkHttpClient.Builder()\u003cbr\u003e                .build();\r\n\r\n        HttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.YELP_BASE_URL).newBuilder();\u003cbr\u003e        urlBuilder.addQueryParameter(Constants.YELP_LOCATION_QUERY_PARAMETER, location);\u003cbr\u003e        String url = urlBuilder.build().toString();\r\n\r\n        Request request = new Request.Builder()\u003cbr\u003e                .url(url)\u003cbr\u003e                .header(\"Authorization\", Constants.YELP_TOKEN)\u003cbr\u003e                .build();\r\n\r\n        Call call = client.newCall(request);\r\n        call.enqueue(callback);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe following calls the method above, providing a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject as a parameter. It contains\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback methods that are executed depending on the status of the API request:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                    String jsonData = response.body().string();\r\n                    Log.v(TAG, jsonData);\r\n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://hueniverse.com/oauth/guide/terminology/\" target=\"_blank\"\u003eTerminology Section\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof Eran Hammer's OAuth guide for more information regarding OAuth terminology.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf you are unfamiliar with the concept of threading check out this link:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Managing-Threads-and-Custom-Services#thread\" target=\"_blank\"\u003eThread | Android Developers\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"weekend-api-requests-and-responses"},{"id":2313,"title":"Weekend: JSON (and XML) and Data Models","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that we can successfully receive restaurant information from Yelp's API, let's begin integrating it into our app. In this lesson, we will parse out the data we need from Yelp's JSON response and build a constructor to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003ch2\u003eYelp API Responses\u003c/h2\u003e\r\n\u003cp\u003eTo begin, let's consider some sample data from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/search_api\" target=\"_blank\"\u003eYelp Search API\u003c/a\u003e. As detailed in their documentation, responses from the API look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-json prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"total\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e8228\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"businesses\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"rating\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e4\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"price\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"$\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"phone\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"+14152520800\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"id\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"is_closed\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003efalse\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"categories\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"alias\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"title\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Coffee \u0026amp; Tea\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"review_count\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1738\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Four Barrel Coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"https://www.yelp.com/biz/four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coordinates\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.7670169511878\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42184275\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"image_url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"http://s3-media2.fl.yelpcdn.com/bphoto/MmgtASP3l_t4tPCL1iAsCg/o.jpg\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"location\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"city\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"San Francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"country\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"US\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address2\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address3\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"state\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"CA\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address1\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"375 Valencia St\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"zip_code\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"94103\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"distance\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1604.23\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"transactions\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"str\"\u003e\"pickup\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"delivery\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e]\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e//\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"region\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"str\"\u003e\"center\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.767413217936834\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42820739746094\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eThere is a\u003c/span\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003cem style=\"font-size: 1rem;\"\u003elot\u003c/em\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003cspan style=\"font-size: 1rem;\"\u003eof information here; but we will only concentrate on the key pieces of information our app will use: Restaurant name, address, and ratings. By identifying where these pieces of information reside within the response, we can begin to understand how to parse it back out.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eCreating a Model\u003c/h2\u003e\r\n\u003cp\u003eBased on the JSON response depicted in the sample, let's create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodel to create objects containing necessary data for each restaurant.\u003c/p\u003e\r\n\u003cp\u003eAt first our app will just display a list of restaurant names (in place of the names we hard-coded earlier). Later, we will include a details page for each restaurant.\u003c/p\u003e\r\n\u003cp\u003eLet's begin by creating a new class in the main package named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurant.java\u003c/em\u003e. Within it, we'll include the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mName;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mPhone;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mWebsite;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mRating;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mImageUrl;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLatitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLongitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mCategories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mName = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mPhone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mWebsite = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mImageUrl = imageUrl;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mAddress = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLatitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLongitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCategories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mName;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mPhone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  mWebsite;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mAddress;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLatitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLongitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mCategories;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include a constructor for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodel and getters for each member variable.\u003c/p\u003e\r\n\u003ch2\u003eParsing JSON and Creating Objects\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to parse the JSON data from the API's response, and pass them into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003econstructor. We will do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass by creating a new method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.processResults()\u003c/code\u003e. This method will return an array list of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects which we can then display.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003eprocessResults\u003c/span\u003e(Response response){\u003cbr\u003e    ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try\u003c/span\u003e{\u003cbr\u003e        String jsonData = response.body().string()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONObject yelpJSON = \u003cspan\u003enew \u003c/span\u003eJSONObject(jsonData)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONArray businessesJSON = yelpJSON.getJSONArray(\u003cspan\u003e\"businesses\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if \u003c/span\u003e(response.isSuccessful()){\u003cbr\u003e            \u003cspan\u003efor \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ei = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ei \u0026lt; businessesJSON.length()\u003cspan\u003e; \u003c/span\u003ei++){\u003cbr\u003e                JSONObject restaurantJSON = businessesJSON.getJSONObject(i)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString name = restaurantJSON.getString(\u003cspan\u003e\"name\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString phone = restaurantJSON.optString(\u003cspan\u003e\"display_phone\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Phone not available\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString website = restaurantJSON.getString(\u003cspan\u003e\"url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003erating = restaurantJSON.getDouble(\u003cspan\u003e\"rating\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString imageUrl = restaurantJSON.getString(\u003cspan\u003e\"image_url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elatitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"latitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elongitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"longitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eArrayList\u0026lt;String\u0026gt; address = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray addressJSON = restaurantJSON.getJSONObject(\u003cspan\u003e\"location\"\u003c/span\u003e).getJSONArray(\u003cspan\u003e\"display_address\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; addressJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    address.add(addressJSON.get(y).toString())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                ArrayList\u0026lt;String\u0026gt; categories = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray categoriesJSON = restaurantJSON.getJSONArray(\u003cspan\u003e\"categories\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; categoriesJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    categories.add(categoriesJSON.getJSONObject(y).getString(\u003cspan\u003e\"title\"\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                Restaurant restaurant = \u003cspan\u003enew \u003c/span\u003eRestaurant(name\u003cspan\u003e, \u003c/span\u003ephone\u003cspan\u003e, \u003c/span\u003ewebsite\u003cspan\u003e, \u003c/span\u003erating\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        \u003c/span\u003eimageUrl\u003cspan\u003e, \u003c/span\u003eaddress\u003cspan\u003e, \u003c/span\u003elatitude\u003cspan\u003e, \u003c/span\u003elongitude\u003cspan\u003e, \u003c/span\u003ecategories)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003erestaurants.add(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003cbr\u003e    } \u003cspan\u003ecatch \u003c/span\u003e(IOException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e} \u003cspan\u003ecatch \u003c/span\u003e(JSONException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    \u003cspan\u003ereturn \u003c/span\u003erestaurants\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003eHere, we...\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray to eventually contain all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTransform the API response into a String with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString jsonData = response.body().string();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to double-check the response was successful.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf so, we create a Java\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eJSONObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe target the \"businesses\" array from the response (see example response above) that contains the information our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor requires.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn a loop, we collect the name, phone, url, rating, image_url, location (both latitude and longitude), addresses, and categories for each restaurant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject for each restaurant in the response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe catch any errors, then return the array of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Because some restaurants do not have phone numbers listed on Yelp, we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.optString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getString()\u003c/code\u003e. If data is not available, we can set a default value( i.e. \"Phone not available\") to act as the restaurant's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ephone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute instead.\u003c/p\u003e\r\n\u003cp\u003eFor a refresher on JSONObjects check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/org/json/JSONObject.html\" target=\"_blank\"\u003eAndroid Developers documentation\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch1 class=\"title style-scope ytd-video-primary-info-renderer\"\u003eXML to JSON Conversion (Only for those consuming APIs that respond in XML format)\u003c/h1\u003e\r\n\u003cp class=\"shortdesc\"\u003eREST services support JSON and XML formats for input and output data formats by default. The default format is JSON.\u003c/p\u003e\r\n\u003cp class=\"shortdesc\"\u003e\u003cspan\u003eThe format of returned data is defined in the request header. The format you choose depends on what you are familiar with most or tools available to you. \u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"section\"\u003e\r\n\u003cp class=\"p\"\u003eWhen an XML String is sent to a REST service (Post request), you must set Content-Type HTTP header to be \"application/xml\". The REST service converts the XML input data to the JSON format that is accepted by REST services. Therefore, your input XML format must follow a certain structure so that it can be transformed to the JSON object that is accepted by REST services. \u003cspan\u003eWhen requesting XML response format for a REST service, some services have inbuilt utilities that serialize the content into JSON format but for those sites that don't. Some REST services have alternative query URLs or URL parameters through which you can request for data through either JSON or XML formats, so make sure to read thoroughly comb through the your specific API documentation to identify the prerequisites for getting the data file format you want. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp class=\"p\"\u003e\u003cspan\u003eFor those consuming APIs that only return XML file formats, here is one way of converting your data to JSON format so you can follow along with the Restaurant feature project tutorial.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli class=\"p\"\u003e\n\u003cspan\u003eFirst you need to download \u003ca class=\"instructure_file_link\" title=\"java-json.jar\" href=\"viewer/files/java-json.jar?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13483\" data-api-returntype=\"File\"\u003ethis java-son.jar\u003c/a\u003e file and add it as a library to your project. Let's go through how to go about that.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli class=\"p\"\u003e\u003cspan\u003eChange your project view (if it's not already set to \"Project Files\") From the top left corner of your Android Studio in the \"project\" tab.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli class=\"p\"\u003e\n\u003cspan\u003eCreate a directory in your \u003cem\u003eApp \u003c/em\u003efolder name it \u003cem\u003elibs and c\u003c/em\u003eopy the java-json.jar file there by right-clicking on the app folder and selecting paste, click OK on the dialogue below to save.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/jar-file_transfer_SS.png?canvas_download=1\" alt=\"jar-file_transfer_SS.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13485\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRight-click on the \u003cspan\u003e java-json.jar file and click on the \"Add As Library\" \u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003cimg src=\"viewer/files/Add_Jar_As_library.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Add_Jar_As_Library\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13487\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe default option for where to \"add the module\" is the App resource directory. Click OK an wait for it to synchronize and index.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/making-a-library-from-jar-file.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"making_library_from_jar_file\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13486\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe final file structure for newly added files should look like this:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Final_jar_structure.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"final_file_structure\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13488\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWith everything set up, you can now. Add the following code in our YelpService.java file to convert the XML content into JSONObjetct format.\u003c/p\u003e\r\n\u003cp\u003eYelpService.java\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003eprocessResults\u003c/span\u003e(Response response){\u003cbr\u003e    ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try\u003c/span\u003e{\u003cbr\u003e// \u003cbr\u003e        String xmlData = response.body().string()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONObject yelpJSON = XML.toJSONObject(xmlData)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONArray businessesJSON = yelpJSON.getJSONArray(\u003cspan\u003e\"businesses\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can fix the squiggly line underthe XML by hitting alt-enter and importing the necessary libraries. And we are good to go! \u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch2\u003eDisplaying Objects Created from JSON Data\u003c/h2\u003e\r\n\u003cp\u003eWe'll need to trigger our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.processResults()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod inside RestaurantsActivity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback, and collect its return value in a member variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e. This\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray will eventually replace our hard-coded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationTextView) TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.listView) ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n   ...\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                    String jsonData = response.body().string();\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (response.isSuccessful()) {\r\n                        Log.v(TAG, jsonData);\r\n                        mRestaurants = yelpService.processResults(response);\r\n                    }\r\n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can now successfully construct and execute an OAuth-authenticated call to Yelp, parse relevant information from the response, and create objects with it! In the next lesson we'll learn how to display this new information to our users.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\" target=\"_blank\"\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003eprocessResults\u003c/span\u003e(Response response){\u003cbr\u003e    ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try\u003c/span\u003e{\u003cbr\u003e        String jsonData = response.body().string()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONObject yelpJSON = \u003cspan\u003enew \u003c/span\u003eJSONObject(jsonData)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONArray businessesJSON = yelpJSON.getJSONArray(\u003cspan\u003e\"businesses\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if \u003c/span\u003e(response.isSuccessful()){\u003cbr\u003e            \u003cspan\u003efor \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ei = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ei \u0026lt; businessesJSON.length()\u003cspan\u003e; \u003c/span\u003ei++){\u003cbr\u003e                JSONObject restaurantJSON = businessesJSON.getJSONObject(i)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString name = restaurantJSON.getString(\u003cspan\u003e\"name\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString phone = restaurantJSON.optString(\u003cspan\u003e\"display_phone\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Phone not available\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString website = restaurantJSON.getString(\u003cspan\u003e\"url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003erating = restaurantJSON.getDouble(\u003cspan\u003e\"rating\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString imageUrl = restaurantJSON.getString(\u003cspan\u003e\"image_url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elatitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"latitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elongitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"longitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eArrayList\u0026lt;String\u0026gt; address = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray addressJSON = restaurantJSON.getJSONObject(\u003cspan\u003e\"location\"\u003c/span\u003e).getJSONArray(\u003cspan\u003e\"display_address\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; addressJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    address.add(addressJSON.get(y).toString())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                ArrayList\u0026lt;String\u0026gt; categories = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray categoriesJSON = restaurantJSON.getJSONArray(\u003cspan\u003e\"categories\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; categoriesJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    categories.add(categoriesJSON.getJSONObject(y).getString(\u003cspan\u003e\"title\"\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                Restaurant restaurant = \u003cspan\u003enew \u003c/span\u003eRestaurant(name\u003cspan\u003e, \u003c/span\u003ephone\u003cspan\u003e, \u003c/span\u003ewebsite\u003cspan\u003e, \u003c/span\u003erating\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        \u003c/span\u003eimageUrl\u003cspan\u003e, \u003c/span\u003eaddress\u003cspan\u003e, \u003c/span\u003elatitude\u003cspan\u003e, \u003c/span\u003elongitude\u003cspan\u003e, \u003c/span\u003ecategories)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003erestaurants.add(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003cbr\u003e    } \u003cspan\u003ecatch \u003c/span\u003e(IOException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e} \u003cspan\u003ecatch \u003c/span\u003e(JSONException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    \u003cspan\u003ereturn \u003c/span\u003erestaurants\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003eThe method above parses out information from this API response format: ...\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-json prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"total\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e8228\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"businesses\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"rating\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e4\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"price\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"$\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"phone\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"+14152520800\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"id\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"is_closed\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003efalse\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"categories\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"alias\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"title\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Coffee \u0026amp; Tea\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"review_count\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1738\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Four Barrel Coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"https://www.yelp.com/biz/four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coordinates\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.7670169511878\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42184275\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"image_url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"http://s3-media2.fl.yelpcdn.com/bphoto/MmgtASP3l_t4tPCL1iAsCg/o.jpg\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"location\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"city\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"San Francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"country\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"US\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address2\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address3\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"state\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"CA\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address1\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"375 Valencia St\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"zip_code\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"94103\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"distance\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1604.23\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"transactions\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"str\"\u003e\"pickup\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"delivery\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e]\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e//\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"region\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"str\"\u003e\"center\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.767413217936834\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42820739746094\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003e... and creates objects of the following class:\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mName;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mPhone;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mWebsite;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mRating;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mImageUrl;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLatitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLongitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mCategories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mName = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mPhone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mWebsite = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mImageUrl = imageUrl;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mAddress = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLatitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLongitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCategories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mName;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mPhone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  mWebsite;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mAddress;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLatitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLongitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mCategories;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor a refresher on JSONObjects check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/org/json/JSONObject.html\" target=\"_blank\"\u003eAndroid developer documentation\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"weekend-json-and-xml-and-data-models"},{"id":2314,"title":"Weekend: Threading and the UI Thread","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eIn this lesson we'll update our MyRestaurants application to display the names of the restaurants received from the Yelp API instead of the hard-coded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in RestaurantsActivity.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we created an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand attached it to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003emethod. However, now that we're relying on the Yelp API, we cannot actually display any restaurants until\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe've successfully received a response. In order to ensure these things are handled gracefully and in the correct order, we'll need to explore a concept called threading.\u003c/p\u003e\r\n\u003ch2\u003eThreads and Multi-Threading\u003c/h2\u003e\r\n\u003cp\u003eIn programming, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ethread\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the execution of instructions that can be managed independently. For instance, following a recipe to make pancakes in the morning can be considered a metaphorical \"thread\".\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eMulti-threading\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply a program executing multiple threads at once. Let's say you're simultaneously making coffee\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecooking pancakes. That's multi-threading.\u003c/p\u003e\r\n\u003ch2\u003eThreading in Android\u003c/h2\u003e\r\n\u003cp\u003eWhen an Android application is launched, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emain thread\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis always created. This thread is in charge of the user interface. Every additional component is also run on this thread, unless explicitly instructed otherwise.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eIt is also the only thread that may update the user interface\u003c/strong\u003e. For this reason, it's also often referred to as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUI thread\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eIt's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereally\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eimportant not to slow down the main thread with lengthy processes. If tons of complex code is executed on the main thread, it can get held up. This results in poor performance: Apps can slow down, freeze, or even crash entirely.\u003c/p\u003e\r\n\u003cp\u003eAs we know, OkHttp and SignPost manage the complex process of contacting Yelp. Because creating OAuth signatures, requesting data, and waiting for a response all take time, OkHttp completes this work on a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebackground\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eworker thread\u003c/strong\u003e. This is an additional thread, separate from our main thread, that may execute code. By keeping API requests off our main/UI thread, our application remains performant and responsive.\u003c/p\u003e\r\n\u003ch3\u003eThreading in MyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eCurrently, our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback is triggered as soon as we receive data from the Yelp API. In this callback, we run our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.processResults()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to parse JSON, create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, and return an array of each new object.\u003c/p\u003e\r\n\u003cp\u003eAfter this occurs, we need to update our RestaurantsActivity's corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user these restaurants. But how do we do this?\u003c/p\u003e\r\n\u003cp\u003eBecause\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a callback executed by OkHttp, it's actually running on that background thread OkHttp creates. And, we can\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eonly alter the user interface from the main/UI thread.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eSo, we can't add code to display our restaurants in the callback. If we tried, our app would crash and we would receive an error reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod always occurs on the main/UI thread. But we can't set the adapter and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display our list of restaurants there either. Because\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe complete our API request, we simply don't have the information to display yet.\u003c/p\u003e\r\n\u003cp\u003eIn order to ensure everything occurs in the correct order and thread we'll need to wait until our restaurant information is successfully returned, then explicitly instruct our app to return to the UI thread where we can alter the user interface, and display restaurants to the user.\u003c/p\u003e\r\n\u003ch2\u003eSwitching to UI Thread\u003c/h2\u003e\r\n\u003cp\u003eThankfully, this is such a common conundrum that there's a built-in method in Android to do this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.runOnUiThread()\u003c/code\u003e. As described in its\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#runOnUiThread(java.lang.Runnable)\"\u003edocumentation entry\u003c/a\u003e, this method takes something called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument, and places all code within it in the UI thread.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an interface meant to handle sharing code between threads. It has only one method:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erun()\u003c/code\u003e. This method contains the code we want to run on the thread specified.\u003c/p\u003e\r\n\u003cp\u003eWe'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.runOnUiThread()\u003c/code\u003e, and override its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erun()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n  ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n        ...\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        }\r\n\r\n                    }\r\n            ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eAdditionally, \u003c/span\u003e\u003cstrong\u003enotice we've removed the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003etry\u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u003c/span\u003e\u003cspan class=\"kwd\"\u003ecatch\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock from the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback\u003c/strong\u003e\u003cspan\u003e in \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e. We originally introduced this \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003etry\u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u003c/span\u003e\u003cspan class=\"kwd\"\u003ecatch\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e in the \u003c/span\u003e\u003ca href=\"pages/weekend-api-requests-and-responses?module_item_id=i2c373f4e22f011d0470b0a1a6daf3d83\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/weekend-api-requests-and-responses\" data-api-returntype=\"Page\"\u003eAPI Requests and Responses\u003c/a\u003e\u003cspan\u003e lesson \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e we wrote a method to parse our data. However, we now have a \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003etry\u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u003c/span\u003e\u003cspan class=\"kwd\"\u003ecatch\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e block in Yelp Service's \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eprocessResults\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e method to handle any exceptions. Because \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eprocessResults\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e is being called right here in \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e, we don't need to catch exceptions twice.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen a user navigates to the RestaurantsActivity, we want them to see a list of restaurant names specific to the zip code they entered in the MainActivity. Let's create a list of these names here:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        String[] restaurantNames = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[mRestaurants.size()];\r\n                        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; restaurantNames.length; i++) {\r\n                            restaurantNames[i] = mRestaurants.get(i).getName();\r\n                        }\r\n             ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we can create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pass our data to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e. The resulting code should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        String[] restaurantNames = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[mRestaurants.size()];\r\n                        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; restaurantNames.length; i++) {\r\n                            restaurantNames[i] = mRestaurants.get(i).getName();\r\n                        }\r\n\r\n                        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \r\n                           android.R.layout.simple_list_item_1, restaurantNames);\r\n                        mListView.setAdapter(adapter);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eRefactoring\u003c/h3\u003e\r\n\u003cp\u003eWe can also refactor by removing the following code:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRemove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray of hard-coded restaurant names, \u003cspan\u003eif you haven't already done so.\u003c/span\u003e We're now receiving restaurant names directly from the Yelp API.\u003c/li\u003e\r\n\u003cli\u003eRemove any lines creating or setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. We're now creating and setting adapters in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRunnable\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.run()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eRemove our click listener that displays a toast with the restaurant name from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e. We'll no longer need this feature. In the next few lessons we'll program our app to navigate to a detail page when the user selects a restaurant.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBecause our user Interface is only displaying restaurant\u003cspan\u003e \u003c/span\u003e\u003cem\u003enames\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for now) let's log the other attributes of each restaurant to ensure they've been correctly saved too.\u003c/p\u003e\r\n\u003cp\u003eAfter all changes described here, RestaurantsActivity should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eRestaurantsActivity \u003cspan\u003eextends \u003c/span\u003eAppCompatActivity {\u003cbr\u003e    \u003cspan\u003epublic static final \u003c/span\u003eString \u003cspan\u003eTAG \u003c/span\u003e= RestaurantsActivity.\u003cspan\u003eclass\u003c/span\u003e.getSimpleName()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003elocationTextView\u003c/span\u003e) TextView \u003cspan\u003emLocationTextView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003elistView\u003c/span\u003e) ListView \u003cspan\u003emListView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003erestaurants \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e(Bundle savedInstanceState) {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetContentView(R.layout.\u003cspan\u003eactivity_restaurants\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eButterKnife.\u003cspan\u003ebind\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eIntent intent = getIntent()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eString location = intent.getStringExtra(\u003cspan\u003e\"location\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emLocationTextView\u003c/span\u003e.setText(\u003cspan\u003e\"Here are all the restaurants near: \" \u003c/span\u003e+ location)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003egetRestaurants(location)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003eprivate void \u003c/span\u003e\u003cspan\u003egetRestaurants\u003c/span\u003e(String location){\u003cbr\u003e        \u003cspan\u003efinal \u003c/span\u003eYelpService yelpService = \u003cspan\u003enew \u003c/span\u003eYelpService()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eyelpService.\u003cspan\u003efindRestaurants\u003c/span\u003e(location\u003cspan\u003e, new \u003c/span\u003eCallback(){\u003cbr\u003e\u003cbr\u003e            \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonFailure\u003c/span\u003e(Call call\u003cspan\u003e, \u003c/span\u003eIOException e){\u003cbr\u003e                e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e            \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonResponse\u003c/span\u003e(Call call\u003cspan\u003e, \u003c/span\u003eResponse response) \u003cspan\u003ethrows \u003c/span\u003eIOException {\u003cbr\u003e                \u003cspan\u003erestaurants \u003c/span\u003e= \u003cspan\u003eyelpService\u003c/span\u003e.processResults(response)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eRestaurantsActivity.\u003cspan\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan\u003enew \u003c/span\u003eRunnable() {\u003cbr\u003e                    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003erun\u003c/span\u003e() {\u003cbr\u003e                      String[] restaurantNames = \u003cspan\u003enew \u003c/span\u003eString[\u003cspan\u003erestaurants\u003c/span\u003e.size()]\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                      for\u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ei = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ei\u0026lt;restaurantNames.\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003ei++){\u003cbr\u003e                          restaurantNames[i]=\u003cspan\u003erestaurants\u003c/span\u003e.get(i).getName()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                      \u003c/span\u003e}\u003cbr\u003e                      ArrayAdapter adapter = \u003cspan\u003enew \u003c/span\u003eArrayAdapter(RestaurantsActivity.\u003cspan\u003ethis, \u003c/span\u003eandroid.R.layout.\u003cspan\u003esimple_list_item_1\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003erestaurantNames)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                      \u003c/span\u003e\u003cspan\u003emListView\u003c/span\u003e.setAdapter(adapter)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        for \u003c/span\u003e(Restaurant restaurant : \u003cspan\u003erestaurants\u003c/span\u003e) {\u003cbr\u003e                            Log.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Name: \" \u003c/span\u003e+ restaurant.getName())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Phone: \" \u003c/span\u003e+ restaurant.getPhone())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Website: \" \u003c/span\u003e+ restaurant.getWebsite())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Image url: \" \u003c/span\u003e+ restaurant.getImageUrl())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Rating: \" \u003c/span\u003e+ Double.\u003cspan\u003etoString\u003c/span\u003e(restaurant.getRating()))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Address: \" \u003c/span\u003e+ android.text.TextUtils.\u003cspan\u003ejoin\u003c/span\u003e(\u003cspan\u003e\", \"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003erestaurant.getAddress()))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Categories: \" \u003c/span\u003e+ restaurant.getCategories().toString())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        \u003c/span\u003e}\u003cbr\u003e                    }\u003cbr\u003e                })\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        })\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e}\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.text.TextUtils.join(\", \", restaurant.getAddress())\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just a nice little shortcut to join\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLists\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayLists\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Android.\u003c/p\u003e\r\n\u003cp\u003eNow let's run our app and we should see a new list of restaurants on our RestaurantActivity and a bunch of corresponding data in the logcat. Good work!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e\u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eThread\u003c/strong\u003e: The execution of instructions that can be managed independently.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMulti-threading\u003c/strong\u003e: A program executing multiple threads at once.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMain Thread\u003c/strong\u003e: The default, primary thread created anytime an Android application is launched. Also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUI thread\u003c/strong\u003e, it is in charge of handling all user interface and activities, unless otherwise specified.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an interface meant to handle sharing code between threads. It contains only one method:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erun()\u003c/code\u003e. This method generally contains the code we want to run on the thread specified.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/processes-and-threads.html\"\u003eProcesses and Threads\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOkHttp Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/square/okhttp/wiki/Concurrency\"\u003eThreading in OkHttp\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eStack Overflow discussion regarding\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://stackoverflow.com/questions/24246783/okhttp-response-callbacks-on-the-main-thread\"\u003eAltering UI in OkHttp Callbacks\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"weekend-threading-and-the-ui-thread"},{"id":2315,"title":"Weekend: Refactor: Subpackages","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.8em;\"\u003eRefactor: Subpackages\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eOur main package is starting to look a little messy. We have Java classes for our Restaurant model mixed up with Java classes for our user interface. Let’s create a few sub-packages to organize our project better.\u003c/p\u003e\r\n\u003cp\u003eTo create a new sub-package, right click on the main package name and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Package\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg src=\"https://www.dropbox.com/s/k92vjsgkdfx06c4/creating-new-subpackage.png?raw=1\" alt=\"creating-a-subpackage-in-android-studio\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eWe will create the following three subpackages to better organize our project:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cem\u003emodels\u003c/em\u003e, containing our Restaurant model and any future models.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e, containing all of our activities.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003eservices\u003c/em\u003e, containing our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eDrag and drop each Java class into their corresponding packages and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRefactor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the dialog that appears:\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg src=\"https://www.dropbox.com/s/ln4juhm1crsnvkl/refactoring-with-subpackages-dialog-box.png?raw=1\" alt=\"refactor-dialog-box-with-subpackages\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eOnce complete, our file tree in Android Studio should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg src=\"https://www.dropbox.com/s/pmwn1hnf1t50voi/refactoring-with-subpackages-filetree.png?raw=1\" alt=\"refactored-file-tree-with-subpackages-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","exportId":"weekend-refactor-subpackages"},{"id":2316,"title":"Weekend: Custom Adapters with RecyclerView","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv class=\"alert alert-danger\"\u003e\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e In some cases, adding the RecyclerView dependency library can lead to version incompatibility errors. This is a known issue. If you experience errors after adding the RecyclerView library, see the \u003c/span\u003e\u003cem\u003eAddressing Version Incompatibility\u003c/em\u003e\u003cspan\u003e section at the end of this lesson.\u003c/span\u003e\n\u003c/div\u003e\r\n\u003cp\u003eSo far, we only used Android's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapters\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display lists of information in an activity. We've altered those ArrayAdapters to be able to pass additional data, and we have made a simple custom adapter to work with a simple layout. Often though, we'll want to display more than just a single string, and we'll want to use our own layout. Because the objects we are passing around and parsing into custom layouts are about to get more complex, we will spend some time learning about a powerful new tool to process information into a repeating layout: A RecyclerView.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBegin by reading CodePath's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-the-RecyclerView\"\u003eUsing the Recycler View\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eRecyclerView\u003c/h2\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a newer Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject meant to render any adapter-based\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e. It's similar to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e, but with many updated features, including the ability to implement both horizontal and vertical lists. (This will come in handy later, when we add functionality to display content horizontally\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003evertically depending on the device orientation).\u003c/p\u003e\r\n\u003ch3\u003eRecyclerView Requirements\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewidget, you must also include its corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for positioning individual item views inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. The LayoutManager knows the size of the layout, and can compute how much space needs to be reserved to show the optimum amount of entries.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThere are three built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoptions: *\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayoutManager\u003c/code\u003e: Displays items in a vertical or horizontal scrolling list. *\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGridLayoutManager\u003c/code\u003e: Displays items in a grid. *\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eStaggeredGridLayoutManager\u003c/code\u003e: Displays items in a more staggered grid. * Every\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust also be backed by a model - this means that it can parse or lay out a specific\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eRecyclerView.Adapter\u003c/h2\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e, much like the built-in Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e, will populate the data into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. It also converts a Java object into an individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be inserted and displayed to the user.\u003c/p\u003e\r\n\u003cp\u003eLet's look at this image one more time, as we are about to build something very similar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/vgzhim65pwne6mm/app_object_overview.png\" alt=\"app_object_overview\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo be able to bring the above sketch to life, we'll need the following code pieces.\u003c/p\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequires a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an object that stores multiple\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside the tag field of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso they can be immediately loaded, and you don't have to find them by id repeatedly. This also improves application performance.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas three primary methods:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateViewHolder()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemCount()\u003c/code\u003e.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreateViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einflates an XML layout and returns a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the various information in the list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. This is the moment when the data from our model gets associated, aka \"bound\" to our view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003egetItemCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply returns the number of items the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be responsible for listing, so that it knows how many list item views it will need to recycle.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eConsider this visual depictions of how the RecyclerView works:\u003cimg src=\"https://dl.dropboxusercontent.com/s/33dq0242i027mlh/06-recyclerviewer-adapter.png\" alt=\"06-recyclerviewer-adapter.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eand\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/r53ul5s62zlmfrm/04-view-recycling.png\" alt=\"04-view-recycling.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eEnough theory. Let's get coding.\u003c/p\u003e\r\n\u003ch2\u003eAdding RecyclerView to MyRestaurants\u003c/h2\u003e\r\n\u003cp\u003eFirst, we'll add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esupport library:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n   ...\r\n    implementation \u003cspan class=\"hljs-string\"\u003e'com.android.support:recyclerview-v7:+'\u003c/span\u003e\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll then add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewidget to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v7.widget.RecyclerView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/recyclerView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext we'll create a layout to define the appearance of each restaurant list item. Create a new layout resource file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add the following code to create our list item placeholder:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#ffffff\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe wrap the ratingTextView in a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRelativeLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside of it's containing vertical\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso that it will display nicely on the bottom right corner of the list item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo do this, we must specify that the relative layout's height and width match the remaining space allotted after the restaurant and cuisine type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ematch_parent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003evalue.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFeel free to use any placeholder image you want. Here, we are using an image in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDrawable\u003c/code\u003efolder called \"food_dish\".\u003c/p\u003e\r\n\u003ch2\u003eCreating Custom Adapters\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll create our custom adapter. Create a new package called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e. Inside it, make a new Java class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantListAdapter\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eOur custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will need to extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003eclass. We'll also include a constructor:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe will need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto calculate the item count, which informs the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehow many individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit will need to recycle.\u003c/p\u003e\r\n\u003ch3\u003eRecyclerView View Holders\u003c/h3\u003e\r\n\u003cp\u003eWe also know our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadapter will require a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. We can create this as an inner-class here within our RestaurantListAdapter class. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einner-class\u003c/strong\u003e, also sometimes referred to as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enested class\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply a class that resides\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanother class. They have all functionality of a non-nested class, but with limited scope. They also have full access to the class in which they are nested.\u003c/p\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003einner class will extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.ViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, use ButterKnife to bind all views in the layout, and include a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will set the contents of the layout's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the attributes of a specific restaurant:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mRestaurantImageView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.categoryTextView) TextView mCategoryTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingTextView;\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n            mContext = itemView.getContext();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n            mNameTextView.setText(restaurant.getName());\r\n            mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that we have the necessary ViewHolder, we can add the remaining three methods required by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateViewHolder()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemCount()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e RestaurantListAdapter.\u003cspan class=\"hljs-function\"\u003eRestaurantViewHolder \u003cspan class=\"hljs-title\"\u003eonCreateViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ViewGroup parent, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e viewType)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.restaurant_list_item, parent, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        RestaurantViewHolder viewHolder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantViewHolder(view);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e viewHolder;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RestaurantListAdapter.RestaurantViewHolder holder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        holder.bindRestaurant(mRestaurants.get(position));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetItemCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.size();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mRestaurantImageView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.categoryTextView) TextView mCategoryTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingTextView;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n            mContext = itemView.getContext();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n            mNameTextView.setText(restaurant.getName());\r\n            mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.onCreateViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod inflates the layout, and creates the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject required from the adapter. We will revisit this momentarily.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e.onBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eupdates the contents of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto reflect the restaurant in the given position.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e.getItemCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the number of items the adapter will display.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we set up our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. We find the views and set their values for the item in the list.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eUsing Custom Adapters with RecyclerView\u003c/h2\u003e\r\n\u003cp\u003eNow, we are ready to use our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our RestaurantsActivity. Similar to the way we previously used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein conjunction with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapters\u003c/code\u003e, we'll call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.setAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto set\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas its new adapter.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, we'll need to create and set an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003erequires. We'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayoutManager\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirst, we'll replace these two lines of code near the top of the file:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"lit\"\u003e@Bind\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eR\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eid\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003elocationTextView\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eTextView\u003c/span\u003e\u003cspan class=\"pln\"\u003e mLocationTextView\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"lit\"\u003e@Bind\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eR\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eid\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003elistView\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eListView\u003c/span\u003e\u003cspan class=\"pln\"\u003e mListView\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e..with these two lines:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"lit\"\u003e@Bind\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eR\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eid\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003erecyclerView\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eRecyclerView\u003c/span\u003e\u003cspan class=\"pln\"\u003e mRecyclerView\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"kwd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"pln\"\u003e mAdapter\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBecause we're now depending on our RecyclerView and corresponding adapter to display information in our UI, instead of our old LocationText and List views.\u003c/p\u003e\r\n\u003cp\u003eWe can also remove the following line completely:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        mLocationTextView\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003esetText\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"str\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e+\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBecause we're not longer using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003emLocationTextView\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit refers to.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll add code to instantiate the adapter, associate it with our RecyclerVIew, and assign a layout manager to our overriden\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003erun\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                restaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getApplicationContext(), restaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \r\n                                \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eNote on RecyclerView Performance\u003c/h2\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecyclerView.setHasFixedSize(true);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einforms\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat its width and height should always remain the same. Otherwise, as individual list item views are continually recycled, it may attempt to reset its own size to best fit the content.\u003c/p\u003e\r\n\u003cp\u003eIf each list item was a different size, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emight need to resize as we scrolled to best fit content, but\u003cspan\u003e \u003c/span\u003e\u003cem\u003eour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elist items are pretty uniform. So, we can avoid wasting precious processing power by setting a fixed size.\u003c/p\u003e\r\n\u003cp\u003eWe now have a customized list of restaurants using a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. Nice work!\u003c/p\u003e\r\n\u003cp\u003eIf you run across an error building your program with an error header like: \u003c/p\u003e\r\n\u003cpre\u003eAndroid resource linking failed...\u003c/pre\u003e\r\n\u003cp\u003eDowngrade your gradle version to 3.1.4 i.e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003ebuild.gradle(Project:restaurant)\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eclasspath 'com.android.tools.build:gradle:3.1.4'\u003c/pre\u003e\r\n\u003cp\u003eThe sync.\u003c/p\u003e\r\n\u003cp\u003eYou could also change the compileSdkVersion, targetSdkVersion and the sdk as follows :\u003c/p\u003e\r\n\u003cp\u003ebuild.gradle(Project:app):\u003c/p\u003e\r\n\u003cpre\u003ecompileSdkVersion 28\u003cbr\u003etargetSdkVersion 28\u003cbr\u003e....\u003cbr\u003edependencies {\u003cbr\u003e...\u003cbr\u003eimplementation 'com.android.support:preference-v7:28.0.0'\u003cbr\u003e....\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cp\u003eBut this may affect the running of your tests given robolectric doesn't support SdkVersion 28  yet... So for robolectric tests (If they won't have rolled out support for the 28th API yet) revert back to ;\u003c/p\u003e\r\n\u003cpre\u003ecompileSdkVersion 27\u003cbr\u003etargetSdkVersion 27\u003cbr\u003e....\u003cbr\u003edependencies {\u003cbr\u003e...\u003cbr\u003eimplementation 'com.android.support:appcompat-v7:27.1.1'\u003cbr\u003e...\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cpre class=\"default prettyprint prettyprinted\"\u003e\u003ccode\u003e\u003cspan class=\"pln\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eVideo Version of this Lesson\u003c/h2\u003e\r\n\u003cp\u003eHere is the slightly outdated, optional video for this lesson if you would like to review it for reference.\u003c/p\u003e\r\n\u003cdiv class=\"video\"\u003e\u003ciframe src=\"https://player.vimeo.com/video/158270113\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/9_Custom_Adapters_RecyclerView\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRecyclerView`\u003c/strong\u003e: A newer Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject meant to render any adapter-based\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e. It's similar to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e, but with many updated features, including the ability to implement both horizontal and vertical lists.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003c/strong\u003e: Responsible for positioning individual item views inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. There are three built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoptions:\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eLinearLayoutManager\u003c/code\u003e: Displays items in a vertical or horizontal scrolling list.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eGridLayoutManager\u003c/code\u003e: Displays items in a grid.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eStaggeredGridLayoutManager\u003c/code\u003e: Displays items in a more staggered grid.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003c/strong\u003e: Similar to the built-in Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e. It will populate the data into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. It also converts a Java object into an individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be inserted and displayed to the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003c/strong\u003e: An object that stores multiple\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside the tag field of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso they can be immediately loaded, and you don't have to find them by id repeatedly. A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis required by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInner-class\u003c/strong\u003e: Also sometimes referred to as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enested class\u003c/strong\u003e. A class that resides\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanother class. They have all functionality of a non-nested class, but with limited scope. They also have full access to the class in which they are nested.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003eCreating a custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e RestaurantListAdapter.\u003cspan class=\"hljs-function\"\u003eRestaurantViewHolder \u003cspan class=\"hljs-title\"\u003eonCreateViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ViewGroup parent, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e viewType)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.restaurant_list_item, parent, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        RestaurantViewHolder viewHolder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantViewHolder(view);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e viewHolder;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RestaurantListAdapter.RestaurantViewHolder holder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        holder.bindRestaurant(mRestaurants.get(position));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetItemCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.size();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mRestaurantImageView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.categoryTextView) TextView mCategoryTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingTextView;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n            mContext = itemView.getContext();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n            mNameTextView.setText(restaurant.getName());\r\n            mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInstantiating and setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                restaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getApplicationContext(), restaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \r\n                                \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/9_Custom_Adapters_RecyclerView\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"weekend-custom-adapters-with-recyclerview"},{"id":2317,"title":"Weekend: Images with Picasso","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.8em;\"\u003eImages with Picasso\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eThe text in our custom list adapter is working just right, but we haven't updated the source for our ImageView yet. Let's do that now.\u003c/p\u003e\r\n\u003cp\u003eWe will use another library by Square called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://square.github.io/picasso/\"\u003ePicasso\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewhich will make this task a piece of cake. Picasso simplifies the task of loading images into an Android application by offering automatic memory and disk caching, and other features.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by adding it to our dependencies:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n   ...\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor our list item ImageView. To attach the string imageUrl to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc\u003c/em\u003e, simply add the following to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n    P\u003c/code\u003eicasso.\u003cspan\u003eget\u003c/span\u003e().load(restaurant.getImageUrl()).into(\u003cspan\u003emRestaurantImageView\u003c/span\u003e)\u003ccode class=\"java hljs\"\u003e; \u003cbr\u003e...\u003cbr\u003e } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis line of code instructs the application to allow Picasso to handle the image loading. Now, if we run our application, we should see images next to each restaurant's details!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003cspan style=\"font-size: 14pt;\"\u003eWorking with HTTP and HTTPS (Not Yelp related) \u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eFor those of you following along with the feature project while implementing the functional features into your IP - Some may encounter a situation where the images are not displaying but after debugging your code (and finding no error - you models are fine, the viewholder in the adapter and recycler view are both initialized and attached in the right way). Logging the url-value received from the API in the logcat works just fine and finally the url loads an image in your browser when you load it in your browsers address bar. Yet there are no related errors in the logcat.\u003c/p\u003e\r\n\u003cp\u003eOne possible source of the problem if/when all conditions checkout, is the scheme used to construct the image url. For a refresher on url schemes \u003ca href=\"https://moringaschool.instructure.com/courses/12/pages/weekend-uniform-resource-locator-url?module_item_id=499\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/12/pages/weekend-uniform-resource-locator-url\" data-api-returntype=\"Page\"\u003eread-up-on-them-here\u003c/a\u003e. This error comes about because f\u003cspan\u003erom Android 9 Pie, requests without encryption won't work. And by default, the System will expect you to use TLS by default. You can \u003ca href=\"https://android-developers.googleblog.com/2018/08/introducing-android-9-pie.html\"\u003eread more about this here\u003c/a\u003e.  There are several ways around this issue, among them:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSolution 1. In your \u003cem\u003eprocessResults(results)\u003c/em\u003e in the ...service.java class, you can convert the already received the url from a \u003cem\u003ehttp \u003c/em\u003escheme into a \u003cem\u003ehttps \u003c/em\u003escheme using the replace function, i.e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eString newUrlString = API-Url\u003cspan class=\"pl-k\"\u003e.\u003c/span\u003ereplace(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ehttp\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e,\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ehttps\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e);  //API-Url being the variable holding the value of the url retrieved from your respective API\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThen use the \u003cem\u003enewUrlString \u003c/em\u003evariable as your new imageUrl variable to construct your object. The new Url will eventually be used by picasso as a parameter in making a successful fetch-image request. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSolution 2.  This is manly meant formbig projects where changing every re-formatting every url may prove inefficient. Set a \u003ccode\u003enetworkSecurityConfig\u003c/code\u003e in your Manifest \u003ccode\u003eapplication\u003c/code\u003e tag like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre class=\"lang-java prettyprint prettyprinted\"\u003e\u003ccode\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003emanifest \u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003eapplication android\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003enetworkSecurityConfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"@xml/network_security_config\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\r\n\r\n\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003eapplication\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003emanifest\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen in your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003exml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder you now have to create a file named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enetwork_security_config\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust like the way you have named it in the Manifest and from there the content of your file should be like this to enable all requests without encryptions:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eres/xml/network_security_config.xml\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre class=\"lang-java prettyprint prettyprinted\"\u003e\u003ccode\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003enetwork\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003esecurity\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003ebase\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig cleartextTrafficPermitted\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"true\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003etrust\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003eanchors\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n            \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003ecertificates src\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"system\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003etrust\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003eanchors\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003ebase\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003enetwork\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003esecurity\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFrom there you are good to go. Now your app will make requests for all types of connections. For additional information \u003ca href=\"https://developer.android.com/training/articles/security-config\"\u003eread-up-on-the-process-here.\u003c/a\u003e  \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e \u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/10_picasso\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"weekend-images-with-picasso"},{"id":969,"title":"Weekend: Android Activity Lifecycle","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"content\"\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003ch1\u003eManaging Activities\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs you know, Android applications are made up of a series of activities. When an app is running, Android manages these multiple activities using something called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eactivity stack\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhen a the user navigates from one activity to another, a new activity is started. When that activity takes the foreground on the device screen, it becomes the current or “running” activity, and is placed on the top of the activity stack.\u003c/p\u003e\r\n\u003cp\u003eIn addition to running, there are three other states an activity can be in: Stopped, restarted, and paused. Other activities (from both the same application and others) are then paused or stopped, and take lower precedence in the activity stack.\u003c/p\u003e\r\n\u003cp\u003eFor instance, if a user is interacting with an activity, a second activity is partially visible, and two activities are stopped in the background, your activity stack would look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/ozigopkhmt0vabb/activity%20stack.png?raw=1\" alt=\"android-activity-stack\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eActivity States\u003c/h2\u003e\r\n\u003cp\u003eBut why do we care what state our activity is in? Well, Android manages Activities based on their state. This helps Android identify activities that are no longer in use, allowing the OS to reclaim necessary memory and resources.\u003c/p\u003e\r\n\u003cp\u003eFor instance, let's say the activity stack on your device looks as depicted in the diagram above. Then, suddenly, you received a phone call. The Android system would likely need to free up some memory in order for you to interact with this call. Your phone application that manages ingoing and outgoing calls would also become the top activity on the stack, and the other application would enter a stopped state. Android may also need to kill stopped activities to free up memory to handle the phone call.\u003c/p\u003e\r\n\u003cp\u003eYour activity stack would likely be updated to look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/svdfwj4ttkyhqcr/activity%20stack%202.png?raw=1\" alt=\"updated-android-activity-stack\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThese states can be broken into 4 main groups as follows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eActive or Running\u003c/strong\u003e: Activities are considered active or running if they are visible to the user. This also means they’re at the top of the activity stack. This is considered the highest priority activity in Android.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ePaused\u003c/strong\u003e: When the device goes to sleep, or an activity is partially hidden, the activity is considered paused. Paused activities are alive and maintain all state and member information. This is the second highest priority activity in Android.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eStopped/Backgrounded\u003c/strong\u003e: Activities completely hidden by other activities are considered stopped or “in the background”. They still try to retain their state and member information as long as possible. They are also are considered the lowest priority state. Therefore, Android will kill activities in this state if higher priority activities require more memory and resources to operate.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRestarted\u003c/strong\u003e: It is possible for an activity that is anywhere from paused to stopped in the lifecycle to be removed from memory by Android. If the user navigates\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the activity it must then be restarted, restored to its previously saved state, and displayed to the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eLifecycle Methods\u003c/h2\u003e\r\n\u003cp\u003eThere are seven built-in methods that manage the lifecycle of an Android Application, and assist in moving activities between the states detailed above. We can override any of these methods to help making managing states a lot easier.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the activity is first created. This method contains all normal static setup, such as creating views, initializing variables, binding data, etc. This method is\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efollowed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e. We’ve already used this method to assist in setting up our activities.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThis method is called when the activity becomes visible to the user (and therefore active). It is\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways \u003c/em\u003efollowed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if the activity becomes hidden, as detailed in the “stopped/backgrounded” state above) or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResume()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if it remains in the foreground).\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonResume()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the activity begins interacting with the user.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efollowed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonPause()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonRestart()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when a stopped activity is being started again. Always followed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonPause()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the system is about to start resuming a previous activity. There are two possible lifecycle methods that will be called after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnPause()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eOnResume()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called if the Activity is to be returned to the foreground.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eOnStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called if the Activity is being placed in the background.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the activity is no longer visible to the user. Either because another Activity has resumed, and is covering this one, an existing activity is coming to the foreground, or the activity is about to be destroyed. It is always followed by either\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled directly before the activity is destroyed. Either because the activity is finishing (ie:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas called upon it), or because the system is temporarily destroying this instance of the activity to save space.\u003c/p\u003e\r\n\u003ch2\u003eLifecycle Loops\u003c/h2\u003e\r\n\u003cp\u003eThere are three loops Android developers are most interested in monitoring within an activity. Consider the following excerpt and diagram from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\"\u003eActivity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eentry in the Android Developer Guides:\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/vz4y92i31wic00w/android-guides-lifecycle-diagram.png?raw=1\" alt=\"android-developer-guide-diagram\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eentire lifetime\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof an activity occurs between the first call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate() \u003c/code\u003ethrough to a single final call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e. An activity will do all setup of \"global\" state in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, and release all remaining resources in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e. For example, if it has a thread running in the background to download data from the network, it may create that thread in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then stop the thread in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evisible lifetime\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof an activity happens between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e. During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. ...\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eforeground lifetime\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof an activity happens between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResume()\u003c/code\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonPause()\u003c/code\u003e. During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states -- for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered -- so the code in these methods should be fairly lightweight.\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\"\u003eActivity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eentry from the Android Developers Guide. And the Xamarin\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/\"\u003eAndroid Activity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003etutorial.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eActivity Stack\u003c/strong\u003e: Multiple activities in different states, being managed by Android. The top of the stack is always the currently-running activity. Paused activities are next, and stopped activities below that. The stack's order may change as users interact with different activities.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eActivity States\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eActive\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eRunning\u003c/strong\u003e: Activities are considered active or running if they are visible to the user. This also means they’re at the top of the activity stack.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ePaused\u003c/strong\u003e: When the device goes to sleep, or an activity is partially hidden, the activity is considered paused. Paused activities are alive and maintain all state and member information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eStopped\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBackgrounded\u003c/strong\u003e: Activities completely hidden by other activities are considered stopped or “in the background”. They are considered lowest priority, and Android will kill them if additional resources and/or memory is required by the running activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRestarted\u003c/strong\u003e: An activity that was killed by Android, but restarted by the user and returned to its previous state.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eLifecycle Methods\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonCreate()\u003c/code\u003e: Called when the activity is first created. This method contains all normal static setup.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonStart()\u003c/code\u003e: Called when the activity becomes visible to the user (and therefore active).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonResume()\u003c/code\u003e: Called when the activity begins interacting with the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonRestart()\u003c/code\u003e: Called when a stopped activity is being started again.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonPause()\u003c/code\u003e: Called when the system is about to start resuming a previous activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonStop()\u003c/code\u003e: Called when the activity is no longer visible to the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e: Called directly before the activity is destroyed.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eLifecycle Loops\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eEntire Lifetime\u003c/strong\u003e: The entire lifetime of an activity includes every method that takes place between the first call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough the final call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eVisible Lifetime\u003c/strong\u003e: Referring to the time in which the activity is visible to the user, between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eForeground Lifetime\u003c/strong\u003e: Referring to the time in which the activity is in front of all other activities, and interacting with the user. Between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResume()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonPause()\u003c/code\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\"\u003eActivity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eentry from the Android Developers Guide.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eXamarin\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/\"\u003eAndroid Activity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003etutorial.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","exportId":"weekend-android-activity-lifecycle"},{"id":2318,"title":"Weekend: API Research","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003eThis week we’ll focus on gathering data from an API for use in our Android applications. This means Friday’s independent project will require you integrate an API into the ongoing independent project you began last week.\u003c/p\u003e\r\n\u003cp\u003eIn order to prepare,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eyou must decide which API you’ll integrate\u003cspan\u003e \u003c/span\u003e\u003cem\u003eahead of time\u003c/em\u003e\u003c/strong\u003e. You need to ensure the API functions as anticipated, contains the data you require, and that you can successfully gather the parameters necessary to make the proper requests.\u003c/p\u003e\r\n\u003ch2\u003eAPI Resources\u003c/h2\u003e\r\n\u003cp\u003eNot sure where to begin? The following two resources offer expansive lists of APIs, organized by format, category, authentication requirements, and more:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTodd Motto's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/toddmotto/public-apis\"\u003eList of Public APIs\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.programmableweb.com/\"\u003eProgrammable Web\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eAPI Directory\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003eRevisit the \u003c/span\u003e\u003ca href=\"pages/pre-course-work-android-weekly-independent-projects?module_item_id=i8bea7f867c3c744e1d8d3f01e57aff7d\"\u003eAndroid Independent Projects\u003c/a\u003e\u003cspan\u003e lesson for examples of how these APIs could be integrated into each of the 4 project categories.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eEven if you’re opting to use one of the recommended API resources from the lesson linked above, you should still\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eresearch the API thoroughly.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eResearching and Testing\u003c/h2\u003e\r\n\u003cp\u003eYou must complete the following steps\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebefore Thursday\u003c/strong\u003e, as outlined in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.learnhowtoprogram.com/android/getting-started-with-android/android-weekly-independent-projects\"\u003eAndroid Independent Projects\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSelect an API\u003c/strong\u003e. Using the links above, Google, and any other resources you'd like, select an API with the content relevant for your project.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eResearch the API thoroughly.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eNot every resource is the same. Not every API is accessed in the same manner. Some APIs require complex multi-step authentication, others provide data in formats you may not be familiar with. Thoroughly research the API to ensure it\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtain the information you’re seeking, and it\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ework with your project. Spend some careful time here. You don't want to begin work Friday only to discover your API doesn't work the way you anticipated.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMake thorough test requests.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eConfirm your research is accurate by actually requesting and receiving data from the API. Test each and every endpoint you anticipate your application will use. You\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon’t\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehave to build an entire application to do this. Free Chrome extensions like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.getpostman.com/\"\u003ePostman\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eallow you to make test API requests with parameters of your choosing, and browse the response data. Postman offers a series of short\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLM-7VG-sgbtD8qBnGeQM5nvlpqB_ktaLZ\"\u003etutorial videos on YouTube\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edemonstrating how to install, open, and use their extension.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eBe prepared to demonstrate the API to your instructor.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter confirming your API will work in your application, be prepared to demonstrate it. Your instructor may ask you to demonstrate how you'll integrate your API choice. Explain to your instructor what the API is, how you will access it, the format it will return data in, and how you’ll use this data in your application. Be prepared to provide an example request and response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eUnderstand that the same objectives and deadlines apply.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThe same deadlines and objectives will apply to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estudents, regardless of their API choice. You will not be excused from objectives or deadlines due to unforeseen API issues. It is your responsibility to research your API, and confirm it will work\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eadding it to your project.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e","exportId":"weekend-api-research"}]},{"id":30,"name":"Week 2: Web Service Backends and Custom Fragments","status":"completed","unlockDate":null,"prereqs":[29],"requirement":null,"sequential":false,"exportId":"i3b6b5cfb545b4a34887afb504581af57","items":[{"id":2113,"title":"Monday: Android Web Services Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eDaily Objectives\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eIn this section, We will be looking into how to consume a RESTFUL API and utilize the data in our Android devices. Still, we will practice more on the User Interface. Also in this section, we will be looking at how to use parcelables and adapters in our application. Later in the week, we will look at how to use implicit intents to activate other apps on the phone. For example in activating the camera. Then we will train on how to handle interview questions in Android.\u003c/p\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eUtilize an API of your choice\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse a parcelable\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eInvoke an Implicit Intent\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse at least one custom fragment\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003e\u003cspan\u003eAdd a README to the GitHub repository that includes:\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of the site \u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-android-web-services-objectives"},{"id":986,"title":"Tuesday: Weather API","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eMyRestaurants and Weather App\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice making requests to a backend web service using OkHttp, Signpost (if needed), and displaying information in a custom list item layout using a RecyclerView.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the 'main/ui thread' and why shouldn't we run long tasks such as a request on this thread?\u003c/li\u003e\r\n\u003cli\u003eWhy is a RecyclerView preferable to a ListView?\u003c/li\u003e\r\n\u003cli\u003eWhat are the necessary components of an OkHttp request to an API? What series of events occur in a successful request?\u003c/li\u003e\r\n\u003cli\u003eWhat is OAuth protocol and why would we use it?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eBefore beginning the weather project, follow along with the weekend videos/lessons and integrate these new concepts into your own MyRestaurants application. This includes adding OkHttp and Signpost to retrieve information from the Yelp API and parsing the JSON response data. Then, after confirming your app can successfully retrieve and log data from the Yelp API, add the RecyclerView and adapter to display customized restaurant list items.\u003c/p\u003e\r\n\u003ch3\u003eWeather API (Two-Day Project)\u003c/h3\u003e\r\n\u003cp\u003eBuild a weather app using the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://openweathermap.org/\" target=\"_blank\"\u003eOpen Weather Map API\u003c/a\u003e. Allow users to enter a location and receive current weather data for that region. Include a new activity with a RecyclerView that displays the 7-day forecast for the user entered location using a custom list item layout.\u003c/p\u003e\r\n\u003cp\u003eUnlike the MyRestaurants example, Open Weather Map does not utilize OAuth protocol to validate requests. Therefore make sure to add your API key when building out your request url. Here is an example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eOkHttpClient client = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OkHttpClient.Builder()\r\n        .build();\r\n\r\nHttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.API_BASE_URL).newBuilder();\r\nurlBuilder.addQueryParameter(Constants.YOUR_QUERY_PARAMETER, \u0026lt;your string parameter here\u0026gt;);\r\nurlBuilder.addQueryParameter(Constants.API_KEY_QUERY_PARAMETER, Constants.API_KEY);\r\nString url = urlBuilder.build().toString();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String API_KEY = BuildConfig.API_KEY;\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String API_BASE_URL = \u003cspan class=\"hljs-string\"\u003e\"www.\u0026lt;api url\u0026gt;.com\"\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String YOUR_QUERY_PARAMETER = \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;your query parameter string\u0026gt;\"\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//Example: \"location\"\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String API_KEY_QUERY_PARAMETER = \u003cspan class=\"hljs-string\"\u003e\"appid\"\u003c/span\u003e; \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review \u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCan the application request data from an API?\u003c/li\u003e\r\n\u003cli\u003eDoes the application parse this response data appropriately?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-weather-api"},{"id":987,"title":"Tuesday: Custom Fragments","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eCustom Fragments\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eUp until this point, we've built user interfaces with activities and adapters primarily, before getting some exposure to Fragments with the lesson on creating a Dialog Fragment. To review, we can consider Fragments the Components of the Android world -- they function similarly to how a component would inside a JS framework such as Angular, for example.\u003c/p\u003e\r\n\u003cp\u003eThe allow us to move some of our design and functionality out of our activities and into smaller, more modular and reusable pieces. Fragments seem daunting at first, as they are definitely trickier to work with than Activities, but the effort in learning and utilizing how to craft and employ custom fragments is the key to an efficient, responsive application that is in line with current development standards!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll add a RestaurantDetailActivity fragment and corresponding layout to our ongoing MyRestaurants application. This fragment will be responsible for displaying details about a restaurant when the user clicks one in our ListView. Let's get started.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, read Code Path's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Creating-and-Using-Fragments\" target=\"_blank\"\u003eCreating and Using Fragments\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor a brief overview of the functionality fragments offer, and how they may be implemented.\u003c/p\u003e\r\n\u003ch2\u003eFragments in MyRestaurants\u003c/h2\u003e\r\n\u003ch3\u003eRefactoring Activity Names\u003c/h3\u003e\r\n\u003cp\u003eFirst, we'll refactor RestaurantsActivity to RestaurantListActivity so that we can easily distinguish it from our detail activity. Right click on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRefactor \u0026gt; Rename...\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCreating a Detail Activity\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an Empty activity in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eour _ui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epackage_ called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailActivity\u003c/code\u003e. Select the option to generate a layout file. In the corresponding layout, add the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurant_detail.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.RestaurantDetailActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v4.view.ViewPager\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/viewPager\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v4.view.PagerTabStrip\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/pagerHeader\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"top\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eandroid.support.v4.view.ViewPager\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill act as a container to hold our fragment.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePagerTabStrip\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill create a header at the top of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will eventually display the current restaurant's name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreating Fragments\u003c/h3\u003e\r\n\u003cp\u003eLet’s create our fragment now. We can right click on our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Fragment(Blank)\u003c/em\u003e. We'll call it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e. Leave\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate layout XML?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption checked, but be sure to uncheck\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude fragment factory methods?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude interface callbacks?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas these options will create unnecessary boilerplate code.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/s9micuhlbgagci0/create-blank-fragment.png\" alt=\"create-blank-fragment\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/pelf0wa0wp4maeo/create-blank-fragment_options.png\" alt=\"create-blank-fragment-options\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eDetail View Layout\u003c/h3\u003e\r\n\u003cp\u003eIn the corresponding layout, let's design our detail view. Our layout will integrate icons next to restaurant phone numbers, addresses, and websites.\u003c/p\u003e\r\n\u003ch3\u003eDownloading and Adding Icons\u003c/h3\u003e\r\n\u003cp\u003eDownload the Google Material icons listed below. Or, feel free to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/\" target=\"_blank\"\u003ebrowse the entire collection here\u003c/a\u003e.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://design.google.com/icons/#ic_exit_to_app\" target=\"_blank\"\u003eic_exit_to_app_white\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://design.google.com/icons/#ic_local_phone\" target=\"_blank\"\u003eic_call_white\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://design.google.com/icons/#ic_map\" target=\"_blank\"\u003eic_map_white\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eEach of these downloads will provide a folder containing several subdirectories. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroid\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-directory you'll see five additional sub-directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-hdpi, drawable-mhdpi, drawable-xhdpi, drawable-xxhdpi\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-xxxhdpi\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehdpi\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for \"high dot per inch\". Each of these represents a different size icon.\u003c/p\u003e\r\n\u003cp\u003eIn upcoming lessons, we'll learn about\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#16.html\" target=\"_blank\"\u003eAlternative Resources\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand implement them into our project. Alternative resources support different device configurations, like screen size, or orientation. We'll need multiple icon sizes for our Alternative Resources, so we'll include\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeach\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esize of all three icons in our project now.\u003c/p\u003e\r\n\u003cp\u003eCopy/paste or drag/drop the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-hdpi, drawable-mhdpi, drawable-xhdpi, drawable-xxhdpi\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-xxxhdpi\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectories from one of the icon folder's into our project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Then, also place the individual .PNG files of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etwo icons in the sub-directories corresponding to their size. Once completed,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould be organized like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/a5ib7ft8265m9j7/icons-organized-by-size.png\" alt=\"icons-organized-by-size\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can now implement these icons into our layout. The finished product will look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_restaurant_detail.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.RestaurantDetailFragment\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"180dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryDark\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4.5/5\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentEnd\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Brunch, American\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/cuisineTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorSecondaryText\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/saveRestaurantButton\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"View on Yelp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/websiteTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_exit_to_app_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"(503) 223-1282\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/phoneTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_local_phone_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"123 SW Best Ever Ave. Portland, Oregon, 97222\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_map_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/addressTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Save Restaurant\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/saveRestaurantButton\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA few additional notes about this layout:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFeel free to use a placeholder image in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eandroid:gravity=\"center\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used inside the information\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto vertically center-align text next to its corresponding icon.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor the time being, the hard-coded fields you see above (such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:text=\"123 SW Best Ever Ave. Portland, Oregon, 97222\"\u003c/code\u003e) will act as placeholders for our actual restaurant data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn the next lesson, we'll use a tool called Parceler to fill these placeholders with the dynamic data we're collecting from Yelp's API.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/11_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFragments\u003c/strong\u003e: Small pieces of user interfaces that can be embedded in activities or displayed by adapters.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ehdpi\u003c/strong\u003e: \"dpi\" stands for \"dot per inch\", and the \"h\" stands for \"high\". Essentially, higher-quality resolution.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/11_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Creating-and-Using-Fragments\" target=\"_blank\"\u003eCreating and Using Fragments\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Fragment.html\" target=\"_blank\"\u003eFragments Documentation Entry\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/fragments.html\" target=\"_blank\"\u003eFragments Guide\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eVogella Tutorial on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.vogella.com/tutorials/AndroidFragments/article.html\" target=\"_blank\"\u003eAndroid Fragments\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://design.google.com/icons/\" target=\"_blank\"\u003eGoogle Material icons\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-custom-fragments"},{"id":988,"title":"Tuesday: Parcelables and PagerAdapters","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eParcelables and PagerAdapters\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe've just created a RestaurantDetailFragment and corresponding layout to display details of each individual restaurant. Additionally, we've integrated a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto continually recycle these fragments for optimal performance. However, the pieces of information displayed in our fragments are just placeholders. That's not very exciting. Let's change it.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll learn how to communicate between Android components, specifically providing data to fragments using something called parcelables. To do this, we'll learn a little more about serialization, implement a tool called Parceler into our project, and create a special PagerAdapter to act as a bridge between our data and fragment.\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003eTo pass information between different components of an Android application, the information must be serialized.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSerialization\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the conversion of an object into bytes, so the object can be easily saved somewhere, or efficiently passed to another area of an application. Conversely,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edeserialization\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the act of using those bytes to re-create that object or data.\u003c/p\u003e\r\n\u003cp\u003eWhat?\u003c/p\u003e\r\n\u003cp\u003eOK, let's unpack this a little more. Imagine passing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\"A herd of cats\" from one activity to another. No big deal - a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a very complex datatype. It has an easily calculable length, and a fairly limited amount of methods. As a result, it's fairly\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elightweight\u003c/strong\u003e, and it's pretty easy for our app to know how much memory and CPU time might be necessary to make that transaction.\u003c/p\u003e\r\n\u003cp\u003eBut what if we are not transferring a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e, a giant ArrayList of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects from one spot to another instead?. An\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis mutable in regards to size, so we'll have to compute that first. And a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCat\u003c/code\u003eobject could hold a lot of properties - name, food, age, and so on. Hmm. This is getting bulky. And what if I was actually moving an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003etypes around? Each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject could, in turn, contain subarraylists of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCat\u003c/code\u003es but also\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBat\u003c/code\u003es...each with their own many properties and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003es... you get the idea. This could get very large, very quickly. Understanding how much memory to reserve and pulling CPU power from the main UI thread to complete this transaction...that could really slow things down. But if we serialize our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edown into one long\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof data on the outset, boom - we're back to knowing exactly how many bytes of data we need, and don't have to calculate that on the fly. Serialization also allows us to\u003cspan\u003e \u003c/span\u003e\u003cem\u003esnapshot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata at a specific moment and time and store it, instead of needing to rebuild individual objects later. This is great!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/b5ze4x7a9871gdb/serialization_sm.png\" alt=\"serialization_sm.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAndroid contains an interface called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eParcelable\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto manage the process of serialization. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould \u003c/em\u003eimplement this interface and override its methods manually, but it's widely considered easier to use a library called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eParceler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto manage this process for us.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eParceler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a third-party library that generates all the boilerplate source code for the Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface, thereby helping us manage the process of serializing data, and passing it to our fragments to make passing things around smooth and efficient. Make sure you can tell an interviewer the difference between Serializable and Parcelable.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading: Parceler Library and Configuration\u003c/h2\u003e\r\n\u003cp\u003eWe're almost ready to allow our individual components to begin communicating with one another. To do this, we'll add the Parceler library in our MyRestaurants application. Parceler will handle implementing the functionality of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eAndroid interface for us.\u003c/p\u003e\r\n\u003cp\u003eBefore we begin, Follow along with this tutorial to configure MyRestaurants to use Parceler:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-Parceler\" target=\"_blank\"\u003eUsing Parceler\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eImplementing Parceler\u003c/h2\u003e\r\n\u003cp\u003eDo not move forward until you've followed along with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsing Parceler\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etutorial linked above. You will need to update both your project and app\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles and add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Parcel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation to our Restaurant class. You will also need to add an empty default\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor.\u003c/p\u003e\r\n\u003ch3\u003e￼￼￼Adding Annotations\u003c/h3\u003e\r\n\u003cp\u003eOnce complete, your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurant.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclass file should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant.models\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.parceler.Parcel;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Parcel\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    String mName;\r\n    String mPhone;\r\n    String mWebsite;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mRating;\r\n    String mImageUrl;\r\n    ArrayList\u0026lt;String\u0026gt; mAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLatitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLongitude;\r\n    ArrayList\u0026lt;String\u0026gt; mCategories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mName = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mPhone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mWebsite = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mImageUrl = imageUrl;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mAddress = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLatitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLongitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCategories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mName;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mPhone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  mWebsite;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mAddress;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLatitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLongitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mCategories;\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eBundling Information with Parceler\u003c/h3\u003e\r\n\u003cp\u003eAfter setting up Parceler, we can move our focus to the RestaurantDetailFragment. Add the following code to RestaurantDetailFragment. Afterwards we will walk through what each method does:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants.ui;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.Fragment;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.LayoutInflater;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.ViewGroup;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ImageView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.TextView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.R;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.models.Restaurant;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.squareup.picasso.Picasso;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.parceler.Parcels;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mImageLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.cuisineTextView) TextView mCategoriesLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.websiteTextView) TextView mWebsiteLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.phoneTextView) TextView mPhoneLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.addressTextView) TextView mAddressLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.saveRestaurantButton) TextView mSaveRestaurantButton;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Restaurant mRestaurant;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e RestaurantDetailFragment \u003cspan class=\"hljs-title\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        RestaurantDetailFragment restaurantDetailFragment = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantDetailFragment();\r\n        Bundle args = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bundle();\r\n        args.putParcelable(\u003cspan class=\"hljs-string\"\u003e\"restaurant\"\u003c/span\u003e, Parcels.wrap(restaurant));\r\n        restaurantDetailFragment.setArguments(args);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e restaurantDetailFragment;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        mRestaurant = Parcels.unwrap(getArguments().getParcelable(\u003cspan class=\"hljs-string\"\u003e\"restaurant\"\u003c/span\u003e));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        Picasso.get().load(mRestaurant.getImageUrl()).into(mImageLabel);\r\n\r\n        mNameLabel.setText(mRestaurant.getName());\r\n        mCategoriesLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getCategories()));\r\n        mRatingLabel.setText(Double.toString(mRestaurant.getRating()) + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        mPhoneLabel.setText(mRestaurant.getPhone());\r\n        mAddressLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getAddress()));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe first method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e, is used instead of a constructor and returns a new instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e. We use the Parceler library to add our restaurant object to our bundle and set the bundle as the argument for our new RestaurantDetailFragment. This allows us to access necessary data when a new instance of our fragment is created.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe next method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, is called when the fragment is created. Here, we unwrap our restaurant object from the arguments we added in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e, this restaurant object is then used to set our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFor now, we are not going to set the text for the website. Instead, we will use the website string URL when we learn more about implicit intents in an upcoming lesson.\u003c/p\u003e\r\n\u003ch2\u003ePagerAdapter\u003c/h2\u003e\r\n\u003cp\u003eNow let’s create the adapter which will connect our data to the fragment view. Inside of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, create a new class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantPagerAdapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantPagerAdapter\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant.adapters\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.Fragment;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.FragmentManager;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.FragmentPagerAdapter;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.models.Restaurant;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.ui.RestaurantDetailFragment;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragmentPagerAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(FragmentManager fm, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(fm);\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Fragment \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e RestaurantDetailFragment.newInstance(mRestaurants.get(position));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.size();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e CharSequence \u003cspan class=\"hljs-title\"\u003egetPageTitle\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.get(position).getName();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s review what each of these methods does.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eRestaurantPagerAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a constructor where we set the required\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFragmentManager\u003c/code\u003eand array list of restaurants we will be swiping through.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe next method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the restaurant in the position provided as an argument.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003egetCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply determines how many restaurants are in our Array List. This lets our adapter know how many fragments it must create.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003egetPageTitle()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eupdates the title that appears in the scrolling tabs at the top of the screen.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eViewHolder ClickListener\u003c/h2\u003e\r\n\u003cp\u003eNow that our fragment is set up, we want to be able to click on a restaurant in our RecyclerView and navigate to that individual restaurant's detail page, which should be populated with information about that specific restaurant. To achieve this, let’s revisit our RestaurantListAdapter and add a click listener using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            ...\r\n            itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, itemPosition);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e, Parcels.wrap(mRestaurants));\r\n            mContext.startActivity(intent);\r\n        }\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we instruct the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003einterface. Then, we set our listener in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor.\u003c/p\u003e\r\n\u003cp\u003eWhen the ItemView is clicked, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will execute. It uses\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetLayoutPosition()\u003c/code\u003eto retrieve the position of the specific list item clicked. Then, it creates an intent to navigate to our RestaurantDetailActivity, with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eitemPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the ArrayList of restaurants included as intent extras.\u003c/p\u003e\r\n\u003cp\u003eTo include an entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an intent extra, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcels.wrap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This handles the process of serializing the data using Android's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface.\u003c/p\u003e\r\n\u003ch2\u003eSet PagerAdapter\u003c/h2\u003e\r\n\u003cp\u003eNow we can add our new RestaurantPagerAdapter to our RestaurantDetailActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants.ui;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.view.ViewPager;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.morngaschool.myrestaurants.R;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.adapters.RestaurantPagerAdapter;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.models.Restaurant;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.parceler.Parcels;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.viewPager) ViewPager mViewPager;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantPagerAdapter adapterViewPager;\r\n    ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurant_detail);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mRestaurants = Parcels.unwrap(getIntent().getParcelableExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e));\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e startingPosition = getIntent().getIntExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n\r\n        adapterViewPager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantPagerAdapter(getSupportFragmentManager(), mRestaurants);\r\n        mViewPager.setAdapter(adapterViewPager);\r\n        mViewPager.setCurrentItem(startingPosition);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we pull out our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u0026lt;Restaurant\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eParcelable using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eunwrap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our \"restaurants\" intent extra. We also retrieve the position int included as an intent extra.\u003c/p\u003e\r\n\u003cp\u003eWe create a new pager adapter called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadapterViewPager\u003c/code\u003e, providing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument. Then, we instruct our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto use this new adapter. We also set the current item to the position of the item that was just clicked on.\u003c/p\u003e\r\n\u003cp\u003eAnd voilà, now we have a functioning fragment pager adapter!\u003c/p\u003e\r\n\u003ch2\u003eFurther Exploration: Parcelables\u003c/h2\u003e\r\n\u003cp\u003eIf you'd like to explore the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface more in-depth, check out Code Path's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/using-parcelable\" target=\"_blank\"\u003eUsing Parcelable\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/12_parceler\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSerialization\u003c/strong\u003e: The conversion of an object into bytes, so the object can be easily saved somewhere, or efficiently passed to another area of an application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eParcelable\u003c/strong\u003e: An Android object used to pass data between different components of an application. It does this by serializing Java Objects between contexts.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eParceler\u003c/strong\u003e: A commonly-used Android library to manage the process of Parcelables.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://parceler.org/\" target=\"_blank\"\u003eParceler Website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eincludes a great overview and detailed documentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe Code Path tutorial\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-Parceler\" target=\"_blank\"\u003eUsing Parceler\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edetails setting up Parceler in an Android application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf you'd like to explore the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface more in-depth, check out Code Path's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/using-parcelable\" target=\"_blank\"\u003eUsing Parcelable\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-parcelables-and-pageradapters"},{"id":1056,"title":"Wednesday: White Board Interview Practice","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box","graded":true,"pointsPossible":12.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\r\n\u003cp\u003e\u003cspan\u003eTake time this morning and split into groups of 5. You will be practicing for white board interviews that will be touched on more during your project period. Pick one of you to take the mock white board interview, set a toy problem for them to go through, and at the end use the rubric below to grade and give feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"i519bb3452e8371f2e176b2c0482edc8c"},{"id":989,"title":"Wednesday:Weather App Continued","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eWeather App Continued\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal today is to practice implementing fragments into an Android app. This includes integrating Parceler, using a PagerAdapter, and creating new instances of click listeners in the ViewHolder.\u003c/p\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a fragment and why would we use one?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between a fragment and an activity?\u003c/li\u003e\r\n\u003cli\u003eWhat is a Parcelable? What benefits does it offer? What additional setup does it require?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcels.wrap():\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edo, and when is it used?\u003c/li\u003e\r\n\u003cli\u003eWhat about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcels.unwrap();\u003c/code\u003e? How do the two work in conjunction?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003cp\u003eBefore continuing work on your Weather app, follow along with the homework from last night and set up fragments to display the restaurant detail view into your MyRestaurants application.\u003c/p\u003e\r\n\u003ch3\u003eWeather API (Day 2)\u003c/h3\u003e\r\n\u003cp\u003eContinue working on the Weather app you and your partner started yesterday. Add fragments to your app to allow users to see a detail view when they click one of the days in the 7-day forecast list. Display icons that reflect the forecasted weather for each day.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAre fragments implemented successfully? Where?\u003c/li\u003e\r\n\u003cli\u003eDo the ViewPager and PagerAdapter successfully display information in the application?\u003c/li\u003e\r\n\u003cli\u003eIs Parceler set up correctly? Does it pass information between components?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"wednesday-weather-app-continued"},{"id":991,"title":"Wednesday:Implicit Intents","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003ch1\u003eImplicit Intents\u003c/h1\u003e\r\n\u003cp\u003eThink about apps you use frequently. Chances are, these apps include options to interact with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapps: Hitting \"Share\" allows you to open text messages, email, Facebook, or Instagram; \"Find Friends\" may access your contacts, etc. Coding your app to interact with other applications is a common feature in mobile development!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we'll learn how to instruct our applications to interact with outside applications using something called implicit intents. We'll also integrate this functionality into our ongoing MyRestaurants project.\u003c/p\u003e\r\n\u003ch2\u003eExplicit vs. Implicit intents\u003c/h2\u003e\r\n\u003cp\u003eAs we learned in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/pre-course-work-intents?module_item_id=id2dd7b0fefc80a18a2f26f7918077395\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/pre-course-work-intents\" data-api-returntype=\"Page\"\u003eprevious lessons\u003c/a\u003e, an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eintent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an Android component that represents the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eintention\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto complete an action.\u003c/p\u003e\r\n\u003cp\u003eThere are two types of intents: Explicit intents, and implicit intents. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eexplicit intent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis directly passed the activity to which it will travel, and generally stays within the app. The intents we have created thus far are all explicit intents.\u003c/p\u003e\r\n\u003cp\u003eFor instance, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe know the intent is explicit because we're explicitly providing it both the current activity (\u003ccode\u003eMainActivity.this\u003c/code\u003e) and the activity to which it will travel (\u003ccode\u003eRestaurantsActivity.class\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eimplicit intent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epasses the responsibility of completing the intended action to a\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapplication. It relies on Android to automatically fire up whatever tool is responsible for handling the type of action we specify. For instance, we can use an implicit intent to open the user's default internet browser when a user selects a link to a restaurant's website in our MyRestaurants application.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eRead through the Training for Android sections on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/sending.html\" target=\"_blank\"\u003eSending the User to Another App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/result.html\" target=\"_blank\"\u003eGetting a Result from an Activity\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eMyRestaurants\u003c/h2\u003e\r\n\u003cp\u003eNext, let's apply what we've just learned to our MyRestaurants app. We will add click listeners for the website, phone, and address\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the restaurant detail fragment. When clicked, these click listeners will create implicit intents to open outside apps.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n                    View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n                    ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n                    ...\r\n                    mWebsiteLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                    mPhoneLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                    mAddressLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n                }\r\n                \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mWebsiteLabel) {\r\n                        Intent webIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_VIEW,\r\n                                Uri.parse(mRestaurant.getWebsite()));\r\n                        startActivity(webIntent);\r\n                    }\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mPhoneLabel) {\r\n                        Intent phoneIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_DIAL,\r\n                                Uri.parse(\u003cspan class=\"hljs-string\"\u003e\"tel:\"\u003c/span\u003e + mRestaurant.getPhone()));\r\n                        startActivity(phoneIntent);\r\n                    }\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mAddressLabel) {\r\n                        Intent mapIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_VIEW,\r\n                                Uri.parse(\u003cspan class=\"hljs-string\"\u003e\"geo:\"\u003c/span\u003e + mRestaurant.getLatitude()\r\n                                        + \u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e + mRestaurant.getLongitude()\r\n                                        + \u003cspan class=\"hljs-string\"\u003e\"?q=(\"\u003c/span\u003e + mRestaurant.getName() + \u003cspan class=\"hljs-string\"\u003e\")\"\u003c/span\u003e));\r\n                        startActivity(mapIntent);\r\n                    }\r\n                }\r\n            }\r\n        \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've instructed\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface. Then, we create three click listeners for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emWebsiteLabel\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPhoneLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAddressLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. We also create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that will execute one of the following three intents, depending upon what is clicked:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eif\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emWebsiteLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis clicked, we create a new implicit intent called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand provide it two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity, responsible for displaying data to the user, and the restaurant's website URL. We start this new activity by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPhoneLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis clicked, we create an implicit intent called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ephoneIntent\u003c/code\u003e, and provide it two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_DIAL\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity, which dials the number in the user's phone app, and the restaurant's telephone number. Again, we start this activity by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAddressLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis selected, we create an implicit intent called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emapIntent\u003c/code\u003e, and provide it two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity, and the restaurant's longitude and latitude, and begin the activity with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA few things to take note of:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAs we see above, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity is rather flexible. We use it in both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebIntent\u003c/code\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emapIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eimplicit intents. This is because it's programmed to perform different actions depending on the type of data passed to it. For instance, if passed a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emailto:\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elink to an email address, it will open the user's email app. If passed a web URL, it will open the browser. If passed geographical coordinates, it knows to open the map. For more information, see the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW\" target=\"_blank\"\u003eAndroid Developers article on ACTION_VIEW\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e?q=(\" + mRestaurant.getName() + \")\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreates a marker on the map with a label of the restaurant’s name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we launch the application in our emulator, we can see that clicking a restaurant's phone number, address, or website will now launch another application!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/14_implicit_intents\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eIntent\u003c/strong\u003e: An Android component that represents the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eintention\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto complete an action. For instance, MyRestaurants contains\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/pre-course-work-intents?module_item_id=id2dd7b0fefc80a18a2f26f7918077395\" target=\"_blank\"\u003ean intent\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat takes us from the MainActivity to the RestaurantsActivity when the \"Find Restaurants\" button is clicked.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eExplicit intent\u003c/strong\u003e: Directly passed the activity to which it will travel, and generally stays within the app. For instance, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe know the intent is explicit because we're explicitly providing it both the current activity (\u003ccode\u003eMainActivity.this\u003c/code\u003e) and the activity to which it will travel (\u003ccode\u003eRestaurantsActivity.class\u003c/code\u003e).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThe following is an example of creating an implicit intent to dial a specified number:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e Intent phoneIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_DIAL, Uri.parse(\u003cspan class=\"hljs-string\"\u003e\"tel:\"\u003c/span\u003e + mRestaurant.getPhone()));\r\n        \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/14_implicit_intents\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/sending.html\" target=\"_blank\"\u003eSending the User to Another App\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/result.html\" target=\"_blank\"\u003eGetting a Result from an Activity\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW\" target=\"_blank\"\u003eACTION_VIEW documentation\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"wednesday-implicit-intents"},{"id":914,"title":"Thursday: Behavioural Interview Questions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch3\u003e\u003cspan\u003eExample Behavioural Questions\u003c/span\u003e\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eGive me an example of the project or initiative that you started on your own. It does not have to be business-oriented.\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat prompted you to get started?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eTell me about a time you had to work on several projects at once. How did you handle the projects?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eCan you give an example of a time when you didn’t agree with other programmers.\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHow did you resolve that conflict?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eTell me about when you had to deal with conflict within your team?\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHow was the conflict solved?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eHow would you deal with it now?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat was the most difficult decision you’ve ever had to make at work?\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHow did you arrive at your decision?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat was the result?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eTell me about the most difficult situation you have had when leading a team. What happened and how did you handle it?\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWere you successful? What was the most important thing you did?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat did you learn?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/ol\u003e","exportId":"thursday-behavioural-interview-questions"},{"id":915,"title":"Thursday: Answering Behavioural Interview Questions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2 style=\"text-align: left;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBehavioural Interview Questions\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBehavioural interview questions are based on the fact that\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003elooking at a candidate’s past behaviour is the best way to predict their future performance.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe golden rule when you’re answering behavioural interview questions is to adhere to what’s called the CAR principle: Context, Action, Result.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eContext\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eis about describing a situation and setting the scene for a relevant example. The key here is to choose your example well, one that clearly demonstrates the quality or skill the employer is asking about.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eAction\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eis about explaining what action you took. Be really specific rather than making vague statements and outline your steps and rationale.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eResult\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eis about detailing the outcome of your action. Offer specific facts relating to the result. For instance, quote figures and statistics that back up your declaration\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“What has been the most stressful situation you have ever found yourself in? How did you handle it?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe best way to answer this question is to give an example of how you have handled stress in a most recent situation. That way, the interviewer can get a clear picture of how well you work in stressful situations. Tailor your answer to be related to either programming or coding.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eAvoid mentioning a time when you put yourself in a needlessly stressful situation. For example, do not share a story about a time when you were stressed because you procrastinated and had to finish a project quickly. Focus on a time when you were given a difficult task or multiple assignments, and you rose to the occasion.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePressure is very important to me. Good pressure, such as having a lot of assignments to work on, or an upcoming deadline, helps me to stay motivated and productive. Of course, there are times when too much pressure can lead to stress. Through my experience, I have learned how to balance multiple projects and meeting deadlines, which prevents me from feeling stressed often. For example, I once had three large projects due in the same week, which was a lot of pressure. However, because I created a schedule that detailed how I would break down each project into small assignments, I completed all three projects ahead of time and avoided unnecessary stress.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Give me an example of the project or initiative that you started on your own. It can be a non-business project. What prompted you to get started?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy asking this question, the interviewer wants to find out whether you are capable of coming up with new ideas and thinking creatively in order to solve problems. You can take your example from your work experience, a group project or a skills related extracurricular activity.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt is important to remember that in this case you are essentially telling a story and your answer needs to have a well considered structure. Make sure to cover the following when answering this prompt:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhere you were at the time\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat the issue or problem was\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow this issue/problem had a negative impact on the business,employees, customers etc\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat you suggested/implemented as a solution to the problem\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow this had a positive impact on the business, people, etc\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn a college technical festival, there was a problem with the Learn network of the college where the server was not functioning well. This network was going to be used to host various gaming events in the college fest. I took an initiative and got a few of my friends with me and replaced the complete connection network with another server. We successfully managed to shift to a new server in less than an hour and the events were conducted successfully.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Describe the project or situation that best demonstrates your analytical skills. What was your role?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe trick to this question is to not just talk about your overall experience and training that led to your having strong analytical abilities, but to give an example of a specific situation where your analytical abilities came into application. The strongest examples are those that describe a situation related to the work done in the company you have applied to, since your answer to this question shows that you can solve the problems that they are facing.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you are asked this question, it is because analytical ability is valued highly in the company you are applying to. Once you have decided which situation to answer with, don’t just state it. Give an idea of the significance of the situation and don’t miss important details. When the situation has been fully described.  Whatever you did will have a full context. After explaining the actions you took, then you can move on to the consequences, and why you think you got the result you did.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDuring my University Programming course, we were assigned a group project to do marketing research for a local tech companies. After we collected all of the data, we had to analyze the data in a meaningful way for the business and report the results. It turned out that I had the strongest analytical abilities in the group, so I led the rest of the group in analyzing the data. Because of my analytical skills, we found that a local tech company had been targeting the wrong market all along. We set up a meeting with the CEO of the tech company and were able to show the owner our findings and  the market segment that the business should be targeting.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about a time you had to work on several projects at once. How did you handle the projects?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy asking this question the interviewer\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewants to see that you are going to be able to cope with working on multiple projects at the same time. There's only one correct answer to this question and it's a resounding 'Yes'!. Then go on and backup your 'Yes' with some evidence, preferably an example.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYes.  I've had plenty of experience handling a very full workload and dealing with numerous different projects simultaneously.  When starting out in my current job at Craft Silicon, I came in to a situation where the team was behind schedule on a number of projects and also had several new projects which needed to be started. I certainly had my hands very full indeed; it was quite a juggling act! I persuaded the CTO to allocate sufficient resources so we could complete the overdue projects without suffering further financial penalties and I simultaneously got us going on the new range of projects as quickly as possible so as to not disappoint the clients. I understand the importance of adhering to deadlines, so if I saw that I absolutely could not accomplish the task in time, I would ask for an extension.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample 2\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt Moringa School we usually had a lot of projects to work on weekly and at the same time finish up class work by the end of the week.\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eEven if my tasks at times seemed unachievable, I would buckle down and figure out the best approach to completing the tasks. I would start by organizing the tasks from most important to least, and then I would begin working on the most important task. I would maintain a positive outlook and utilize my organizational skills to develop a plan of action.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about a situation in which you have had to adjust to changes over which you had no control. How did you handle it?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe interviewer is interested in knowing how you are able to perform in a workplace where you are not the one who is ‘making the calls’. The typical workplace environment involves a tiered structure where there are those who make the decisions and those who perform the work. An entry level position most often assumes the role of the latter.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI am a performer of tasks. As a new employee, I understand that many of my duties will be directed by those above me. These will undoubtedly involve changes, and as long as I understand how the changes are related to the betterment of the company I am fully ‘on board’.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI once worked for a corporation where one of my duties was to prepare the annual report. As a result of input from the overseeing board and members, the format for that report was changed significantly. Although this meant that I had to relearn the report-writing process, with my understanding that this change would mean that the report was more accessible and easy to read, I had no problem with the demands of that change.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample 2\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI am a performer of tasks. As a new employee, I understand that many of my duties will be directed by those above me. These will undoubtedly involve changes, and as long as I understand how the changes are related to the betterment of the company I am fully ‘on board’. At Moringa School we worked on a group project during the project period. We were to present this project as a group every Friday of the week for one month. During the group presentation we would talk about the project and what we had worked on so far, feedback was given by our instructors and we had to make a lot of changes and add a lot of things before the next presentation which was in just a week's time. This meant that we had to make a lot of changes with every feedback session but at the end of the one month we had the best projects to present on career day to potential employers.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Have you ever worked in a team? If yes, give an example of a situation where you had to compromise on decision making.”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy asking this question the interviewer wants to know if you're a team player and capable of resolving minor issues that may arise. Workplace conflicts may happen every now and then and that's okay. The key is handling them correctly and showing the interviewer you can move forward\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnswer this question in a way that show  you can overcome small conflicts without involving your boss or interrupting the flow of the workplace. Your answer should reflect your professionalism and your ability to maintain your temper.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLast year I attended a coding bootcamp and one of the requirements for graduation was to build a group project. We had to decide on what to build and the my fellow group members chose to build something simple. I on the other hand wanted to build something complex so that our group will have something unique and better than the other groups. My idea of building something complex was not welcomed by the rest of the group member either way we had to decide on one project. I requested that we sit and discuss each project idea, its advantages and disadvantages in terms of time taken to build the project and the project functionality. We finally agreed on building a simple application rather than a complex one that would take up a lot of time and resources since at the end of the day our goal was to have a completed and functional application in order to graduate.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about when you had to deal with conflict within your team. How was the conflict solved? How would you deal with it now?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eConflict questions are common because everybody wants to hire a good team player therefore the interviewer wants to\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003ca href=\"http://biginterview.com/blog/2012/01/what-employers-want-job-interview.html\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eget a sense of how you will respond\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eto conflict.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnswer this question by briefly describing the context in which the conflict but do not get too caught up in unnecessary details.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLastly talk about the key actions that you took. In the case of a conflict story, the focus should be on how you resolved the disagreement in a professional and productive way.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI was managing the creation of an application in school and we were on a very tight deadline because the presentation day was a day away. I was in charge of delivering on time and I had to manage all team members. The developer who was building the front end part of the application was very talented but unfortunately missed a deadline that I had assigned. When I approached him about it, he blew up at me. I was taken aback by his response, but I remained calm. I acknowledged that the deadline was hours away and explained again the reasoning and the importance of ready in time for the presentation. He relaxed a little when he saw that I wasn’t attacking him. He told me about all of his other class projects and how overwhelmed he was. I asked him if there was any way that I could help him come up with a solution. Eventually, we agreed that it would help if I would him in completing the front end part since I was conversant with that area also. This helped take some of the pressure off of him.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Think about a situation when you had to make the most difficult decision you’ve ever had to make at work. How did you arrive at your decision? What was the result?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen an interviewer asks this question, she or he\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewants to know how you’d handle challenging and stressful situations and how strong your critical thinking skills.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eApproach this question by describing how you effectively approached the challenge, how you weighed the options and how you reached your decision.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhatever example you use, make sure it highlights a strength you would bring to the role.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003en my previous position, I was in charge of selecting vendors to print our promotional materials. We have a long time vendor we have been working with for over a decade. However, for one of our biggest print jobs of the year, another vendor came in with a lower bid.”\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eI did not want to take the work away from a vendor with whom we did so much business with, but I couldn’t justify picking them out of loyalty if someone else was doing the same job for less money. So I told the old vendor frankly about the other bid to hear what they had to say, and I also solicited references from the new vendor to see if their work matched that of what we had been getting.”\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur long-time vendor was able to bring down their bid. They actually did the job for less than the new vendor would have, so we ended up saving some money.”\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about the most difficult situation you have had when leading a team. What happened and how did you handle it? Were you successful? What was the most important thing you did?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis question helps the interviewer to find out if you have true leadership potential. Briefly describe the project or situation giving just enough history and/or background to provide context. Talk about the key actions that you took. When telling a leadership story, make sure that you convey specifically how you stepped up as a leader. What actions did you take and why? How did your actions demonstrate leadership? Finally, Wrap up your example by describing the positive outcome(s) of your action.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen I was a student at Moringa School we had to go through a period whereby we built projects in groups for presentation during career day. We were a team of five and two of our team members laptop's got stolen on their way home from school therefore they did not attend school for two days. The team of three that remained had to absorb the duties of the two were absent. As a result, people were overworked and morale suffered.  At the same time, more mistakes were being made because attention was so scattered.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs the team leader, it was my job to get performance back on track. I scheduled a meeting of the full team to discuss strategies. I communicated my appreciation for all of their hard work during a challenging time for the company and asked for their assistance in identifying ways for us all to be more efficient –including me! I then made it clear that this was a brainstorming meeting to come up with options that no idea was stupid and that it was a safe environment for making suggestions. We spent an hour capturing ideas on a white board, then voted on the five with the most potential.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI then assigned each person to do more research on how we might implement one of the ideas. First of all, the team responded very positively to this approach. They loved the idea of being empowered to help find a solution. Instead of complaining, they channeled their energy in a more productive way once they knew that they would be heard. Right off the bat, we came up with two ideas that could be implemented quickly and save us a lot of time. One idea was to eliminate daily group meetings to weekly stand ups. This freed up 6 hours each week spent on discussing issues to do with the project.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe other idea was to set time aside and work together after school in the evening for an hour or two. We also decided to incorporate brainstorming and idea evaluation into our weekly standups. We became more efficient and the morale increased.\u003c/span\u003e\u003c/p\u003e","exportId":"thursday-answering-behavioural-interview-questions"},{"id":992,"title":"Thursday:Movie App","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eMovie App\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: For Friday's code review, we ask that you\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e.gitignore API keys or credentials unless they grant access to sensitive information, since your instructor will need these keys to review your project with you. Before Friday, determine whether the API you plan on implementing includes sensitive keys. If so, make arrangements with your instructor ahead of time.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue building on your knowledge of requesting data from a backend web service and displaying it using fragments, ListViews, and RecyclerViews. Pay special attention to implementing implicit intents throughout your application.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRead through the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html\"\u003eAndroid documentation on Intents\u003c/a\u003e, up through the 'Standard Activity Actions' section with your partner. We've already covered\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html\"\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html#ACTION_DIAL\"\u003e\u003ccode\u003eACTION_DIAL\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein last night's homework, but what about the other activities listed? Browse through a few of the available options and discuss possible use cases with your partner.\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between implicit and explicit intents? Provide an example of each.\u003c/li\u003e\r\n\u003cli\u003eWhat arguments do we need to provide when creating an explicit intent?\u003c/li\u003e\r\n\u003cli\u003eWhat about when we create an implicit intent?\u003c/li\u003e\r\n\u003cli\u003eWhy do we need to resize images? What errors could occur if we don't?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMovie App\u003c/h3\u003e\r\n\u003cp\u003eBuild a movie app that allows users to search for movies by title, rating, and release date. You will use information from\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.themoviedb.org/documentation/api\"\u003eThe Movie Database API\u003c/a\u003e. Display the movie poster, title, synopsis, director, and main actors for each movie.\u003c/p\u003e\r\n\u003cp\u003eHere are some additional ideas to explore. It's not required to implement each and every one of these. Select one or more to focus on for your own app:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd a feature that allows users to click on an actor’s name and return a list of other movies they appear in.\u003c/li\u003e\r\n\u003cli\u003eAdd a feature that allows users to open the contact book, select a contact, and then send the contact a text message which includes the name and rating of the selected movie along with a personalized note such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003e“Let’s go see this together!”\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erefer to the article from the warmup exercise, and Tuesday’s homework on Implicit Intents. Keep in mind you will need to create fake contacts in the emulator’s contact book in order to test this feature out.\u003c/li\u003e\r\n\u003cli\u003eImplement custom layouts, icons and other aesthetics.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eHint: Append to Response\u003c/h4\u003e\r\n\u003cp\u003eThis particular movie API supports appending additional information to a response, which will allow you to receive multiple types of data from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eresponse instead of making two separate responses.\u003c/p\u003e\r\n\u003cp\u003eFor example, if you wanted both alternative titles and similar movies, you could append them as part of an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eappend_to_response\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-symbol\"\u003ehttp:\u003c/span\u003e/\u003cspan class=\"hljs-regexp\"\u003e/api.themoviedb.org/\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e/movie/\u003cspan class=\"hljs-number\"\u003e550\u003c/span\u003e?api_key= \u003cspan class=\"hljs-comment\"\u003e###\u0026amp;append_to_response=similar_movies,alternative_titles\u0026amp;language=DE\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTry it out!\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application successfully request information from the Movie Database API?\u003c/li\u003e\r\n\u003cli\u003eIs it parsing the JSON response appropriately?\u003c/li\u003e\r\n\u003cli\u003eIs the code clean and well-refactored?\u003c/li\u003e\r\n\u003cli\u003eAre fragments being utilized? Are there any spots where fragments are not necessary? Any spots that don't use fragments that should?\u003c/li\u003e\r\n\u003cli\u003eDoes the application make use of implicit intent(s)? Are they functional?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"thursday-movie-app"},{"id":994,"title":"Independent Project ","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":15.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003ch1\u003eIndependent Project\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: Please do\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e.gitignore API keys or credentials for this project unless they grant access to sensitive information. Your instructor will need access to these keys in order to review your project with you.\u003c/p\u003e\r\n\u003ch2\u003eProject\u003c/h2\u003e\r\n\u003cp\u003eContinue to build upon your previous independent project by integrating the new tools and concepts we’ve learned this week, as listed in the objectives below. This includes retrieving data from an API back-end.\u003c/p\u003e\r\n\u003cp\u003eFor reference, here are the recommended APIs. All of these APIs have been successfully Remember, you may not use an API outside of the list below unless you’ve\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapproved it with an instructor. Please review the guidelines regarding using unlisted APIs if you have not done so already.\u003c/p\u003e\r\n\u003ch3\u003eRecommended APIs\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedin\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.pinterest.com/\"\u003ePinterest\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.flickr.com/services/developer/api/\"\u003eFlickr\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.meetup.com/meetup_api/\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://darksky.net/dev/\"\u003eDarkSky\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/overview\"\u003eYelp\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://strava.github.io/api/\"\u003eStrava\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://sunlightlabs.github.io/congress/\"\u003eSunlight Congress\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.petfinder.com/developers/api-docs\"\u003ePetfinder\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.brewerydb.com/developers\"\u003eBreweryDB\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.giantbomb.com/api\"\u003eGiant Bomb\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.walmartlabs.com/\"\u003eWalmart Labs\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.recipepuppy.com/api/\"\u003eRecipe Puppy\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.musixmatch.com/\"\u003eMusixMatch\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://betterdoctor.com/developers\"\u003eBetter Doctor\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eMore Information\u003c/h3\u003e\r\n\u003cp\u003eFor more information on recommended APIs, including examples of which API to integrate with which project category, revisit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\" target=\"_blank\"\u003eAndroid Independent Projects\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson\u003c/p\u003e","exportId":"i9c76f03456b04b9e682bdecaa977712e"},{"id":1098,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1a4b96ca090be03f6f1228317e3e7019"},{"id":995,"title":"Weekend Work:Data Persistence ","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eData Persistence Objectives\u003c/h1\u003e\r\n\u003cp\u003eThis week we are going to learn how to save information from our Android applications into a database, and access this information later. This is known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edata persistence\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll learn how to use SharedPreferences to save small bits of data directly into the user's phone. Next, we'll learn how to save more substantial portions of information by connecting to a tool called Firebase. You are familiar with connecting to Firebase already from your work in JavaScript unit, but also review Firebase data structuring conventions in order to ensure our databases are well-organized and follow best practices.\u003c/p\u003e\r\n\u003cp\u003eOnce we've successfully connected to Firebase, we'll use their built-in user authentication tools to add user accounts to our applications. We'll also learn how to implement additional features such as dialog boxes, personalized welcome messages, and remembering user emails to auto-populate the login form.\u003c/p\u003e\r\n\u003cp\u003eFinally, we'll learn how to add a SearchView widget to allow users to input their own terms to search for specific content.\u003c/p\u003e\r\n\u003cp\u003eIn addition to integrating these new tools and functionalities into our ongoing MyRestaurants project, you'll also have the opportunity to practice new material and add to your portfolio by creating two very common Android applications: A discussion forum, and instant messaging application.\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eAfter this week, your ongoing personal project will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement Firebase user authentication.\u003c/li\u003e\r\n\u003cli\u003eSave and retrieve data using Firebase, making sure to structure your data according to Firebase guidelines.\u003c/li\u003e\r\n\u003cli\u003eEmploy the Firebase-RecyclerAdapter to display from your database.\u003c/li\u003e\r\n\u003cli\u003eUse SharedPreferences to save an important piece of data in your app.\u003c/li\u003e\r\n\u003cli\u003eUtilize dialogs to inform users of login status, etc.\u003c/li\u003e\r\n\u003cli\u003eUse a SearchView widget to gather user input.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eShared Preferences\u003c/h1\u003e\r\n\u003cp\u003eNow that we know how to retrieve data from a web service, let's learn how to save data from our application. There are many ways to persist data in Android. In this lesson we will learn how to save small bits of data directly into the user's phone with shared preferences. In subsequent lessons we'll explore saving larger portions of data to a web service backend called Firebase.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eShared preferences\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an Android class that allows apps to store key-value pairs of primitive data types. Once saved, information in shared preferences will persist across sessions. It's important to note that despite the name, shared preferences are not strictly reserved for saving user preferences, options or settings. Also, any modifications to shared preferences must go through a dedicated tool called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSharedPreferences.Editor\u003c/code\u003e. This is to ensure values remain consistent, and are saved correctly.\u003c/p\u003e\r\n\u003cp\u003eWe will use shared preferences in our MyRestaurants application to save the zip code a user enters in our MainActivity. This will prevent users from having to enter a zip code each time they open our application. The data will persist in the phone's shared preferences until the user overrides it by manually entering a different zip code.\u003c/p\u003e\r\n\u003ch2\u003eSaving to Shared Preferences\u003c/h2\u003e\r\n\u003cp\u003eLet's begin integrating shared preferences into our MyRestaurants application. Remember, shared preferences may only store primitive data types in key-value pairs. We'll start by adding the following key to our Constants class:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String PREFERENCES_LOCATION_KEY = \u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"location\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill act as the key in our key-value pair. We've placed this in our Constants file because no matter what zip code the user enters, we will always use the same key to access this value.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll add the following code to our MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            addToSharedPreferences(location);\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's go through this step by step:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we begin by creating member variables to store reference to the shared preferences tool itself (\u003ccode\u003emSharedPreferences\u003c/code\u003e) and the dedicated tool we must use to edit them (\u003ccode\u003emEditor\u003c/code\u003e).\u003c/li\u003e\r\n\u003cli\u003eNext, we create a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e, which takes the user-inputted zip code as an argument\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalls upon the editor to write this information to shared preferences.\u003c/li\u003e\r\n\u003cli\u003eThe, since shared preference data must be in key-value pairs, we provide the editor the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe've stored in our Constants file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePREFERENCES_LOCATION_KEY\u003c/code\u003e, and the zip code\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe've passed in as an argument,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eFinally, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapply()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto save this information.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTesting Shared Preferences\u003c/h2\u003e\r\n\u003cp\u003eTo test that this is successfully saving information, let’s log the contents of our shared preferences to the logcat in our RestaurantListActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"Shared Pref Location\"\u003c/span\u003e, mRecentAddress);\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSimilar to the dedicated editor we must use to alter shared preferences, we also call the dedicated\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePreferenceManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto access them.\u003c/p\u003e\r\n\u003cp\u003eHere, we retrieve our shared preferences from the preference manager, pull data from it by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand providing the key that corresponds to the data we'd like to retrieve. We also pass in the default value\u003ccode\u003enull\u003c/code\u003e. The default value will be returned if the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is unable to find a value that corresponds to the key we provided.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app, enter a zip code, and see if it prints to the logcat in RestaurantListActivity:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/u45ih3yc7prcnjf/logging-shared-preferences-locations.png\" alt=\"logging-shared-preferences-data-to-logcat-successfully\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd look, there it is! We're successfully saving and retrieving data in Android's shared preferences!\u003c/p\u003e\r\n\u003ch2\u003eUsing Shared Preferences Data Automatically\u003c/h2\u003e\r\n\u003cp\u003eNow that we can successfully save a user's zip code in shared preferences, let's program our application to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eautomatically\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eretrieve restaurant data from the Yelp API if a location has already been saved. After all, if we already know the user's location, we don't need to ask them to provide it again.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eBe mindful of storing zip code data in your shared prefs for your individual projects! Does it make sense for your app to do this? In many cases, users will explicitly\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewant\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto be able to search for zipcodes other than their home zipcodes. Use SharedPrefs wisely and sparsely, and provide clear opportunities for your users to edit them!\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following code to our RestaurantListActivity, and remove our logcat line :\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we are defining\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSharedPreferences\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the shared preferences information we're using the preference manager to access, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the value we're attempting to retrieve. We then check if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eequal\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e. If it does not, we know we have a zip code saved, and we pass\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ezip code to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As we know, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod then calls the Yelp API and returns restaurants near that location.\u003c/p\u003e\r\n\u003cp\u003eAlso, we only want to save the location to shared preferences\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user has actually entered something into the form field. We'll add the following conditional to instruct our app to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esave locations into shared preferences if they are\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean empty string:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!(location).equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n                addToSharedPreferences(location);\r\n            }\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s run the app again. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estill need to hit the \"Find Restaurants\" button to view restaurants, but we may now leave the form field blank and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the RestaurantListActivity will automatically populate with restaurants near our saved location.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant Note:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like submitting a blank form to access the saved location is a little counter-intuitive and clunky, you're entirely correct. Know that this is only temporary! In future lessons we'll add features that circumvent the need to do this. But for now, if you can hit \"Find Restaurants\"\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eentering a zip code and receive the list of restaurants in the zip code you last searched, your shared preferences are working!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/13_shared_preferences\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eShared preferences\u003c/strong\u003e: An Android class that allows apps to store key-value pairs of primitive data types. Once saved, information in shared preferences will persist across sessions.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAny modifications to shared preferences must be made through a dedicated tool called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSharedPreferences.Editor\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eShared preferences may only store primitive data types in key-value pairs.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eSaving to Shared Preferences\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003emSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\nmEditor = mSharedPreferences.edit();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003emEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAccessing Data from Shared Preferences\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/13_shared_preferences\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information on implementing shared preferences, check out CodePath's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Storing-and-Accessing-SharedPreferences\"\u003eStoring and Accessing SharedPreferences\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eNoSQL vs SQL : Database Review and Prep\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eBefore we get too deep in the hands on implementation of Firebase for Android, lets take a step back for a moment and review what we’ve learned about databases so far.\u003c/p\u003e\r\n\u003cp\u003eA database comes into play any time we wish to serve data for our applications in a persistent way.\u003c/p\u003e\r\n\u003cp\u003eIf you think back to your explorations of Postgres in Java class, you already have experience with one type of Database - namely a SQL database. There are different kinds of SQL databases, with slightly different syntax and capabilities, but they are all structured the same. There are also other kinds of databases that do not run SQL, but are nonetheless relational databases. An umbrella term for these kinds of databases is RDBMS (Relational Database Management Systems). They first came into popularity in the 1970’s, and are therefore very well supported, highly evolved, and very widely used.\u003c/p\u003e\r\n\u003cp\u003eAs you hopefully remember, SQL stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eStructured Query Language\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(remember this) and is the language in which we issue commands to our database, either via the command line or through executing our backend code. This example may look familiar:\u003c/p\u003e\r\n\u003cpre\u003ecourses\r\n-------\r\n\r\n id | name\r\n ---+------------------------\r\n  1 | moringaschool\r\n  2 | How to cook vegan\r\n  3 | Intro to rocket science\r\n\r\nstudents\r\n--------\r\n\r\nid | first_name | last_name |course_id\r\n---+------------+-----------+---------\r\n 1 | libby      | brown     |1\r\n 2 | tiny       | tim       |1\r\n 3 | bub        | bles      |2\r\n 4 | lizzy      | cool      |1\r\n 5 | hank       | fresh     |3\r\n 6 | tiny       | tom       |1\r\n\r\n\r\n id | number     | type | friend_id\r\n ---+------------+------+----------\r\n  1 | 9165551212 | cell | 1\r\n  2 | 3235551212 | cell | 2\r\n  3 | 4155551212 | cell | 3\r\n  4 | 9165552020 | work | 1\r\n  5 | 3235552020 | work | 2\r\n  6 | 4155552020 | work | 3\r\n\r\n\r\n\u003c/pre\u003e\r\n\u003cp\u003eSQL databases are fast, well supported and allow us to find, sort and retrieve data easily.\u003c/p\u003e\r\n\u003cp\u003eReview the following pseudocode for examples of how SQL can interact with the tables above:\u003c/p\u003e\r\n\u003cpre\u003eRetrieve all cols of table `students` where `course_id` ==  course from table `courses` with id = 1;\r\n\r\nRetrieve all rows of table where `first_name` of student is == ‘tiny’ and `last_name` is == unique;\r\n\r\nRetrieve `ids` of all students in table `students` in order == ascending;\r\n\u003c/pre\u003e\r\n\u003cp\u003eThese are all examples of how SQL allows us to specifically pinpoint data and return it to our code.\u003c/p\u003e\r\n\u003cp\u003eSQL databases can be difficult to scale. By nature, RDBMS have to run on a single server in order to maintain database consistency, as the data is basically stored in one giant file. This was not a problem for common data storage needs in the 1970’s, but as data collection needs grew exponentially to where they are today, maintaining the hardware to keep a RDBMS consistent with a guaranteed 99%+ uptime became prohibitively expensive to maintain.\u003c/p\u003e\r\n\u003cp\u003eNoSQL databases provide an alternative to RDBMS because they are lightweight, scalable, and can be run much more easily on distributable systems. Next to Firebase, some of the most well known NoSQL databases are Hadoop, MongoDB, Cassandra (used by Facebook) and CouchBase.\u003c/p\u003e\r\n\u003cp\u003eNoSQL databases are, by definition, not relational databases and do not store data in a relational way. This literally means that there are no relations between individual parts of the data such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estudents\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclasses\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emajors\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshoes\u003c/code\u003e! Firebase, our NoSQL database of choice, stores data in key-value pairs on the server. Firebase is a cloud services provider that offers realtime databases.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eCloud services\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare simply any resource provided over the internet. Realtime databases are databases that are constantly updating and syncing whenever our data changes. This means we can create a remote database online that will continually sync our data.\u003c/p\u003e\r\n\u003cp\u003eNoSQL can easily store the properties of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003es as key-value pairs. That said, it can be harder to pinpoint specific data, or to pull a dataset that matches a specific set of requirements from a NoSQL database due to its non-relational nature. You can no longer ask the server to provide you a dataset based on how the contents of that set relates to the rest of the data.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/jy1hvwkbuhdpkch/android-firebase-example-db.png\" alt=\"android-firebase-example-db\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTherefore, in your projects, it may be necessary to sort data in the code rather than the database, or to limit which data can be added to the database to avoid data duplicates, as it is not possible to simply ask for \"all data where a set of conditions are met but with no duplicates\". In general, data redundancy is much less of a concern with non-relational databases as in other areas of our programming - in fact it, it is sometimes necessary in order to link data to other pieces of data. As with planning a SQL database, sketching out a diagram and thinking through your data model before you begin can give you a major advantage.\u003c/p\u003e\r\n\u003cp\u003eIf all of this is still feeling a little fuzzy - not to worry! You’ll be getting your feet wet very soon, and the pros and cons of SQL vs NoSQL will become very clear.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eSetting up Firebase\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you receive Gradle Sync errors, verify whether your SDK version requires updating. Please note that the update process may take additional time.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIn this lesson we'll learn how to create a Firebase database, install and configure the Firebase client into our Android application, and connect our app to its database in the cloud! In subsequent lessons we'll address how to read, write and delete Firebase entries.\u003c/p\u003e\r\n\u003ch2\u003eFirebase Accounts and Applications\u003c/h2\u003e\r\n\u003cp\u003eFirst off, in order to use Firebase services we'll need to create a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/\"\u003efree Firebase account\u003c/a\u003e. If you already have one from JavaScript unit, you can use the same account.\u003c/p\u003e\r\n\u003cp\u003eOnce registered, we will be taken to a dashboard reading \"Welcome to the new Firebase Console\". Click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate new project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto make a new Firebase app:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/th7pqltorbsz6dc/create-firebase-project-step1.png?raw=1\" alt=\"create-firebase-app1\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the modal window, enter the name of the app,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurants\u003c/em\u003e, and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate Project\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9lk6tupjfk5laoq/create-firebase-project-step2.png?raw=1\" alt=\"create-firebase-app2\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe will be taken to our app's overview page. Select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAdd Firebase to your Android App\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton from the top panel. Click on the android Icon.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Screenshot%20from%202019-02-25%2012-54-41.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Add_firease_to_your_project.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/12257\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the modal popup window, enter your app's package name and the SHA-1 Key. If you don't know how to create an SHA-1 key, click on the question mark icon to learn how to generate the debug key. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epassword\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efor the Android debug-keystore is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eby default:\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eClick\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAdd App\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. Another modal window will appear, and you'll need to download a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoogle-services.json\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Screenshot%20from%202019-02-25%2013-35-23.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"adding_google_service_json_to_your_project\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/12259\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFollow the instructions depicted in the modal, and copy the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoogle-services.json\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile into your app module root directory. Then, hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eContinue\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eOne last modal will appear containing instructions for adding the necessary Google services plugins to both your project-level and app-level build.gradle files. Follow these instructions to add the necessary dependencies.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the google services classpath to our project-level\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild.gradle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. The class path tells JDK tools and applications where to find third-party and user-defined classes -- that is, classes that are not Java extensions or part of the Java platform.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Project: MyRestaurants)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e\r\n...\r\n    dependencies {\r\n        ...\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur project-level build.gradle file should now look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Project: MyRestaurants)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:3.3.2'\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\u003cbr\u003e        google()\r\n        jcenter()\r\n    }\r\n}\r\n\r\ntask clean(\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll need to add the Firebase-database dependency in order to utilize the realtime database service:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e build.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e...\r\ndependencies {\r\n    ...\r\n    // The latest version of firebase-ui currently at \u003cbr\u003e    //  implementation 'com.firebaseui:firebase-ui-database:4.3.1' causes compile errors so use the one below instead.\u003cbr\u003e    implementation 'com.firebaseui:firebase-ui-database:3.3.1'\r\n}\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need to add the google-services plugin to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebottom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof your app-level build.gradle file. Your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild.gradle (Module: app)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould now look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003eapply \u003cspan\u003eplugin\u003c/span\u003e: \u003cspan\u003e'com.android.application'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003eandroid {\u003cbr\u003e    compileSdkVersion \u003cspan\u003e28\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003edefaultConfig {\u003cbr\u003e        applicationId \u003cspan\u003e\"io.github.vinge1718.restaurant\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eminSdkVersion \u003cspan\u003e15\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etargetSdkVersion \u003cspan\u003e28\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionCode \u003cspan\u003e1\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionName \u003cspan\u003e\"1.0\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etestInstrumentationRunner \u003cspan\u003e\"android.support.test.runner.AndroidJUnitRunner\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    buildTypes {\u003cbr\u003e        release {\u003cbr\u003e            minifyEnabled \u003cspan\u003efalse\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003eproguardFiles getDefaultProguardFile(\u003cspan\u003e'proguard-android-optimize.txt'\u003c/span\u003e), \u003cspan\u003e'proguard-rules.pro'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e    buildTypes.each {\u003cbr\u003e        it.buildConfigField \u003cspan\u003e'String'\u003c/span\u003e, \u003cspan\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\u003cbr\u003e    }\u003cbr\u003e    testOptions {\u003cbr\u003e        unitTests {\u003cbr\u003e            includeAndroidResources = \u003cspan\u003etrue\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edependencies {\u003cbr\u003e    implementation fileTree(\u003cspan\u003edir\u003c/span\u003e: \u003cspan\u003e'libs'\u003c/span\u003e, \u003cspan\u003einclude\u003c/span\u003e: [\u003cspan\u003e'*.jar'\u003c/span\u003e])\u003cbr\u003e    implementation \u003cspan\u003e'com.android.support:preference-v7:28.0.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.android.support.constraint:constraint-layout:1.1.3'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.android.support:support-v4:28.0.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003etestImplementation \u003cspan\u003e'junit:junit:4.12'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test:runner:1.0.2'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test.espresso:espresso-core:3.0.2'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//Robolectric dependencies\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003etestImplementation \u003cspan\u003e\"org.robolectric:robolectric:3.8\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//Espresso dependencies\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eandroidTestImplementation \u003cspan\u003e\"com.android.support.test:rules:1.0.2\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//butterknife\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.jakewharton:butterknife:8.8.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eannotationProcessor \u003cspan\u003e'com.jakewharton:butterknife-compiler:8.8.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//OkHttp\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.squareup.okhttp3:okhttp:3.10.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//RecylcerView\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.android.support:recyclerview-v7:28.0.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Picasso image processing\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.squareup.picasso:picasso:2.71828'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//parceler\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'org.parceler:parceler-api:1.1.12'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eannotationProcessor \u003cspan\u003e'org.parceler:parceler:1.1.12'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//Add firebase SDK\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.google.firebase:firebase-core:16.0.7'\u003cbr\u003e\u003c/span\u003e}\u003cbr\u003eapply \u003cspan\u003eplugin\u003c/span\u003e: \u003cspan\u003e'com.google.gms.google-services'\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eMake sure to sync your project with Gradle before continuing.\u003c/p\u003e\r\n\u003ch2\u003ePermissions\u003c/h2\u003e\r\n\u003cp\u003eBecause our Firebase database exists online, we also need to ensure our application has internet access to communicate with our database. To do this, we need to add internet permissions throughout the app.\u003c/p\u003e\r\n\u003cp\u003eWe've already added these permissions in MyRestaurants when we configured it to use OkHttp. As a refresher, adding internet permissions is done by placing the following code in your AndroidManifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePackaging Options\u003c/h2\u003e\r\n\u003cp\u003eEach time Gradle builds our project it creates meta files for each SDK included in the dependencies. These files don't contain code our application needs to operate. They actually hold information like legal notices, license information, dependency information, etc. When we use multiple third party libraries they may each have meta files with the same name (especially common names like\u003cspan\u003e \u003c/span\u003e\u003cem\u003elicense.txt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003enotice.txt\u003c/em\u003e). Unfortunately, these duplicate files can create issues during the build process.\u003c/p\u003e\r\n\u003cp\u003eTo avoid this, let's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eexclude\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethese files from our build by adding the following packaging options to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle Module:app\u003c/div\u003e\r\n\u003cpre\u003eandroid {\u003cbr\u003e    compileSdkVersion \u003cspan\u003e28\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003edefaultConfig {\u003cbr\u003e        applicationId \u003cspan\u003e\"io.github.vinge1718.restaurant\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eminSdkVersion \u003cspan\u003e15\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etargetSdkVersion \u003cspan\u003e27\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionCode \u003cspan\u003e1\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionName \u003cspan\u003e\"1.0\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etestInstrumentationRunner \u003cspan\u003e\"android.support.test.runner.AndroidJUnitRunner\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    buildTypes {\u003cbr\u003e        release {\u003cbr\u003e            minifyEnabled \u003cspan\u003efalse\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003eproguardFiles getDefaultProguardFile(\u003cspan\u003e'proguard-android-optimize.txt'\u003c/span\u003e), \u003cspan\u003e'proguard-rules.pro'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e    packagingOptions {\u003cbr\u003e        exclude \u003cspan\u003e'META-INF/DEPENDENCIES.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/DEPENDENCIES'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/dependencies.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/LICENSE.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/LICENSE'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/license.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/LGPL2.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/NOTICE.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/NOTICE'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/notice.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    buildTypes.each {\u003cbr\u003e        it.buildConfigField \u003cspan\u003e'String'\u003c/span\u003e, \u003cspan\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\u003cbr\u003e    }\u003cbr\u003e    testOptions {\u003cbr\u003e        unitTests {\u003cbr\u003e            includeAndroidResources = \u003cspan\u003etrue\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e}\u003c/pre\u003e\r\n\u003ch2\u003eUpdate Google Play Services\u003c/h2\u003e\r\n\u003cp\u003eBefore running your app, check the SDK Manager to ensure you have the latest version of Google Play Services installed. Finally, run your app to make sure you don't receive errors.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/android/setup\"\u003eAdd Firebase to your Android Project\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eportion of Firebase's Android documentation.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/13_shared_preferences\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirebase\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a cloud services provider that offers realtime databases.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eCloud services\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare simply any resource provided over the internet.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe password for the Android debug-keystore is in Firebase is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eandroid\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby default.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/epicodus-lessons/myrestaurants/tree/3.1_setting_up_firebase\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/android/setup\"\u003eAdd Firebase to your Android Project\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eportion of Firebase's Android documentation.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eFirebase: Firebase Structure and Further Setup\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that our application is configured to use our new Firebase database, let's learn how to save data to it. In this lesson we'll create our first Firebase objects and nodes which will allow us to write data to our database.\u003c/p\u003e\r\n\u003cp\u003eIn later lessons we'll dive into retrieving and displaying data from Firebase, and creating listeners that will watch for changes and sync our data automatically.\u003c/p\u003e\r\n\u003ch2\u003eBasic Firebase Methods and Format\u003c/h2\u003e\r\n\u003cp\u003eLet's briefly explore the methods we'll use to create database entries to give you a bit more of an overview, and get some more background on how firebase is structured. Each time we interact with Firebase, we need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e. Why? What does this mean?\u003c/p\u003e\r\n\u003cp\u003eKeep the following in mind:\u003c/p\u003e\r\n\u003cp\u003eA NoSQL database does not allow us to access data in the same way a SQL database does because of its different structure. Instead of pinpointing data sets that meet certain qualifiers, or locating a specific piece of information through it's relationship to other data, we can look at\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enodes\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ein our database and pull data from those specific locations. We identify those nodes through references.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/bkw9xauninpw34n/firebase-node-structure.png\" alt=\"firebase-node-structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdditionally, remember that in Java and therefore Android,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeverything\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(with the exception of primitives and interfaces). Our datatypes of course, but also our activities, our adapters, our services, our views. How we connect and work with databases is no different. So let's start by creating a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edatabase\u003c/code\u003e. We can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to access our database and then write that into a local\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFirebaseDatabase database = FirebaseDatabase.getInstance();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can create a reference by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetReference()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstance.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow refers to our entire database at the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eroot level\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eDatabaseReference ref = FirebaseDatabase.getInstance().getReference();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFrequently, these lines are written back-to back:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFirebaseDatabase database = FirebaseDatabase.getInstance();\r\nDatabaseReference ref = database.getReference();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can access data nodes below our root level, by descending down to a child node. This process is somewhat similar to traversing through the DOM with jQuery: We find an element, then locate a secondary element or set of elements in relationship to that parent.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/7u5swiybn5kqpi3/dom_tree_traversal.png\" alt=\"dom_tree_traversal.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eData in Firebase is stored in JSON-formatted key-value pairs. When we write to the database we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the appropriate child\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eref.child(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;childNodeName\u0026gt;\"\u003c/span\u003e).setValue(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;someValue\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis example creates a new child node with a key of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003echildNodeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeValue\u003c/code\u003e. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enode\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a general computing term referring to an individual piece of a larger data structure. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003echild node\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply a node extending from another node.\u003c/p\u003e\r\n\u003ch2\u003eUpdate Security Rules\u003c/h2\u003e\r\n\u003cp\u003eBy default, Firebase security rules require users to be authenticated in order to both read and write to the database. We will not be working with user authorization until later this week, so let's alter these rules so we can practice writing and reading to the database without having authorized users.\u003c/p\u003e\r\n\u003cp\u003eNavigate to your Firebase app's overview. Select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDatabase\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the panel on the left-hand side of the window.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/v5l01j2jj421rf4/firebase-overview-panel-database.png?raw=1\" alt=\"firebase-overview-panel-database\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you already had a database initialized  you can go ahead and select the \u003cstrong\u003e\u003cem\u003e\u003cspan style=\"font-size: 1rem;\"\u003erules\u003c/span\u003e\u003c/em\u003e\u003c/strong\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003cspan style=\"font-size: 1rem;\"\u003etab, if not scroll down and click on \u003cstrong\u003e\u003cem\u003eCreate Realtime Database\u003c/em\u003e\u003c/strong\u003e: This will initialize your database and now you can click on the \u003cstrong\u003e\u003cem\u003erules\u003c/em\u003e\u003c/strong\u003e tab.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/nett0vvo78n9raf/firebase-security-rule-tab.png?raw=1\" alt=\"firebase-security-rules-tab\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlter the default rules to reflect the following following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003erules\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.read\u003c/span\u003e\": \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.write\u003c/span\u003e\": \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePublish\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto save these changes. This will allow any application with the information in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoogle-services.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to write to our database. We will change the rules back once we have added user authentication to our app.\u003c/p\u003e\r\n\u003ch2\u003eWriting to Firebase\u003c/h2\u003e\r\n\u003cp\u003eNow that we have permissions to read and write to Firebase, let's write our first piece of data. We're currently saving the zip code a user enters into MyRestaurants in Android's shared preferences. Let's practice writing to Firebase by implementing code that will save this data to Firebase instead. Later on, when we have more data to work with, we'll switch back to saving the user's zip code to shared preferences. As you follow along, simply comment out any code referring to shared preferences.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to define the child name of the Firebase node we'd like to save this information to in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e. We'll call our node\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e, and it will contain data for zip codes a user has searched for:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_CHILD_SEARCHED_LOCATION = \u003cspan class=\"hljs-string\"\u003e\"searchedLocation\"\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we define a constant called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_LOCATION_SEARCHED_LOCATION\u003c/code\u003e, and set it equivalent to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"searchedLocation\"\u003c/code\u003e. This will be the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof our node's key-value pair in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow, we'll save user-entered zip codes into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode by adding the following to our MainActivity, and commenting out our previous code saving this data to shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences.Editor mEditor;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor = mSharedPreferences.edit();\u003c/span\u003e\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n\r\n            saveLocationToFirebase(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//            if(!(location).equals(\"\")) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//                addToSharedPreferences(location);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            }\u003c/span\u003e\r\n\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.setValue(location);\r\n    }\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//    private void addToSharedPreferences(String location) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    }\u003c/span\u003e\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we add the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchedLocations\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e, instantiating it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod passing in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_CHILD_SEARCHED_LOCATION\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument.\u003c/p\u003e\r\n\u003cp\u003eNote: If you get a red squiggly line under the \u003cstrong\u003e\u003cem\u003e\u003ccode class=\"java hljs\"\u003eDatabaseReference\u003c/code\u003e\u003c/em\u003e\u003ccode class=\"java hljs\"\u003e \u003c/code\u003e\u003c/strong\u003eyou'll need to add the Realtime Firebase dependency in the (app) build.gradle and sync - then go back to the MainActivity.java and Alt-Enter to import the necessary library.\u003c/p\u003e\r\n\u003cpre\u003eimplementation \u003cspan\u003e'com.google.firebase:firebase-database:16.0.6'\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, providing the user-submitted zip code as an argument. Remember, nodes are specific locations in your database, and they're\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey-value pairs. By calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're providing a\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that we have not yet defined or created a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in our Firebase dashboard. However, when the method above runs, Firebase will create this node for us if it cannot find a pre-existing node of the same name.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will now call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaveLocationToFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of saving this location into shared preferences. Each time the method is called a new zip code will be saved to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow if we run the app and enter a new zip code we should see it appear in our Firebase dashboard under the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eData\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/76tjk31ahwe7zc5/searchedLocation-setValue-example1.png?raw=1\" alt=\"first-searched-location-saved-in-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eUnique Node IDs\u003c/h2\u003e\r\n\u003cp\u003eHowever, if we enter a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elocation the previous location will be overwritten. To prevent this, let's call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod before setting the value. This will ensure each new entry is added to the node under a unique, randomly generated id called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epush id\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.push().setValue(location);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter making the changes above, we can run the app, enter a few new locations and see that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode now contains multiple locations with their own unique id:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/66dld414jz4jabx/searchedLocation-push-example.png?raw=1\" alt=\"firebase-dashboard-multiple-location-entries\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSince we're (at least temporarily) saving the user's searched zip codes in Firebase, let's make the following quick alteration to RestaurantListActivity to ensure our Yelp API requests are being made with the user's most recent search, not an older zip code stored in shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private String mRecentAddress;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, null);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        if (mRecentAddress != null) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            getRestaurants(mRecentAddress);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        }\u003c/span\u003e\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're simply commenting out any reference to shared preferences, and the code that previously made a Yelp API request using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e. Instead, we're making a request with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike we were previously. Again, we'll revisit using shared preferences later on.\u003c/p\u003e\r\n\u003ch2\u003eFirebase Data Structure\u003c/h2\u003e\r\n\u003cp\u003eUnlike SQL, Firebase is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea relational database and it's structure is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etabular. Instead, Firebase data is stored in JSON, which has a nested structure and can be represented using a tree. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eData\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edashboard in your Firebase dashboard is simply a visual representation of your JSON database tree.\u003c/p\u003e\r\n\u003cp\u003eIn fact, we can export our data by clicking on the overflow menu from the database toolbar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/bv40p1t2tqo31au/firebase-database-overflow-menu.png?raw=1\" alt=\"firebase-overflow-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eand then selecting the \"Export Data\" button:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/njgtcvxial2dkpt/firebase-export-json.png?raw=1\" alt=\"firebase-export-json\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd download our database's JSON, which currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003esearchedLocation\u003c/span\u003e\" : \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi05yPv_0tjM2Jiqz\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97204\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi5m6uamM1IkHfXhC\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97201\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe database for our MyRestaurants app will eventually look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/869yzvlkli2l0bl/data_structure_myrestaurants.png?raw=1\" alt=\"MyRestaurants Database Structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOur Firebase database will contain key-value pairs for each restaurant a user saves. The value associated with a restaurant is a map of 10 child key-value pairs.\u003c/p\u003e\r\n\u003cp\u003eEach collection of data, called a node, also has a path associated with it. For example, the path to access the phone number for the restaurant with the push id\u003cspan\u003e \u003c/span\u003e\u003cem\u003eKFB1RHsfuEVcpORnzaH\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Snack Shack, in this case) would be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference phoneRef = FirebaseDatabse.getInstance().getReference(\"restaurants\").child(\"KFB1RHsfuEVcpORnzaH\").child(\"phone\");\u003c/code\u003e. Like a file path, these data references are unique paths to access a specific piece or group of data.\u003c/p\u003e\r\n\u003ch3\u003eFinal Thoughts - How do I efficiently structure my database?\u003c/h3\u003e\r\n\u003cp\u003eBecause of your exposure to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eJSON\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas part of JS Unit, you may be compelled to structure your database in a nested fashion - nesting individual key/value pairs in a list, nesting that list within another list, nesting that list as a value of a key, and so on.\u003c/p\u003e\r\n\u003cp\u003eThe result of this structure has some benefits -- it is intuitively readable, and, at first glance, has little data repetition. After all, being DRY and not having repetitive code is one of hallmarks of an efficient developer.\u003c/p\u003e\r\n\u003cp\u003eBut wait - this approach is actually\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNOT\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erecommendable when it comes to this kind of database. In fact, it is actually preferable to have nodes that reference each other, and, in some cases, may even\u003cspan\u003e \u003c/span\u003e\u003cem\u003eduplicate \u003c/em\u003ecertain aspects of the data. Restructuring your data to prevent nesting is called \"denormalizing\" the data to achieve a \"flat\" data structure.\u003c/p\u003e\r\n\u003cp\u003eBut wait, why is this preferable? Data repetition - no way!\u003c/p\u003e\r\n\u003cp\u003eHere's why.\u003c/p\u003e\r\n\u003cp\u003eWith Firebase, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan be tasked with downloading information from a specific node. But when this is completed, the node and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof its child nodes are also downloaded and stored in the app, even if you only want one specific subset of that data.\u003c/p\u003e\r\n\u003cp\u003eThis unnecessarily taxes the server with requests for data through nested listeners, and the performance of both the server and the app can plummet due to inefficient data retrieval.\u003c/p\u003e\r\n\u003cp\u003eTherefore, when building an app that is even slightly complex, always denormalize your data, creating as flat of a hierarchy as possible - even if this means some data repetition or seeming redundancy.\u003c/p\u003e\r\n\u003cp\u003eFor more information, I really recommend checking out\u003cspan\u003e \u003c/span\u003e\u003ca class=\"\" href=\"https://www.youtube.com/watch?v=3qN4BBpLeyw\"\u003ethis\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca class=\"\" href=\"https://www.youtube.com/watch?v=-12ATQn3e0s\"\u003ethis video\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom Udacity's Firebase Essentials for Android series and reading the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/structure-data\"\u003eStructure Your Database\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esection of the Firebase docs.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eNode\u003c/strong\u003e: a general computing term referring to an individual piece of a larger data structure.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChild node\u003c/strong\u003e: A node extending from another node.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ePush ID\u003c/strong\u003e: A unique, randomly generated id associated with each entry by the node, and created by Firebase.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEach time we interact with Firebase we need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e. We can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to access our database and then using the database object, we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetReference()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to get a specific reference within our database:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFirebaseDatabase database = FirebaseDatabase.getInstance();\r\nDatabaseReference ref = database.getReference();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData in Firebase is stored in JSON-formatted key-value pairs. When we write to the database we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the appropriate child\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eref.child(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;childNodeName\u0026gt;\"\u003c/span\u003e).setValue(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;someValue\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen writing data, if Firebase cannot find the node specified it will create one automatically.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/structure-data#avoid_nesting_data\"\u003eData Structure\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esection of Firebase's Android Guides.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eData Persistence: Writing to Firebase\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eWriting to Firebase\u003c/h2\u003e\r\n\u003cp\u003eNow that we have permissions to read and write to Firebase, let's write our finally store our first piece of data. We're currently saving the zip code a user enters into MyRestaurants in Android's shared preferences. Let's practice writing to Firebase by implementing code that will save this data to Firebase instead. Later on, when we have more data to work with, we'll switch back to saving the user's zip code to shared preferences. As you follow along, simply comment out any code referring to shared preferences.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to define the child name of the Firebase node we'd like to save this information to in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e. We'll call our node\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e, and it will contain data for zip codes a user has searched for:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_CHILD_SEARCHED_LOCATION = \u003cspan class=\"hljs-string\"\u003e\"searchedLocation\"\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we define a constant called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_LOCATION_SEARCHED_LOCATION\u003c/code\u003e, and set it equivalent to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"searchedLocation\"\u003c/code\u003e. This will be the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof our node's key-value pair in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow, we'll save user-entered zip codes into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode by adding the following to our MainActivity, and commenting out our previous code saving this data to shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences.Editor mEditor;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor = mSharedPreferences.edit();\u003c/span\u003e\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n\r\n            saveLocationToFirebase(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//            if(!(location).equals(\"\")) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//                addToSharedPreferences(location);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            }\u003c/span\u003e\r\n\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.setValue(location);\r\n    }\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//    private void addToSharedPreferences(String location) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    }\u003c/span\u003e\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we add the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchedLocations\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e, instantiating it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod passing in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_CHILD_SEARCHED_LOCATION\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument.\u003c/p\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, providing the user-submitted zip code as an argument. Remember, nodes are specific locations in your database, and they're\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey-value pairs. By calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're providing a\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that we have not yet defined or created a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in our Firebase dashboard. However, when the method above runs, Firebase will create this node for us if it cannot find a pre-existing node of the same name.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will now call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaveLocationToFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of saving this location into shared preferences. Each time the method is called a new zip code will be saved to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow if we run the app and enter a new zip code we should see it appear in our Firebase dashboard under the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eData\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/76tjk31ahwe7zc5/searchedLocation-setValue-example1.png?raw=1\" alt=\"first-searched-location-saved-in-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eUnique Node IDs\u003c/h2\u003e\r\n\u003cp\u003eHowever, if we enter a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elocation the previous location will be overwritten. To prevent this, let's call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod before setting the value. This will ensure each new entry is added to the node under a unique, randomly generated id called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epush id\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.push().setValue(location);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter making the changes above, we can run the app, enter a few new locations and see that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode now contains multiple locations with their own unique id:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/66dld414jz4jabx/searchedLocation-push-example.png?raw=1\" alt=\"firebase-dashboard-multiple-location-entries\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSince we're (at least temporarily) saving the user's searched zip codes in Firebase, let's make the following quick alteration to RestaurantListActivity to ensure our Yelp API requests are being made with the user's most recent search, not an older zip code stored in shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private String mRecentAddress;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, null);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        if (mRecentAddress != null) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            getRestaurants(mRecentAddress);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        }\u003c/span\u003e\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're simply commenting out any reference to shared preferences, and the code that previously made a Yelp API request using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e. Instead, we're making a request with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike we were previously. Again, we'll revisit using shared preferences later on.\u003c/p\u003e\r\n\u003ch2\u003eExporting Firebase Data\u003c/h2\u003e\r\n\u003cp\u003eBecause data is stored in Firebase in JSON, it is super easy for us to download our data and view it in a text editor, or hand it over to another application where it can be parsed.\u003c/p\u003e\r\n\u003cp\u003eThis is how:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/bv40p1t2tqo31au/firebase-database-overflow-menu.png?raw=1\" alt=\"firebase-overflow-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eand then selecting the \"Export Data\" button:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/njgtcvxial2dkpt/firebase-export-json.png?raw=1\" alt=\"firebase-export-json\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd download our database's JSON, which currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003esearchedLocation\u003c/span\u003e\" : \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi05yPv_0tjM2Jiqz\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97204\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi5m6uamM1IkHfXhC\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97201\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe database for our MyRestaurants app will eventually look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/869yzvlkli2l0bl/data_structure_myrestaurants.png?raw=1\" alt=\"MyRestaurants Database Structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOur Firebase database will contain key-value pairs for each restaurant a user saves. The value associated with a restaurant is a map of 10 child key-value pairs.\u003c/p\u003e\r\n\u003cp\u003eEach collection of data, called a node, also has a path associated with it. For example, the path to access the phone number for the restaurant with the push id\u003cspan\u003e \u003c/span\u003e\u003cem\u003eKFB1RHsfuEVcpORnzaH\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Snack Shack, in this case) would be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference phoneRef = FirebaseDatabse.getInstance().getReference(\"restaurants\").child(\"KFB1RHsfuEVcpORnzaH\").child(\"phone\");\u003c/code\u003e. Like a file path, these data references are unique paths to access a specific piece or group of data.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Reading\u003c/h3\u003e\r\n\u003cp\u003eFor more information about data structuring with Firebase, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/structure-data\"\u003eStructure Your Database\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esection of the Firebase docs.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirebase: Reading Data and Event Listeners\u003c/h1\u003e\r\n\u003cp\u003eNow that we can successfully save data from our MyRestaurants application into Firebase, how do we retrieve that data when we need it? Remember, again, that unlike in a SQL database we cannot pinpoint data in the same way we can with a RDBMS - instead, we identify data through changes to a certain node, or reference point. In this lesson we'll learn how to create and implement\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elisteners\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat will deliver updated database information directly to our app.\u003c/p\u003e\r\n\u003ch2\u003eListeners and Snapshots\u003c/h2\u003e\r\n\u003cp\u003eFirebase utilizes\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elisteners\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto watch for changes in a specified node. It is similar to an event handler in the sense that a code is triggered based on a certain circumstance. In our case, whenever changes in that node's data occur, the listener automatically provides the application updated data, called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esnapshot\u003c/strong\u003e. The application can then use information from the snapshot to update the UI.\u003c/p\u003e\r\n\u003cp\u003eThis differs drastically from the request/response model we've used in the past, such as requesting information from Yelp's API. The request/response format requires our application make new request threads to regularly check for new data from the data source. When using listeners, Firebase\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esends updates to our app\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata changes.\u003c/p\u003e\r\n\u003cp\u003eSimilar to OKHttp, the Firebase SDK handles all threading and asynchronicity for us, too! We just need to determine what data we'd like to listen to, and what to do when the listener returns new data.\u003c/p\u003e\r\n\u003ch2\u003eTypes of Listeners in Firebase\u003c/h2\u003e\r\n\u003cp\u003eThere are several types of Listeners for Firebase, and each Listener type has a different kind of callback that is triggered when the listener is activated.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003c/strong\u003e: A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elistens for data changes to a specific location in your database - i.e a node.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas one event callback method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDataChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto read a static snapshot of the contents at a given path, as they existed at the time of the event. This method is triggered once when the listener is attached and again every time the data, including children, changes. The event callback is passed a snapshot containing all data at that location, including child data. If there is no data, the snapshot returned is null.\u003c/p\u003e\r\n\u003cp\u003eIf the Event can not be completed, a second callback method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCancelled()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003c/strong\u003e: A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elistens for changes to the children of a specific database reference, for example the root node of a database. It has the following callback methods:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eonCancelled(DatabaseError error) \r\n\u003cspan class=\"hljs-comment\"\u003e// This method will be triggered in the event that this listener either failed at the server, or is removed as a result of the security and Firebase rules.\u003c/span\u003e\r\n\r\nonChildAdded(DataSnapshot snapshot, String previousChildName)\r\n \u003cspan class=\"hljs-comment\"\u003e// triggered when a new child is added to the location to which this listener was added.\u003c/span\u003e\r\n\r\nonChildChanged(DataSnapshot snapshot, String previousChildName)\r\n \u003cspan class=\"hljs-comment\"\u003e//  triggered when the data at a child location has changed.\u003c/span\u003e\r\n\r\nonChildMoved(DataSnapshot snapshot, String previousChildName) \r\n\u003cspan class=\"hljs-comment\"\u003e// triggered when a child location's priority changes.\u003c/span\u003e\r\n\r\nonChildRemoved(DataSnapshot snapshot) \r\n\u003cspan class=\"hljs-comment\"\u003e// triggered when a child is removed from the location to which this listener was added.\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor your own apps that require data persistence, it is a good idea to read through the additional documentation on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(read both\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/read-and-write\"\u003ethe guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/reference/android/com/google/firebase/database/ValueEventListener\"\u003ereference\u003c/a\u003e) and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/reference/android/com/google/firebase/database/ChildEventListener\"\u003eread the reference\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eMake sure you understand the difference between event listener types and when they are used - alone, or in combination.\u003c/p\u003e\r\n\u003ch2\u003eCreating a ValueEventListener\u003c/h2\u003e\r\n\u003cp\u003eLet’s add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto MyRestaurants. We'll include code that logs data from our searchedLocations node in Firebase whenever changes occur (such as when we add a new location):\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\u003cspan class=\"hljs-comment\"\u003e//pinpoint location node\u003c/span\u003e\r\n\r\n        mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() { \u003cspan class=\"hljs-comment\"\u003e//attach listener\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-comment\"\u003e//something changed!\u003c/span\u003e\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot locationSnapshot : dataSnapshot.getChildren()) {\r\n                    String location = locationSnapshot.getValue().toString();\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"Locations updated\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"location: \"\u003c/span\u003e + location); \u003cspan class=\"hljs-comment\"\u003e//log\u003c/span\u003e\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-comment\"\u003e//update UI here if error occurred.\u003c/span\u003e\r\n\r\n            }\r\n        });\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n     ...\r\n\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we define a Firebase\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSearchedLocationReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand pass it the child key of the searchedLocations node (as covered in Data Persistence: Writing to Firebase lesson). Then, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddValueEventListener()\u003c/code\u003eon our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSearchedLocationReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to attach a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which we provide as a parameter).\u003c/p\u003e\r\n\u003cp\u003eAs mentioned above,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003es have two methods that must be overridden;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDataChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCancelled()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003eTo recap:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonDataChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called whenever data at the specified node changes. Such as adding a new zip code. It will return a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edataSnapshot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, which is essentially a read-only copy of the Firebase state.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonCancelled()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called if the listener is unsuccessful for any reason. We won't add any code here right now, but could in the future.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDataChange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we'll snag the values returned in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edataSnapshot\u003c/code\u003e, loop through each of the children with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetChildren()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and print their values to the logcat. Other methods we can call on a dataSnapshot include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.child()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getKey()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eEach time a new location is added it will be saved to our searchedLocations node, which will trigger our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto provide an updated list of locations to our app. When our app receives these locations, it will log them to the logcat. Here, we can see several locations logged to the logcat:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/as5bzl3ofobw054/locations-updated-logcat1.png?raw=1\" alt=\"logging-event-listener-data\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd, if we search for yet another zip code, we can see there are now\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elocations logged. The listener recognized changes in the searchedLocations node, and automatically sent the updated information to our app. Pretty cool!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/wr41juzri5lxhb7/locations-updated-logcat2.png?raw=1\" alt=\"logging-event-listener-data-again\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eRemoving Event Listeners\u003c/h2\u003e\r\n\u003cp\u003eWhen creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evalueEventListeners\u003c/code\u003e, it's important to consider how they should be handled while the user is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eactively interacting with our application. In its current state, when a user navigates away from MyRestaurants, our listener will\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtinue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto listen for changes in Firebase. As you can imagine, continually listening will eat away battery life, and eventually can cause memory leaks.\u003c/p\u003e\r\n\u003cp\u003eLet's remove our listener when the user quits interacting with the activity. To do this, we'll declare and attach a variable name to the listener itself, so we may instruct our app to destroy it when the user quits the activity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ValueEventListener mSearchedLocationReferenceListener;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        mSearchedLocationReferenceListener = mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot locationSnapshot : dataSnapshot.getChildren()) {\r\n                    String location = locationSnapshot.getValue().toString();\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"Locations updated\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"location: \"\u003c/span\u003e + location);\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n        });\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mSearchedLocationReference.removeEventListener(mSearchedLocationReferenceListener);\r\n    }\r\n\r\n  ...\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the code above, we declare the member variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSearchedLocationReferenceListener\u003c/code\u003eand assign it to the event listener. Then, we override the activity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that automatically runs when the activity is halted. We explicitly instruct our app to remove the listener from our Firebase node when the activity is destroyed.\u003c/p\u003e\r\n\u003cp\u003eNote that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is an override for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity\u003c/em\u003e, not the listener. It is defined in the top level of the class, not nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddValueEventListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock.\u003c/p\u003e\r\n\u003cp\u003eThe completed activity should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences.Editor mEditor;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ValueEventListener mSearchedLocationReferenceListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        mSearchedLocationReferenceListener = mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot locationSnapshot : dataSnapshot.getChildren()) {\r\n                    String location = locationSnapshot.getValue().toString();\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"Locations updated\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"location: \"\u003c/span\u003e + location);\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n        });\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor = mSharedPreferences.edit();\u003c/span\u003e\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n\r\n            saveLocationToFirebase(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//            if(!(location).equals(\"\")) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//                addToSharedPreferences(location);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            }\u003c/span\u003e\r\n\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.push().setValue(location);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mSearchedLocationReference.removeEventListener(mSearchedLocationReferenceListener);\r\n    }\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//    private void addToSharedPreferences(String location) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    }\u003c/span\u003e\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eListeners\u003c/strong\u003e: Watch for changes in a specified node. Whenever changes occur, listeners automatically provide the application updated data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSnapshot\u003c/strong\u003e: Updated data from a node. Usually provided to the application by a listener, when changes to the node occur.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo prevent consuming unnecessary battery power and memory, remove valueEventListeners manually when the user is no longer interacting with the application. This can be done by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremoveEventListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the Firebase database reference in the activity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eDefining a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evalueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand removing it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen a user quits an activity:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ValueEventListener mSearchedLocationReferenceListener;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        mSearchedLocationReferenceListener = mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                \u003cspan class=\"hljs-comment\"\u003e//   code here is executed when Firebase recognizes a change made to the \u003c/span\u003e\r\n                \u003cspan class=\"hljs-comment\"\u003e//   node being listened to, and provides a new dataSnapshot. \u003c/span\u003e\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-comment\"\u003e//   code here is executed if the listener is unsuccessful \u003c/span\u003e\r\n                \u003cspan class=\"hljs-comment\"\u003e//   for any reason.\u003c/span\u003e\r\n            }\r\n        });\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e//    defined in 'top level' of activity, not nested within another block. \u003c/span\u003e\r\n        \u003cspan class=\"hljs-comment\"\u003e//    code here is executed when the user quits the activity. \u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mSearchedLocationReference.removeEventListener(mSearchedLocationReferenceListener);\r\n    }\r\n  ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information, check out Firebase's Java Android Guides for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/retrieve-data\"\u003eRetrieve Data on Android\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirebase: Writing POJOs\u003c/h1\u003e\r\n\u003cp\u003eIn the previous lesson we successfully wrote small strings of data to Firebase. However, we eventually want our MyRestaurants users to save entire restaurants to their own personalized lists. Our restaurants are complex Java objects, not just string values. In this lesson we'll cover writing Java objects to Firebase, and implement functionality to allow users to save restaurants to their own personal list.\u003c/p\u003e\r\n\u003ch2\u003eObject Formatting in Firebase\u003c/h2\u003e\r\n\u003cp\u003eFirebase makes it rather simple to read and write\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ePOJOs\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(plain old Java objects) with its built-in serialization capabilities. We just need to adhere to a few simple rules:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach member variable name must match the name of the keys of our children nodes. In our case, this means we need to remove the ‘m’ prefix from variables in our Restaurant class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach member variable must be a valid JSON type.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a valid JSON type, so we need to change our address and categories variables to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etypes.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe must provide an empty constructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe must also provide public getter methods for every member variable.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eConveniently enough, we already have an empty\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor created for use by the Parceler library, and public getter methods. We just need to remove any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003em\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefixes, and alter any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype variables in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.List;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Parcel\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    String name;\r\n    String phone;\r\n    String website;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating;\r\n    String imageUrl;\r\n    List\u0026lt;String\u0026gt; address = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude;\r\n    List\u0026lt;String\u0026gt; categories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.phone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.website = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.rating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.imageUrl = getLargeImageUrl(imageUrl);\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.address = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.latitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.longitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.categories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e name;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e phone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e website;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e imageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e address;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e latitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e longitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetLargeImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String imageUrl)\u003c/span\u003e \u003c/span\u003e{\r\n        String largeImageUrl = imageUrl.substring(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, imageUrl.length() - \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e).concat(\u003cspan class=\"hljs-string\"\u003e\"o.jpg\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e largeImageUrl;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, we've removed the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003em\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix from our member variables and any references to them, and we've changed the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecategories\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables to be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, including within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetAddress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCategories()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003egetter methods.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you receive\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efailed to bounce type\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eerrors, double-check that public getter methods exist for each variable and that each is a valid JSON type.\u003c/p\u003e\r\n\u003ch2\u003eSaving Objects\u003c/h2\u003e\r\n\u003cp\u003eNow that we’ve altered our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to adhere to Firebase's rules, let’s begin saving restaurants. Remember, we want users to be able to use our app to search for restaurants in a provided area, and save any restaurants they're interested in to their own customizable list.\u003c/p\u003e\r\n\u003cp\u003eWe should already have a \"Save Restaurant\" button in our restaurant detail view. Let's configure our application to actually save a restaurant to our database when a user clicks this option:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9mmgh2w4n4xod2p/save-restaurant-button.png?raw=1\" alt=\"save-restaurant-button-in-detail-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add the restaurants node's key name (which will serve as the key in our data's key-value relationship) to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, just like we did for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in the previous lessons.\u003c/p\u003e\r\n\u003cp\u003eRemember, this node doesn't exist\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e, but Firebase will create it when it doesn't find an existing node with this name. Moving forward, we should\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esave the node names as constants in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_CHILD_RESTAURANTS = \u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we'll attach a click listener to our \"Save Restaurants\" button, and add code to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003emethod that will save a restaurant to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in Firebase when the button is selected:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        Picasso.get()\u003cbr\u003e                .load(mRestaurant.getImageUrl())\u003cbr\u003e                .into(mImageLabel);\r\n\r\n        mNameLabel.setText(mRestaurant.getName());\r\n        mCategoriesLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getCategories()));\r\n        mRatingLabel.setText(Double.toString(mRestaurant.getRating()) + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        mPhoneLabel.setText(mRestaurant.getPhone());\r\n        mAddressLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getAddress()));\r\n\r\n        mWebsiteLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mPhoneLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mAddressLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSaveRestaurantButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            DatabaseReference restaurantRef = FirebaseDatabase\r\n                    .getInstance()\r\n                    .getReference(Constants.FIREBASE_CHILD_RESTAURANTS);\r\n            restaurantRef.push().setValue(mRestaurant);\r\n            Toast.makeText(getContext(), \u003cspan class=\"hljs-string\"\u003e\"Saved\"\u003c/span\u003e, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the above code, we do the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eSet a click listener for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSaveRestaurantButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the fragment's existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAdd another conditional statement to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003eoverride (we should already have several conditionals that create implicit intents if the user clicks on an address, phone number, or website, as covered in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/wednesday-implicit-intents?module_item_id=i395fbc4796bb4258cbf441d02a355a34\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/wednesday-implicit-intents\" data-api-returntype=\"Page\"\u003ethis lesson\u003c/a\u003e).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn the conditional, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurantRef\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetReference()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods, passing in the key for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e, passing in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject as an argument, to create a node for the selected restaurant with a unique push id.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we display a brief toast to confirm the restaurant has been saved.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, if we run our app, we should be able to click the Save Restaurant button, navigate to our Firebase app's Data tab and see all of the data pertaining to the selected restaurant!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/cjj828ulyqxygu2/save-restaurant-firebase-database.png?raw=1\" alt=\"pojo-visible-in-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ePOJOs\u003c/strong\u003e: Stands for \"Plain old Java objects\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eWriting Java Objects to Firebase\u003c/h3\u003e\r\n\u003cp\u003eIn order to read and write POJOS to FIrebase, we must adhere to the following rules:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEach member variable name must match the name of the keys of children nodes.\u003c/li\u003e\r\n\u003cli\u003eEach member variable must be a valid JSON type.\u003c/li\u003e\r\n\u003cli\u003eAn empty constructor must be provided.\u003c/li\u003e\r\n\u003cli\u003ePublic getter methods for every member variable must be included.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirebase: RecyclerAdapter\u003c/h1\u003e\r\n\u003cp\u003eNow that users can successfully save their favorite restaurants to Firebase, let's make sure they can view the list of restaurants they've saved. To do this, we'll integrate another open source library called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eFirebaseUI-Android\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eSimilar to our RestaurantListActivity, we will display each saved restaurant using the custom\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout. It is therefore possible for us to reuse our RestaurantListAdapter and RestaurantListViewHolder. However, when we delete data from our database, the RestaurantListAdapter won't know it needs to update the view!\u003c/p\u003e\r\n\u003cp\u003eWe've already integrated listeners that automatically return updated data to our application; let's make sure our user interface is similarly dynamic and also automatically updates when changes occur. In order to address this, we'll use FirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eFirebaseRecyclerAdapter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto map our Restaurant data from Firebase to Android.\u003c/p\u003e\r\n\u003ch2\u003eFirebase RecyclerView Setup\u003c/h2\u003e\r\n\u003cp\u003eFirst off, take a moment to glance over the general FirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android\"\u003eREADME\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android/blob/master/database/README.md\"\u003efirebase-ui-database docs\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo install this tool we'll add the following to our app's dependencies:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n    ...\r\n    implementation 'com.firebaseui:firebase-ui-database:3.3.1'\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eFirebase ViewHolder\u003c/h2\u003e\r\n\u003cp\u003eBefore we create our FirebaseRecyclerAdapter, let's create a new ViewHolder. It will look similar to our RestaurantViewHolder, but because FirebaseUI handles the ViewHolder construction for us, we won't have as many customization options.\u003c/p\u003e\r\n\u003cp\u003eFirst, create a new Java class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFirebaseRestaurantViewHolder.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package. Then, add the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n   \r\n    View mView;\r\n    Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n        mView = itemView;\r\n        mContext = itemView.getContext();\r\n        itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        ImageView restaurantImageView = (ImageView) mView.findViewById(R.id.restaurantImageView);\r\n        TextView nameTextView = (TextView) mView.findViewById(R.id.restaurantNameTextView);\r\n        TextView categoryTextView = (TextView) mView.findViewById(R.id.categoryTextView);\r\n        TextView ratingTextView = (TextView) mView.findViewById(R.id.ratingTextView);\r\n\r\n        Picasso.get().load(restaurant.getImageUrl()).into(restaurantImageView);\r\n\r\n        nameTextView.setText(restaurant.getName());\r\n        categoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n        ratingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(Constants.FIREBASE_CHILD_RESTAURANTS);\r\n        ref.addListenerForSingleValueEvent(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    restaurants.add(snapshot.getValue(Restaurant.class));\r\n                }\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, itemPosition + \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e, Parcels.wrap(restaurants));\r\n\r\n                mContext.startActivity(intent);\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like in our RestaurantViewHolder, we add static variables to hold the width and height of our images for Picasso.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then add member variables to hold the view and context which we set in our constructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe also implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface and set the click listener on our itemView.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we first bind the views and then set the image and text views.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we create a singleValueEventListener to grab out the current list of restaurants from Firebase which we pass along to the RestaurantDetailActivity in the form of an intent extra. We will need this ArrayList when constructing an instance of the RestaurantDetailFragment.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSavedRestaurantListActivity\u003c/h2\u003e\r\n\u003cp\u003eBefore we can hook our app up with the corresponding data in Firebase, we first need to create a place to display it. Let's start by creating a new activity called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSavedRestaurantListActivity.java\u003c/em\u003e. We can reuse the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout since all we need is a RecyclerView so when creating this new activity, make sure to uncheck the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/3q0j30wdf1sejil/dont-generate-layout-when-creating-new-activity.png\" alt=\"dont-generate-layout-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can now set the appropriate content view, bind the RecyclerView, and set the FirebaseRecyclerAdapter from the FirebaseUI library:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eSavedRestaurantListActivity \u003cspan\u003eextends \u003c/span\u003eAppCompatActivity {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt; \u003cspan\u003emFirebaseAdapter\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003erecyclerView\u003c/span\u003e) RecyclerView \u003cspan\u003emRecyclerView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e(Bundle savedInstanceState) {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetContentView(R.layout.\u003cspan\u003eactivity_restaurants\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eButterKnife.\u003cspan\u003ebind\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRestaurantReference \u003c/span\u003e= FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetUpFirebaseAdapter()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003eprivate void \u003c/span\u003e\u003cspan\u003esetUpFirebaseAdapter\u003c/span\u003e(){\u003cbr\u003e        FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(\u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eRestaurant.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e                        .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt;(options) {\u003cbr\u003e            \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eFirebaseRestaurantViewHolder firebaseRestaurantViewHolder\u003cspan\u003e, int \u003c/span\u003eposition\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e@NonNull \u003c/span\u003eRestaurant restaurant) {\u003cbr\u003e                firebaseRestaurantViewHolder.bindRestaurant(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e            \u003cspan\u003e@NonNull\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            @Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003epublic \u003c/span\u003eFirebaseRestaurantViewHolder \u003cspan\u003eonCreateViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eViewGroup parent\u003cspan\u003e, int \u003c/span\u003eviewType) {\u003cbr\u003e                View view = LayoutInflater.\u003cspan\u003efrom\u003c/span\u003e(parent.getContext()).inflate(R.layout.\u003cspan\u003erestaurant_list_item\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eparent\u003cspan\u003e, false\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                return new \u003c/span\u003eFirebaseRestaurantViewHolder(view)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setLayoutManager(\u003cspan\u003enew \u003c/span\u003eLinearLayoutManager(\u003cspan\u003ethis\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setAdapter(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStart\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStart()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter\u003c/span\u003e.startListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStop\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStop()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if\u003c/span\u003e(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e!= \u003cspan\u003enull\u003c/span\u003e) {\u003cbr\u003e            \u003cspan\u003emFirebaseAdapter\u003c/span\u003e.stopListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cpre\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we initialize our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variables.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eactivity_restaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetContentView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to display the correct layout.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the \"restaurants\" child node key from our Constants class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then create a method to set up the FirebaseAdapter by first \u003cspan\u003ecreating a \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerOptions \u003cspan\u003eobject \u003c/span\u003e\u003c/code\u003ewhich is cast into the model class, we build the object by setting the query (or database reference) (by) passing in the database-reference and the Model class the objects will be parsed into\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our viewHolder to set the appropriate text and image with the given restaurant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then set the adapter on our RecyclerView.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we need to clean up the FirebaseAdapter. When the activity is stops, we need to call\u003cspan\u003e \u003ccode class=\"java hljs\"\u003eonStop()\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eon the adapter so that it can stop listening for changes in the Firebase database.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdd Navigation to SavedRestaurantListActivity\u003c/h2\u003e\r\n\u003cp\u003eFinally, we just need to create a button to navigate to this new activity. Add the following button to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"My Saved Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"visible\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd alter your existing \"Find Restaurants\" button to make room for the new \"Saved Restaurants\" button:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"visible\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also bind the new \"Saved Restaurants\" button's view, call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetOnClickListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eupon it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of MainActivity, and add an additional\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003eoverride to handle creating and beginning a new intent when the Saved Restaurants button is selected:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.savedRestaurantsButton) Button mSavedRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSavedRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        ...\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSavedRestaurantsButton) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, SavedRestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can run our app, click on “My Saved Restaurants” and see our list of saved restaurants!\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003echildValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the location we specified in our reference.\u003c/p\u003e\r\n\u003cp\u003eTo test that the view automatically updates when an item is deleted, let’s open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDatabase\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab in our Firebase app and delete a restaurant by selecting the red \"X\" near its node:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0xgnkpd85sdj4td/delete-from-firebase-dashboard.png\" alt=\"delete-node-from-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe view in our emulator should update immediately if everything was set up properly; the deleted restaurant should immediately be removed from the list of saved restaurants.\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirebaseUI-Android\u003c/strong\u003e: An open-source library that connects common user interface elements to the FIrebase API.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirebaseRecyclerAdapter\u003c/strong\u003e: A RecyclerAdapter specially-made for integration with Firebase.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android\" target=\"_blank\"\u003eREADME\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android/blob/master/database/README.md\" target=\"_blank\"\u003efirebase-ui-database docs\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eCapstone Project Brainstorming Homework\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eUnlike your previous courses here at Moringa School you will work\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindependently\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon a capstone project of your choosing during week 5, instead of a group project. This project should act as a cumulative demonstration of the skills you’ve gained throughout your time at Moringa School. Capstone projects will be presented to employers at the Demo Day event.\u003c/p\u003e\r\n\u003cp\u003eYou’re encouraged to begin brainstorming potential project ideas now.\u003c/p\u003e\r\n\u003ch2\u003eTimeline\u003c/h2\u003e\r\n\u003cp\u003eKeep the following deadlines in mind. You’ll receive more information about each as they near:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSign-Up\u003c/strong\u003e: You will sign up with a descriptive, one-sentence summary of your project on the designated whiteboard no later than\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eMonday of week 4\u003c/strong\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProposal\u003c/strong\u003e: You are required to email your teacher a project proposal outlining your MVP (minimum viable product) no later than\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eWednesday of week 4\u003c/strong\u003e. \u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTrade Show\u003c/strong\u003e: Similar to the group projects you’ve completed in other courses, you are required to demo your application to your Moringa School classmates on week 5. This will also act as a practice run for the pitch you’ll give employers on Demo Day.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eBrainstorming Homework\u003c/h2\u003e\r\n\u003cp\u003eYour homework is to begin brainstorming potential project ideas\u003cspan\u003e \u003c/span\u003e\u003cem\u003enow\u003c/em\u003e, so you’ll be prepared for these deadlines.\u003c/p\u003e\r\n\u003cp\u003eTry to craft a project idea that’s both complex enough to demonstrate the multi-faceted skillset you’ve acquired, yet still reasonable enough to complete in time for Demo Day.\u003c/p\u003e\r\n\u003ch3\u003ePast Student Work\u003c/h3\u003e\r\n\u003cp\u003eHere are a few examples of projects past students have built independently, and presented at Demo Day in past cohorts:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eApplications to rank, track, score, and record results of various sports and game matches (everything from video games, to bowling, foosball, table games, kickball, and intramural sports). Including creating player leaderboards, and social areas to connect players.\u003c/li\u003e\r\n\u003cli\u003eFully-functioning websites for the businesses of friends and family (including catering companies, dog breeders, local stores, and other companies)\u003c/li\u003e\r\n\u003cli\u003eApplications to manage tasks, including timers to use the Pomodoro method manage the developing video games\u003c/li\u003e\r\n\u003cli\u003eSocial organizers to create and share events with friends.\u003c/li\u003e\r\n\u003cli\u003eApplications that assist in user’s health; including creating unique workout plans, timing workouts, connecting individuals to exercise together, creating or recommend diet plans, tracking calories, etc.\u003c/li\u003e\r\n\u003cli\u003eTools to catalog items; including the contents of your fridge, in-home bar, or other hobby-specific inventories.\u003c/li\u003e\r\n\u003cli\u003eTrivia games to test your knowledge in different specialized areas.\u003c/li\u003e\r\n\u003cli\u003eApplications and websites to track and rate local favorites: Including restaurants, coffee shops, gyms, bars, and more.\u003c/li\u003e\r\n\u003cli\u003eTools to connect people with benefactors and crowdsourced funding in their area, to fund art installations, charitable causes, community programs, and more.\u003c/li\u003e\r\n\u003cli\u003eWebsites and applications that compile resources into a single, easy-to-navigate spot. Including resources for the homeless, emergency preparation, etc.\u003c/li\u003e\r\n\u003cli\u003eE-commerce sites for real-life businesses, compete with functionality to make and process orders, and accept payment.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/div\u003e","exportId":"weekend-work-data-persistence"}]},{"id":31,"name":"Week 3: Data Persistence","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"i25bf10c6e3e99b7ceb6ab2ed4a49ffec","items":[{"id":2121,"title":"Monday: Data persistence objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003c/h2\u003e\r\n\u003ch2\u003eDaily Objectives\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eIn this section, we will be learning how to save our data that we have received from our API. In the previous module, we used Postgres database as our data storage. Now, we will be using the cloud. Phones have limited storage spaces as compared to laptops or servers. So we would want our data to be held elsewhere other than on our phone. Other than that, other important topics that we will cover are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUser Authentication setup\u003c/li\u003e\r\n\u003cli\u003eAdding a searchview widget\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eSet up an Authentication system\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eImplement a searchview\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eSave data to Firebase\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003eImplement logout functionality\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003e\u003cspan\u003eAdd a README to the GitHub repository that includes:\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-data-persistence-objectives"},{"id":1007,"title":"Monday:Discussion Forum (Two-day project)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eDiscussion Forum (Two-day project)\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoals\u003c/strong\u003e: Follow along with the weekend's homework to successfully configure a Firebase database to work with an Android application. Then, practice creating event listeners, saving 'plain old Java objects' to your data store, and retrieving information from Firebase to display back into your application.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a node? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eHow do we listen to a node?\u003c/li\u003e\r\n\u003cli\u003eHow do we stop listening to a node? Why would we want to do this?\u003c/li\u003e\r\n\u003cli\u003eWhat is a data snapshot? What process provides a new data snapshot to an application?\u003c/li\u003e\r\n\u003cli\u003eWith your partner, walk through the basic steps that occur in order to save a new piece of data to a Firebase database in an Android application.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003cp\u003eBefore beginning the Discussion Forum, follow along with the weekend homework to integrate shared preferences and Firebase into our ongoing MyRestaurants application.\u003c/p\u003e\r\n\u003ch3\u003eDiscussion Forum (Two-day project)\u003c/h3\u003e\r\n\u003cp\u003eYou and your partner will spend the next two days building a discussion forum. This forum may be based upon one of the popular discussion forum apps already available, such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.yik.yak\u0026amp;hl=en\" target=\"_blank\"\u003eYikYak\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.psst.messenger\" target=\"_blank\"\u003ePsst!\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.reddit.frontpage\" target=\"_blank\"\u003eReddit\u003c/a\u003e, another app; or it can be something entirely of your own creation!\u003c/p\u003e\r\n\u003cp\u003eMessage boards are very common type of app! Take advantage of these two days to create a well-executed portfolio project that demonstrates your capability to create such a popular style of application.\u003c/p\u003e\r\n\u003cp\u003eThis app should:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAllow users to post messages that show up in their app.\u003c/li\u003e\r\n\u003cli\u003eAllow users to browse existing categories.\u003c/li\u003e\r\n\u003cli\u003eAllow users to create a new category, if the category they're looking for doesn't already exist.\u003c/li\u003e\r\n\u003cli\u003eAllow users to select a message to read more.\u003c/li\u003e\r\n\u003cli\u003eAllow users to comment on/reply to messages.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAllow users to upvote a message or response they like.\u003c/li\u003e\r\n\u003cli\u003eAllow users to downvote a message or response they dislike.\u003c/li\u003e\r\n\u003cli\u003eAllow users to respond to other users' comments.\u003c/li\u003e\r\n\u003cli\u003eAdd any features you'd like to see in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eforum app. Have a new and exciting idea you haven't seen in other discussion boards? A feature you wish YikYak, Reddit, or another popular discussion forum offered?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application successfully link to Firebase?\u003c/li\u003e\r\n\u003cli\u003eIs the Firebase database structured correctly?\u003c/li\u003e\r\n\u003cli\u003eAre Firebase listeners providing updated data automatically?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eIs this an application you would use? Why or why not? If not, how could it be improved?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-discussion-forum-two-day-project"},{"id":1009,"title":"Monday:SearchView Widget","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003e SearchView Widget\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eOur MyRestaurants application can now successfully save user-provided zip codes and entire restaurant objects to Firebase. It can even dynamically update the user interface when our database changes. However, we're still prompting users to enter a zip code\u003cspan\u003e \u003c/span\u003e\u003cem\u003eevery time\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethey open the app, even though we already have their latest-searched location saved. And we're\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eallowing them to execute new searches from the MainActivity. This isn't very user-friendly.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll add a search widget to our app bar. This will prevent users from having to enter a zip code each time they launch the app. Instead, we'll automatically display restaurants from their last-searched location when they select \"Find Restaurants\". Entering a zip code will only be required if and when users would like to search a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ezip code.\u003c/p\u003e\r\n\u003cp\u003eAs outlined in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/search/search-dialog.html\" target=\"_blank\"\u003eAndroid Developers Guides\u003c/a\u003e, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esearch widget\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebehaves similarly to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efields we've already used, but offers additional configuration including handling input events, offering search suggestions, and creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntents\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the user executes a query.\u003c/p\u003e\r\n\u003ch2\u003eDownloading Icons\u003c/h2\u003e\r\n\u003cp\u003eFirst, let’s download the white magnifying glass search icon from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/#ic_search\" target=\"_blank\"\u003eGoogle Material Icons site\u003c/a\u003e. This icon will be used to denote that a search feature is available. We'll drag and drop the icon into the project in the same manner described in a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprevious lessons\u003c/strong\u003e. The resulting file structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/jyb2ujgnct5day6/icon-organization.png\" alt=\"icons-organized-in-project\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eCreating a Menu\u003c/h2\u003e\r\n\u003cp\u003eNext, let's create a menu for our search widget. Right-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroid resource directory\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/xw7cdnjla7b5nog/create-menu-step-1.png\" alt=\"create-menu-resource-directory-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the resource type dropdown, and name the new directory\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/o6q7scbexerdoe9/create-menu-step-2.png\" alt=\"create-menu-resource-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, we'll create a new menu resource file within this new directory and call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu_search.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/jax7gxctlcsvx6z/create-menu-step-3.png\" alt=\"create-new-menu-resource-file1\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/plsmm2zgzfvtos5/create-menu-step-4.png\" alt=\"create-new-menu-resource-file2\"\u003e\u003c/p\u003e\r\n\u003cp\u003eInside this file, we'll place the following layout code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/menu/menu_search.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_search\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_search_white_24dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"always\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:actionViewClass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.v7.widget.SearchView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Search\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we set\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowAsAction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealways\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ensure the search icon (our magnifying glass) is always visible.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eactionViewClass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis where we determine which Android component to use as the action view. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eaction view\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an action that provides functionality within the app bar. In this case we're setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp:actionViewClass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.support.v7.widget.SearchView\u003c/code\u003e, which points to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003cp\u003eRemember when we said that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebehaves similarly to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e, but with additional configuration like handling input events, offering search suggestions, and creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntents\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the user executes a query? Setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp:actionViewClass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass is what makes area of our layout a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, thereby giving it this extra functionality.\u003c/p\u003e\r\n\u003ch2\u003eAdding Search Functionality\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s inflate the menu, gather the user's search query from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, and send it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to request and display information about restaurants in the zip code provided by the user.\u003c/p\u003e\r\n\u003cp\u003eAlso, now that we're done experimenting with writing data to Firebase, let's switch back to saving the user's zip code to shared preferences, like we did\u003cspan\u003e \u003c/span\u003e\u003ca href=\"modules/items/ie33f4437c66dcfb5917b0ac65a520b19\" target=\"_blank\"\u003epreviously\u003c/a\u003e. (As described in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/weekend-work-data-persistence?module_item_id=i9856e656f1e2982ad01d4703256f8b45\" target=\"_blank\"\u003ethis lesson\u003c/a\u003e, saving zip codes in Firebase was only temporary, to allow us to practice saving small pieces of data before saving entire Java objects).\u003c/p\u003e\r\n\u003ch3\u003eStashing and Retrieving Data from SharedPreferences\u003c/h3\u003e\r\n\u003cp\u003eWe'll save a new zip code to shared preferences\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user enters one, or we'll pull their most recently searched location from shared preferences if they do not.\u003c/p\u003e\r\n\u003cp\u003eFirst, uncomment any code relating to SharedPreferences in RestaurantListActivity. We'll also need to declare the SharedPreferences\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject as a member variable at the top of our file. Now that users will be able to search a new zip code here in our RestaurantListActivity, we'll need access to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditor\u003c/code\u003eto stash this new zip code in SharedPreferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAdditionally, we'll need to include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod from our MainActivity here in RestaurantListActivity. This method will be responsible for writing data to Shared Preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, below the existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we'll override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe inflate and bind our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e, define our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSharedPreferences \u003c/code\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEditor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variables. Also to retrieve a user’s search from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, we must grab the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaction_search\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emenu item from our new layout, and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMenuItemCompat.getActionView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply contains the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn super.onOptionsItemSelected(item);\u003c/code\u003e. This ensures that all functionality from the parent class (referred to here as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper\u003c/code\u003e) will still apply despite us manually overriding portions of the menu's functionality.\u003c/p\u003e\r\n\u003ch2\u003eSearchView Listeners\u003c/h2\u003e\r\n\u003cp\u003eNow that we've located our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, we can attach a special listener to it.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects have their own dedicated listeners called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnQueryTextListener\u003c/code\u003e, that listen for changes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetOnQueryTextListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand pass in a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView.OnQueryTextListener\u003c/code\u003e. It has two methods we will need to override:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextSubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextChange()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n        });\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you may have anticipated,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnQueryTextSubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis run automatically when the user submits a query into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis run whenever any changes to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtents occur.\u003c/p\u003e\r\n\u003cp\u003eBecause we only want to gather the input\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user has submitted something (and not every time they type a single character into the field), we'll place our logic in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextSubmit()\u003c/code\u003e, leaving\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextChange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efairly empty. We call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto save the zip code the user searches, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto begin executing a request to the Yelp API to return restaurants in that area.\u003c/p\u003e\r\n\u003cp\u003eAfter these changes, the completed RestaurantListActivity file should appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantListActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getApplicationContext(), mRestaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(RestaurantListActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRefactoring MainActivity\u003c/h2\u003e\r\n\u003cp\u003eWe can now remove both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand any code for adding its contents to shared preferences\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eFirebase from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e, since we are now saving zip codes to shared preferences in RestaurantListActivity.\u003c/p\u003e\r\n\u003cp\u003eOur refactored\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.savedRestaurantsButton) Button mSavedRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mSavedRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSavedRestaurantsButton) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, SavedRestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u0026lt;?xml version=\u003cspan class=\"hljs-string\"\u003e\"1.0\"\u003c/span\u003e encoding=\u003cspan class=\"hljs-string\"\u003e\"utf-8\"\u003c/span\u003e?\u0026gt;\r\n\u0026lt;RelativeLayout xmlns:android=\u003cspan class=\"hljs-string\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    xmlns:tools=\u003cspan class=\"hljs-string\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n    android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n    tools:context=\u003cspan class=\"hljs-string\"\u003e\".ui.MainActivity\"\u003c/span\u003e\r\n    android:background=\u003cspan class=\"hljs-string\"\u003e\"#000000\"\u003c/span\u003e\u0026gt;\r\n\r\n    \u0026lt;ImageView\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/imageView\"\u003c/span\u003e\r\n        android:src=\u003cspan class=\"hljs-string\"\u003e\"@drawable/background\"\u003c/span\u003e\r\n        android:scaleType=\u003cspan class=\"hljs-string\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\r\n\r\n    \u0026lt;TextView\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:text=\u003cspan class=\"hljs-string\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        android:layout_alignParentTop=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_centerHorizontal=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_marginTop=\u003cspan class=\"hljs-string\"\u003e\"35dp\"\u003c/span\u003e\r\n        android:textColor=\u003cspan class=\"hljs-string\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        android:textSize=\u003cspan class=\"hljs-string\"\u003e\"60sp\"\u003c/span\u003e\r\n        android:textStyle=\u003cspan class=\"hljs-string\"\u003e\"bold\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/appNameTextView\"\u003c/span\u003e/\u0026gt;\r\n\r\n    \u0026lt;Button\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:text=\u003cspan class=\"hljs-string\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        android:background=\u003cspan class=\"hljs-string\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        android:textColor=\u003cspan class=\"hljs-string\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        android:visibility=\u003cspan class=\"hljs-string\"\u003e\"visible\"\u003c/span\u003e\r\n        android:layout_above=\u003cspan class=\"hljs-string\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        android:layout_alignParentLeft=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_alignParentStart=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_marginBottom=\u003cspan class=\"hljs-string\"\u003e\"10dp\"\u003c/span\u003e /\u0026gt;\r\n\r\n    \u0026lt;Button\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:text=\u003cspan class=\"hljs-string\"\u003e\"My Saved Restaurants\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        android:background=\u003cspan class=\"hljs-string\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        android:textColor=\u003cspan class=\"hljs-string\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        android:visibility=\u003cspan class=\"hljs-string\"\u003e\"visible\"\u003c/span\u003e\r\n        android:layout_alignParentBottom=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_alignParentLeft=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_alignParentStart=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\r\n\r\n\u0026lt;/RelativeLayout\u0026gt;\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, users will be greeted with two buttons when they launch our application:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0q5iejnmp5al8bh/two-buttons-main-activity.png\" alt=\"main-activity-without-edit-text\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\"Find Restaurants\" will continue to take users to a list of restaurants in the area they last searched. If the user has\u003cspan\u003e \u003c/span\u003e\u003cem\u003enever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esearched for a zip code, they'll be able to use our new search widget at the top of the page in RestaurantListActivity to execute a new search:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/r5ms441s2lxlhdv/searchview-widget.png\" alt=\"search-view-icon\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/5q6gc4tzps5p0bb/searchview-widget-2.png\" alt=\"search-view-in-action\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/16_search_widget\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSearch widget\u003c/strong\u003e: Behaves similarly to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efields, but offers additional configuration including handling input events, offering search suggestions, and creating intents when the user executes a search.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAction view\u003c/strong\u003e: An object (or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e) that provides functionality within the app bar.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Developers Guide entry on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/search/search-dialog.html\" target=\"_blank\"\u003eSearch Dialogs\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Developers Guide entry on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/training/appbar/action-views.html\" target=\"_blank\"\u003eAction Views and Action Providers\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"monday-searchview-widget"},{"id":1008,"title":"Monday:User Authentication Setup","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eUser Authentication Setup\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\u003c/div\u003e\r\n\u003cp\u003eMost applications need to know the identity of a user. This allows them to offer a personalized experience, and to associate content with a specific users. For example, social media apps only display content from users\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehave followed, and can attribute anything you post to your own account. And a note-taking app displays only\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enotes when you log in, allowing you to keep some content private.\u003c/p\u003e\r\n\u003cp\u003eIn our case, MyRestaurants should associate each user's \"Saved Restaurants\" list with a specific user account. This will allow every user to have their own private, personalized list. Conveniently, Firebase offers built-in tools for managing user authentication.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will prepare to integrate user authentication into our application by configuring the necessary components and settings. In subsequent lessons we'll write the actual methods to handle registering new users and logging them in and out.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eTo get started, read the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/#key_functions\" target=\"_blank\"\u003eFirebase Authentication Overview\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/password-auth\" target=\"_blank\"\u003eAuthenticate with Firebase using Password-Based Accounts on Android\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticles.\u003c/p\u003e\r\n\u003ch2\u003eAdding Dependencies\u003c/h2\u003e\r\n\u003cp\u003eFirst off, to use Firebase's built-in authentication tools we'll need to add the firebase-auth dependency. Add the following to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n    ...\r\n    implementation 'com.google.firebase:firebase-auth:16.1.0'\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Authentication1.jpg?canvas_download=1\" alt=\"Authentication1.jpg\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/12629\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...clicking the \"set up sign in method\" button...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/lnjhbxloa958ky5/firebase-setup-signin-method.png?raw=1\" alt=\"firebase-setup-signin-method\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...selecting the _edit _icon for the \"Email/Password\" provider...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/sd875vvh2h4pgk8/edit-email-password.png?raw=1\" alt=\"edit-email-password\"\u003e\u003c/p\u003e\r\n\u003cp\u003e... and checking the \"Enable\" switch:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/6d486lvjq7aaygd/enable-email-password-auth.png?raw=1\" alt=\"enable-email-password\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can enable the password less login option as well but we won't get into that right now given it's fairly self explanatory.\u003c/p\u003e\r\n\u003ch2\u003eAccount Registration Page\u003c/h2\u003e\r\n\u003cp\u003eBefore users can sign in and out they'll need to be able to create an account. Let's create a new activity in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called CreateAccountActivity. We'll also check the box labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create a corresponding xml file in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003elayouts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/yxbv1svwi9qgvvz/user-auth-create-new-activity.png?raw=1\" alt=\"create-new-blank-activity-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/p0wmso6w0tkerqm/user-auth-generate-layout-option.png?raw=1\" alt=\"generate-layout-file-when-creating-new-activity\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBefore writing any logic, let's construct a basic layout for this area of our application. We'll begin by adding the following to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_create_account.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile generated when we created our new activity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_create_account.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.CreateAccountActivity\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/nameEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/emailEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Email\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textEmailAddress\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Password\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textPassword\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/confirmPasswordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Confirm Password\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textPassword\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/createUserButton\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Sign up\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Already have an account? Log in here!\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/loginTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Create Account\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryLight\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a registration form where users may enter their name, email address, password, and password confirmation. We've also included a \"Create Account\" button that will eventually trigger the account registration process.\u003c/p\u003e\r\n\u003ch2\u003eAccount Login Page\u003c/h2\u003e\r\n\u003cp\u003eNow that they can register for accounts, users will also need a place to log in. Let's create another empty activity in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called LoginActivity. Again, make sure to check\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll populate the corresponding\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_login.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout with email and password\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003es, a button, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will take users to our CreateAccountActivity if they are not yet registered, and some basic styling:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_login.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.LoginActivity\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/emailEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Email\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textEmailAddress\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Password\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textPassword\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordLoginButton\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Log in\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Don't have an account? Sign up here!\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/registerTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Login\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryLight\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eIntent Filters and the Category Launcher\u003c/h2\u003e\r\n\u003cp\u003eIn our AndroidManifest, the block of XML corresponding to our MainActivity currently contains the following code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e...\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is called an intent filter. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eintent filter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an expression in the manifest that specifies the type of intents a particular component may receive. This particular line of code adds the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html#CATEGORY_LAUNCHER\" target=\"_blank\"\u003ecategory_launcher filter\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto our MainActivity. This means we're instructing our app to display MainActivity when it first launches.\u003c/p\u003e\r\n\u003cp\u003eHowever, now that we're implementing authentication we'll want users to log in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanything else. Let's move this line from the MainActivity block of AndroidManifest into the LoginActivity block. This will ensure the LoginActivity is the first thing users see when launching our app.\u003c/p\u003e\r\n\u003cp\u003eOur updated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManfest.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.MainActivity\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/NoActionBarTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.PARENT_ACTIVITY\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:value\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.MainActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantDetailActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.SavedRestaurantListActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.CreateAccountActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.LoginActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, if we restart our application we should see our LoginActivity first:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/cuza2u3ewdviaf6/login-screen.png?raw=1\" alt=\"login-page-myrestaurants\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFor more information about intent filters, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/components/intents-filters.html\"\u003eAndroid Developers Guide\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/17_user_authentication\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eIntent filter\u003c/strong\u003e: An expression in the manifest that specifies the type of intents a particular component may receive.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://firebase.google.com/docs/auth/#key_functions\" target=\"_blank\"\u003eFirebase Authentication Overview\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/password-auth\" target=\"_blank\"\u003eAuthenticate with Firebase using Password-Based Accounts on Android\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Developers Guide entry on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/components/intents-filters.html\" target=\"_blank\"\u003eIntent Filters\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"monday-user-authentication-setup"},{"id":1010,"title":"Tuesday: Registering Accounts in Firebase","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003ch1\u003eRegistering Accounts in Firebase\u003c/h1\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003eDo\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopy and paste the Sign In and Sign Up display code into your own personal project. Recreate the functionality shown here with your own design and layout.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eNow that we've created the necessary components, we're ready to add functionality allowing users to register for accounts. In this lesson we'll learn how to create Firebase user accounts within an Android application. In subsequent lessons we'll walk through updating user profile information, logging users in and out, and adding additional features and personalization to improve user experience.\u003c/p\u003e\r\n\u003ch2\u003eRegistration Form\u003c/h2\u003e\r\n\u003cp\u003eAfter following along with the previous lesson, we should be greeted by the LoginActivity when the application launches. But what if a user doesn't have an account yet? Below the login form is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat reads\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Don't have an account? Sign up here!\"\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/07sjhb6f0zdz15t/login-screen%203.png?raw=1\" alt=\"link-to-registration-from-login-activity\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClicking this does not currently do anything. Let's make sure this link navigates to the CreateAccountActivity we created previously. We'll bind this view with ButterKnife, implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface in the LoginActivity, and set a click listener and corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.registerTextView) TextView mRegisterTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRegisterTextView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mRegisterTextView) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(LoginActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, CreateAccountActivity.class);\r\n            startActivity(intent);\r\n            finish();\r\n        }\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter an account is successfully authenticated, we no longer need the LoginActivity. In the code above, notice we include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eafter creating our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e. This will destroy the LoginActivity as we depart for the CreateAccountActivity, saving us valuable resources. Check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Activity.html#finish()\"\u003eAndroid Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand other methods to halt unused or unnecessary activities.\u003c/p\u003e\r\n\u003cp\u003eNow we can launch our app, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Don't have an account? Sign up here!\"\u003c/em\u003e, and see our registration form:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/vrsowwk81x2j49r/sign-up-screen.png?raw=1\" alt=\"user-registration-form-myrestaurants\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eAccount Registration\u003c/h2\u003e\r\n\u003cp\u003eNow that our registration page is easily accessible, let's allow users to create their own accounts using our registration form.\u003c/p\u003e\r\n\u003ch3\u003eBasic Setup\u003c/h3\u003e\r\n\u003cp\u003eFirst we'll implement click listeners, declare member variables, and bind elements from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_create_account.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout using ButterKnife. This should be review:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.createUserButton) Button mCreateUserButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.nameEditText) EditText mNameEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.emailEditText) EditText mEmailEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.passwordEditText) EditText mPasswordEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.confirmPasswordEditText) EditText mConfirmPasswordEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.loginTextView) TextView mLoginTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_create_account);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mLoginTextView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mCreateUserButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mLoginTextView) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, LoginActivity.class);\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n            startActivity(intent);\r\n            finish();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mCreateUserButton) {\r\n            createNewUser();\r\n        }\r\n\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we bind all elements of our registration form and add a click listener that will call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which we will write momentarily) when the form is submitted. We also create a link back to the LoginActivity and add something called intent flags to manage our back stack of tasks.\u003c/p\u003e\r\n\u003ch2\u003eManaging Stacks with Flags\u003c/h2\u003e\r\n\u003cp\u003eAndroid manages tasks by placing activities started in succession in something called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estack\u003c/strong\u003e. The last activity started is the first activity on the stack. When the system back button is selected, Android navigates to the last activity in the stack by default.\u003c/p\u003e\r\n\u003cp\u003eHowever, we don't actually want users navigating\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto CreateAccountActivity after they've already created an account. They should no longer have any use for this form if they already have an account. To prevent this, we can explicitly remove these activities from our back stack altogether by setting flags on our intent.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eIntent flags\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare essentially just extra pieces of information optionally added to an intent that determine how the specific intent is handled by Android. In the code above, we use the following flags:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFLAG_ACTIVITY_CLEAR_TASK will cause any existing task that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe associated with the activity to be cleared before the activity is started. This prevents the CreateAccountActivity from being unnecessarily accessed via the system back button.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFLAG_ACTIVITY_NEW_TASK will make the activity we are navigating to the start of a brand new task on this history stack.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFor more information on tasks and the back stack, check out the Android Developer's guides article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/tasks-and-back-stack.html\"\u003eTasks and Back Stack\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCreating New Users\u003c/h3\u003e\r\n\u003cp\u003eNow that we can successfully submit the registration form, let's write the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = CreateAccountActivity.class.getSimpleName();\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth mAuth;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        ...\r\n    }\r\n\r\n    ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String name = mNameEditText.getText().toString().trim();\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String email = mEmailEditText.getText().toString().trim();\r\n        String password = mPasswordEditText.getText().toString().trim();\r\n        String confirmPassword = mConfirmPasswordEditText.getText().toString().trim();\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                         \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                            Toast.makeText(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                                    Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we add a member variable to get the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. This object is required in order to access the tools provided in the Firebase Authentication SDK. We then simply fetch the contents of our registration form (\u003ccode\u003emNameEditText\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEmailEditText\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPasswordEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emConfirmPasswordEditText\u003c/code\u003e) and transform each value into a string.\u003c/p\u003e\r\n\u003cp\u003eThen, we call the built-in Firebase method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateUserWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create a new user account in Firebase, passing in the user's email and password. If the account can be created successfully, we log a success message to the logcat; otherwise we display a toast notifying the user something went wrong.\u003c/p\u003e\r\n\u003ch2\u003eTesting Account Registration\u003c/h2\u003e\r\n\u003cp\u003eWe should now be able to launch the application, navigate to the CreateAccountActivity, and submit our registration form.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFirebase Auth requires passwords be at least 6 characters long. Additionally, the email address must contain an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@something.com\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edomain, otherwise it will not be recognized as a valid email address. Make sure to use a long enough password and correctly-formatted email address or you may encounter errors:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/c79j16hv34wr53y/registration-form-filled.png?raw=1\" alt=\"registering-new-firebase-account\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThe app won't navigate anywhere after submitting this form (yet!)\u003c/strong\u003e, but if we visit the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAuth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab in our Firebase dashboard and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e, we can see a new Firebase user has been created:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/xifb1nbb59fxa0x/registered-user-firebase.png?raw=1\" alt=\"user-listed-in-firebase\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eListening for User Authentication\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to inform our application when the user's account is successfully authenticated. To do this, we'll add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto respond to the change in the user's authentication state.\u003c/p\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply listens for an account being successfully authenticated, or un-authenticated through Firebase. Firebase can also automatically authenticate user accounts upon registration. Therefore, our users can submit the registration form and if their account is created successfully they will be logged in automatically, and this listener will be triggered.\u003c/p\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride, we will send the user to our MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth.AuthStateListener mAuthListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        createAuthStateListener();\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateAuthStateListener\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseUser user = firebaseAuth.getCurrentUser();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (user != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, MainActivity.class);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n                    startActivity(intent);\r\n                    finish();\r\n                }\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable, setting it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod by calling a new method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthStateListener()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eInside of the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthStateListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we create our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby setting our member variable to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth.AuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface. This interface listens to changes in the current\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthState\u003c/code\u003e. When there is a change (ie. a user becomes authenticated or signs out), this interface triggers the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata. Using this data, we can create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCurrentUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. We double-check that this user is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enull before traveling to the MainActivity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eonStop and onStart Overrides\u003c/h2\u003e\r\n\u003cp\u003eBefore we can test that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis working, we need to add it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. We'll associate the two by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddAuthStateListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle method.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, we will also\u003cspan\u003e \u003c/span\u003e\u003cem\u003eremove\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe listener before the activity is destroyed by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremoveAuthStateListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle method:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStart\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStart();\r\n    mAuth.addAuthStateListener(mAuthListener);\r\n}\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStop\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStop();\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mAuthListener != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n        mAuth.removeAuthStateListener(mAuthListener);\r\n    }\r\n}\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe system calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod every time your activity becomes visible (whether it's being restarted or created for the first time).\u003c/p\u003e\r\n\u003cp\u003eConversely, Android calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen an activity is no longer visible. Once the activity is stopped, the system might destroy the instance if it needs to recover system memory. In extreme cases, the system might simply kill your app process without calling the activity's final\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback. This is why it is important to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto release resources that might leak memory.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf we forget to add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewill not work\u003c/strong\u003e!\u003c/p\u003e\r\n\u003cp\u003eNow, let's run our app to see our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein action. If everything was configured properly, our app should bring the user to the MainActivity once their account is created\u003c/p\u003e\r\n\u003cp\u003eIf we restart the app and navigate to CreateAccountActivity, you will notice that our app immediately brings us back to the MainActivity! When the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis added in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, it checks to see if a user has\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebeen authenticated. Because the user we created moments ago was logged in automatically, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebrings them to the MainActivity.\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll learn how to log the current user out so we can continue to build our CreateAccountActivity, and see our new features in action.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/17_user_authentication\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eStack\u003c/strong\u003e: A collection of activities users interact with when performing a certain action with an application. The activities are arranged in a stack, ordered by when they were opened.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eIntent flags:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAdditional information that can be optionally included with an intent that control how the specific intent is handled.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAuthStateListener:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePart of an interface that listens to changes in the current\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthState\u003c/code\u003e. When there is a change (ie. a user becomes authenticated or signs out), this interface triggers the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod automatically.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod every time an activity becomes visible (whether being restarted or created for the first time). When an activity receives a call to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, it's no longer visible and should release almost all resources that aren't necessary while the activity is not in use.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/17_user_authentication\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Activity.html#finish()\"\u003eAndroid Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand other methods to halt activities.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on tasks and the back stack, check out the Android Developer's guides article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/tasks-and-back-stack.html\"\u003eTasks and Back Stack\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor a list of all available intent flags, check out the documentaiton for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetFlags()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent.html#setFlags(int)\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-registering-accounts-in-firebase"},{"id":1011,"title":"Tuesday: Logging Out and Overflow Menus","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eLogging Out and Overflow Menus\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe can now register new users, and Firebase authenticates their account automatically. The next logical step is ensuring they can log themselves back out (and eventually back in). In this lesson we'll address how to create additional menu options and easily\u003cspan\u003e \u003c/span\u003e\u003cem\u003eun\u003c/em\u003e-authenticate a user's session using Firebase.\u003c/p\u003e\r\n\u003ch2\u003eOverflow Menu\u003c/h2\u003e\r\n\u003cp\u003eFirst off, we'll need an option or button users may click to log themselves out. Let's place this in an overflow menu.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eOverflow menu\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the name for the additional options displayed when the icon with three vertical dots is clicked.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/jqbilh8dl7gogxz/main-acitivity-app-bar.png?raw=1\" alt=\"new-dots-in-main-activity-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFor now, we'll only inflate our overflow menu in the MainActivity. Later on we'll explore approaches to refactoring, and use something called a BaseActivity to re-use the code from this lesson to make menu options accessible from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanywhere\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCreating and Inflating an Overflow Menu\u003c/h3\u003e\r\n\u003cp\u003eTo create our new menu's layout file, first we'll right-click in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and add a new resource directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof type\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emenu \u003cspan style=\"font-weight: 400;\"\u003e(If you hadn’t already done this from \u003c/span\u003e\u003ca href=\"pages/monday-searchview-widget?module_item_id=ia919aa0007c0466d3b5eb34f35557b90\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/monday-searchview-widget\" data-api-returntype=\"Page\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ethis lesson\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e)\u003c/span\u003e\u003c/strong\u003e. Then, we'll right-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Menu resource file\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's name this file\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu_main.xml\u003c/em\u003e, and place the following code inside:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003emenu_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visible\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"never\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust as we did when creating our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewidget, we'll inflate our new menu in an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod within MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_main, menu);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu);\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll need to tell our app what action to perform when the user selects the\u003cspan\u003e \u003c/span\u003e\u003cem\u003elogout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption. We'll do this by adding the following code to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e id = item.getItemId();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (id == R.id.action_logout) {\r\n            logout();\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAt the moment, we only have\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu action item. But we may want to add more options in the future. Therefore, we'll include a conditional that only calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogout()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eif the logout option was specifically selected, similar to the manner we organize our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods that correspond to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface.\u003c/p\u003e\r\n\u003cp\u003eLet's create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogout()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogout\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        FirebaseAuth.getInstance().signOut();\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePretty straightforward! Here, we simply call Firebase's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. Then, we can then use Firebase's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignOut()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to sign the user out of their session.\u003c/p\u003e\r\n\u003ch2\u003eReturning to MainActivity on Logout\u003c/h2\u003e\r\n\u003cp\u003eRemember, we decided users must log in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einteracting with our app. That way, any restaurants they save can be associated with their own, personal list in our database. With this in mind, let's return users to the LoginActivity after logging out.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following code to our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogout()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogout\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        FirebaseAuth.getInstance().signOut();\r\n        Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return the user to the LoginActivity, add flags to remove the current activity from our stack, start the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, and end the current instance of MainActivity with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003ch2\u003eUpdating MainActivity Layout\u003c/h2\u003e\r\n\u003cp\u003eNow,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewe won't be able to see the logout option in our overflow menu quite yet\u003c/strong\u003e. There's still one more step we must complete. Several weeks ago, we hid the app bar in the MainActivity of MyRestaurants (as seen in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-app-bar-hierarchical-parent-and-android-themes?module_item_id=i048bfc57e88458706f01194f9fd32e62\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/tuesday-app-bar-hierarchical-parent-and-android-themes\" data-api-returntype=\"Page\"\u003ethis lesson\u003c/a\u003e) because we simply didn't have any menu options to display yet. Now that we\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e, we'll need to remove the \"NoActionBarTheme\" previously applied to the MainActivity.\u003c/p\u003e\r\n\u003cp\u003eWe can do this by removing the following line from MainActivity's entry in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManifest.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003eandroid:theme=\"@style/NoActionBarTheme\"\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe updated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManifest.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026lt;manifest \u003c/span\u003e\u003cspan\u003exmlns:\u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\"http://schemas.android.com/apk/res/android\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epackage=\u003c/span\u003e\u003cspan\u003e\"io.github.vinge1718.restaurant\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;uses-permission \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.permission.INTERNET\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;application\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:allowBackup=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:icon=\u003c/span\u003e\u003cspan\u003e\"@mipmap/ic_launcher\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:label=\u003c/span\u003e\u003cspan\u003e\"@string/app_name\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:roundIcon=\u003c/span\u003e\u003cspan\u003e\"@mipmap/ic_launcher_round\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:supportsRtl=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:theme=\u003c/span\u003e\u003cspan\u003e\"@style/AppTheme\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.LoginActivity\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;intent-filter\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;action \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.intent.action.MAIN\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;action \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.intent.action.VIEW\"\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;category \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.intent.category.LAUNCHER\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/intent-filter\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/activity\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.CreateAccountActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.SavedRestaurantListActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.RestaurantDetailActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;meta-data\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.support.PARENT_ACTIVITY\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:value=\u003c/span\u003e\u003cspan\u003e\"io.github.vinge1718.restaurant.ui.MainActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/activity\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.MainActivity\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/activity\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/application\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u0026lt;/manifest\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we launch our application we should see three dots in our MainActivity's AppBar that indicate an overflow menu is available:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/jqbilh8dl7gogxz/main-acitivity-app-bar.png?raw=1\" alt=\"new-dots-in-main-activity-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we click this icon the overflow menu is expanded, and we can see our new \"Logout\" option:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/4r5pnm2jepvl06j/main-activity-overflow-menu.png?raw=1\" alt=\"log-out-overflow-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClicking this will log the current user out of their session, and return them to the LoginActivity. Try it out!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/18_authorization_login\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOverflow menu\u003c/strong\u003e: The name for the additional options displayed when the icon with three vertical dots is clicked, as seen below:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/jqbilh8dl7gogxz/main-acitivity-app-bar.png?raw=1\" alt=\"new-dots-in-main-activity-menu\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eFirebaseAuth.getInstance().signOut();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the general way to un-authenticate a Firebase user session.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreating and Using Menus\u003c/h3\u003e\r\n\u003cp\u003eRight-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Menu resource file\u003c/em\u003e. Populate the layout with the necessary XML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visible\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"never\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInflate the menu in an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod within the corresponding activity:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_main, menu);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInstruct the app what action to perform when the user selects menu option(s) by adding code to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride in the corresponding activity:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e id = item.getItemId();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (id == R.id.action_logout) {\r\n            logout();\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/18_authorization_login\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-logging-out-and-overflow-menus"},{"id":1012,"title":"Tuesday:Registering Accounts: Additional Features","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eRegistering Accounts: Additional Features\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eUsers can now create accounts and logout from the MainActivity. However, there are still several ways we could improve user experience. In this lesson, we'll explore creating dialogs to communicate when our app is loading, validation methods to prevent errors before they occur, and personalized welcome messages to greet returning users.\u003c/p\u003e\r\n\u003ch2\u003eValidating Registration Credentials\u003c/h2\u003e\r\n\u003cp\u003eWhat if a user attempts to register with an invalid email address? Or a really terrible single-character password? Let's add validation methods to ensure our users' credentials are valid and reasonably secure, and error handling if they are\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following to CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisValidEmail\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String email)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e isGoodEmail =\r\n                (email != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches());\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!isGoodEmail) {\r\n            mEmailEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please enter a valid email address\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e isGoodEmail;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisValidName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (name.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mNameEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please enter your name\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisValidPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String password, String confirmPassword)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (password.length() \u0026lt; \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please create a password containing at least 6 characters\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!password.equals(confirmPassword)) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Passwords do not match\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've defined three methods to validate three different pieces of user-provided data:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eisValidEmail()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euses an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"http://developer.android.com/reference/android/util/Patterns.html\"\u003eAndroid Pattern\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(essentially a regular expression built directly into Android) to confirm that the user's email is a valid email address. It does this by checking that the address is in the correct format. If it is not, it displays an error in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEmailEditText\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eisValidName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003everifies that the name field of our registration form has not been left blank. If it has, it displays an error in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emNameEditText\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eisValidPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econfirms that the user's password is at least 6 characters long, and that the password and password confirmation fields match. If not, it displays an error in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPasswordEditText\u003c/code\u003e. Even though Firebase\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erequires passwords be at least 6 characters long, we include our own validation method to confirm the password length, so that we can display an error message to our user if necessary.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe'll call these methods in our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This will ensure user credentials are accurate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe create an account with Firebase:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String name = mNameEditText.getText().toString().trim();\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String email = mEmailEditText.getText().toString().trim();\r\n        String password = mPasswordEditText.getText().toString().trim();\r\n        String confirmPassword = mConfirmPasswordEditText.getText().toString().trim();\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validEmail = isValidEmail(email);\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validName = isValidName(name);\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validPassword = isValidPassword(password, confirmPassword);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!validEmail || !validName || !validPassword) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                    Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Toast.makeText(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                            Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf all information is valid, we create a new user in Firebase. If it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif (!validEmail || !validName || !validPassword) return;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill halt our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and the validation method(s) will display errors.\u003c/p\u003e\r\n\u003ch2\u003eProgress Dialogs\u003c/h2\u003e\r\n\u003cp\u003eAs technology becomes faster and faster, we expect increasingly speedy responses from our apps and devices. When they don't\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimmediately\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo what we expect, we can't help but wonder\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"is it broken?\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eMany apps now display small loading animations to reassure users that their application isn't frozen; it's just still loading!\u003c/p\u003e\r\n\u003cp\u003eYou've already had some experience with Dialogs earlier in Android. ProgressDialogs are a different flavour of Dialog.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"http://developer.android.com/reference/android/app/ProgressDialog.html\"\u003eProgressDialog\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays an animated progress indicator along with a customizable message. Let's add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to our CreateAccountActivity that informs the user when our app is in the process of authenticating their account.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by adding the following code to CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ProgressDialog mAuthProgressDialog;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        createAuthProgressDialog();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateAuthProgressDialog\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mAuthProgressDialog = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ProgressDialog(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mAuthProgressDialog.setTitle(\u003cspan class=\"hljs-string\"\u003e\"Loading...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setMessage(\u003cspan class=\"hljs-string\"\u003e\"Authenticating with Firebase...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setCancelable(\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n   ...\r\n     \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!validEmail || !validName || !validPassword) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n\r\n        mAuthProgressDialog.show();\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n                        mAuthProgressDialog.dismiss();\r\n\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                            Toast.makeText(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                                    Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n     ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's walk through what functionality this code handles:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we add a new member variable for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eInside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, we call a new method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthProgressDialog()\u003c/code\u003e, which is defined below\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthProgressDialog()\u003c/code\u003e, we set the title and message values of the dialog box, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetCancelable()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto false so that users cannot close the dialog manually. (We want this dialog box to remain in sight until the account is either successfully authenticated, or we have errors to display to the user).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we show the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod with the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAuthProgressDialog.show();\u003c/code\u003e. Notice that this line is only called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe form validation methods have returned true.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhen the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateUserWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is complete (no matter what the outcome is), we dismiss the dialog entirely with the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAuthProgressDialog.dismiss();\u003c/code\u003eso that the user may either continue using the app, or view any error messages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, if we launch our application and create a new account, we should see a progress dialog appear while Firebase creates and authenticates our account. Pretty cool!\u003c/p\u003e\r\n\u003ch2\u003eGreet User by Name\u003c/h2\u003e\r\n\u003cp\u003eMany apps and websites include personal touches when users log in. The most common is simply greeting the user by name. How welcoming! Let's do the same in MyRestaurants.\u003c/p\u003e\r\n\u003ch3\u003eGathering and Setting Names\u003c/h3\u003e\r\n\u003cp\u003eTo do this we'll need to save the name value from the user's registration form to their Firebase account. We'll start by saving it as a member variable, so we can access it throughout CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mName;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mName = mNameEditText.getText().toString().trim();\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validName = isValidName(mName);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirebase does not collect user names by default, but as described in their\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/manage-users\"\u003eManaging Users\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation, they do offer methods to easily add extra data (including display names) to a user's account via a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cp\u003eWe'll create a new method that will set the user's name:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateFirebaseUserProfile\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseUser user)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        UserProfileChangeRequest addProfileName = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e UserProfileChangeRequest.Builder()\r\n                .setDisplayName(mName)\r\n                .build();\r\n\r\n        user.updateProfile(addProfileName)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;Void\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;Void\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, user.getDisplayName());\r\n                        }\r\n                    }\r\n\r\n                });\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo set the name, we first need to build a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUserProfileChangeRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. This is a Firebase object used to request updates to user profile information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetDisplayName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to attach the user-entered name to the user's profile.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then pass this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUserProfileChangeRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eupdateProfile()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and attach an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnCompleteListener\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnCompleteListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill trigger the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonComplete()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod when the request is finished processing. If the request was successful, we log the name to the logcat.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe then need to call this method once our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas successfully been created:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n                        mAuthProgressDialog.dismiss();\r\n\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                            createFirebaseUserProfile(task.getResult().getUser());\r\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                            ...\r\n                        }\r\n                    }\r\n                });\r\n         ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo pass the user object to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateFirebaseUserProfile()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we can grab the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject returned in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonComplete()\u003c/code\u003e. We may then retrieve the specific user by calling Firebase's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eDisplaying Saved Names\u003c/h3\u003e\r\n\u003cp\u003eFinally, let's update the MainActivity so that the user sees a welcome message in the AppBar when they have successfully logged in. We'll start by creating an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust like we did in our CreateAccountActivity, remembering to add it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth mAuth;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth.AuthStateListener mAuthListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                 \u003cspan class=\"hljs-comment\"\u003e//display welcome message\u003c/span\u003e\r\n            }\r\n        };\r\n        ...\r\n    }\r\n\r\n  \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStart\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStop\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStop();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mAuthListener != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we just need to display the welcome message:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nmAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                FirebaseUser user = firebaseAuth.getCurrentUser();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (user != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    getSupportActionBar().setTitle(\u003cspan class=\"hljs-string\"\u003e\"Welcome, \"\u003c/span\u003e + user.getDisplayName() + \u003cspan class=\"hljs-string\"\u003e\"!\"\u003c/span\u003e);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n\r\n                }\r\n            }\r\n        };\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetSupportActionBar()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to access our activity's action bar and then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetTitle()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to update the text with our welcome message.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCompleted()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause we need to have access to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto grab the display name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eClearing Old Accounts\u003c/h3\u003e\r\n\u003cp\u003eBefore we run our app, let's navigate to our Firebase app's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAuth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage and manually delete each user. We previously created users\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eattaching a display name. So, let's remove those old users to ensure that all users have a name to display. Otherwise, we might instead see\u003cspan\u003e \u003c/span\u003e\u003cem\u003enull\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhere a user's name should populate in our App Bar.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/mgsu7rafsu2cp9p/firebase-user-overflow-menu.png?raw=1\" alt=\"firebase-panel-auth\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/oa8oa1bqj6e2qhr/delete-account-firebase-user.png?raw=1\" alt=\"firebase-panel-auth\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's run our app (making sure to log out any currently-authenticated users), navigate to CreateAccountActivity, and create a brand new user. After creating this new account, our app should navigate to MainActivity, and we should see this user's name in the AppBar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/a4mf7bh1kft77q6/username_displayed_in_app_bar.png?raw=1\" alt=\"username-displayed-appbar\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNote: If your welcome message has a \u003cstrong\u003e\u003cem\u003enull\u003c/em\u003e\u003c/strong\u003e object in place of the User Object, don't sweat - latency issue in Firebase cause this misalignment of expectation. Once we implement logout and login features all will be well.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProgress Dialog\u003c/strong\u003e: An animated progress indicator that is displayed along with a message. Often used to indicate that the application is still loading; and not frozen.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAndroid Patterns\u003c/strong\u003e: Commonly-used regular expressions built right into Android.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFIrebase article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/manage-users\"\u003eManaging Users\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/reference/android/app/ProgressDialog.html\"\u003eProgressDialog\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/util/Patterns.html\"\u003ePatterns\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-registering-accounts-additional-features"},{"id":1057,"title":"Wednesday: White Board Interview Practice","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box","graded":true,"pointsPossible":12.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\r\n\u003cp\u003e\u003cspan\u003eTake time this morning and split into groups of 5. You will be practicing for white board interviews that will be touched on more during your project period. Pick one of you to take the mock white board interview, set a toy problem for them to go through, and at the end use the rubric below to grade and give feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"i519bb3452e8371f2e176b2c0482edc8c"},{"id":1013,"title":"Wednesday: Instant Messaging Application","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eInstant Messaging Application (Two-day project)\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eLearn about the user authentication process by following along with the homework to add user accounts into your MyRestaurants application. Then, get extra practice with both user auth and event listeners by crafting an instant messaging application, paying special attention to the manner listeners instantaneously update a user's app with new messages as they're received.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is an intent filter? What does it do or prevent you from doing?\u003c/li\u003e\r\n\u003cli\u003eHow does a SearchView work? How is it different from other views?\u003c/li\u003e\r\n\u003cli\u003eWhat other Firebase methods can you name? What do they do, and when would you use them?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants\u003c/h3\u003e\r\n\u003ch4\u003eWednesday\u003c/h4\u003e\r\n\u003cp\u003eFollow along with lessons listed under Wednesday (today), in order to begin implementing user authentication into your MyRestaurants application. This includes account registration, saving user information to our database, and logging users in and out.\u003c/p\u003e\r\n\u003ch4\u003eThursday\u003c/h4\u003e\r\n\u003cp\u003eContinue to follow along with the user authentication lessons listed under Thursday to implement dialogs, validating user credentials, and displaying errors.\u003c/p\u003e\r\n\u003ch3\u003eChat Application\u003c/h3\u003e\r\n\u003cp\u003eAnother very common type of Android application (or feature within larger apps) is instant messaging/chatting. Apps like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.whatsapp\u0026amp;hl=en\"\u003eWhatsApp\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.facebook.orca\u0026amp;hl=en\"\u003eFacebook Messenger\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/dev?id=5700313618786177705\u0026amp;hl=en\"\u003eGoogle Hangouts\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eare all great examples of this. Create an instant messaging application--whether based off of a pre-existing app, or something of your own creation--with the following features:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAllow users to register with their own, unique account.\u003c/li\u003e\r\n\u003cli\u003eAllow users to securely log into their own account using Firebase authentication.\u003c/li\u003e\r\n\u003cli\u003eInclude a User model and save user information to your Firebase database.\u003c/li\u003e\r\n\u003cli\u003eAllow users to send messages to one another.\u003c/li\u003e\r\n\u003cli\u003eImplement\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#weekend-two.html\" target=\"_blank\"\u003eFirebase listeners\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat will instantly update a user's app with new messages as they're received.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eMuch like the discussion forum, this is an incredibly common type of application and/or feature in large applications. Therefore, take the time to ensure you have the beginnings of a great portfolio project that displays your capability of creating the most popular types of mobile apps!\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner complete the features detailed above, explore some additional approaches to authenticating users! Many apps now provide users options to sign in via Facebook, Google, and/or Twitter. Using the resources below, research and experiment with implementing social authentication into your chat application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.firebase.com/docs/web/guide/user-auth.html#section-providers\" target=\"_blank\"\u003eSetup an Authentication Provider\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.facebook.com/docs/facebook-login/android\" target=\"_blank\"\u003eFacebook Login for Android\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://dev.twitter.com/twitter-kit/android/twittercore\" target=\"_blank\"\u003eTwitterCore Android Login\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.google.com/identity/sign-in/android/start-integrating\" target=\"_blank\"\u003eGoogle sign-in for Android\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCan users successfully sign in and out of the application using Firebase?\u003c/li\u003e\r\n\u003cli\u003eCan users also sign in and out using a social media account?\u003c/li\u003e\r\n\u003cli\u003eAre the new features well-implemented? Is the code well-refactored and easy-to-follow?\u003c/li\u003e\r\n\u003cli\u003eWhat about this application would you do differently? What might you like to integrate in your own application?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"wednesday-instant-messaging-application"},{"id":1014,"title":"Wednesday:Logging In","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eLogging In\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that we can successfully register user accounts and save their information to their FirebaseUser profile, let's add functionality to allow users to log in. The code we'll write for signing a user in with Firebase will actually be very similar to the code we wrote to create a user in our CreateAccountActivity.\u003c/p\u003e\r\n\u003cp\u003eFirst, we will need to declare and set the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. At the same time, let's bind our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditTexts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eviews using ButterKnife:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = LoginActivity.class.getSimpleName();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.passwordLoginButton) Button mPasswordLoginButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.emailEditText) EditText mEmailEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.passwordEditText) EditText mPasswordEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.registerTextView) TextView mRegisterTextView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth mAuth;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's add a click listener to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPasswordLoginButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will trigger a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eloginWithPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we will create momentarily:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mPasswordLoginButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mPasswordLoginButton) {\r\n            loginWithPassword();\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, the user will complete the login form, click\u003ccode\u003emPasswordLoginButton\u003c/code\u003e, and our app will run a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eloginWithPassword()\u003c/code\u003e. This method will eventually be responsible for reaching out to Firebase and authenticating the account with the user-provided credentials. But first, we'll gather the user's email and password, and double-check for blank fields:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloginWithPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        String email = mEmailEditText.getText().toString().trim();\r\n        String password = mPasswordEditText.getText().toString().trim();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (email.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mEmailEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please enter your email\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (password.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Password cannot be blank\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf either the email of password values are empty we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetError()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display relevant error messages and then\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto stop the method entirely\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe ever reach out to Firebase.\u003c/p\u003e\r\n\u003ch2\u003eBuilt-In Firebase Authentication Methods and Listeners\u003c/h2\u003e\r\n\u003cp\u003eWith the user's login credentials in hand, we can begin actually authenticating their account. To do this, we'll call a built-in Firebase method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignInWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithin our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eloginWithPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eAs outlined in its\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithEmailAndPassword\"\u003edocumentation\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignInWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust be called on a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and takes the user's email and password as arguments. In addition, we must provide an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnCompleteListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto handle the authentication attempt.\u003c/p\u003e\r\n\u003cp\u003eAs the name suggests, this listener is responsible for determining when the authentication attempt is complete, and executes the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonComplete()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride when it is:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloginWithPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                        Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"signInWithEmail:onComplete:\"\u003c/span\u003e + task.isSuccessful());\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!task.isSuccessful()) {\r\n                            Log.w(TAG, \u003cspan class=\"hljs-string\"\u003e\"signInWithEmail\"\u003c/span\u003e, task.getException());\r\n                            Toast.makeText(LoginActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                                    Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the user entered an email and password, we pass them to the\u003ccode\u003e signInWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateUserWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we utilized in our CreateAccountActivity, we add a completion listener to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignInWithEmailAndPassword()\u003c/code\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the sign-in attempt was unsuccessful, we display a toast to inform the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we launch the application now, we can see whether our login attempts are successful in our logcat,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebut the application won't navigate anywhere after successful authentication quite yet\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch2\u003eAdd AuthStateListener\u003c/h2\u003e\r\n\u003cp\u003eNext, let's tell our app what to\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhen the user's account is successfully authenticated. When a user logs in we want them to see our MainActivity. Just like we did in our CreateAccountActivity, let's add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto listen for changes in the current authentication state. If a user is authenticated, the app will navigate to the MainActivity.\u003c/p\u003e\r\n\u003cp\u003eSimilar to its implementation in CreateAccountActivity, we will attach and remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth.AuthStateListener mAuthListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                FirebaseUser user = firebaseAuth.getCurrentUser();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (user != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(LoginActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, MainActivity.class);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n                    startActivity(intent);\r\n                    finish();\r\n                }\r\n            }\r\n        };\r\n\r\n        ...\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStart\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStop\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStop();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mAuthListener != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run our app, sign out the current user in the MainActivity, and then log them back in. If everything is setup properly, our app will bring the us to the MainActivity after we click \"Log In\". If we restart the app our user should\u003cspan\u003e \u003c/span\u003e\u003cem\u003estill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe logged in, and our app should navigate to the MainActivity automatically and your name which was missing in the apps status bar upon sign up should now display your name just fine - because the user is already present in the Firebase database.\u003c/p\u003e\r\n\u003ch2\u003eAdd ProgressDialog\u003c/h2\u003e\r\n\u003cp\u003eLastly, let's add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our LoginActivity to notify the user that the app is processing their authenticate request. This code should look identical to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecode we wrote in CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ProgressDialog mAuthProgressDialog;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        createAuthProgressDialog();\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateAuthProgressDialog\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mAuthProgressDialog = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ProgressDialog(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mAuthProgressDialog.setTitle(\u003cspan class=\"hljs-string\"\u003e\"Loading...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setMessage(\u003cspan class=\"hljs-string\"\u003e\"Authenticating with Firebase...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setCancelable(\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloginWithPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (password.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Password cannot be blank\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n        }\r\n        mAuthProgressDialog.show();\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                        mAuthProgressDialog.dismiss();\r\n                        ...\r\n                    }\r\n                });\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run the app one more time, log out the currently authorized user and then log them back in to make sure our progress dialogs are displaying properly.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"wednesday-logging-in"},{"id":2259,"title":"Wednesday: Body Language Awareness","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow aware are you of your body language?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBody language is broken down into eye contact, facial expressions, and gestures. In your day-to-day life, how often do you use good body language when communicating with people?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOver the next two weeks, pay attention to how you use body language. The below questions should help you recognize your body language tendencies in preparation for the body language workshop in two weeks.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eEye Contact\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat do you do right or wrong in terms of eye contact?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you maintain a steady eye contact when conversing with someone?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you look at someone directly or are you easily distracted?\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eGestures\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you express your language using gestures? If yes, how often?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you nod your head to show approval?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you use your hands when conversing with people?\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eFacial Expressions\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you convey facial expressions that are consistent with the information you are conveying? \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen delivering information or feelings like excitement, sadness, frustration, anger, boredom, anger, etc. do your face, eyes and eyebrows show these feelings?  \u003c/span\u003e\u003c/p\u003e","exportId":"wednesday-body-language-awareness"},{"id":1015,"title":"Thursday:Connecting Users and Object Data","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eConnecting Users and Object Data\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that our app allows each user their own personal account, let's make sure each user's \"Saved Restaurants\" list is correctly associated with them. This will ensure that when a user logs in, they see\u003cspan\u003e \u003c/span\u003e\u003cem\u003etheir\u003c/em\u003e\"Saved Restaurants\" .\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll alter the structure of our database to ensure that each restaurant a user saves is attributed to their account user has a unique node, add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our Restaurant objects which will allow us to locate them when we implement delete functionality next week, and alter our existing Firebase query to return only a user's own data.\u003c/p\u003e\r\n\u003ch2\u003eReview: Data Structure in MyRestaurants\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, let's review some ground we have already covered where data structure in Firebase is concerned.\u003c/p\u003e\r\n\u003cp\u003eWhen a user adds a restaurant to their list, we want to save the restaurant object to a user's own dedicated node in our database. To do this, we'll create a node for each user under their account's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty, since it's guaranteed to be unique. And, while we'll continue to save restaurants under a unique push ID, we'll also capture this ID and save it as an attribute in each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cp\u003eThis will result in a database that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/f8fnjxcpf35luh4/new_database_structure.png?raw=1\" alt=\"Firebase Data Structure\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eSaving User-Specific Data\u003c/h2\u003e\r\n\u003ch3\u003eRestaurant Push IDs\u003c/h3\u003e\r\n\u003cp\u003eWe'll begin by adding a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. As detailed in the image above, we'll save each restaurant's unique\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our database. Next week, when we add functionality to delete restaurants from \"Saved Restaurants\" we'll need a method of identifying the specific restaurant to remove from a user's node. This\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute will allow our app to pinpoint the exact restaurant object to delete.\u003c/p\u003e\r\n\u003cp\u003eLet's add this new attribute now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-annotation\"\u003e@Parcel\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    String name;\r\n    String phone;\r\n    String website;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating;String imageUrl;\r\n    List\u0026lt;String\u0026gt; address = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude;\r\n    List\u0026lt;String\u0026gt; categories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String pushId;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.phone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.website = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.rating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.imageUrl = getLargeImageUrl(imageUrl);\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.address = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.latitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.longitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.categories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e name;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e phone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  website;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e imageUrl;}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetLargeImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String imageUrl)\u003c/span\u003e \u003c/span\u003e{\r\n        String largeImageUrl = imageUrl.substring(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, imageUrl.length() - \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e).concat(\u003cspan class=\"hljs-string\"\u003e\"o.jpg\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e largeImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e address;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e latitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e longitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPushId\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e pushId;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetPushId\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String pushId)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.pushId = pushId;\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've declared a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof type String, and created\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetPushId()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetPushId()\u003c/code\u003emethods to retrieve or assign the relevant ID to an object. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not included in the constructor because it won't be provided when the object is first created. Since Firebase creates this value, we cannot assign it to the object until later on, when we're ready to save to Firebase.\u003c/p\u003e\r\n\u003ch3\u003eSaving Objects\u003c/h3\u003e\r\n\u003cp\u003eNow that we have added user authentication to our app, we need to update how we save restaurants to our Firebase database. In order to associate restaurants to a given user, we need to add the restaurants by the user's UID.\u003c/p\u003e\r\n\u003cp\u003eLet's start by grabbing the currently authenticated user's UID in our RestaurantDetailFragment since that's where we are saving our restaurant objects. Add the following to our mSaveRestaurantsButton click listener:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n            String uid = user.getUid();\r\n\r\n            ...\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo get the currently authorized user, we simply need to get the current instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCurrentUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/li\u003e\r\n\u003cli\u003eWe can then grab their UID by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetUid()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow we just need to update our restaurantRef variable so that it points to the correct location in the Firebase database to save restaurants to the user with the returned UID:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n            String uid = user.getUid();\r\n            DatabaseReference restaurantRef = FirebaseDatabase\r\n                    .getInstance()\r\n                    .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                    .child(uid);\r\n            ...\r\n        }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003echild()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to create a node within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode to store the given user's list of restaurants.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, let's add the pushID of the restaurant to be saved before setting the value at given reference:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n            String uid = user.getUid();\r\n\r\n            DatabaseReference restaurantRef = FirebaseDatabase\r\n                    .getInstance()\r\n                    .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                    .child(uid);\r\n\r\n            DatabaseReference pushRef = restaurantRef.push();\r\n            String pushId = pushRef.getKey();\r\n            mRestaurant.setPushId(pushId);\r\n            pushRef.setValue(mRestaurant);\r\n\r\n            Toast.makeText(getContext(), \u003cspan class=\"hljs-string\"\u003e\"Saved\"\u003c/span\u003e, Toast.LENGTH_SHORT).show();\r\n        }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the new child node. This prompts Firebase to create a unique push ID. This is the ID we will assign to the restaurant's new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe collect this ID by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetKey()\u003c/code\u003e, and assign it a variable name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetPushId()\u003c/code\u003e, providing the Firebase push ID as an argument, to define the\u003ccode\u003erestaurant\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto save the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in the specified node in Firebase, and display a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we run our app we should be able to log in, save several restaurants, and see these restaurants appear under the appropriate\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our database.\u003c/p\u003e\r\n\u003ch2\u003eMaintaining Database Consistency\u003c/h2\u003e\r\n\u003cp\u003eHowever, we do have one small problem. Now that we've added a new attribute to restaurants and changed where we save them, any\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurants we save will conform to our new standards, but any restaurants added\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethese changes will have an entirely different data structure.\u003c/p\u003e\r\n\u003cp\u003eWe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewant our databases to be as consistent as possible. Therefore, we'll need to delete all existing restaurants from Firebase by selecting the red \"X\" next to the restaurants node:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s0irladwq4oa92i/delete-restaurants-firebase.png?raw=1\" alt=\"deleting-restaurants-from-firebase\"\u003e\u003c/p\u003e\r\n\u003cp\u003eMoving forward, all restaurants saved will be saved in the appropriate data structure, with the necessary attributes, and our database will have consistent structure that follows best practices!\u003c/p\u003e\r\n\u003ch2\u003eRetrieving User-Specific Data\u003c/h2\u003e\r\n\u003cp\u003eNow that we've organized our database appropriately, we need to alter our SavedRestaurantListActivity in order to display the \"Saved Restaurants\" list associated with the user currently logged in. Let's start by grabbing the currently authorized user's UID in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e. We can do this by adding the following two lines:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we need to update our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable so that it points to the correct location in the database, just like we did in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSaveRestaurantButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclick listener in the RestaurantDetailFragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n         ...\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        mRestaurantReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid);\r\n        ...\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe completed\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n  \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        mRestaurantReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid);\r\n\r\n        setUpFirebaseAdapter();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we launch the app again, save a few restaurants, and then navigate to the SavedRestaurantsActivity, we should see that each user can only see their own individual \"Saved Restaurants\" list.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to update the \u003cspan\u003eFirebaseRestaurantViewHolder database reference to include the userId in the new referencing style:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eDatabaseReference ref = FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e)\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e to\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirebaseRestaurantViewHolder.java\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eFirebaseUser user = FirebaseAuth.\u003cspan\u003egetInstance\u003c/span\u003e().getCurrentUser()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003eString uid = user.getUid()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003eDatabaseReference ref = FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e).child(uid)\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e Now the restaurant details will display just fine in the Restaurant. The only problem you will notice is that it won't be displaying the details to the specific restaurant you clicked. We will fix this in a later lesson.\u003c/p\u003e\r\n\u003ch2\u003eDatabase Rules\u003c/h2\u003e\r\n\u003cp\u003eWith authorized users fully established and able to save restaurants to their personalized node, let's update the security settings in our Firebase Database so that only authorized users can read and write to it. Navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRules\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDatabase\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand change the rules to the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003erules\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.read\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.write\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor more information on Firebase Database rules, read\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/security/quickstart\"\u003eGet Started with Database Rules\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eFirebase database rules allowing only\u003cspan\u003e \u003c/span\u003e\u003cem\u003eauthenticated\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusers to write to the database:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003erules\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.read\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.write\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirebase's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.firebase.com/docs/android/guide/structuring-data.html\"\u003eStructuring Data\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle covers best practices for organizing and structuring Firebase databases.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Firebase Database rules, read\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/security/quickstart\"\u003eGet Started with Database Rules\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"thursday-connecting-users-and-object-data"},{"id":1016,"title":"Independent Project","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":15.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eContinue building your independent project by integrating the new tools and concepts we’ve learned this week. This includes Firebase user authentication, saving and retrieving data to Firebase, employing the Firebase RecyclerAdapter, using Shared Preferences, dialogs, and integrating a SearchView widget, as outlined by the objectives below.\u003c/p\u003e\r\n\u003cp\u003eFor more details, including project examples, API suggestions, and an outline of application categories, revisit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\"\u003eAndroid Weekly Independent Projects\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson from the pre-work.\u003c/p\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for fulfillment of the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement Firebase user authentication.\u003c/li\u003e\r\n\u003cli\u003eSave and retrieve data using Firebase, making sure to structure your data according to Firebase guidelines.\u003c/li\u003e\r\n\u003cli\u003eEmploy the Firebase-RecyclerAdapter to display from your database.\u003c/li\u003e\r\n\u003cli\u003eUse SharedPreferences to save an important piece of data in your app.\u003c/li\u003e\r\n\u003cli\u003eUtilize dialogs to inform users of login status, etc.\u003c/li\u003e\r\n\u003cli\u003eUse a SearchView widget to gather user input.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices,\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003eespecially indenting properly, commenting complex code segments, making logically separate Git commits, including a detailed README, and removing commented-out code and logging statements before committing.\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject works as expected\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrate concepts covered this week. If prompted, are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology\u003c/li\u003e\r\n\u003cli\u003ePrevious standards have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTimely project submittion\u003c/li\u003e\r\n\u003cli\u003eProject README file is upto standard\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eA minimum of 20 github commits on Github for this project\u003c/li\u003e\r\n\u003cli\u003eUsage of .gitignore with required files and folders ignored\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i296bc8591a7a1adbf5e07342c5adb915"},{"id":1099,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1a4b96ca090be03f6f1228317e3e7019"},{"id":1017,"title":"Weekend Work:Gestures, Animations, \u0026 Flexible UIs Objectives","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003ch1\u003eGestures, Animations, \u0026amp; Flexible UIs Objectives\u003c/h1\u003e\r\n\u003cp\u003eNow that we've covered an ample amount of the Android basics, we can start getting to the fun stuff. This week we'll begin exploring some of the phone-specific features that make Android development that much more exciting!\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by learning about Android's ItemTouchHelper utility and the gesture support it offers; specifically focusing on drag-and-drop, and swiping gestures. Then, we'll walk through updating our databases with information provided from users via touchscreen interactions.\u003c/p\u003e\r\n\u003cp\u003eThen, we'll add animations to components in order to make them appear differently when users are actively interacting with them via the touchscreen. Not only will this make our apps look more professional, but it'll provide a sense of interactivity to users.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll explore flexible UIs that will allow our app to switch orientation from portrait, to landscape, and back again depending on the angle of the phone. This will require us to learn more about Fragments and how they communicate.\u003c/p\u003e\r\n\u003cp\u003eFinally, we'll learn how to publish completed applications to the Google Play store!\u003c/p\u003e\r\n\u003cp\u003eAlong the way we'll build more features into our ongoing MyRestaurants application, create several new applications of choice, and continue independent projects.\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eAt the end of the week, your ongoing independent project will be reviewed for the following objectives\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIncludes at least two gesture listeners\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOR\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etwo animations,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOR\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eutilize the camera within your application.\u003c/li\u003e\r\n\u003cli\u003eImplements at least one alternate resource.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject is in a presentable, portfolio-quality state.\u003c/li\u003e\r\n\u003cli\u003eOptional: Is published to Google Play.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eItemTouchHelper Setup\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAndroid apps aren't\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eregular programs, applications, or websites designed to work especially well with Android systems; their touchscreens also offer a whole realm of user interaction other devices simply can't. We can\u003cspan\u003e \u003c/span\u003e\u003cem\u003eswipe\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto reveal a delete button,\u003cspan\u003e \u003c/span\u003e\u003cem\u003elong-press\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto open an edit functionality, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag-and-drop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto re-organize a folder. Let's explore the mechanics of some of these custom, touchscreen-specific interactions (also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egestures\u003c/strong\u003e), and begin integrating them into our projects.\u003c/p\u003e\r\n\u003cp\u003eWe will add features that allow users to drag and drop restaurants to re-order their \"Saved Restaurants\" list, and swipe to delete an individual restaurant from their list. To do this, we will use a tool called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eItemTouchHelper\u003c/strong\u003e. ItemTouchHelper is an Android utility class that adds support for touchscreen gestures to the RecyclerView.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, check out the tutorial\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf#.ko4sa38yb\"\u003eDrag and Swipe with RecyclerView\u003c/a\u003e. The included animation is a great visual example of the drag-and-drop and swipe-to-delete functionality we will implement.\u003c/p\u003e\r\n\u003ch2\u003eSetup\u003c/h2\u003e\r\n\u003cp\u003eIn the next few lessons we'll add the functionality described in the article above by adding the necessary interfaces, and creating an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto listen for gestures. Next, we will construct a new list item layout to indicate to users that list items are drag-enabled. Finally, we will create a custom adapter that both inherits functionality from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand acts as the adapter for our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eItemTouchHelper Interfaces\u003c/h3\u003e\r\n\u003cp\u003eWe will need to create 2 interfaces to implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e. These interfaces will provide a list of methods that will eventually tie into callback methods in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass we will create next.\u003c/p\u003e\r\n\u003cp\u003eCreate a new\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/weekend-refactor-subpackages?module_item_id=ifdece44c5a08483aad357a771ee15fe1\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/weekend-refactor-subpackages\" data-api-returntype=\"Page\"\u003esub-package\u003c/a\u003e\u003cspan\u003e \u003c/span\u003enamed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, create new Java class files with the following interface:\u003c/p\u003e\r\n\u003ch4\u003eItemTouchHelperAdapter\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003eItemTouchHelperAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e fromPosition, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e toPosition)\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemDismiss\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs addressed in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-view-dot-onclicklistener-interface?module_item_id=i2c16514ec77d6c2df77b5e3d158da96f\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/tuesday-view-dot-onclicklistener-interface\" data-api-returntype=\"Page\"\u003eprevious lessons\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einterfaces\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare groups of methods other classes may implement. When we define an interface, we're listing out the methods. Each class that implements the interface will be required to override each of these methods.\u003c/p\u003e\r\n\u003cp\u003eIn the code above, we've defined an interface called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the following two methods to override:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called each time the user moves an item by dragging it across the touch screen. The argument\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efromPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the location the item originally resided at.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the location the user moved the item to.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called when an item has been dismissed with a swipe motion. The parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eposition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the location of the dismissed item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe will eventually implement this interface and override its methods in our custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto tell our adapter what to do when an item is moved or dismissed via the touchscreen. It will eventually pass event callbacks from our custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass back up the chain.\u003c/p\u003e\r\n\u003ch4\u003eOnStartDragListener\u003c/h4\u003e\r\n\u003cp\u003eNext, we'll create another interface in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esubpackage, and populate it with the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eOnStartDragListener.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStartDrag\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called when the user begins a 'drag-and-drop' interaction with the touchscreen.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eviewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eholder corresponding to the object being dragged.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe will implement this interface in our SavedRestaurantsListActivity to attach the event listener to our custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will eventually be attached to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. This interface will pass events\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto our adapter allowing us to attach the touch listener to an item in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eEnabling Gestures in the RecyclerView\u003c/h2\u003e\r\n\u003cp\u003eNow, we need to ensure our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas the capability to receive and process gestures from the touchscreen. To listen for\u003cspan\u003e \u003c/span\u003e\u003cem\u003emove\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eswipe\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eevents we need to create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e. This class will define\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhich\u003c/em\u003e\u003cspan\u003e \u003c/span\u003egestures to enable or disable. It will also receive callbacks when the user performs enabled touchscreen actions.\u003c/p\u003e\r\n\u003cp\u003eCreate another new class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package. The nested comments in the code below describe what each method does:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSimpleItemTouchHelperCallback.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSimpleItemTouchHelperCallback\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelper\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eCallback\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e ItemTouchHelperAdapter mAdapter;\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  This constructor takes an ItemTouchHelperAdapter parameter. When implemented in\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  FirebaseRestaurantListAdapter, the ItemTouchHelperAdapter instance will pass the gesture event back to the\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  Firebase adapter where we will define what occurs when an item is moved or dismissed.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSimpleItemTouchHelperCallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ItemTouchHelperAdapter adapter)\u003c/span\u003e \u003c/span\u003e{\r\n        mAdapter = adapter;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  The method below informs the ItemTouchHelperAdapter that drag gestures are enabled.\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  We could also disable drag gestures by returning 'false'.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisLongPressDragEnabled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n     \u003cspan class=\"hljs-comment\"\u003e//  The method below informs the ItemTouchHelperAdapter that swipe gestures are enabled.\u003c/span\u003e\r\n     \u003cspan class=\"hljs-comment\"\u003e//  We could also disable them by returning 'false'.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisItemViewSwipeEnabled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  getMovementFlags informs the ItemTouchHelper which movement directions are supported.\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e// For example, when a user drags a list item, they press 'Down' to begin the drag and lift their finger, 'Up',  to end the drag.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetMovementFlags\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e makeMovementFlags(dragFlags, swipeFlags);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  The method below notifies the adapter that an item has moved.\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  This triggers the onItemMove override in our Firebase adapter,\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  which will eventually handle updating the restaurants ArrayList to reflect the item's new position.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView recyclerView, RecyclerView.ViewHolder source,\r\n            RecyclerView.ViewHolder target)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (source.getItemViewType() != target.getItemViewType()) {\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        mAdapter.onItemMove(source.getAdapterPosition(), target.getAdapterPosition());\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n   \u003cspan class=\"hljs-comment\"\u003e//  The method below notifies the adapter that an item was dismissed.\u003c/span\u003e\r\n   \u003cspan class=\"hljs-comment\"\u003e//  This triggers the onItemDismiss override in our Firebase adapter\u003c/span\u003e\r\n   \u003cspan class=\"hljs-comment\"\u003e//  which will eventually handle deleting this item from the user's \"Saved Restaurants\" in Firebase.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSwiped\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i)\u003c/span\u003e \u003c/span\u003e{\r\n        mAdapter.onItemDismiss(viewHolder.getAdapterPosition());\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUser Interface\u003c/h2\u003e\r\n\u003ch3\u003eDownloading Icons\u003c/h3\u003e\r\n\u003cp\u003eAs stated in the tutorial at the beginning of this lesson, Google’s Material Design Guidelines recommend using the \"Reorder\" icon to indicate that list items have drag-and-drop capabilities.\u003c/p\u003e\r\n\u003cp\u003eLet’s download the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/#ic_reorder\"\u003eMaterial Icons | Reorder\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ePNG icon and add it to our drawable folder. As we've done previously, place each varying size PNG file in the corresponding sub-directory within\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. Once complete, you should have a file structure of icons that looks something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/9kyha3snv0nr73f/icon-file-structure.png\" alt=\"icon-file-structure-in-finder\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eCreating Layouts\u003c/h3\u003e\r\n\u003cp\u003eWe're currently using the same layout for individual restaurant items in both the \"Saved Restaurants\" and \"Find Restaurants\" areas of our application. Because \"Saved Restaurants\" will now allow users to reorder their list, let's create a dedicated layout for list items in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earea. This layout will look the same as\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item\u003c/em\u003e, except it will include the 'reorder' icon in the bottom-left corner of the restaurant\u003ccode\u003eImageView\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eCreate a new list item layout file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item_drag\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. We will use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRelativeLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand align the icon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the bottom left of the restaurant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item_drag.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/dragIcon\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bottom|left\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_reorder_white_24dp\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#ffffff\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll inflate this layout in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor within SavedRestaurantListActivity. We'll simply replace the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR.layout.restaurant_list_item\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're currently inflating with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR.layout.restaurant_list_item_drag\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003emFirebaseAdapter \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt;(options) {\u003cbr\u003e   \u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    @Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic \u003c/span\u003eFirebaseRestaurantViewHolder \u003cspan\u003eonCreateViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eViewGroup parent\u003cspan\u003e, int \u003c/span\u003eviewType) {\u003cbr\u003e        View view = LayoutInflater.\u003cspan\u003efrom\u003c/span\u003e(parent.getContext()).inflate(R.layout.\u003cspan\u003erestaurant_list_item_drag\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eparent\u003cspan\u003e, false\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        return new \u003c/span\u003eFirebaseRestaurantViewHolder(view)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e... } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run our app and navigate to SavedRestaurantsListActivity, we should see that our icons appear over the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageViews\u003c/code\u003e, but we aren't yet able to drag and drop the list items:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/b663iqncpznmhyq/reorder-icon-in-layout.png\" alt=\"reorder-icon-present-in-saved-restaurants-list\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we have all necessary components in place, we will enable this functionality in the next lesson.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInterfaces\u003c/strong\u003e: Groups of methods other classes may implement, as described in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#02.html\"\u003eprevious lessons\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eGestures:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTouchscreen-specific interactions, such as drag-and-drop, long-press or swipe.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eItemTouchHelper:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAn Android utility class that adds support for touchscreen gestures to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf#.ko4sa38yb\"\u003eDrag and Swipe with RecyclerView\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eImplementing Gestures with ItemTouchHelper\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that our interfaces,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e, and new list item layout are in place, let's implement the drag-and-drop feature. We will start by creating a new adapter class and then updating our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand SavedRestaurantListActivity.\u003c/p\u003e\r\n\u003ch2\u003eClass Inheritance\u003c/h2\u003e\r\n\u003cp\u003eLast week we created an instance of the FirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto listen and respond to changes in a specified node. However, in order to implement our new listener interfaces we will need to create\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecustom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eadapter that inherits all functionality of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eimplements the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e. Before we do this, let's briefly learn about inheritance, and how it works.\u003c/p\u003e\r\n\u003cp\u003eIn Java (and\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eother languages)\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einheritance\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erefers to a relationship between two classes in which one (child) class has all of methods and properties of the other (parent) class, while also containing unique methods and properties of its own.\u003c/p\u003e\r\n\u003cp\u003eFor example, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass might inherit from an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003eclass. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass would have all of the methods and properties of an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebut also\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe unique methods and properties of a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e. To inherit from a class, we use the keyword\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextend\u003c/strong\u003e, like so:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAnimal\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the example above, the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis able to call all methods and content from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e, since it has inherited it.\u003c/p\u003e\r\n\u003ch2\u003eCustom Adapters with Class Inheritance\u003c/h2\u003e\r\n\u003cp\u003eAs mentioned, let's make a custom adapter that inherits all functionality of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand also\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eincludes its own code implementing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e. This will allow us to handle\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eFirebaseRecyclerAdapter\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edrag-and-drop functionalities in the same adapter.\u003c/p\u003e\r\n\u003cp\u003eWe'll start by creating the new class in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e. We will extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einherit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eits functionality. We will also implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003einterface, and create a constructor:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/FirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eFirebaseRestaurantListAdapter \u003cspan\u003eextends \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt; \u003cspan\u003eimplements \u003c/span\u003eItemTouchHelperAdapter {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRef\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eOnStartDragListener \u003cspan\u003emOnStartDragListener\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eContext \u003cspan\u003emContext\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public \u003c/span\u003e\u003cspan\u003eFirebaseRestaurantListAdapter\u003c/span\u003e(FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eDatabaseReference ref\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eOnStartDragListener onStartDragListener\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eContext context){\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e(options)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRef \u003c/span\u003e= ref.getRef()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emOnStartDragListener \u003c/span\u003e= onStartDragListener\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emContext \u003c/span\u003e= context\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like we saw in SavedRestaurantsActivity, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequires the class of the data that will populate the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView (Contained in the FirebaseRecyclerOptions in the SavedRestaurantListActivity)\u003c/code\u003e, and the database reference or query.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe also add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the constructor. The context will be needed when we eventually create an intent to navigate to the detail activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn order to set our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRef\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable to the correct datatype, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRef()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon an instance of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuery\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe will eventually set a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the restaurant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto trigger the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, let's override methods from the interfaces being implemented:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/FirebaseRestaurantListAdapter.java\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\n\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eFirebaseRestaurantListAdapter \u003cspan\u003eextends \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt; \u003cspan\u003eimplements \u003c/span\u003eItemTouchHelperAdapter {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRef\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eOnStartDragListener \u003cspan\u003emOnStartDragListener\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eContext \u003cspan\u003emContext\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public \u003c/span\u003e\u003cspan\u003eFirebaseRestaurantListAdapter\u003c/span\u003e(FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eDatabaseReference ref\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eOnStartDragListener onStartDragListener\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eContext context){\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e(options)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRef \u003c/span\u003e= ref.getRef()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emOnStartDragListener \u003c/span\u003e= onStartDragListener\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emContext \u003c/span\u003e= context\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eFirebaseRestaurantViewHolder firebaseRestaurantViewHolder\u003cspan\u003e, int \u003c/span\u003eposition\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e@NonNull \u003c/span\u003eRestaurant restaurant) {\u003cbr\u003e        firebaseRestaurantViewHolder.bindRestaurant(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@NonNull\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    @Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic \u003c/span\u003eFirebaseRestaurantViewHolder \u003cspan\u003eonCreateViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eViewGroup parent\u003cspan\u003e, int \u003c/span\u003eviewType) {\u003cbr\u003e        View view = LayoutInflater.\u003cspan\u003efrom\u003c/span\u003e(parent.getContext()).inflate(R.layout.\u003cspan\u003erestaurant_list_item_drag\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eparent\u003cspan\u003e, false\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        return new \u003c/span\u003eFirebaseRestaurantViewHolder(view)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic boolean \u003c/span\u003e\u003cspan\u003eonItemMove\u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003efromPosition\u003cspan\u003e, int \u003c/span\u003etoPosition){\u003cbr\u003e        \u003cspan\u003ereturn false;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonItemDismiss\u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003eposition){\u003cbr\u003e\u003cbr\u003e    }\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride methods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomes from an interface included as part of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eImplement OnStartDragListener and Attach ItemTouchHelper.Callback\u003c/h3\u003e\r\n\u003cp\u003eWe now need to make several changes so our SavedRestaurantListActivity:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eUse our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein SavedRestaurantListActivity\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein place of\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eour\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eImplement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface In order to pass the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener \u003c/code\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to attach the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eMove the construction of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetUpFirebaseAdapter()\u003c/code\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAfter these changes our SavedRestaurantListActivity should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantsListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eSavedRestaurantListActivity \u003cspan\u003eextends \u003c/span\u003eAppCompatActivity \u003cspan\u003eimplements \u003c/span\u003eOnStartDragListener {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eFirebaseRestaurantListAdapter \u003cspan\u003emFirebaseAdapter\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eItemTouchHelper \u003cspan\u003emItemTouchHelper\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003erecyclerView\u003c/span\u003e) RecyclerView \u003cspan\u003emRecyclerView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e(Bundle savedInstanceState) {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetContentView(R.layout.\u003cspan\u003eactivity_restaurants\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eButterKnife.\u003cspan\u003ebind\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetUpFirebaseAdapter()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003eprivate void \u003c/span\u003e\u003cspan\u003esetUpFirebaseAdapter\u003c/span\u003e(){\u003cbr\u003e        FirebaseUser user = FirebaseAuth.\u003cspan\u003egetInstance\u003c/span\u003e().getCurrentUser()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eString uid = user.getUid()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRestaurantReference \u003c/span\u003e= FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e).child(uid)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eFirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(\u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eRestaurant.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e                        .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eFirebaseRestaurantListAdapter(options\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e, this, this\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setLayoutManager(\u003cspan\u003enew \u003c/span\u003eLinearLayoutManager(\u003cspan\u003ethis\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setAdapter(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setHasFixedSize(\u003cspan\u003etrue\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eItemTouchHelper.Callback callback = \u003cspan\u003enew \u003c/span\u003eSimpleItemTouchHelperCallback(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emItemTouchHelper \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eItemTouchHelper(callback)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emItemTouchHelper\u003c/span\u003e.attachToRecyclerView(\u003cspan\u003emRecyclerView\u003c/span\u003e)\u003cspan\u003e; \u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStart\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStart()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter\u003c/span\u003e.startListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStop\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStop()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if\u003c/span\u003e(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e!= \u003cspan\u003enull\u003c/span\u003e) {\u003cbr\u003e            \u003cspan\u003emFirebaseAdapter\u003c/span\u003e.stopListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e    \u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonStartDrag\u003c/span\u003e(RecyclerView.ViewHolder viewHolder){\u003cbr\u003e        \u003cspan\u003emItemTouchHelper\u003c/span\u003e.startDrag(viewHolder)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a member variable so that we can use it in the OnStartDragListener's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefers to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e. Both are necessary to construct an instance of a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes an adapter as a parameter so we pass it the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe just created.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument so we can pass it the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat we just created using our adapter.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo enable the interfaces to communicate with the necessary callbacks, we must attach the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eattachToRecyclerView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride which will eventually send our touch events back to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAttach OnStartDragListener\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhere we will attach our drag listener to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. Only the Restaurant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be drag-enabled.\u003c/p\u003e\r\n\u003cp\u003eConsidering our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains each of the views in a given item view, it may make sense to do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitself. However, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener \u003c/code\u003epassed in to our adapter\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecannot be sent to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith a constructor\u003c/em\u003e, since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehandles the construction of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einternally.\u003c/p\u003e\r\n\u003cp\u003eInstead, we need to grant our adapter access to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby declaring it as a public member variable, and then set its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the adapter. We'll begin this process by tweaking code in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto make the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epublic:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ImageView mRestaurantImageView;\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        mRestaurantImageView = (ImageView) mView.findViewById(R.id.restaurantImageView);\r\n        ...\r\n\r\n        Picasso.get().load(restaurant.getImageUrl()).into(mRestaurantImageView);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can now set an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand instruct our listeners to listen for a drag events when the user touches a restaurant's image. We will do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of our adapter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnStartDragListener mOnStartDragListener;\r\n\r\n    ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        viewHolder.bindRestaurant(model);\r\n        viewHolder.mRestaurantImageView.setOnTouchListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnTouchListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonTouch\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v, MotionEvent event)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (event.getActionMasked() == MotionEvent.ACTION_DOWN) {\r\n                    mOnStartDragListener.onStartDrag(viewHolder);\r\n                }\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow if we run our app we can click the image of a list item in \"Saved Restaurants\" and drag it. In the next lesson we'll address altering our data based on user interactions; such as deleting a restaurant when the user swipes it off the screen, or re-ordering the appearance of restaurants in the \"Saved Restaurants\" list even after the activity is quit and re-visted.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eClass inheritance\u003c/strong\u003e: In Java (and many other programming languages) one class can acquire the methods and content of another class (in addition to its\u003cspan\u003e \u003c/span\u003e\u003cem\u003eown\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods and content) if it\u003cspan\u003e \u003c/span\u003e\u003cem\u003einherits\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom it. To inherit from a class, we use the keyword\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextend\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(ie\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass Lion extends Feline { ...\u003c/code\u003e).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eThe Minimum Viable Product\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eIn your final\u003cspan\u003e \u003c/span\u003eCapstone Project Brainstorming, you will craft a cumulative independent capstone project in week 5 of this course. You will be required to submit a project proposal to your instructor before you begin. This proposal will outline your minimum viable product (MVP), and the developmental roadmap you’ll follow to create it.\u003c/p\u003e\r\n\u003cp\u003eBefore we begin proposals, let’s learn more about minimum viable products and the benefits they offer. This will help ensure you approach your capstone project in the most efficient manner, and have a functioning application to demonstrate at the end of this course.\u003c/p\u003e\r\n\u003ch2\u003eMinimum Viable Product (MVP)\u003c/h2\u003e\r\n\u003cp\u003eIn web development,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eMVP\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eminimum viable product.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAs the name implies, this is the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eminimum\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003emost basic\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eiteration or version of an application that fulfills the sole purpose it is meant to achieve. That is, the problem the application is meant to solve, or the service it is supposed to offer to the user.\u003c/p\u003e\r\n\u003ch3\u003eMVP Example\u003c/h3\u003e\r\n\u003cp\u003eLet’s look at an example of an MVP. Consider the following quote from Gerry Clap’s response to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.quora.com/What-is-a-minimum-viable-product\" target=\"_blank\"\u003ethe question\u003cspan\u003e \u003c/span\u003e\u003cem\u003e”What is a minimum viable product?”\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Quora\u003c/a\u003e:\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003eLet's pretend you're building a startup with the goal of creating the best donut ever.\u003c/p\u003e\r\n\u003cp\u003eThe product team starts off by building a plain donut. At this point it's considered an MVP.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eThe product works, but it's probably not quite the best donut product out there\u003c/strong\u003e. Now the team can ask their customers questions about the donut, like:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat do like the most about the donut?\u003c/li\u003e\r\n\u003cli\u003eIf you could choose any topping, what topping would you add?\u003c/li\u003e\r\n\u003cli\u003eWould you prefer a donut in a different shape?\u003c/li\u003e\r\n\u003cli\u003eAnd, so on.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eUsing this newfound validated learning from their customers, the team can create a better donut. But, depending on the context of the customers that provided feedback, the team can have wildly varying results:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIn this particular case, it's to add candy sprinkles.\u003c/li\u003e\r\n\u003cli\u003eIn a different market, with different customers, those customers may of wanted a chocolate donut.\u003c/li\u003e\r\n\u003cli\u003eIf the team spoke to customers in another country, they may of wanted a strawberry donut._\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/blockquote\u003e\r\n\u003ch3\u003eMVP Benefits\u003c/h3\u003e\r\n\u003cp\u003eBy following this MVP process to create our product, we reap two distinct benefits:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eWe have a functioning product completed sooner.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWhile it may not have\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe fancy features we envision, it’s better to prioritize building functioning prototype with fewer features than to attempt adding\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoo many\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeatures at once, and fail to provide a functioning project by the deadline. You can always add those extra features after your basic MVP is finished.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eWe can also gather user feedback before adding extra features.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter creating your MVP sample users can beta test it and provide feedback. This allows you to determine what additional features users\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactually want\u003c/em\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eThe MVP Process in Your Capstone Project\u003c/h2\u003e\r\n\u003cp\u003eYou will submit a project proposal to your instructor, then work toward developing your MVP before integrating additional features. Let’s walk through what this workflow will look like:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn your proposal you will identify the primary goal or purpose of the application. What problem is this project meant to solve? What service is it meant to offer the user?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eYou will also determine the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebare minimum\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeatures and functionalities your application requires to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emeet\u003c/em\u003ethat goal or purpose.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf necessary, your instructor will provide feedback on your project idea and scope before week 5.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAs you begin developing your project, focus\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon the MVP features you identified in your proposal.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOnce that functionality is present,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epush to master\u003c/strong\u003e. The development process isn’t over, but you can rest-assured that you’ll have a functioning version ready to go. As you know, additional features should be developed\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003cstrong\u003eon their own branches\u003c/strong\u003e\u003c/em\u003e, and only pushed to master when you confirm they’re 100% functional and pass all tests.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eGather feedback. Ask potential users what features they would like to see. If you complete your MVP before the end of week 5, ask your peers or instructor for feedback. If you complete it just before Friday, use the trade show as an opportunity to gather feedback.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eContinue adding features to improve your project’s functionality and user experience. Take user feedback into account when deciding which extra features to implement before presenting your project to potential employers at Demo Day.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eAre you ready? Continue on to the next lesson to see the proposal template, and begin constructing your own MVP.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eIndependent Capstone Project Proposal\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs you know, you will spend week 5 of this course working on a cumulative capstone project.\u003cspan\u003e \u003c/span\u003eLast week\u003cspan\u003e \u003c/span\u003ewe began brainstorming project ideas. This week we’ll finalize, sign up, and submit proposals for our capstone projects.\u003c/p\u003e\r\n\u003ch3\u003eProject Proposal\u003c/h3\u003e\r\n\u003cp\u003eComplete the following proposal template and email to your instructor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eno later than Wednesday of week 4\u003c/strong\u003e(early proposals are welcome and encouraged). Make sure to review the homework on Minimum Viable Products before drafting your proposal. Knowledge of MVPs will be required to complete the questions below.\u003c/p\u003e\r\n\u003cp\u003eDouble-check your work for spelling, typos and punctuation, and use professional language and technical terms as you would in a project proposal completed for a supervisor or manager.\u003c/p\u003e\r\n\u003cp\u003ePlease also include\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003cem\u003eCapstone Project Proposal: Your First and Last Name\u003c/em\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ein the subject line.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eName of Student\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eName of Project\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eProject’s Purpose or Goal\u003c/strong\u003e:\u003cspan\u003e \u003c/span\u003e\u003cem\u003e(What will it do for users?)\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eList the absolute minimum features the project requires to meet this purpose or goal:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eWhat tools, frameworks, libraries, APIs, Drupal modules and/or other resources will you use to create this MVP? List them all here. Be specific.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eIf you finish developing the minimum viable product (MVP) with time to spare, what will you work on next? Describe these features here: Be specific.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eWhat additional tools, frameworks, libraries, APIs, or other resources will these additional features require?\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eIs there anything else you’d like your instructor to know?\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"weekend-work-gestures-animations-and-flexible-uis-objectives"}]},{"id":32,"name":"Week 4: Gestures, Animations \u0026 Flexible UIs","status":"completed","unlockDate":null,"prereqs":[31],"requirement":null,"sequential":false,"exportId":"i91b52c963fb68701ceafe067354ed18e","items":[{"id":1029,"title":"Monday:Gestures \u0026 Animations: Continuation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eGestures \u0026amp; Animations: Continuation\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal today is to explore touch events, gestures, and property animations in Android. Begin by exploring how to gestures with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e, then branch and explore what other gestures and animations are available!\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eUpdating Data After Gesture Interactions\u003c/h1\u003e\r\n\u003cp\u003eThere’s just one final step before our drag-and-drop and swipe-to-delete features are fully complete. Currently, Firebase will not actually delete a restaurant from a user's list of \"Saved Restaurants\" if we dismiss it from the screen, nor will it automatically save the order of our Saved Restaurants. If we leave the SavedRestaurantListActivity, the order of restaurants will return to its original state. Unless we instruct it otherwise, Firebase returns our data in alphabetical order of node key names.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we will add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass that will allow us to save an individual restaurant's location in our \"Saved Restaurant\" list, and code to handle actually removing restaurants from a user's list of \"Saved Restaurants\" in the database if they choose to delete one through the UI.\u003c/p\u003e\r\n\u003ch2\u003eAccessing Firebase after Gesture Interactions\u003c/h2\u003e\r\n\u003cp\u003eFirst, let's tell our adapter what to do when an item is moved or deleted. We can do this by adding code to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter \u003c/code\u003einterface the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis implementing:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e fromPosition, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e toPosition)\u003c/span\u003e \u003c/span\u003e{\r\n        notifyItemMoved(fromPosition, toPosition);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemDismiss\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        getRef(position).removeValue();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enotifyItemMoved()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to notify our adapter that the underlying data has changed.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo delete the dismissed item from Firebase, we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRef()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing in an item's position and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill return the DatabaseReference for the given object. We can then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremoveValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to delete that object from Firebase. Once deleted, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill automatically update the view.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow if we run our app and drag an item, the adjacent items will move to make room. And if we swipe to delete an item, it is removed from the Firebase database!\u003c/p\u003e\r\n\u003ch2\u003eStoring Index Values\u003c/h2\u003e\r\n\u003cp\u003eYou probably noticed that if we navigate away from the SavedRestaurantsListActivity and come back to it, the items that we previously dragged and dropped are returned to their original order. Let's fix this.\u003c/p\u003e\r\n\u003cp\u003eWe'll start by creating a new property for our Restaurant object called \"index\". We will eventually use this new index property to order the items pulled from Firebase:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    String index;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.index = \u003cspan class=\"hljs-string\"\u003e\"not_specified\"\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetIndex\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e index;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetIndex\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String index)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.index = index;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eint\u003c/code\u003e, we give each restaurant a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estring\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eindex so that we may set the initial value to a string key in our object constructor. Alphabetically, numbers come before letters. So anytime we add a brand new restaurant to our list, it will receive the default string index value. Then, when we re-order our restaurants with our new drag-and-drop feature, we will overwrite this string index with a numerical index. So, any ordered restaurants will come in their numerical order, and new restaurants we add will automatically be added to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eend\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the list.\u003c/p\u003e\r\n\u003cp\u003eNext, let's add a new string to our Constants class so that we can reference the \"index\" key of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects when we go to sort them in our Query:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_QUERY_INDEX = \u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eOrdering By Index\u003c/h3\u003e\r\n\u003cp\u003eNext, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorderByChild()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to instruct the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects by index rather than by the order in which they appear in the database. To do this, we will need to create a Query object using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(the FirebaseArrayAdapter accepts either a DatabaseReference or a Query). We will then pass this query into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor in place of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantsListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mRestaurantReference;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseRestaurantListAdapter mFirebaseAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ItemTouchHelper mItemTouchHelper;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        setUpFirebaseAdapter();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUpFirebaseAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        Query query = FirebaseDatabase.getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid)\r\n                .orderByChild(Constants.FIREBASE_QUERY_INDEX);\u003cbr\u003e\u003cbr\u003e        FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                new FirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(query, Restaurant.class)\u003cbr\u003e                        .build();\r\n\r\n        mFirebaseAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseRestaurantListAdapter(options,\r\n                query, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eTracking Restaurant Indexes\u003c/h3\u003e\r\n\u003cp\u003eHow can we tell our database to update the index of each restaurant child every time a user drags and drops an item? Instead of trying to save each item’s index every time a user moves an item, let’s wait until a user is done with the SavedRestaurantListActivity and navigates away.\u003c/p\u003e\r\n\u003cp\u003eEach time a user leaves an activity, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is automatically called. We'll override this method, and tell our app to trigger our adapter's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estopListening()\u003c/code\u003emethod. Then, we will override\u003cspan\u003e \u003ccode\u003estopListening \u003c/code\u003e\u003c/span\u003eand include code to save the current order to Firebase.\u003c/p\u003e\r\n\u003cp\u003eWe already added the code to call\u003cspan\u003e \u003ccode\u003estopListening\u003c/code\u003e\u003c/span\u003e\u003ccode\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our SavedRestaurantListActivity, but make sure to trigger this method in all future projects:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity,java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mFirebaseAdapter.\u003ccode\u003estopListening\u003c/code\u003e(); } } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore we can properly store the index of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitems in our adapter's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecleanup()\u003c/code\u003emethod, we will first need to have access to the ArrayList of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects at the given reference. Let's start by adding a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto grab out the Restaurants and save them to an ArrayList in our Adapter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ChildEventListener mChildEventListener;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter(FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options, Query ref, OnStartDragListener onStartDragListener, Context context){\u003cbr\u003e        super(options);\u003c/span\u003e\u003c/span\u003e\r\n        mRef = ref.getRef();\r\n        mOnStartDragListener = onStartDragListener;\r\n        mContext = context;\r\n\r\n        mChildEventListener = mRef.addChildEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ChildEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildAdded\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot, String s)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants.add(dataSnapshot.getValue(Restaurant.class));\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot, String s)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildRemoved\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildMoved\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot, String s)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n        });\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach time the adapter is constructed, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonChildAdded()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be triggered for each item in the given reference.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to add each returned item to the mRestaurants ArrayList so that we can access the list of restaurants throughout our adapter.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo make sure that our mRestaurants ArrayList reflects the changes in the underlying data being tracked within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e, we need to update its' contents in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverrides:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e fromPosition, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e toPosition)\u003c/span\u003e \u003c/span\u003e{\r\n        Collections.swap(mRestaurants, fromPosition, toPosition);\r\n        notifyItemMoved(fromPosition, toPosition);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemDismiss\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        mRestaurants.remove(position);\r\n        getRef(position).removeValue();\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCollections.swap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto update the order of our mRestaurants ArrayList items passing in the ArrayList of items and the starting and ending positions.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our ArrayList of items in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto remove the item from mRestaurants at the given position.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOur mRestuarants ArrayList and the underlying data in the FirebaseRecyclerAdapter should now always be in sync.\u003c/p\u003e\r\n\u003cp\u003eNext, let's write a new method that we will eventually trigger in our adapter's\u003cspan\u003e \u003ccode\u003estopListening\u003c/code\u003e\u003c/span\u003e\u003ccode\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This new method will be in charge of re-assigning the \"index\" property for each restaurant object in our array list and then save it to Firebase:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetIndexInFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (Restaurant restaurant : mRestaurants) {\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e index = mRestaurants.indexOf(restaurant);\r\n            DatabaseReference ref = getRef(index);\r\n            restaurant.setIndex(Integer.toString(index));\r\n            ref.setValue(restaurant);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe can grab the index of each restaurant in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eArrayList by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList.indexOf()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing in the object which we would like to know the index. We will use this index as the index in Firebase.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe grab the reference of each item using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRef()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing in the position of the item in the ArrayList.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetIndex()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we added to our Restaurant model to update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex \u003c/code\u003eproperty for each item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe can finally use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod passing the Restaurant object whose index property we just updated.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, let's override that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estopListening()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our adapter in order to remove the event listener. We will then call our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetIndexInFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to update the index property for each Restaurant in the \u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e() method in order to enable a concurrent live update of the Restaurants list on the Firebase Databse. If you have the \u003cem\u003e\u003cstrong\u003eData\u003c/strong\u003e\u003c/em\u003e tab from your firebase Dashboard open, you'll see the restaurant list objects being updated live as you drag and drop the restaurant viewholder from your device or emulator.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\u003cbr\u003e    @Override\u003cbr\u003e    public boolean onItemMove(int fromPosition, int toPosition){\u003cbr\u003e        Collections.swap(mRestaurants, fromPosition, toPosition);\u003cbr\u003e        notifyItemMoved(fromPosition, toPosition);\u003cbr\u003e        setIndexInForebase();\u003cbr\u003e        return false;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003ccode\u003estopListening\u003c/code\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.\u003ccode\u003estopListening\u003c/code\u003e(); mRef.removeEventListener(mChildEventListener); } } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run our app, drag and drop items, navigate away and the return to the SavedRestaurantListActivity you will see that the order of the items now persists. However, if we click an item to go to the DetailActivity, the app will bring us to the wrong page. This is because our click listener is inside of the view holder, but the view holder doesn't have access to the array list of restaurants in our adapter. Let's remove the click listener in our ViewHolder...\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_WIDTH = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_HEIGHT = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n\r\n    View mView;\r\n    Context mContext;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ImageView mRestaurantImageView;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n        mView = itemView;\r\n        mContext = itemView.getContext();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        mRestaurantImageView = (ImageView) mView.findViewById(R.id.restaurantImageView);\r\n        TextView nameTextView = (TextView) mView.findViewById(R.id.restaurantNameTextView);\r\n        TextView categoryTextView = (TextView) mView.findViewById(R.id.categoryTextView);\r\n        TextView ratingTextView = (TextView) mView.findViewById(R.id.ratingTextView);\r\n\r\n        Picasso.get().load(restaurant.getImageUrl()).into(mRestaurantImageView);\r\n\r\n        nameTextView.setText(restaurant.getName());\r\n        categoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n        ratingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e..and instead, add a click listener to our adapter in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        viewHolder.bindRestaurant(model);\r\n\r\n        viewHolder.mRestaurantImageView.setOnTouchListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnTouchListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            public boolean onTouch(View v, MotionEvent event) {\u003cbr\u003e                if (event.getActionMasked() == MotionEvent.ACTION_DOWN){\u003cbr\u003e                    mOnStartDragListener.onStartDrag(viewHolder);\u003cbr\u003e                }\u003cbr\u003e                return false;\r\n            }\r\n\r\n        });\r\n\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, viewHolder.getAdapterPosition());\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e, Parcels.wrap(mRestaurants));\r\n                mContext.startActivity(intent);\r\n            }\r\n        });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo get the current position of the click item, we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetAdapterPosition()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the ViewHolder passed into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like we did previously in the ViewHolder, we create an intent, pass in the position and the ArrayList of Restaurants and then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod using the context passed in to our constructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNotice that the position information we're including with our intent when we say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintent.putExtra(\"position\", viewHolder.getAdapterPosition());\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an integer. Make sure the RestaurantDetailActivity is prepared to gather a position of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003einteger\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata type when it receives this intent:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e startingPosition = getIntent().getIntExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n       ...\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we launch our application we should be able to drag and drop items, navigate away from \"Saved Restaurants\" and see it maintains the order we've left it in! Additionally, if we delete a restaurant from our list, it should actually be removed from that user's list of \"Saved Restaurants\" in Firebase. Perfect!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/21_persisting_interaction\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"monday-gestures-and-animations-continuation"},{"id":1030,"title":"Monday:Animations","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003ch1\u003eAnimations\u003c/h1\u003e\r\n\u003cp\u003eNow that our list of saved restaurants is responding correctly to drag and drop and swipe events, let's add some additional finishing touches. In this lesson we will explore adding subtle animations that appear when a user interacts with a component using gestures. This will make our application feel more interactive, providing a more engaging experience for users. As Google's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://material.google.com/motion/choreography.html\"\u003eMaterial Design Specifications\u003c/a\u003e\u003cspan\u003e \u003c/span\u003estate,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Motion design can effectively guide the user's attention in ways that both inform and delight...\"\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThere are two primary ways to create animations: With Java code, and with XML. This lesson will walk through implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanimations in each of these two ways. Afterwards, we'll discuss the pros and cons of each approach.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, note that this lesson contains\u003cspan\u003e \u003c/span\u003e\u003cem\u003etwo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eexample MyRestaurants repositories. One with programmatic animations, and another with XML animations.\u003c/p\u003e\r\n\u003ch2\u003eAnimation Setup\u003c/h2\u003e\r\n\u003cp\u003eBoth methods to create animations require the same general setup:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface to define methods that will be called when an item is selected for a drag-and-drop gesture.\u003c/li\u003e\r\n\u003cli\u003eThis interface needs to be implemented in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantViewHolder\u003c/code\u003e, where we will override its methods.\u003c/li\u003e\r\n\u003cli\u003eWe'll need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. This will listen for users selecting items, and inform the view holder when a gesture requiring animation is being performed.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eItemTouchHelperViewHolder\u003c/h3\u003e\r\n\u003cp\u003eFirst, let's create the required\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package and define its methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eItemTouchHelperViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill handle updating the appearance of a selected item while the user is dragging-and-dropping it.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemClear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill remove the 'selected' state (and therefore the corresponding changes in appearance) from an item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe'll implement this interface in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantViewHolder\u003c/code\u003e, and override its two methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n  ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"Animation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"onItemSelected\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-comment\"\u003e// we will add animations here\u003c/span\u003e\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"Animation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"onItemClear\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-comment\"\u003e// we will add animations here\u003c/span\u003e\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor now, each method will only contain log statements. After we complete the next step and update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe'll use these logcat statements to confirm our methods are being triggered correctly. When they are, we'll replace them with code to create animations in our user interface.\u003c/p\u003e\r\n\u003ch3\u003eUpdating SimpleItemTouchHelperCallback to Handle Animating\u003c/h3\u003e\r\n\u003cp\u003eNext, we must update our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto handle the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemCleared()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etriggers. We'll add the following methods. The embedded comments below contain an explanation of each:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSimpleItemTouchHelperCallback.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSimpleItemTouchHelperCallback\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelper\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eCallback\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e//   The method below triggers the callback in ItemTouchHelperViewHolder which is then sent to our\u003c/span\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e//  RestaurantListViewHolder where we will later add animations.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSelectedChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e actionState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n          \u003cspan class=\"hljs-comment\"\u003e//  This conditional ensures we only change appearance of active items:\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (actionState != ItemTouchHelper.ACTION_STATE_IDLE) {\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (viewHolder \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e ItemTouchHelperViewHolder) {\r\n\r\n                \u003cspan class=\"hljs-comment\"\u003e//  This tells the viewHolder that an item is being moved or dragged:\u003c/span\u003e\r\n\r\n                ItemTouchHelperViewHolder itemViewHolder = (ItemTouchHelperViewHolder) viewHolder;\r\n                itemViewHolder.onItemSelected();\r\n            }\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onSelectedChanged(viewHolder, actionState);\r\n    }\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e//  This triggers the callback in the ItemTouchHelperViewHolder which will be sent to our RestaurantListViewHolder.\u003c/span\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e//  Then, in the clearView override in RestaurantListViewHolder, we will remove the animations attached\u003c/span\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e//   to 'selected' items, since this item will no longer be actively selected.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclearView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.clearView(recyclerView, viewHolder);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (viewHolder \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e ItemTouchHelperViewHolder) {\r\n\r\n            \u003cspan class=\"hljs-comment\"\u003e//  Tells the view holder to return the item back to its normal appearance:\u003c/span\u003e\r\n\r\n            ItemTouchHelperViewHolder itemViewHolder = (ItemTouchHelperViewHolder) viewHolder;\r\n            itemViewHolder.onItemClear();\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we should now be able to run our app, and drag-and-drop list items from the \"Saved Restaurants\" area to ensure our log statements are being triggered correctly. If so, we're ready to add either Programmatic or XML animations.\u003c/p\u003e\r\n\u003ch2\u003eProgrammatic Animations\u003c/h2\u003e\r\n\u003cp\u003eFirst, we'll walk through the process of adding animations programmatically.\u003c/p\u003e\r\n\u003ch3\u003eRequired Reading\u003c/h3\u003e\r\n\u003cp\u003eAndroid provides a variety of APIs for applying animation to the user interface. The Properties Animation API is one such tool that allows us to easily alter properties of view elements over a given duration.\u003c/p\u003e\r\n\u003cp\u003eBefore we begin, read more about\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\"\u003eproperty animation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Android Developers Site and in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://android-developers.blogspot.com/2011/05/introducing-viewpropertyanimator.html\" target=\"_blank\"\u003ethis blog post\u003c/a\u003eregarding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPropertyAnimator\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eSavedRestaurantListActivity Animations\u003c/h3\u003e\r\n\u003cp\u003eLet’s utilize property animations on the restaurant list items users are able to drag and drop in their \"Saved Restaurants\" list. We'll add the following code to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n  ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        itemView.animate()\r\n                .alpha(\u003cspan class=\"hljs-number\"\u003e0.7f\u003c/span\u003e)\r\n                .scaleX(\u003cspan class=\"hljs-number\"\u003e0.9f\u003c/span\u003e)\r\n                .scaleY(\u003cspan class=\"hljs-number\"\u003e0.9f\u003c/span\u003e)\r\n                .setDuration(\u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        itemView.animate()\r\n                .alpha(\u003cspan class=\"hljs-number\"\u003e1f\u003c/span\u003e)\r\n                .scaleX(\u003cspan class=\"hljs-number\"\u003e1f\u003c/span\u003e)\r\n                .scaleY(\u003cspan class=\"hljs-number\"\u003e1f\u003c/span\u003e);\r\n    }\r\n\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.animate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemView\u003c/code\u003e, and chain the following methods to create our custom animation:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.scaleX()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the horizontal scale of the item. It takes a float value as an argument.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.scaleY()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the vertical scale of the item. It also takes a float value as an argument\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.alpha()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealters the alpha level of an object (its transparency and/or opaqueness, essentially).\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.setDuration()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edetermines how long this animation will last. It takes a millisecond value as an argument.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, if we launch the application in our emulator we should see that the process of dragging-and-dropping items in our \"Saved Restaurants\" list is now animated!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.2_java_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with Programmatic Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eXML Property Animations\u003c/h2\u003e\r\n\u003cp\u003eNext, let's walk through the process of creating the same animations using XML.\u003c/p\u003e\r\n\u003ch3\u003eRequired Reading\u003c/h3\u003e\r\n\u003cp\u003eBefore we begin exploring this, read the Android Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/topics/graphics/prop-animation.html#declaring-xml\" target=\"_blank\"\u003eDeclaring Animations in XML\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch3\u003eAnimator Resource Directory\u003c/h3\u003e\r\n\u003cp\u003eXML animations need to reside in a special directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e. Right-click on your existing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003edirectory, and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Android resource directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. In the resulting window name the new directory\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand set the 'resource type' option to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/1oborxzu3iapaxe/creating-animator-directory.png\" alt=\"creating-animator-directory\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eXML Animation Resources\u003c/h3\u003e\r\n\u003cp\u003eWithin this directory we'll create two new XML files:\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_on.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_off.xml\u003c/em\u003e. The first will define the visual appearance of an element when it's currently being dragged by a user, and the latter will define its appearance when it's no longer being dragged. As users perform gestures to interact with the individual restaurant list items, the drag_scale_on, or drag_scale_off appearances will be toggled.\u003c/p\u003e\r\n\u003cp\u003eFirst, let's create\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_on.xml\u003c/em\u003e. Create this file by right-clicking on our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eresource directory, and selecting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Animator resource file\u003c/em\u003e. We'll populate this layout with the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eanimator/drag_scale_on.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleX\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.9f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleY\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.9f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alpha\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.7f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, you may notice some familiar terms:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escaleX\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escaleY\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealpha\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eduration\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall refer to the same values as they did in the programmatic approach; here we're simply setting these values with XML instead. Additionally, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;set\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags refer to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimatorSet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which is responsible for playing animations.\u003c/p\u003e\r\n\u003cp\u003eNext, let's make sure we include XML for when the animation is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoff\u003c/em\u003e. Create another XML file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_off.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand populate it with the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eanimator/drag_scale_off.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleX\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleY\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alpha\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, it contains all the same elements and XML selectors as\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_on.xml\u003c/em\u003e, but with different values. This defines the appearance of the item when it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eno longer\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebeing selected.\u003c/p\u003e\r\n\u003ch3\u003eInflating XML Animations\u003c/h3\u003e\r\n\u003cp\u003eNow that we've created our XML animations, we'll need to inflate them in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. This is similar to the manner we inflate other types of XML layouts, but we'll use a special\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimatorSet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject responsible for handling the corresonding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;set\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in our XML animations.\u003c/p\u003e\r\n\u003cp\u003eNotice that these are the same methods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface defined in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSetup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection at the beginning of this lesson, and the same methods we used in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProgrammatic Animations\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eMake sure any code leftover from the programmatic approach has been commented out or removed from these methods before continuing.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(mContext,\r\n                R.animator.drag_scale_on);\r\n        set.setTarget(itemView);\r\n        set.start();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(mContext,\r\n                R.animator.drag_scale_off);\r\n        set.setTarget(itemView);\r\n        set.start();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimatorSet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to inflate and load the animations we defined in our corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;set\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in our XML. Then, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetTarget()\u003c/code\u003e, passing in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eitemView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument to instruct which element these animations should be applied to. Then, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.start()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto begin the specified animations.\u003c/p\u003e\r\n\u003cp\u003eNow, if we launch our application again, we should see the same animations when we drag-and-drop individual restaurant list items in the \"Saved Restaurants\" area of our application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.1_xml_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with XML Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eProgrammatic vs. XML\u003c/h2\u003e\r\n\u003cp\u003eAs you can see, these are two slightly different approaches that accomplish the same thing. How do you know which to use in a given project? Let's briefly review the pros and cons of each approach:\u003c/p\u003e\r\n\u003ch3\u003eXML\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003ePros\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMore easily re-usable, since you can simply inflate the XML file in multiple places throughout the application.\u003c/li\u003e\r\n\u003cli\u003eEasier to read; especially when multiple sets of animations are involved.\u003c/li\u003e\r\n\u003cli\u003eProvides clearer separation between an object and its behavior/appearance.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eCons\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMore verbose; ends up being more lines than adding animations programmatically.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eProgrammatic\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003ePros\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLess code overall than creating animations in XML.\u003c/li\u003e\r\n\u003cli\u003eFewer overall files in a project.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eCons\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCan be more difficult to decipher, especially with multiple concurrent animations, or many properties.\u003c/li\u003e\r\n\u003cli\u003eCannot be re-used as easily throughout an application.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAgain, either of these two approaches are acceptable. When adding animations to an application, consider the pros and cons listed above, and decide which method works best for your specific animation.\u003c/p\u003e\r\n\u003cp\u003eMoving forward, be aware that the MyRestaurants example repository will include the XML animations. You are welcome to use either approach in your own MyRestaurants app.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.2_java_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with Programmatic Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.1_xml_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with XML Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\"\u003eProperty Animation Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://android-developers.blogspot.com/2011/05/introducing-viewpropertyanimator.html\" target=\"_blank\"\u003eBlog post on ViewPropertyAnimator\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003eGoogle Material Specification for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://material.google.com/motion/choreography.html\" target=\"_blank\"\u003eChoreography\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(ie: Moving transitions and animations)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"monday-animations"},{"id":1031,"title":"Monday:MyRestaurants, Bells \u0026 Whistles","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003eMyRestaurants, Bells \u0026amp; Whistles\u003c/h2\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is an interface? What functionality do they offer?\u003c/li\u003e\r\n\u003cli\u003eHow does an interface differ from a class?\u003c/li\u003e\r\n\u003cli\u003eHow do we implement interfaces?\u003c/li\u003e\r\n\u003cli\u003eHow are gestures enabled or disabled?\u003c/li\u003e\r\n\u003cli\u003eHow do we use our user interface to indicate to a user what gestures are available?\u003c/li\u003e\r\n\u003cli\u003eHow is a touchscreen gesture processed? Which portion of the application is responsible? What other components are involved?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003cp\u003eFollow along with today's work together with the weekend homework to implement the drag and drop, swipe to delete, and animation functionality into our ongoing MyRestaurants project.\u003c/p\u003e\r\n\u003ch3\u003e\"Bells \u0026amp; Whistles\" App of Choice\u003c/h3\u003e\r\n\u003cp\u003eLet’s continue to explore animations and the various touch events recognized in Android. To do so, create an app of your choosing that responds to the following touch events. Each event should trigger a different property animation, including):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html\"\u003eDouble tap\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/design/patterns/swipe-views.html\"\u003eSwipe\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/reference/android/view/View.OnLongClickListener.html\"\u003eLongclick\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/training/gestures/scale.html#scale\"\u003ePinch to Zoom\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/reference/android/widget/Scroller.html#fling(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int)\"\u003eFling\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePotential project ideas could include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInteractive to-do list that allows you to order events based on priority, swipe or fling to delete, long-click to update, etc.\u003c/li\u003e\r\n\u003cli\u003eA\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Bop_It\"\u003eBop-It!\u003c/a\u003e-inspired application, or soundboard-style app that offers a variety of fun noises based on different gesture interactions.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eImplementing gesture capability into one of your favorite existing Android projects.\u003c/li\u003e\r\n\u003cli\u003eAnything else you and your partner may think of. Get creative!\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere are some additional resources to get you started:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://guides.codepath.com/android/Gestures-and-Touch-Events\"\u003eCode Path | Gestures and Touch Events\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.sitepoint.com/android-gestures-and-touch-mechanics/\"\u003eAndroid Gestures and Touch Mechanics\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/championswimmer/SimpleFingerGestures_Android_Library\"\u003eSimpleFingerGestures Library\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner are able to successfully implement each of the touch gestures listed above, give shake gestures a shot! To get you started, see the below is example that prints a log message when the phone is shaken:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSensorEventListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SensorManager mSensorManager;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Sensor mSensor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e lastUpdate = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e last_x, last_y, last_z;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e SHAKE_THRESHOLD = \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\r\n        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\r\n        mSensorManager.registerListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, mSensor, mSensorManager.SENSOR_DELAY_NORMAL);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSensorChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(SensorEvent event)\u003c/span\u003e \u003c/span\u003e{\r\n        Sensor sensor = event.sensor;\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\r\n            \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e x = event.values[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e];\r\n            \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e y = event.values[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\r\n            \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e z = event.values[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e curTime = System.currentTimeMillis();\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((curTime - lastUpdate) \u0026gt; \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e ) {\r\n                \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e diffTime = (curTime - lastUpdate);\r\n                lastUpdate = curTime;\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e speed = Math.abs(x + y + z - last_x - last_y - last_z)/diffTime * \u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e;\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(speed \u0026gt; SHAKE_THRESHOLD) {\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"SensorEventListener\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"shaking\"\u003c/span\u003e);\r\n\r\n                last_x = x;\r\n                last_y = y;\r\n                last_z = z;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAccuracyChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Sensor sensor, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e accuracy)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application include functional gesture listeners?\u003c/li\u003e\r\n\u003cli\u003eIs it clear what gestures is required to interact with the application? Why or why not?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eWould you use this application? Why or why not?\u003c/li\u003e\r\n\u003cli\u003eWhat other features might you like to see in this app?\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"monday-myrestaurants-bells-and-whistles"},{"id":1032,"title":"Tuesday:Flexible UIs: Fragments","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eFlexible UIs: Fragments\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWhen developing good user experiences for Android apps, it is important to not only account for a variety of screen sizes but also screen orientations.\u003c/p\u003e\r\n\u003cp\u003eAt the moment our app looks fantastic in portrait, but not\u003cspan\u003e \u003c/span\u003e\u003cem\u003equite\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas nice when we change the orientation of the screen from portrait to landscape. However, to utilize our logic in multiple potential layouts (such as both portrait\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elandscape layouts) we'll need to refactor several of our activities into fragments.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we will refactor activities into more flexible and reusable fragments. Then, in upcoming lessons we will take advantage of this newfound flexibility by integrating separate layouts that will automatically display when users tilt their phone into landscape mode. After that, we'll include code that will allow our new fragments to communicate seamlessly.\u003c/p\u003e\r\n\u003cp\u003eThe end result will look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/qqbgpk89xm5l3qw/landscape-detail-layout.png\" alt=\"landscape-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's get started!\u003c/p\u003e\r\n\u003ch2\u003eCreating Fragments\u003c/h2\u003e\r\n\u003cp\u003eFirst, let's create two fragments to house the functionality from SavedRestaurantListActivity and RestaurantListActivity. Since these areas of our app will eventually have special landscape-orientation-specific layouts, refactoring these into fragments will allow us to insert it into both landscape\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eportrait-orientation layouts without creating unnecessarily redundant code.\u003c/p\u003e\r\n\u003ch3\u003eRestaurantListFragment\u003c/h3\u003e\r\n\u003cp\u003eLet’s start by creating a blank fragment called RestaurantListFragment. Right-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Fragment \u0026gt; Fragment (Blank)\u003c/em\u003e. Make sure to check the box labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate layout XML?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto generate the corresponding layout file, which we will use at the end of this lesson. Boxes for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude fragment factory methods?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003einclude interface callbacks?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emay be un-checked, as we will not use the boilerplate code they produce.\u003c/p\u003e\r\n\u003cp\u003eThis will create a new XML layout file, and a java file with the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Required empty public constructor\u003c/span\u003e\r\n    }\r\n\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Inflate the layout for this fragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRefactoring Activities into Fragments\u003c/h2\u003e\r\n\u003cp\u003eNow, we'll need to move the majority of code from RestaurantListActivity to our new RestaurantListFragment. We'll do this in several pieces, pausing to explain changes each time.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll declare our necessary member variables:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Required empty public constructor\u003c/span\u003e\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// Instructs fragment to include menu options:\u003c/span\u003e\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Inflate the layout for this fragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're defining our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSharedPreferences\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEditor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variables, and instructing the fragment to include and display the menu options inherited from its parent activity. This will allow us to eventually display search menu options within RestaurantListFragment.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll move our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod from RestaurantListActivity to RestaurantListFragment. Because the method will reside in a new location (and therefore a new context), slight changes will be necessary. These are indicated by comments in the code below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n              \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                getActivity().runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n                    \u003cspan class=\"hljs-comment\"\u003e// Line above states 'getActivity()' instead of previous 'RestaurantListActivity.this'\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-comment\"\u003e// because fragments do not have own context, and must inherit from corresponding activity.\u003c/span\u003e\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getActivity(), mRestaurants);\r\n                        \u003cspan class=\"hljs-comment\"\u003e// Line above states `getActivity()` instead of previous\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// 'getApplicationContext()' because fragments do not have own context,\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// must instead inherit it from corresponding activity.\u003c/span\u003e\r\n\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity());\r\n                        \u003cspan class=\"hljs-comment\"\u003e// Line above states 'new LinearLayoutManager(getActivity());' instead of previous\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// 'new LinearLayoutManager(RestaurantListActivity.this);' when method resided\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// in RestaurantListActivity because Fragments do not have context\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// and must instead inherit from corresponding activity.\u003c/span\u003e\r\n\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can no longer call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListActivity.this\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithin this method, simply because it is no longer located within RestaurantListActivity. Remember, fragments do not have their own context and must instead inherit it from their parent activity. We may instead access the parent context by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll add code to the existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhile activities instantiate their views directly in \u003ccode\u003eonCreate()\u003c/code\u003e, fragments require multiple steps to do this:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill only create the fragment itself. It is called before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand offers an opportunity to assign variables, get Intent extras, and anything else that doesn't involve the view hierarchy.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, and is used to assign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables, and handle any graphical initializations. It must be called to render the fragment's views, as detailed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eLifecycle of Android Fragments\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn the code above, we simply inflate and bind the corresponding layout, fetch the user's last-searched zip code (\u003ccode\u003emRecentAddress\u003c/code\u003e) from shared preferences, and, if it exists, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return restaurants in that area.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll need to move the existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods from RestaurantListActivity into our new RestaurantListFragment. These methods will require several changes to operate from their new location, as detailed below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.widget.SearchView;\r\n...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e// Method is now void, menu inflater is now passed in as argument:\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu, MenuInflater inflater)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// Call super to inherit method from parent:\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu, inflater);\r\n\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n    }\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need to move the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in RestaurantListActivity to RestaurantListFragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe completed RestaurantListFragment should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu, MenuInflater inflater)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu, inflater);\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                getActivity().runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getActivity(), mRestaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity());\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eRefactoring RestaurantListActivity\u003c/h3\u003e\r\n\u003cp\u003eIf you haven't done so already, we can remove all of the methods we've just placed in our new fragment from RestaurantListActivity. After doing so, it should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou won't be able to launch the application and see anything in our newly-refactored \"Find Restaurants\" area quite yet; we still need to create and update necessary layouts, which we'll do at the end of this lesson.\u003c/p\u003e\r\n\u003ch3\u003eSavedRestaurantListFragment\u003c/h3\u003e\r\n\u003cp\u003eNext we’ll create the fragment to house functionality currently residing in SavedRestaurantListActivity. We'll call this new fragment SavedRestaurantListFragment\u003c/p\u003e\r\n\u003cp\u003eAgain, make sure to select the option to create the corresponding XML layout. We'll use this layout at the end of the lesson. Boxes for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude fragment factory methods?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003einclude interface callbacks?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emay be un-checked, as we will not use the boilerplate code they produce.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll move all declarations and bindings from SavedRestaurantListActivity to our new SavedRestaurantListFragment, and implement\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseRestaurantListAdapter mFirebaseAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ItemTouchHelper mItemTouchHelper;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add code to the fragment's existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_saved_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n        setUpFirebaseAdapter();\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the fragment lifecycle method in which the fragment's view is instantiated. Therefore, we'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetupFirebaseAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere in order to act as the bridge between our back-end data and our front-end view.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll simply move the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetUpFirebaseAdapter()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003emethods from SavedRestaurantListActivity to SavedRestaurantListFragment. We only need to make three small changes to account for moving this method, as described in the comments below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseRestaurantListAdapter mFirebaseAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ItemTouchHelper mItemTouchHelper;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Required empty public constructor\u003c/span\u003e\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_saved_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n        setUpFirebaseAdapter();\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUpFirebaseAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        Query query = FirebaseDatabase.getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid)\r\n                .orderByChild(Constants.FIREBASE_QUERY_INDEX);\u003cbr\u003e\u003cbr\u003e        FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                new FirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(query, Restaurant.class)\u003cbr\u003e                        .build();\u003cbr\u003e\r\n        //  In line below, we change 4th parameter 'this' to 'getActivity()'\u003cbr\u003e        //  because fragments do not have own context:\u003cbr\u003e        mFirebaseAdapter = new FirebaseRestaurantListAdapter(options, query, this, getActivity());\r\n\r\n        \r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e//In line below, we change 'this' to 'getActivity()' because fragments do not have own context:\u003c/span\u003e\r\n        mRecyclerView.setLayoutManager(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity()));\r\n        mRecyclerView.setAdapter(mFirebaseAdapter);\r\n        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\u003cbr\u003e\r\n        ItemTouchHelper.Callback callback = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SimpleItemTouchHelperCallback(mFirebaseAdapter);\r\n        mItemTouchHelper = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ItemTouchHelper(callback);\r\n        mItemTouchHelper.attachToRecyclerView(mRecyclerView);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStartDrag\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder)\u003c/span\u003e \u003c/span\u003e{\r\n        mItemTouchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//method is now public\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mFirebaseAdapter.cleanup();\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eRefactoring SavedRestaurantListActivity\u003c/h3\u003e\r\n\u003cp\u003eNow that we've moved these methods into our new fragment, we may remove them from SavedRestaurantListActivity. After doing so, this file should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou won't be able to launch the application and see anything in our newly-refactored \"Find Restaurants\" area quite yet; we still need to create and update necessary layouts, which we'll do next.\u003c/p\u003e\r\n\u003ch2\u003eCreating \u0026amp; Refactoring Layouts\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom our list activity layouts and add them to the corresponding fragment layouts:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_saved_restaurant_list.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v7.widget.RecyclerView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/recyclerView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_restaurant_list.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v7.widget.RecyclerView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/recyclerView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we may add the fragments to our list activity layout. The updated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout should appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentRestaurantList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.RestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe’ll also need to create a new layout for our SavedRestaurantListActivity that specifically uses our new SavedRestaurantListFragment. We'll also add its corresponding SavedRestaurantListFragment to its layout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_saved_restaurant_list.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentRestaurantList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.SavedRestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll need to inflate this new layout in SavedRestaurantListActivity instead of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants \u003c/em\u003elayout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_saved_restaurant_list);\r\n        ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eObservers\u003c/h2\u003e\r\n\u003cp\u003eCurrently, we should be able to launch our application and everything should work fairly similarly. However, if we select \"Saved Restaurants\" you'll notice our restaurants aren't immediately loading! Yet, if we go back, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ere-\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eenter the \"Saved Restaurants\" area of our application, they suddenly show up! Thankfully, we can easily address this issue with something called an observer.\u003c/p\u003e\r\n\u003cp\u003eRecyclerViews have a dedicated observer called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.AdapterDataObserver.html#onChanged()\"\u003eAdapterDataObserver\u003c/a\u003e. These observers watch for changes, and notify our adapter when they occur. We can easily implement one with just a few lines of code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUpFirebaseAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mFirebaseAdapter = new FirebaseRestaurantListAdapter(options, query, this, getActivity());\u003cbr\u003e\r\n        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n        mRecyclerView.setLayoutManager(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity()));\r\n        mRecyclerView.setAdapter(mFirebaseAdapter);\r\n\r\n        mFirebaseAdapter.registerAdapterDataObserver(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RecyclerView.AdapterDataObserver() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemRangeInserted\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e positionStart, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemCount)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onItemRangeInserted(positionStart, itemCount);\r\n                mFirebaseAdapter.notifyDataSetChanged();\r\n            }\r\n        });\r\n        ...\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eregisterAdapterDataObserver()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFirebaseAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto begin the process of associating an observer. Then, we construct a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAdapterDataObserver\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and override its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemRangeInserted()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, which is automatically called whenever a new item is added to the adapter's range of data. We include the required line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper.onItemRangeInserted(positionStart, itemCount);\u003c/code\u003e, referring to any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemRangeInserted()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods of a parent class. Then, we can call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFirebaseAdapter.notifyDataSetChanged();\u003c/code\u003e, which will trigger our observer to notify our adapter of any new changes.\u003c/p\u003e\r\n\u003cp\u003eIf we run our app, everything should not only appear the same as it did before we made these changes, but our \"Saved Restaurants\" should load on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etry instead of having to exit and re-enter! These changes have laid the groundwork to implement multiple layouts based on device orientation, as we'll do in tomorrow's lessons. Great work!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/23_flexibleUI_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFragments do not have their own context and must instead inherit it from their parent activity. We may instead access the parent context by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhile activities instantiate their views directly in\u003ccode\u003eonCreate()\u003c/code\u003e, fragments require multiple steps to do this:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill only create the fragment itself. It is called before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand offers an opportunity to assign variables, get Intent extras, and anything else that doesn't involve the view hierarchy.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, and is used to assign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables, and handle any graphical initializations. It must be called to render the fragment's views. ,\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/23_flexibleUI_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eLifecycle of Android Fragments\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-flexible-uis-fragments"},{"id":1033,"title":"Tuesday:Flexible UI App of Choice (Three-Day Project)","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eFlexible UI App of Choice (Three-Day Project)\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou have the next three days to practice everything we've learned thus far, paying special attention to flexible UIs and alternative resources, in order to create yet another impressive, functional portfolio piece. Make use of this extended period of in-class time on a single application to make something you'll be proud to show off!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eTuesday\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDiscuss with your partner what gestures and animations you've implemented into your apps so far; how did it go?\u003c/li\u003e\r\n\u003cli\u003eWhat animations or gestures would you still like to try out?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eWednesday\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen does it make sense to refactor activities into fragments?\u003c/li\u003e\r\n\u003cli\u003eHow does context change when we refactor code from activities into fragments?\u003c/li\u003e\r\n\u003cli\u003eHow can fragments and activities communicate with one another?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003ch4\u003eTuesday\u003c/h4\u003e\r\n\u003cp\u003eFollow along with last night's homework in order to refactor several of our existing activities into the fragments required to later integrate both portrait and landscape-orientation layouts.\u003c/p\u003e\r\n\u003ch4\u003eWednesday\u003c/h4\u003e\r\n\u003cp\u003eFollow along with last night's homework to add alternative resources that will provide special layouts and functionality when the user's device is oriented in a landscape position.\u003c/p\u003e\r\n\u003ch3\u003eFlexible UI Project of Choice\u003c/h3\u003e\r\n\u003cp\u003eAs we near the end of our course, spend the next three days creating an in-depth and functional application to add to your growing portfolios. Take time to brainstorm something you'd be proud to show off to future employers.\u003c/p\u003e\r\n\u003cp\u003ePossible project ideas include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA journaling app (either a general journal, or specifically be a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.myfitnesspal.android\u0026amp;hl=en\"\u003ediet\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=net.daylio\u0026amp;hl=en\"\u003emood\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.bliss.phonegap\u0026amp;hl=en\"\u003egratitude\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ejournal).\u003c/li\u003e\r\n\u003cli\u003eA habit-tracker like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.oristats.habitbull\u0026amp;hl=en\"\u003eHabitBull\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eA budget tracker that allows you to manually enter expenses and see how much you spent in each category at the end of the month.\u003c/li\u003e\r\n\u003cli\u003eAnything else you and your partner can dream up!\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eMake sure your app includes the following features:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFlexible UIs and fragments. Moving forward, most code should exist in fragments (as seen in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-flexible-uis-fragments\" target=\"_blank\"\u003eFlexible UIs: Fragments\u003c/a\u003e).\u003c/li\u003e\r\n\u003cli\u003eAn easy-to-navigate UI for both portrait and landscape orientations.\u003c/li\u003e\r\n\u003cli\u003eSome sort of list view. When an individual item on the list is clicked, the user should see a detail view.\u003c/li\u003e\r\n\u003cli\u003eIs backed by Firebase.\u003c/li\u003e\r\n\u003cli\u003eIncludes gesture listeners.\u003c/li\u003e\r\n\u003cli\u003eIncludes alternate resources.\u003c/li\u003e\r\n\u003cli\u003eMakes use of animations throughout.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner are able to fulfill the requirements listed above, try spending time implementing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement an API, if applicable to your app idea.\u003c/li\u003e\r\n\u003cli\u003eIntegrate a visual library like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/bmarrdev/android-DecoView-charting\"\u003eDecoView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto chart or visualize whatever data you're collecting, tracking and/or displaying to users.\u003c/li\u003e\r\n\u003cli\u003eInclude user authentication.\u003c/li\u003e\r\n\u003cli\u003eAt the end of day three, publish your app to Google Play.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHas the project included alternative resources successfully?\u003c/li\u003e\r\n\u003cli\u003eIs at least one animation in use? Does it add to the user experience?\u003c/li\u003e\r\n\u003cli\u003eIs at least one gesture listener in use? Is it easy to tell what gesture the application expects?\u003c/li\u003e\r\n\u003cli\u003eDoes the layout change accordingly when the orientation of the screen is altered from portrait to landscape (and back again)?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"tuesday-flexible-ui-app-of-choice-three-day-project"},{"id":1058,"title":"Wednesday: White Board Interview Practice","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box","graded":true,"pointsPossible":12.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\r\n\u003cp\u003e\u003cspan\u003eTake time this morning and split into groups of 5. You will be practicing for white board interviews that will be touched on more during your project period. Pick one of you to take the mock white board interview, set a toy problem for them to go through, and at the end use the rubric below to grade and give feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"i519bb3452e8371f2e176b2c0482edc8c"},{"id":1034,"title":"Wednesday:Flexible UIs: Alternative Resources","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eFlexible UIs: Alternative Resources\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eIn Android, we can create alternative resources, such as layouts, and our device will automatically select the correct resource based on a built-in set of naming conventions.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAlternative resources\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003esupport different device configurations, including screen sizes and orientations.\u003c/p\u003e\r\n\u003cp\u003eAs we saw in the previous lesson, when a user visits our list activities while in landscape mode, we want to display the list of restaurants on the left and the detail view on the right, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/lgxkulkcginqyqw/fancy-new-layout.png\" alt=\"landscape-detail-layout-my-restaurants\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThankfully, we've already refactored the necessary activities into fragments so we can easily call in multiple fragments into a single activity. In this lesson, we'll create alternative resource layouts for our restaurant detail and \"Saved Restaurants\" areas of our application specially-formatted to display when the phone is in landscape orientation.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, read more about Alternative Resources in the Android Developer's Guides\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eCreating Alternative Resource Layout Files\u003c/h2\u003e\r\n\u003cp\u003eTo begin, we will need to create separate layout files for Android to use when the phone is in landscape mode. Just like creating an ordinary layout file, right click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003elayout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Layout resource file\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/eicbjl7debq52ge/creating-new-layout-resource.png\" alt=\"creating-new-layout-resource\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst we'll create an alternate landscape-orientation layout for our existing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout. When naming an alternative resource file,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ealways name the file exactly as the filename of the layout we will be replacing\u003c/strong\u003e. So, let's also name this new layout\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAvailable qualifiers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epanel on the left of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew Resource\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu, scroll down and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOrientation\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/spc89eyge8p12ev/orientation-alternative-resource.png\" alt=\"orientation-in-available-qualifiers-panel\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdd it to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eChosen qualifiers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby selecting it, and hitting the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u0026gt;\u0026gt;\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton, then select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLandscape\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eScreen orientation\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edropdown:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/as0vuwnaiw7jubz/landscape-orientation-option.png\" alt=\"landscape-orientation-in-layout\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis new layout will automatically be inflated when the phone's orientation changes to landscape! Follow this exact same process to make an alternative resource landscape-orientation layout for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_saved_restaurant_list\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etoo.\u003c/p\u003e\r\n\u003cp\u003eOnce done, the left-hand sidebar in Android should list two layouts under each layout name, like so:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/gjq3nhfyaijnpky/multiple-alternative-resource-files.png\" alt=\"multiple-alternative-resource-layout-files\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eWriting Alternative Resource XML Layouts\u003c/h2\u003e\r\n\u003ch3\u003eactivity_restaurants\u003c/h3\u003e\r\n\u003cp\u003eNow, let's add our restaurant list fragment and a placeholder for our detail fragment into our new landscape activity_restaurants layout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/LinearLayout1\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:showDividers\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"middle\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:baselineAligned\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentItemsList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.morngaschool.myrestaurants.ui.RestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2dp\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantDetailContainer\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement to add a vertical divider between our list and detail views, as we can see in the image at the top of this lesson.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe use something called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto act as a placeholder for our RestaurantDetailFragment. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eFrameLayout\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis used when blocking out an area on the screen to display a single item. It should hold only one child view.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhen the RestaurantDetailFragment is rendered (whether by the application rendering the first restaurant in the list by default, or the user selecting a restaurant) it will replace the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eactivity_saved_restaurant_list\u003c/h3\u003e\r\n\u003cp\u003eWe'll add the SavedRestaurantListFragment and a placeholder\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_ saved_restaurant_list\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout as well:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_saved_restaurant_list.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:showDividers\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"middle\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:baselineAligned\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentItemsList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.SavedRestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2dp\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantDetailContainer\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eChanging Layouts Based on Device Orientation\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to programmatically replace the temporary\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith a RestaurantDetailFragment when the user selects a restaurant; but\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhen the phone is in landscape mode. First, we'll do this in the \"Find Restaurants\" area of our application, and afterwards we'll add this functionality to the \"Saved Restaurants\" area.\u003c/p\u003e\r\n\u003ch3\u003eFind Restaurants\u003c/h3\u003e\r\n\u003cp\u003eTo do this, we will add a conditional to the RestaurantViewHolder (which is actually a subclass of the RestaurantListAdapter) that will create a new instance of the RestaurantDetailFragment when a particular restaurant is selected\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe device is currently in landscape-orientation:\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need a new member variable to represent the orientation of the device:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mOrientation;\r\n    ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll check for the orientation of the device in the RestaurantViewHolder's constructor, and create a fragment if it is in landscape:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n     \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n       \u003cspan class=\"hljs-comment\"\u003e// Determines the current orientation of the device:\u003c/span\u003e\r\n        mOrientation = itemView.getResources().getConfiguration().orientation;\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// Checks if the recorded orientation matches Android's landscape configuration.\u003c/span\u003e\r\n        \u003cspan class=\"hljs-comment\"\u003e// if so, we create a new DetailFragment to display in our special landscape layout:\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            createDetailFragment(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n        }\r\n       ...\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we determine the orientation and call a method named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateDetailFragment()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe device is in landscape orientation. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eargument will default to displaying the first restaurant's details when the list activity is first created.\u003c/p\u003e\r\n\u003cp\u003eLet's create this method now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e// Takes position of restaurant in list as parameter:\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Creates new RestaurantDetailFragment with the given position:\u003c/span\u003e\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Gathers necessary components to replace the FrameLayout in the layout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        \u003cspan class=\"hljs-comment\"\u003e//  Replaces the FrameLayout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Commits these changes:\u003c/span\u003e\r\n        ft.commit();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call a built-in Android interface called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"http://developer.android.com/reference/android/app/FragmentManager.html\"\u003eFragmentManager\u003c/a\u003e\u003c/strong\u003e, which is responsible for interacting with Fragment objects. We then call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebeginTransaction()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto open up the capability to make changes to this activity, as described in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/FragmentManager.html#beginTransaction()\"\u003emethod's documentation\u003c/a\u003e. Finally, we instruct Android to replace the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our layout (which we gave the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurantDetailContainer\u003c/code\u003e) with a new RestaurantDetailFragment, and commit these changes.\u003c/p\u003e\r\n\u003cp\u003eThis will eventually result in a new RestaurantDetailFragment being rendered on the right-side of our layout:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/4uo8c1exu7uxoh9/restaurantdetailfragment.png\" alt=\"restaurantdetailfragment\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, the way we're currently calling the method would only display the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant's details when the fragment first loads. Let's also ensure users are able to select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant from the list and see its details:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            ...\r\n            itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n\r\n        ...\r\n\r\n        \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-comment\"\u003e// Determines the position of the restaurant clicked:\u003c/span\u003e\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n           \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                createDetailFragment(itemPosition);\r\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                mContext.startActivity(intent);\r\n            }\r\n        }\r\n   ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, when the user clicks on a restaurant from the list, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetLayoutPosition()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto determine\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhich\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant was selected. We check the orientation of the device again. If it's in landscape we create a new RestaurantDetailFragment by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateDetailFragment()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand specifying which restaurant's details to display with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThis means that the page will always default to showing the details of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant in the list; but as soon as another restaurant is selected, it will display their details instead.\u003c/p\u003e\r\n\u003cp\u003eAs you can see above, we're also including the position and list of restaurants in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e, using keys from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. Let's add these key values to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003eclass now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String EXTRA_KEY_POSITION = \u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String EXTRA_KEY_RESTAURANTS = \u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that the RestaurantDetailFragment must be able to quickly switch between multiple restaurants' details in our new orientation-mode, we must pass it multiple arguments. Instead of handing it a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingle\u003c/em\u003erestaurant, we'll need to provide it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurants, and the specific position of the one we currently want to display.\u003c/p\u003e\r\n\u003cp\u003eLet's make these changes now. First, we'll declare\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e, and provide them as parameters to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Within the method, we'll bundle our new arguments:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n   \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mPosition;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e RestaurantDetailFragment \u003cspan class=\"hljs-title\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ArrayList\u0026lt;Restaurant\u0026gt; restaurants, Integer position)\u003c/span\u003e \u003c/span\u003e{\r\n        RestaurantDetailFragment restaurantDetailFragment = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantDetailFragment();\r\n        Bundle args = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bundle();\r\n\r\n        args.putParcelable(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(restaurants));\r\n        args.putInt(Constants.EXTRA_KEY_POSITION, position);\r\n\r\n        restaurantDetailFragment.setArguments(args);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e restaurantDetailFragment;\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need to change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. When our fragment is created, it will need access to the parameters we've provided:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        mRestaurants = Parcels.unwrap(getArguments().getParcelable(Constants.EXTRA_KEY_RESTAURANTS));\r\n        mPosition = getArguments().getInt(Constants.EXTRA_KEY_POSITION);\r\n        mRestaurant = mRestaurants.get(mPosition);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we retrieve the parceled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the parameters we passed into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby utilizing the key in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we retrieve the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable, which represents the specific position of the restaurant we'd like to display.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe get the specific restaurant at the position indicated, and define it as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurant\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis then used later on in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand when we assign our click listeners. We don't need to make any further changes to that logic.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe just need to make sure both parameters for new RestaurantDetailFragments are included when we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our RestaurantPagerAdapter, too:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantPagerAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Fragment \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e RestaurantDetailFragment.newInstance(mRestaurants, position);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run our app, navigate to the RestaurantListActivity and then change the layout to landscape, we should now see that it displays both the RestaurantListFragment and the RestaurantDetailFragment. Let's make sure our app behaves the same way when we navigate to the SavedRestaurantListActivity, too.\u003c/p\u003e\r\n\u003ch3\u003eSaved Restaurants\u003c/h3\u003e\r\n\u003cp\u003eThis process will be similar to what we just did, but rather than adding these changes to the ViewHolder, we will add it to our adapter since that is where we have access to our ArrayList of restaurants.\u003c/p\u003e\r\n\u003cp\u003eLet's start by adding the orientation member variable:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mOrientation;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we will set the orientation. If the phone is currently in landscape mode, we will create a detail fragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        viewHolder.bindRestaurant(model);\r\n\r\n        mOrientation = viewHolder.itemView.getResources().getConfiguration().orientation;\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            createDetailFragment(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n        }\r\n\r\n        viewHolder.mRestaurantImageView.setOnTouchListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnTouchListener() {\r\n            ...\r\n        });\r\n\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n           ...\r\n        });\r\n\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Creates new RestaurantDetailFragment with the given position:\u003c/span\u003e\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Gathers necessary components to replace the FrameLayout in the layout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        \u003cspan class=\"hljs-comment\"\u003e//  Replaces the FrameLayout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Commits these changes:\u003c/span\u003e\r\n        ft.commit();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, we need to update our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eitemView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclick listener:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = viewHolder.getAdapterPosition();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    createDetailFragment(itemPosition);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    mContext.startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eMore Alternative Layouts\u003c/h2\u003e\r\n\u003cp\u003eFinally, let’s also add alternative layout files for our\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item_drag\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_restaurant_detail\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eIn these list item layouts, we will change the layout so that it better displays in a narrower column when the phone is in landscape. Follow the same process we did earlier, and add\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOrientation landscape\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas a qualifier to both:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item_drag.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/dragIcon\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bottom|left\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_reorder_white_24dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"14dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"gone\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"14dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"gone\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe set the visibility for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eratingTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto \"gone\" to avoid crowding the smaller list item area we have in landscape mode. We don't remove it entirely to avoid errors in our ViewHolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAnd finally, the alternate layout for our restaurant detail fragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_restaurant_detail.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"io.github.vinge1718.restaurant.ui.RestaurantDetailFragment\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"View on Yelp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/websiteTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_exit_to_app_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"12sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"(503) 223-1282\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/phoneTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_local_phone_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"12sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"123 SW Best Ever Ave. Portland, Oregon, 97222\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_map_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/addressTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"12sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"5\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryDark\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Brunch, American\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/cuisineTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorSecondaryText\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4.5/5\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"6\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Save Restaurant\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/saveRestaurantButton\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s run our app and change the orientation of the phone using the arrows on the side of the emulator. We should now see the new layout we created appears automatically!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/24_Alternative_Resources\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eAlternative Resources\u003c/strong\u003e: Resources that Android can choose from based on different device configurations such as screen sizes or orientations.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen naming an alternative resource file, always name the file exactly as the filename of the layout we will be replacing.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/24_Alternative_Resources\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources\"\u003eAlternative Resources in the Android Developer's Guides\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"wednesday-flexible-uis-alternative-resources"},{"id":1035,"title":"Wednesday:Communicating Between Fragments \u0026 Activities","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eCommunicating Between Fragments \u0026amp; Activities\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eYou might have noticed that when we run the MyRestaurants app and change the orientation of the screen back and forth, our list activities restart each time; if we're looking at a restaurant's details, then rotate the device, it takes us back to the main list!\u003c/p\u003e\r\n\u003cp\u003eOn an Android device, every time the orientation configuration changes the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is automatically called, thus restarting the current activity. Let's make sure our users can continue to view the same content seamlessly while transitioning between landscape and portrait orientations.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we will create additional pathways of communication between our RestaurantListFragment and RestaurantListActivity by implementing a custom interface. This will allow our application to \"remember\" which restaurant we were viewing, and continue displaying the same content no matter how many times the user twists and turns their device.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Because this process involves refactoring multiple areas throughout the application, you will likely receive errors until\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esteps depicted here are complete. This is completely normal.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eIf you haven't already in previous lessons, take time to read the Android documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/fragments/communicating.html\"\u003eDefining an Interface\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eDefining Custom Interfaces\u003c/h2\u003e\r\n\u003cp\u003eTo start, let’s define an interface in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called OnRestaurantSelectedListener, and place the following method inside:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eOnRestaurantSelectedListener.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eImplementing Android Interfaces\u003c/h2\u003e\r\n\u003cp\u003eWe will use this interface to listen for the position of the currently-selected restaurant and the list of all restaurants from Yelp. Let's start by implementing our new interface and declaring our new\u003ccode\u003emPosition\u003c/code\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Integer mPosition;\r\n    ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll override our interface's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This method will be responsible for updating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the list of all restaurants, and position in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003eof the currently-selected restaurant.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mPosition = position;\r\n        mRestaurants = restaurants;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUpdating ViewHolders\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to update our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto actively listen for the position of the currently-selected restaurant in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof all restaurants. To do this, we'll add the OnRestaurantSelectedListener to our RestaurantListAdapter constructor, and pass it to any new ViewHolders we create:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_WIDTH = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_HEIGHT = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnRestaurantSelectedListener mOnRestaurantSelectedListener;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, OnRestaurantSelectedListener restaurantSelectedListener)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n        mOnRestaurantSelectedListener = restaurantSelectedListener;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e RestaurantListAdapter.\u003cspan class=\"hljs-function\"\u003eRestaurantViewHolder \u003cspan class=\"hljs-title\"\u003eonCreateViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ViewGroup parent, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e viewType)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.restaurant_list_item, parent, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        RestaurantViewHolder viewHolder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantViewHolder(view, mRestaurants, mOnRestaurantSelectedListener);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e viewHolder;\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUpdating RestaurantListFragment\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll update our list fragment to pass the listener interface into the RestaurantListAdapter. In order to allow fragments and activities to communicate we need to capture an instance of our interface and cast it into the context of the activities we need to communicate with.\u003c/p\u003e\r\n\u003cp\u003eThankfully, we can do this in something called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAttach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Similar to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods we've previously utilized,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAttach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis part of a fragment's built-in lifecycle and is always automatically called before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, as detailed in the Android Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eFragment Lifecycles\u003c/a\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnRestaurantSelectedListener mOnRestaurantSelectedListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAttach\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onAttach(context);\r\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n            mOnRestaurantSelectedListener = (OnRestaurantSelectedListener) context;\r\n        } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (ClassCastException e) {\r\n            \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ClassCastException(context.toString() + e.getMessage());\r\n        }\r\n    }\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n               getActivity().runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getActivity(), mRestaurants, mOnRestaurantSelectedListener);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        ...\r\n                    }\r\n                });\r\n            }\r\n        ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eInvoking Listeners\u003c/h2\u003e\r\n\u003cp\u003eNext we need to invoke our interface method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen a specific restaurant is selected:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mOrientation;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnRestaurantSelectedListener mRestaurantSelectedListener;\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, OnRestaurantSelectedListener restaurantSelectedListener)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n\r\n            mContext = itemView.getContext();\r\n            mOrientation = itemView.getResources().getConfiguration().orientation;\r\n            mRestaurants = restaurants;\r\n            mRestaurantSelectedListener = restaurantSelectedListener;\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE){\r\n                createDetailFragment(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n            }\r\n            itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n        mRestaurantSelectedListener.onRestaurantSelected(itemPosition, mRestaurants);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            createDetailFragment(itemPosition);\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n        Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n        intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n        intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n        mContext.startActivity(intent);\r\n         ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we save the OnRestaurantClickListener that was passed into the view holder constructor as a member variable.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we trigger our OnRestaurantSelectedListener interface by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing the position and restaurants\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese variables will now be available in any activities that implement this interface!\u003c/p\u003e\r\n\u003ch2\u003eUpdating Activities\u003c/h2\u003e\r\n\u003cp\u003eFinally, we just need to tell our activities what to\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the data passed through our listener interface.\u003c/p\u003e\r\n\u003cp\u003eBefore an activity is destroyed, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonSaveInstanceState()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is called. Inside of this method we want to save the existing position and restaurants\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eif they exist. Then, when the activity is recreated, we can pull out these variables in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esavedInstanceState\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebundle that is passed in to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Integer mPosition;\r\n    ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (savedInstanceState != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n                mPosition = savedInstanceState.getInt(Constants.EXTRA_KEY_POSITION);\r\n                mRestaurants = Parcels.unwrap(savedInstanceState.getParcelable(Constants.EXTRA_KEY_RESTAURANTS));\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, mPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    startActivity(intent);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n     \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSaveInstanceState\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle outState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onSaveInstanceState(outState);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            outState.putInt(Constants.EXTRA_KEY_POSITION, mPosition);\r\n            outState.putParcelable(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n        }\r\n\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mPosition = position;\r\n        mRestaurants = restaurants;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we just need to make sure that our RestaurantDetailActivity is pulling out the correct intent extras:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e   ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurant_detail);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mRestaurants = Parcels.unwrap(getIntent().getParcelableExtra(Constants.EXTRA_KEY_RESTAURANTS));\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e startingPosition = getIntent().getIntExtra(Constants.EXTRA_KEY_POSITION, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n\r\n        adapterViewPager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantPagerAdapter(getSupportFragmentManager(), mRestaurants);\r\n        mViewPager.setAdapter(adapterViewPager);\r\n        mViewPager.setCurrentItem(startingPosition);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are now finished with the OnRestaurantSelectedListener implementation. Let’s run our app, rotate the device to activate landscape mode, Visit \"Find Restaurants\", select a restaurant from the list view...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/wp9yj22a37mm6cr/landscape-detail-view.png\" alt=\"detail-view-landscape\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...And then rotate the device back to portrait mode. Our app should bring us to the (portrait) detail view for the restaurant that we selected!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0deo7mubmxgr0cb/portrait-detail-view.png\" alt=\"detail-view-portrait\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/25_Communicating_Between_Fragments_\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/25_Communicating_Between_Fragments_\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/fragments/communicating.html\"\u003eDefining an Interface\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eAndroid Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eFragment Lifecycles\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"wednesday-communicating-between-fragments-and-activities"},{"id":762,"title":"Wednesday: Capstone Project Ideation","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt Moringa you are learning skills that you can use to solve your own problems: what is something that you want to see in the world? Use this time to build that product. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cspan style=\"font-weight: 400;\"\u003eWe want our students to utilize their full potential during their time at Moringa School. In order to do that, it is up to each student to strive to attain that potential.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs Software Engineers, our portfolios are the best way for us to share our abilities. When thinking of ideas for the products that you will build throughout your time at Moringa, make sure that you’re looking to build truly excellent projects rather than the status quo.\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNo matter your goals post-Moringa School, for your portfolio to stand out to other developers, entrepreneurs, and hiring partners, it is important that your product ideas are innovative. \u003c/span\u003e\u003cstrong\u003eAny average developer can recreate an existing product, your projects should represent that you can do more.\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat being said: not every project idea makes a good project. When choosing a project, is extremely important to maximize the following qualities:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eClearly articulated, solid idea: projects should have a clear question or problem they are trying to solve \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eplus\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e a reasonably specific proposed solution.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAttainable: in our experience, students tend to overestimate their ability to produce and will accomplish about 25% of what they set out to accomplish in the limited time they have. Make sure that each project’s goals should be attainable so you are able to feel accomplished at the end of the session.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInnovative: at Moringa we have seen far too many projects that do the exact same thing. To have a truly world-class project, we need to see you solving real problems. Take time to think of a real problem that you notice in society, and an innovative way of solving that problem.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIntentional: from the technical strategy behind your application, technologies used, to the design, producing excellent products means paying attention to the details in the decisions you are making. Don’t take shortcuts, make something truly incredible.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou have been working hard over the past few months to learn incredible skills. Use this time to boost yourself to the next level by building an awesome product with your skills. Below are guidelines to prompt your thinking in your project ideation.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor this project, don’t just create another ticket sales app, another ecommerce app, another uber for Boda Bodas - create, innovative, do something that \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ematters\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e and has some technical challenges for you to solve. You are becoming a software engineer, utilize and explore your technical skills and show employers that you’re really creating a strong product and give yourself opportunities to learn and push yourselves in your technical skills. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cstrong\u003eUnmet Customer Needs (Pain Points) – Businesses\u003c/strong\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNeed more customers\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMore leads (web traffic, etc.)\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to convert leads to customers\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eImproved targeting\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter understanding of customer needs\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter personalized messaging\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to get customers to buy more\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ePersonalization\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to pay and track payments using a smartphone instead of credit cards and cash\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnalyzing and making sense of increasing large amounts of data coming from the web\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRestaurants, event venues, etc.: fill up empty time slots which would otherwise be lost inventory\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNeed to comply with new regulations\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ePreventing security breaches and data theft\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEmail overload\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAn efficient way to check-in people at events\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFast and easy to use\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBusiness meeting coordinations\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eData centers exceeding their power, cooling, or space limits\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnterprises need to engage with their customers via Social Media – and are not sure how\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEliminating the pain and expense of backup and disaster recovery\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cstrong\u003eUnmet Customer Needs (Pain Points) – Consumers\u003c/strong\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to find and meet the right people to date\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to find a job when they are out of work, or looking to change jobs\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIdentity theft/Crime across Africa\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAging parents that have health and other issues\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAging grandparents\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFitness\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMore effective and entertaining education\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFinancial security and a way to retire with confidence\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInformation overload\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWant computers that are easier to use and manage\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTransportation assistance, such as ridesharing or navigating bus schedules\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWith those ideas in mind, the project period is a time to explore and take advantage of a wide variety of technologies and showcase your talents. Here are just a few ideas to get you started:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cstrong\u003eBusiness Concepts\u003c/strong\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eLeveraging platforms like Facebook, etc. for low cost, viral customer acquisition\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eApp Stores from Apple, Android, etc. for low cost customer acquisition\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOpen Source\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFreemium\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSaaS\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eVirtual Goods\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCrowdSourcing\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFlash sales\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup buying\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMarketplaces to match buyers and sellers\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eLead generation (e.g. LendingTree.com, Quinn Street)\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eDisruptive Technologies\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMobile\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eGPS - Geomapping\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAccelerometer and Gyroscopes\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCameras and video cameras built-in\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn application payments\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNew features in iOS and Android operating systems\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCross-platform\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAugmented Reality\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAPI’s: the Social Graph, Facebook, LinkedIn, etc\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCloud computing\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInfrastructure as a Service (IaaS) – Amazon, Rackspace, etc.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ePlatform as a Service (PaaS) – Heroku, EngineYard, CloudBees,\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSoftware as a Service (SaaS)\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHD video on the Web, and IPTV\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSSD disk drives dropping in price and increasing in capacity\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBig data, and NoSQL alternatives\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eVirtualization and desktop virtualization\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNanotechnology\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIoT\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBlockchain\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"wednesday-capstone-project-ideation"},{"id":1036,"title":"Thursday:Customizing Reusable Fragments","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eCustomizing Reusable Fragments\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs our last week working through our ongoing MyRestaurants application draws to a close, let's continue to put a few more finishing touches in place. Currently, if users navigate to their list of saved restaurants and view a restaurant's details they still see the \"Save Restaurant\" button; even though they've obviously\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esaved this restaurant!\u003c/p\u003e\r\n\u003cp\u003eThis occurs in both portrait and landscape layouts:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0deo7mubmxgr0cb/portrait-detail-view.png\" alt=\"portrait-detail-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/wp9yj22a37mm6cr/landscape-detail-view.png\" alt=\"landscape-detail-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, we still want to keep our project streamlined and well-refactored by re-using the same RestaurantDetailFragment in both SavedRestaurantListActivity and RestaurantListActivity. After all, this button should be the only difference between the two.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll learn how to hide and show specific elements of a fragment based on additional context about the fragment's usage; such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhere\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user is navigating to it from. In our application specifically, we will hide the \"Save Restaurant\" button on the RestaurantDetailFragment if the user accesses it through the SavedRestaurantListActivity.\u003c/p\u003e\r\n\u003ch2\u003eDetermining Location\u003c/h2\u003e\r\n\u003cp\u003eFirst, we need to determine the area the user is accessing the RestaurantDetailFragment through, and make this information accessible to the fragment itself. We'll do this by including additional information with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnRestaurantSelectedListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe created in the last lesson.\u003c/p\u003e\r\n\u003cp\u003eWe'll structure this information in the form of an additional argument to its singular\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As you know, intent extras are key-value pairs. To minimize room for error we'll place one key and two potential values in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String KEY_SOURCE = \u003cspan class=\"hljs-string\"\u003e\"source\"\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String SOURCE_SAVED = \u003cspan class=\"hljs-string\"\u003e\"saved\"\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String SOURCE_FIND = \u003cspan class=\"hljs-string\"\u003e\"find\"\u003c/span\u003e;\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eKEY_SOURCE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill represent the key in the key-value pair of the intent extra.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSOURCE_SAVED\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be the corresponding value when the user navigates to this fragment through the SavedRestaurantListActivity, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSOURCE_FIND\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill represent the value when the user travels from the RestaurantListActivity (or, the \"Find Restaurants\" area of our application).\u003c/p\u003e\r\n\u003ch2\u003ePassing Location Information Through Listeners\u003c/h2\u003e\r\n\u003cp\u003eNow, we'll use the key and value options we've placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to include this additional information when creating a new instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnRestaurantSelected\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elistener interface.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add an additional\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter to its singular\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eOnRestaurantSelectedListener.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, String source)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be the String name of the activity the user views our reusable fragment from; Either \"RestaurantListActivity\" or \"SavedRestaurantListActivity\", in our case.\u003c/p\u003e\r\n\u003cp\u003eWe're currently implementing this interface in our RestaurantListActivity. Let's make sure to also include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einformation anywhere we're already dealing with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata our listener is already handling:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n     ...\r\n    String mSource;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (savedInstanceState != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n                ...\r\n                mSource = savedInstanceState.getString(Constants.KEY_SOURCE);\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    ...\r\n                    intent.putExtra(Constants.KEY_SOURCE, mSource);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSaveInstanceState\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle outState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            ...\r\n            outState.putString(Constants.KEY_SOURCE, mSource);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, String source)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = source;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs we covered in the last lesson, our OnRestaurantClickListener is being passed into our RestaurantViewHolder as a member variable, then triggered in its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003emethod in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e, where it's passed information about which restaurant was clicked. Let's also pass information regarding the user's current location (either SavedRestaurantListActivity or RestaurantListActivity) here too:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n         \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n                mRestaurantSelectedListener.onRestaurantSelected(itemPosition, mRestaurants, Constants.SOURCE_FIND);\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    createDetailFragment(itemPosition);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    intent.putExtra(Constants.KEY_SOURCE, Constants.SOURCE_FIND);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            }\r\n      ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSOURCE_FIND\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekey if the user is viewing our restaurant's details through the RestaurantListActivity (ie: \"Find Restaurants\" area of our application). This will eventually let our fragment know that we should display the \"Save Restaurant\" button in this area, because these are\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user's saved restaurants, and they should therefore have the option to save any.\u003c/p\u003e\r\n\u003cp\u003eLet's make sure we also include this information if the device is in landscape orientation, too. Because the conditional above simply calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateDetailFragment()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectly when the phone is in landscape, we'll need to add the additional information describing where the user came from in this method:'\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e\u003c/span\u003e{\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position, Constants.SOURCE_FIND);\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        ft.commit();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've included the additional parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants.SOURCE_FIND\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen we call RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This will pass along a string referring to the source location that we placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. In this case, \"find\".\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou will likely receive an error regarding this extra argument; but don't worry, we'll address this in just a moment.\u003c/p\u003e\r\n\u003ch3\u003eFirebaseRestaurantListAdapter\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll need to follow a similar process in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride of our FirebaseRestaurantListAdapter. Here, we'll include intent extra information indicating that the user is viewing our restaurant's details from the SavedRestaurantListActivity. Because these restaurants are\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esaved to the user's list, we'll remove the \"Save Restaurant\" button.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestauarantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    ...\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = viewHolder.getAdapterPosition();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    createDetailFragment(itemPosition);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    intent.putExtra(Constants.KEY_SOURCE, Constants.SOURCE_SAVED);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's make sure we also include this information if the device is in landscape orientation in the Saved Restaurants area, too. Similar to what we just did in the RestaurantListAdapter, we'll need to add the additional information describing where the user came from in this method:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e\u003c/span\u003e{\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position, Constants.SOURCE_SAVED);\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        ft.commit();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've included the additional parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants.SOURCE_SAVED\u003c/code\u003e. Again, this will pass along a string from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass referring to the source (in this case \"saved\", because our source is the SavedRestaurantListActivity).\u003c/p\u003e\r\n\u003ch2\u003eRetrieving Source Information\u003c/h2\u003e\r\n\u003cp\u003eLet's make use of this information we've included once we reach RestaurantDetailActivity. First, we'll gather the source information we packaged up in the intent extra. We'll assign this value to the member variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSource\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's declare it in RestaurantDetailActivity. Then, we'll define it by fetching the extra information we included with our intent:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n    ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = getIntent().getStringExtra(Constants.KEY_SOURCE);\r\n     ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that our RestaurantDetailActivity can correctly determine if the user reached it from the SavedRestaurantListActivity\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe RestaurantListActivity, let's alter the adapter accordingly. We'll include this source information as an additional argument to our new RestaurantPagerAdapter. The RestaurantPagerAdapter will then provide this information to the RestaurantDetailFragment.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = intent.getStringExtra(Constants.KEY_SOURCE);\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// This line should already exist, we're just adding mSource as an additional parameter:\u003c/span\u003e\r\n        adapterViewPager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantPagerAdapter(getSupportFragmentManager(), mRestaurants, mSource);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you may have guessed, we now need to ensure our RestaurantPagerAdapter is setup to accommodate this extra parameter.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantPagerAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragmentPagerAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(FragmentManager fm, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, String source)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(fm);\r\n        mRestaurants = restaurants;\r\n        mSource = source;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Fragment \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e RestaurantDetailFragment.newInstance(mRestaurants, position, mSource);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the RestaurantPagerAdapter simply declares the member variable, defines it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantPagerAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e, and then provides it as an additional parameter to the RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod called in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll now need to ensure the RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod may also accommodate this additional parameter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e RestaurantDetailFragment \u003cspan class=\"hljs-title\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ArrayList\u0026lt;Restaurant\u0026gt; restaurants, Integer position, String source)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        args.putString(Constants.KEY_SOURCE, source);\r\n        ...\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've also included it as an additional parameter to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003ch2\u003eHiding and Showing Fragment Elements\u003c/h2\u003e\r\n\u003cp\u003eNow that this information is being successfully passed to any RestaurantDetailFragments, we can finally use it to impact the appearance of our menu in the RestaurantDetailFragment.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll snag the source information in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetHasMenuOptions(true)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto invoke the menu items in our Fragment class:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = getArguments().getString(Constants.KEY_SOURCE);\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n     }\r\n  ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we'll hide or show the \"Save Restaurant\" button depending on the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSource\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mSource.equals(Constants.SOURCE_SAVED)) {\r\n            mSaveRestaurantButton.setVisibility(View.GONE);\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            \u003cspan class=\"hljs-comment\"\u003e// This line of code should already exist. Make sure it now resides in this conditional:\u003c/span\u003e\r\n            mSaveRestaurantButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, if the user is viewing the RestaurantDetailFragment after having come from the SavedRestaurantListActivity (ie: they're viewing details for restaurants in their \"Saved Restaurants\" list) we will hide the \"Save Restaurant\" button entirely. If they're coming from anywhere else (the RestaurantListActivity, in our case) we will continue to attach the appropriate click listener to the button.\u003c/p\u003e\r\n\u003cp\u003eNow, if we run the application, and view our saved restaurants, we should see that we're no longer offered an option to save a restaurant we've\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready saved\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/mmwwdk8fqwbaipo/no-save-restaurant-button-portrait.png\" alt=\"no-save-restaurant-button-portrait\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/6qtadnfbzglq5mf/no-save-restaurant-button-landscape.png\" alt=\"no-save-restaurant-button-landscape\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll make use of our new ability to pass our RestaurantDetailFragment information regarding the user's navigational context in order to hide or show a photo option in the menu, and offer users the ability to take and save photos of their visit to a saved restaurant!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/26_Customizing_Reusable_Fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEssentially, to hide and show different elements of a re-usable fragment depending on where the user is viewing said fragment, we can include data regarding the user's location in intent extras, and hide elements based on this information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo hide a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e, call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetVisibility()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the parameters\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.GONE\u003c/code\u003e. Example:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSaveRestaurantButton.setVisibility(View.GONE);\u003c/code\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/26_Customizing_Reusable_Fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"thursday-customizing-reusable-fragments"},{"id":1037,"title":"Thursday:Using the Camera and Saving Images to Firebase","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003ch1\u003eUsing the Camera and Saving Images to Firebase\u003c/h1\u003e\r\n\u003cp\u003eOur MyRestaurants application is essentially complete! All features we set out to include have been implemented: Users can look up restaurants in their zip code, create secure and personalized accounts, log in and out, and save restaurants to their own custom list in Firebase. We've even included a flexible user interface that can display our content in the best manner for the device's current orientation, and hide any irrelevant elements depending on where the user is viewing a restaurant's details.\u003c/p\u003e\r\n\u003cp\u003eNow, how about exploring extra features? It's becoming more and more common to take pictures of the delicious dishes you receive at restaurants. Let's support custom user photos in MyRestaurants, allowing users to take their own thumbnail photos for their saved restaurant's listings in the application.\u003c/p\u003e\r\n\u003ch2\u003eCamera Menu Option\u003c/h2\u003e\r\n\u003ch3\u003eIcon\u003c/h3\u003e\r\n\u003cp\u003eFirst, let's make sure to include a button on our menu to indicate to users that a photo option is available. Download Google Material's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/#ic_camera_alt\"\u003ecamera-alt\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eicon. Select the white PNG option, and place each size included in its corresponding sub-directory in\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/n36g3e3ibzaihjt/completed-icon-directories.png\" alt=\"completed-icon-directory\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eLayout\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a new menu in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eresource directory. We'll call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu_photo.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand place the following inside:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003emenu_photo.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_photo\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_camera_alt_white_24dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"always\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Photo\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll need to inflate this new menu in our RestaurantDetailFragment. Confirm that the following line allowing menu options is present. If not, add it now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's inflate our new menu, and include logic to handle user interactions with the menu options:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu, MenuInflater inflater)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu, inflater);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mSource.equals(Constants.SOURCE_SAVED)) {\r\n            inflater.inflate(R.menu.menu_photo, menu);\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            inflater.inflate(R.menu.menu_main, menu);\r\n        }\r\n    }\r\n\r\n       \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (item.getItemId()) {\r\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e R.id.action_photo:\r\n                onLaunchCamera();\r\n            \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\r\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include a conditional statement in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat only inflates the photo menu if the user has navigated to RestaurantDetailFragment from the \"Saved Restaurants\" list. If they did not, only the main menu is inflated.\u003c/p\u003e\r\n\u003cp\u003eThen, in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe include a switch statement that will trigger a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonLaunchCamera()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the user selects the photo icon from the menu. We'll write this method momentarily.\u003c/p\u003e\r\n\u003cp\u003eAt this point, we should be able to launch the application, navigate to the detail view of one of our saved restaurants, and see a new photo icon in the menu:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/3u8wnpfi74q7rss/new-camera-icon.png\" alt=\"camera-button-portrait\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eLaunching the Camera\u003c/h2\u003e\r\n\u003cp\u003eNext, let's define the method we will call when the user selects the camera icon from their menu:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonLaunchCamera\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        Intent takePictureIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (takePictureIntent.resolveActivity(getActivity().getPackageManager()) != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe set up our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, providing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMediaStore.ACTION_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a parameter. This is an\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/wednesday-implicit-intents?module_item_id=i395fbc4796bb4258cbf441d02a355a34\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/wednesday-implicit-intents\" data-api-returntype=\"Page\"\u003eimplicit intent\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat will instruct Android to automatically access the device's camera.\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/provider/MediaStore.html\" target=\"_blank\"\u003eMediaStore\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a built-in Android class that handles all things media, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE\" target=\"_blank\"\u003e\u003ccode\u003eACTION_IMAGE_CAPTURE\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis the standard intent that accesses the device's camera application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe include a conditional that checks if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etakePictureIntent.resolveActivity(getPackageManager())\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eequal\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresolveActivity(getPackageManager())\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the first component capable of handling our intent. Essentially, it's ensuring a camera app is available and accessible. It's important to perform this check, because if we launch our intent and there is no camera application present to handle it, our app will crash.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elaunches our intent, indicating that we'd like a result returned from it. In our case, we launch the camera, and retrieve the resulting image. This method takes our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, and the constant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould be an integer value. If it is greater than 1, the result of the action we are launching will be returned automatically in a callback method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonActivityResult()\u003c/code\u003e, which we will define momentarily. This value may also be used to identify specific results when multiple implicit intents are being triggered, and returning multiple pieces of information back into the app. Because we are only handling\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esuch intent, this constant may be any number greater than 0. For more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent,%20int,%20android.os.Bundle)\" target=\"_blank\"\u003eAndroid Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor this method.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eLet's make sure this constant is defined at the top of our class now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBaseFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e REQUEST_IMAGE_CAPTURE = \u003cspan class=\"hljs-number\"\u003e111\u003c/span\u003e;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs we just discussed,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill automatically trigger the callback method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonActivityResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the result of our activity is available. (In our case, a picture the user has taken). We'll override this method in order to snag our picture:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonActivityResult\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e requestCode, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e resultCode, Intent data)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (requestCode == REQUEST_IMAGE_CAPTURE \u0026amp;\u0026amp; resultCode == getActivity().RESULT_OK) {\r\n            Bundle extras = data.getExtras();\r\n            Bitmap imageBitmap = (Bitmap) extras.get(\u003cspan class=\"hljs-string\"\u003e\"data\"\u003c/span\u003e);\r\n            mImageLabel.setImageBitmap(imageBitmap);\r\n            encodeBitmapAndSaveToFirebase(imageBitmap);\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eonActivityResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains the following information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequestCode\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter represents the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue we provided in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that launched this activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresultCode\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter represents the status of the activity (ie: whether it was successfully completed, cancelled, etc.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject that includes intent extras containing the information being returned. In our case, an image.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThis in mind, we're doing the following in the code above:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eDouble-check that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequestCode\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ematches our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstant. This confirms that the information being returned is indeed from the request we executed in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetExtras();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to retrieve the intent extras it contains.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimageBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the intent extra information under the key \"data\". (This is our image)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003emImageLabel.setImageBitmap(imageBitmap);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets our detail view's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto contain the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimageBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject returned from the camera. This immediately places the new photo in the detail view.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then call a custom method that will encode our image in Base64 and save it to Firebase. Even though the previous line of code immediately sets the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e, we must still save it to Firebase if we'd like it to remain there when we re-open the app.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eBase 64 Encoding\u003c/h2\u003e\r\n\u003cp\u003eThankfully, our existing Firebase database is capable of storing images in several formats. In this lesson we'll use Base64.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBase64\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a format of binary-to-text encoding. Essentially, this just means that the very binary of the object being encoded is turned into a really long string. Firebase has very recently begun supporting\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/storage/\" target=\"_blank\"\u003eother formats\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof photo and videos, too.\u003c/p\u003e\r\n\u003cp\u003eConvenient for our purposes, both Android and Firebase have built-in tools to help manage encoding and decoding objects in Base64. We'll use them in order to process this image, save it to Firebase, and later retrieve and decode it.\u003c/p\u003e\r\n\u003ch3\u003eSaving Encoded Images\u003c/h3\u003e\r\n\u003cp\u003eIn the above code, we called a method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eencodeBitmapAndSaveToFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the photo we gathered. Let's write that method now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eencodeBitmapAndSaveToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bitmap bitmap)\u003c/span\u003e \u003c/span\u003e{\r\n       ByteArrayOutputStream baos = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e, baos);\r\n        String imageEncoded = Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);\r\n        DatabaseReference ref = FirebaseDatabase.getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(mRestaurant.getPushId())\r\n                .child(\u003cspan class=\"hljs-string\"\u003e\"imageUrl\"\u003c/span\u003e);\r\n        ref.setValue(imageEncoded);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eByteArrayOutputStream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and name it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebaos\u003c/code\u003e. The name has no special meaning, it's simply a common go-to naming convention for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eByteArrayOutputStream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects. As described in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/java/io/ByteArrayOutputStream.html\" target=\"_blank\"\u003eAndroid documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethis object is simply a place where we may temporarily store our data while working with it.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe compress our image using Android's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. The first argument specifies the format the image should be in. The second argument indicates the quality we'd like to save the image in (this is a 1-100 scale; 100 being the highest possible quality). The third argument represents the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eByteArrayOutputStream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe've just created, which is where Android will place this compressed information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we use the built-in Firebase method to encode this array of bytes into a long Base64 string. In the arguments, we turn the information we've placed in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebaos\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto an array of individual bytes, and specify the type of encoding we'd like to use (the default Base64).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we locate the node containing the current image URL for this specific restaurant on this specific user's saved restaurants list, and overwrite it with our new, encoded image.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, we should be able to launch the application, select our camera icon, and take an image. Then, if we navigate to this specific restaurant's node in the current user's saved restaurants, we can see that the URL from the Yelp API has been replaced with a long, Base64 encoded string!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/zbt0kg5cfzcdzkg/base64-in-firebase.png\" alt=\"base-64-in-firebase\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you have any issue taking a photograph in your Android emulator, double-check that your emulator has been set up to utilize the computer's webcam as it's camera application, as depicted in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework4.html\" target=\"_blank\"\u003ethis video\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf we navigate away from our SavedRestaurantsListActivity however, you will notice that our the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimageUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty resets back to the original URL provided by Yelp. This is because we're currently resetting the entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in our FirebaseRestaurantListAdapter. We hadn't yet needed to reset a specific property. Let's change our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetIndexInFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod so that we only ever set the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproperty rather than reset the entire object:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetIndexInFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (Restaurant restaurant : mRestaurants) {\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e index = mRestaurants.indexOf(restaurant);\r\n            DatabaseReference ref = getRef(index);\r\n            ref.child(\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e).setValue(Integer.toString(index));\r\n        }\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRetrieving and Decoding Images\u003c/h2\u003e\r\n\u003cp\u003eNow that our images are encoded and saved in Firebase, we need to be able to de-code them to retrieve them and display them back into our application.\u003c/p\u003e\r\n\u003ch3\u003eList View\u003c/h3\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in FirebaseRestaurantViewHolder currently contains logic for using the Picasso library to handle image resizing in the \"Saved Restaurants\"\u003cspan\u003e \u003c/span\u003e\u003cem\u003elist\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview. Let's also handle decoding our images here:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!restaurant.getImageUrl().contains(\u003cspan class=\"hljs-string\"\u003e\"http\"\u003c/span\u003e)) {\r\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                Bitmap imageBitmap = decodeFromFirebaseBase64(restaurant.getImageUrl());\r\n                mRestaurantImageView.setImageBitmap(imageBitmap);\r\n            } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            \u003cspan class=\"hljs-comment\"\u003e// This block of code should already exist, we're just moving it to the 'else' statement:\u003c/span\u003e\r\n            Picasso.get().load(restaurant.getImageUrl()).into(mRestaurantImageView);\r\n            nameTextView.setText(restaurant.getName());\r\n            categoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            ratingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n        mNameTextView.setText(restaurant.getName());\r\n        mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n        mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we check if the image url returned from the database does\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtains \"http\". Because our application returns the image URL available from the Yelp API by default, we know that if \"http\" is not included in the image saved in our database, then it's\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe URL to Yelp, and must be one of our encoded images.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe define a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called image, and set it to the equivalent of running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edecodeFromFirebaseBase64()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which we will write in a moment) on the encoded string. We then set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith our newly-decoded image. We've also included some error handling in the case that this doesn't work as expected.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the image\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtain \"http\", we execute the same block of code using Picasso that we did previously.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e*We then set the text in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003es as normal.\u003c/p\u003e\r\n\u003cp\u003eNext, let's write the method responsible for decoding Base64:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e Bitmap \u003cspan class=\"hljs-title\"\u003edecodeFromFirebaseBase64\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String image)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ebyte\u003c/span\u003e[] decodedByteArray = android.util.Base64.decode(image, Base64.DEFAULT);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e BitmapFactory.decodeByteArray(decodedByteArray, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, decodedByteArray.length);\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we simply take the encoded image's string, and use the built-in firebase utility to decode it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback \u003c/em\u003einto a byte array.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edecodeByteArray()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod built-in to Android's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmapFactory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, as described\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeByteArray(byte%5B%5D,%20int,%20int)\" target=\"_blank\"\u003ehere\u003c/a\u003e, to turn this byte array back into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eimage. The first argument is the byte array itself. The second argument is the position in the array the method should begin decoding at (\u003cem\u003eeverything\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein this array is our image, so we simply start at 0), and the number of places in the array that should be decoded (again,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeverything\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the array is our image, so we instruct it to decode the entire length.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we launch our application, we should be able to take our own custom picture for one of our saved restaurants, navigate away, and return to \"Saved Restaurants\" and still see it in our list!\u003c/p\u003e\r\n\u003ch3\u003eDetail View\u003c/h3\u003e\r\n\u003cp\u003eAgain, the code we've just added handles decoding our custom images in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003elist\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof all saved restaurants. We also want our custom images to appear in the restaurant's individual detail view. Let's handle that now!\u003c/p\u003e\r\n\u003cp\u003eWe'll include some very similar logic in the RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!mRestaurant.getImageUrl().contains(\u003cspan class=\"hljs-string\"\u003e\"http\"\u003c/span\u003e)) {\r\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                Bitmap image = decodeFromFirebaseBase64(mRestaurant.getImageUrl());\r\n                mImageLabel.setImageBitmap(image);\r\n            } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            \u003cspan class=\"hljs-comment\"\u003e// This block of code should already exist, we're just moving it to the 'else' statement:\u003c/span\u003e\r\n            Picasso.get()\u003cbr\u003e                    .load(mRestaurant.getImageUrl())\u003cbr\u003e                    .into(mImageLabel);\r\n        }\r\n    ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd define the same method for decoding from RestaurantViewHolder here in RestaurantDetailFragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e Bitmap \u003cspan class=\"hljs-title\"\u003edecodeFromFirebaseBase64\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String image)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ebyte\u003c/span\u003e[] decodedByteArray = android.util.Base64.decode(image, Base64.DEFAULT);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e BitmapFactory.decodeByteArray(decodedByteArray, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, decodedByteArray.length);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to run the application, add a custom photo to a saved restaurant, navigate away from this restaurant, and see that our image is\u003cspan\u003e \u003c/span\u003e\u003cem\u003estill there\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eif we later come back to it We can even re-boot the emulator, and our image will still be there!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/fb22agcdo889sa1/custom-image-saved.png\" alt=\"custom-image\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eManifest Options\u003c/h2\u003e\r\n\u003cp\u003eNow that our application uses the camera feature on our users' devices, let's make sure to detail this accordingly in our manifest.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-feature\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.hardware.camera\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:required\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;uses-feature android:name=\"android.hardware.camera\" android:required=\"false\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto declare that our application uses the camera. As explained in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/manifest/uses-feature-element.html\"\u003eAndroid Documentation\u003c/a\u003e, the\u003cspan\u003e \u003c/span\u003elist in our manifest corresponds to the set of feature constants made available by the Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePackageManager\u003c/code\u003e. Each feature an app uses must be specified on its own line.\u003c/p\u003e\r\n\u003cp\u003eYou may also notice that the above code sets\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:required\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. This means that while our application\u003cspan\u003e \u003c/span\u003e\u003cem\u003euses\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe camera, use of the camera isn't downright required to run the application. If we had instead set this to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#weekend-three.html\"\u003epublished\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eour app on the Google Play, it would only be displayed to devices that had camera access.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 18pt;\"\u003ePreventing Data Duplication of Restaurant Objects In Database\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eOur Restaurant app is almost done save for one issue, when a user is saving restaurants, one can save the same restaurants as many times as possible. This can result in the abuse of resources and unnecessarily extra charges especially in an enterprise application where Firebase charges you (application owner) based on Storage memory consumed on Firebase and amount of downloaded data. \u003cspan\u003e(Note that SSL handshake, protocol and encryption is also counted in downloaded data). Uploading data to the cloud is completely free.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirebase Database SDK works offline if we enable persistence:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre id=\"1d9a\" class=\"graf graf--pre graf-after--p\"\u003e\u003cstrong class=\"markup--strong markup--pre-strong\"\u003eval database \u003c/strong\u003e= FirebaseDatabase.getInstance()\u003cbr\u003edatabase.setPersistenceEnabled(\u003cstrong class=\"markup--strong markup--pre-strong\"\u003etrue\u003c/strong\u003e)\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eEnabling persistence allows normal operation of the app while the user is not connected to the internet, Firebase keeps a local cache with the favorites and if the user makes any change, changes will be propagated to the cloud next time internet is available. But we won't get into that right now. Lets fix our app so the user can't save the same restaurant twice. The newly added code will be explained in the comments within the code block.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eRestaurantDetailFragment.java\u003cbr\u003e   \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public void \u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e(View v){\u003cbr\u003e    ...\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003e    if \u003c/span\u003e(v == \u003cspan\u003emSaveRestaurantButton\u003c/span\u003e) {\u003cbr\u003e    FirebaseUser user = FirebaseAuth.\u003cspan\u003egetInstance\u003c/span\u003e().getCurrentUser()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eString uid = user.getUid()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    final \u003c/span\u003eDatabaseReference restaurantRef = FirebaseDatabase\u003cbr\u003e            .\u003cspan\u003egetInstance\u003c/span\u003e()\u003cbr\u003e            .getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e)\u003cbr\u003e            .child(uid)\u003cspan\u003e;\u003cbr\u003e\u003cbr\u003e    // The String 'name' variable below stores the name-property of the currently selected restaurant object.\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eString name = \u003cspan\u003emRestaurant\u003c/span\u003e.getName()\u003cspan\u003e;\u003cbr\u003e\u003cbr\u003e    // We then use the databasereference above 'restaurantRef' where we attach the addValueEventListener to \u003cbr\u003e    // search in the restaurants node in the databe for a restaurant with the same name,\u003cbr\u003e    // and if the restaurant exists then it will give you the Toast message that the currently selected restaurant exists.\u003cbr\u003e    // else (if the name of the selected restaurant doesn't exist) the code to save the selected restaurant will run.\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003erestaurantRef.orderByChild(\u003cspan\u003e\"name\"\u003c/span\u003e).equalTo(name).addValueEventListener(\u003cspan\u003enew \u003c/span\u003eValueEventListener() {\u003cbr\u003e        \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonDataChange\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eDataSnapshot dataSnapshot) {\u003cbr\u003e            \u003cspan\u003eif\u003c/span\u003e(dataSnapshot.exists()) {\u003cbr\u003e                Toast.\u003cspan\u003emakeText\u003c/span\u003e(getContext()\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Currently Selected Restaurant already exists\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eToast.\u003cspan\u003eLENGTH_LONG\u003c/span\u003e).show()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                return;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e} \u003cspan\u003eelse\u003c/span\u003e{\u003cbr\u003e                DatabaseReference pushRef = \u003cspan\u003erestaurantRef\u003c/span\u003e.push()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString pushId = pushRef.getKey()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003emRestaurant\u003c/span\u003e.setPushId(pushId)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003epushRef.setValue(\u003cspan\u003emRestaurant\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eToast.\u003cspan\u003emakeText\u003c/span\u003e(getContext()\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Saved\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eToast.\u003cspan\u003eLENGTH_SHORT\u003c/span\u003e).show()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003c/pre\u003e\r\n\u003cp\u003eSo if we ran the application and try to save the same restaurant twice, you should receive a toast informing you that the restaurant already exists in your saved restaurant list, otherwise the restaurant will be saved. Good Work.\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003cstrong\u003eExample Github Repo for MyRestaurants (Data Duplication Prevention)\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/27_Using_the_Camera_and_Saving_Images_to_Firebase\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants (Camear and Saving Images to Firebase)\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBase64\u003c/strong\u003e: A format of binary-to-text encoding. Essentially, this just means that the very binary of the object being encoded is turned into a really long string.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/camera/photobasics.html\" target=\"_blank\"\u003ePhoto Basics\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle.\u003c/li\u003e\r\n\u003cli\u003eDocumentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/java/io/ByteArrayOutputStream.html\" target=\"_blank\"\u003eByteArrayOutPutStream Objects\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eAndroid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/result.html\" target=\"_blank\"\u003eGetting a Result from an Activity\u003c/a\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"thursday-using-the-camera-and-saving-images-to-firebase"},{"id":916,"title":"Thursday: Technical Interview Questions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch2\u003e\u003cspan\u003eTechnical Interview Questions\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eA good technical interview should be a conversation. It should not be a test of knowledge. A technical interview is best used when it evaluates how a candidate thinks and works, not what they know. The candidate’s resume and the non-whiteboard part of the interview should be sufficient to determine if they have experience with the required languages, frameworks, and concepts. As an interviewee, if you’re asked to whiteboard, that’s great news – the interviewer knows you have the skills to work through a difficult question, and wants to see how you do so.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eDuring the technical mock interview session you will be asked to\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eSolve coding and pseudo-coding problems in front of the Technical Mentor and the Professional Development Mentor.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eAnswer a technical question out loud\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhiteboard a solution to a coding problem - that is, sketching out a visual or pseudo-code solution to a problem, and talking out loud about your thought process as you go.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan\u003eWhiteboarding\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eSome interviews will involve answering technical questions out loud, or \"whiteboarding\" a solution to a coding problem. This means that you will be sketching out a visual and/or pseudo-code solution to a problem, and talking out loud about your thought process as you go. This is one of the most common interview formats, and where you should spend a good amount of extra time preparing.\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWhen answering these types of questions, make sure that you:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eAsk clarifying questions. Often, your interviewer will intentionally be vague about something or leave out information. Don't be shy about asking for clarification or more information.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eTalk out loud. Even when you have no idea where to go, do not just stand there silently. The interviewer wants to hear your thought process, even if it is just you coming up with ideas and then saying why they will not work or are wrong. You should strive to talk constantly.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eAdmit when you do not know something. If you try to talk your way through a question that you actually do not have an answer to, you will most likely still not get the answer. Just say \"I do not know.\" However, if you can, keep going: \"I do not know, but here is how I might figure it out.\" Then, go forward with the interviewer. How would you go about finding out? What terms would you search for? Where have you seen similar behavior? Keep communicating and showing how you think.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse the programming language you're most familiar with. It doesn't matter if the interviewer is unfamiliar with that language. They can probably figure it out. They can consult colleagues after with any questions.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan\u003eSo, what are some good practices for \u003cstrong\u003ewhiteboarding\u003c/strong\u003e?\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirst, have the interviewer repeat the question. Listen carefully and write down a list of specs on the whiteboard.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAgain, you’re showing how you work. Working from a list of specs demonstrates your habits as a good, professional developer. Once the specs are listed, read them back and start looking for keywords and easy requirements that will help you answer the question.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eAre you writing a function? Get the word function and some curly braces up on the board.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eDoes the function accept any kind of argument? Put any arguments in the function's parentheses.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eDoes the function return a value? Put a return statement at the end of the function.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003eThe purpose of all this setup is to give ourselves a familiar work space. It also gets some information on the board, and can get you thinking.\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAre you stuck, or do you need to test your algorithm? One approach is to draw a box on the whiteboard and list your variables with their initial values. This box represents machine memory during the process. Next, pass some test values into your function and talk through the behavior with the interviewer while changing the values within the box. This live testing is another way to get you thinking and unstuck.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eOpen-Ended Technical Questions\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eTechnical questions that may not require you to code at all are often open-ended discussion questions, which are designed to give you a chance to showcase your knowledge. It is important to take advantage of these opportunities, as you have the freedom to highlight your strongest area of knowledge.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eHere are some sample interview questions:\u003c/span\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is the difference between POST request and a GET request?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Git and why would you use it?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat happens when a user logs into a website?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is a class?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is an object?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is unit testing?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat happens when a user types in a URL?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is a foreign key?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is REST?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eShow me some code you wrote that you're especially proud of.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eTalk about a time that you solved a difficult coding problem.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is an array?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain MVC.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is a join table in SQL?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is floating in CSS?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are media queries and how do you use them?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eYou've been working on a site for a couple months here at our company. You come in one day and the site is down. What do you do?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"thursday-technical-interview-questions"},{"id":1038,"title":"Independent Project","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":15.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eContinue to build upon your previous independent project by integrating the new tools and concepts we've learned this week, as listed in the objectives below.\u003c/p\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for fulfillment of the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIncludes two gesture listeners\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003cstrong\u003eOR\u003c/strong\u003e\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etwo animations,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003cstrong\u003eOR\u003c/strong\u003e\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eutilize the camera within your application.\u003c/li\u003e\r\n\u003cli\u003eImplements one alternate resource.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices,\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003eespecially indenting properly, commenting complex code segments, making logically separate Git commits, including a detailed README, and removing commented-out code and logging statements before committing.\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject works as expected\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrate concepts covered this week. If prompted, are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology\u003c/li\u003e\r\n\u003cli\u003ePrevious standards have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTimely project submittion\u003c/li\u003e\r\n\u003cli\u003eProject README file is upto standard\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eA minimum of 20 github commits on Github for this project\u003c/li\u003e\r\n\u003cli\u003eUsage of .gitignore with required files and folders ignored\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003eOptional\u003c/em\u003e: Is published to Google Play.\u003c/li\u003e\r\n\u003c/ul\u003e","exportId":"i5afe801320ced00aa32edc60350b71d8"},{"id":1100,"title":"Friday: IP review","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","exportId":"i1a4b96ca090be03f6f1228317e3e7019"},{"id":3471,"title":"Thursday:Preparing Apps for Production","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv\u003e\r\n\u003ch1\u003ePreparing Apps For Production\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan\u003eAfter all your hard work developing Android applications, you’re probably ready to begin showing them off! This lesson will help curate the resources and instructions necessary to begin releasing your applications to the world.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eGoogle Play Developer Accounts\u003c/h2\u003e\r\n\u003cp\u003eAs you may already know, the primary marketplace for Android applications is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps?hl=en\"\u003eGoogle Play store\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo publish your own applications on Google Play you must first register for a Google Play Developer account. Registering costs a one-time fee of $25. You are not required to attain a paid Google Play Developer account for this course, but it’s highly recommended to do so.\u003c/p\u003e\r\n\u003cp\u003eTo register visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/apps/publish/signup/#\"\u003eSign Up section in the Google Play Developer Console\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eLaunch Checklist\u003c/h2\u003e\r\n\u003cp\u003eBefore beginning the publishing process, thoroughly review the Android\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/distribute/tools/launch-checklist.html\"\u003eLaunch Checklist\u003c/a\u003e. This checklist contains everything you need to know in order to prepare, package, and publish an application for distribution. Plan to follow this resource step-by-step when you’re ready to publish your first app.\u003c/p\u003e\r\n\u003ch2\u003eSigning your Application\u003c/h2\u003e\r\n\u003cp\u003eAs you’ll see, many of the steps in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/distribute/tools/launch-checklist.html\"\u003eLaunch Checklist\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efocus on preparatory tasks such as reviewing policies and agreements, double-checking your application meets quality expectations, and determining content for your app’s listing (countries, price, rating, description, size, compatibility, promotional graphics, etc.). This steps describes the process of actually packaging and uploading your application to the Play Store, which is widely considered the most challenging part.\u003c/p\u003e\r\n\u003cp\u003eApplications must be uploaded to Google Play as an APK (Android Package) file (This is currently undergoing some changes though). This file must also be “signed” with a unique certificate. Similar to the way your ID card, passport or driver’s license identifies your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eperson\u003c/em\u003e, this unique certificate identifies you as the original author/owner of an Android application. You will also be required to verify your identity with this same certificate in order to make future updates to the application.\u003c/p\u003e\r\n\u003cp\u003eThese certificates are sometimes referred to as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epublic-key certificates\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edigital certificates\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eidentity certificates\u003c/strong\u003e. In the context of publishing Android applications, know that these all refer to the same thing. Also, this certificate information resides in a binary file called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekeystore\u003c/strong\u003e. You will see these terms appear throughout the Android documentation.\u003c/p\u003e\r\n\u003ch2\u003eCreating a Certificate\u003c/h2\u003e\r\n\u003cp\u003eIf this is your first time publishing an app, you likely don’t have a certificate in a special keystore file yet. You can follow the instructions detailed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/publish/app-signing.html\"\u003eSign Your App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle (also linked in the Launch Checklist) to attain one. While this article walks through the entire process of creating and using a certificate, there are several important points we’d like to emphasize:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAlways remove signing information from your build files!\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWhen you sign your application through Android Studio using the instructions linked above, it may add your signing information to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles in plain text. Remove this from the build files so others may not access it. You may do so by following the instructions\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/publish/app-signing.html#secure-shared-keystore\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto create a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekeystore.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to hold this sensitive information.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not commit the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekeystore.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to GitHub, or you will risk publishing your sensitive signing information publically\u003c/strong\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAlways, always, always keep your keystore file and its corresponding password.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAs mentioned, this keystore is used to confirm your identity as the application’s original author.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not lose it, or you won't have access to later update your application.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you create your certificate, sign, and publish your application on one machine and would later like to update your app from a\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent machine\u003c/em\u003e, you will need to provide the same keystore information to verify your identity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eIf you generate a keystore at Epicodus, make sure to save it somewhere you can access later\u003c/strong\u003e. Similar to the point above, you\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emust always keep your keystore file and remember its corresponding password\u003c/strong\u003e. Epicodus computers wipe their contents each night. So make sure to save any keystore files you generate at Epicodus somewhere you may access later. On a flash drive, for instance. (Remember, you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon’t\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewant to publish this information to GitHub!)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eYou may use the same keystore in different applications.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDon’t worry, you won’t have to go through the process of creating a new certificate in a new keystore every time you publish an application. As long as the applications have different package names, you can continue to use the same certificate to sign multiple apps.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","exportId":"thursday-preparing-apps-for-production"}]},{"id":33,"name":"Week 5: Independent Capstone Project Week Overview","status":"completed","unlockDate":null,"prereqs":[32],"requirement":null,"sequential":false,"exportId":"i8e3b1a3cd0330bc00dd93bfd40d9d07b","items":[{"id":1039,"title":"Monday: Independent Capstone Project Week Overview","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003ch1\u003eIndependent Capstone Project Week Overview\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eCongratulations! You've made it to the final week of your final coding course at Moringa School!\u003c/p\u003e\r\n\u003ch2\u003eOverview of Week\u003c/h2\u003e\r\n\u003cp\u003eYou will spend this week working independently on a cumulative capstone project of your choosing. On Friday you’ll present the project in class. \u003c/p\u003e\r\n\u003cp\u003eThis lesson will outline the requirements and expectations for this week.\u003c/p\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAttendance policy still applies.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou are still expected to attend Moringa School during normal class hours.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eYour project must be completed independently.\u003c/strong\u003e\u003cspan\u003e In addition to the variety of impressive projects you have created throughout Moringa School in collaboration with others, it's great to have something in your portfolio that lets you showcase your personal skills.\u003c/span\u003e While you may discuss, brainstorm, beta test, and advise one another,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall code\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe written by\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou alone\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePresentation\u003c/h3\u003e\r\n\u003cp\u003eSimilar to the final week in previous courses, you’ll present your project on the last day of the week. Take advantage of this opportunity to practice your presentation skills, and receive feedback on your product.\u003c/p\u003e\r\n\u003cp\u003ePlan to spend several minutes addressing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProject Name and Objective\u003c/strong\u003e: Why did you choose this project? What purpose does it fulfill?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDemonstration\u003c/strong\u003e: Show and describe the features of your work. Use technical terms and try hard to make this a serious, professional presentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProcess\u003c/strong\u003e: Describe the development process of your project. What was your MVP? What additional features did you add after fulfilling the requirements of your MVP? What features do you still hope to include?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChallenges\u003c/strong\u003e: Share the biggest challenges you faced, and how you tackled them.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAdditionally, allow time for any questions your audience may have.\u003c/p\u003e\r\n\u003ch2\u003eSubmission\u003c/h2\u003e\r\n\u003cp\u003eSubmit the link to your project's GitHub repository before the end of the day Friday.\u003c/p\u003e\r\n\u003c/div\u003e","exportId":"monday-independent-capstone-project-week-overview"}]}],"pages":[{"exportId":"thursday-customizing-reusable-fragments","title":"Thursday:Customizing Reusable Fragments","type":"WikiPage","content":"\u003ch1\u003eCustomizing Reusable Fragments\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs our last week working through our ongoing MyRestaurants application draws to a close, let's continue to put a few more finishing touches in place. Currently, if users navigate to their list of saved restaurants and view a restaurant's details they still see the \"Save Restaurant\" button; even though they've obviously\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esaved this restaurant!\u003c/p\u003e\r\n\u003cp\u003eThis occurs in both portrait and landscape layouts:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0deo7mubmxgr0cb/portrait-detail-view.png\" alt=\"portrait-detail-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/wp9yj22a37mm6cr/landscape-detail-view.png\" alt=\"landscape-detail-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, we still want to keep our project streamlined and well-refactored by re-using the same RestaurantDetailFragment in both SavedRestaurantListActivity and RestaurantListActivity. After all, this button should be the only difference between the two.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll learn how to hide and show specific elements of a fragment based on additional context about the fragment's usage; such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhere\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user is navigating to it from. In our application specifically, we will hide the \"Save Restaurant\" button on the RestaurantDetailFragment if the user accesses it through the SavedRestaurantListActivity.\u003c/p\u003e\r\n\u003ch2\u003eDetermining Location\u003c/h2\u003e\r\n\u003cp\u003eFirst, we need to determine the area the user is accessing the RestaurantDetailFragment through, and make this information accessible to the fragment itself. We'll do this by including additional information with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnRestaurantSelectedListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe created in the last lesson.\u003c/p\u003e\r\n\u003cp\u003eWe'll structure this information in the form of an additional argument to its singular\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As you know, intent extras are key-value pairs. To minimize room for error we'll place one key and two potential values in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String KEY_SOURCE = \u003cspan class=\"hljs-string\"\u003e\"source\"\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String SOURCE_SAVED = \u003cspan class=\"hljs-string\"\u003e\"saved\"\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String SOURCE_FIND = \u003cspan class=\"hljs-string\"\u003e\"find\"\u003c/span\u003e;\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eKEY_SOURCE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill represent the key in the key-value pair of the intent extra.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSOURCE_SAVED\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be the corresponding value when the user navigates to this fragment through the SavedRestaurantListActivity, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSOURCE_FIND\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill represent the value when the user travels from the RestaurantListActivity (or, the \"Find Restaurants\" area of our application).\u003c/p\u003e\r\n\u003ch2\u003ePassing Location Information Through Listeners\u003c/h2\u003e\r\n\u003cp\u003eNow, we'll use the key and value options we've placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to include this additional information when creating a new instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnRestaurantSelected\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elistener interface.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add an additional\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter to its singular\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eOnRestaurantSelectedListener.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, String source)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be the String name of the activity the user views our reusable fragment from; Either \"RestaurantListActivity\" or \"SavedRestaurantListActivity\", in our case.\u003c/p\u003e\r\n\u003cp\u003eWe're currently implementing this interface in our RestaurantListActivity. Let's make sure to also include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einformation anywhere we're already dealing with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata our listener is already handling:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n     ...\r\n    String mSource;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (savedInstanceState != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n                ...\r\n                mSource = savedInstanceState.getString(Constants.KEY_SOURCE);\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    ...\r\n                    intent.putExtra(Constants.KEY_SOURCE, mSource);\r\n                    startActivity(intent);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSaveInstanceState\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle outState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            ...\r\n            outState.putString(Constants.KEY_SOURCE, mSource);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, String source)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = source;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs we covered in the last lesson, our OnRestaurantClickListener is being passed into our RestaurantViewHolder as a member variable, then triggered in its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003emethod in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e, where it's passed information about which restaurant was clicked. Let's also pass information regarding the user's current location (either SavedRestaurantListActivity or RestaurantListActivity) here too:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n         \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n                mRestaurantSelectedListener.onRestaurantSelected(itemPosition, mRestaurants, Constants.SOURCE_FIND);\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    createDetailFragment(itemPosition);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    intent.putExtra(Constants.KEY_SOURCE, Constants.SOURCE_FIND);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            }\r\n      ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSOURCE_FIND\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ekey if the user is viewing our restaurant's details through the RestaurantListActivity (ie: \"Find Restaurants\" area of our application). This will eventually let our fragment know that we should display the \"Save Restaurant\" button in this area, because these are\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user's saved restaurants, and they should therefore have the option to save any.\u003c/p\u003e\r\n\u003cp\u003eLet's make sure we also include this information if the device is in landscape orientation, too. Because the conditional above simply calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateDetailFragment()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edirectly when the phone is in landscape, we'll need to add the additional information describing where the user came from in this method:'\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e\u003c/span\u003e{\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position, Constants.SOURCE_FIND);\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        ft.commit();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've included the additional parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants.SOURCE_FIND\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen we call RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This will pass along a string referring to the source location that we placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. In this case, \"find\".\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou will likely receive an error regarding this extra argument; but don't worry, we'll address this in just a moment.\u003c/p\u003e\r\n\u003ch3\u003eFirebaseRestaurantListAdapter\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll need to follow a similar process in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride of our FirebaseRestaurantListAdapter. Here, we'll include intent extra information indicating that the user is viewing our restaurant's details from the SavedRestaurantListActivity. Because these restaurants are\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esaved to the user's list, we'll remove the \"Save Restaurant\" button.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestauarantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    ...\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = viewHolder.getAdapterPosition();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    createDetailFragment(itemPosition);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    intent.putExtra(Constants.KEY_SOURCE, Constants.SOURCE_SAVED);\r\n                    mContext.startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's make sure we also include this information if the device is in landscape orientation in the Saved Restaurants area, too. Similar to what we just did in the RestaurantListAdapter, we'll need to add the additional information describing where the user came from in this method:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e\u003c/span\u003e{\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position, Constants.SOURCE_SAVED);\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        ft.commit();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've included the additional parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants.SOURCE_SAVED\u003c/code\u003e. Again, this will pass along a string from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass referring to the source (in this case \"saved\", because our source is the SavedRestaurantListActivity).\u003c/p\u003e\r\n\u003ch2\u003eRetrieving Source Information\u003c/h2\u003e\r\n\u003cp\u003eLet's make use of this information we've included once we reach RestaurantDetailActivity. First, we'll gather the source information we packaged up in the intent extra. We'll assign this value to the member variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSource\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's declare it in RestaurantDetailActivity. Then, we'll define it by fetching the extra information we included with our intent:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n    ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = getIntent().getStringExtra(Constants.KEY_SOURCE);\r\n     ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that our RestaurantDetailActivity can correctly determine if the user reached it from the SavedRestaurantListActivity\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe RestaurantListActivity, let's alter the adapter accordingly. We'll include this source information as an additional argument to our new RestaurantPagerAdapter. The RestaurantPagerAdapter will then provide this information to the RestaurantDetailFragment.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = intent.getStringExtra(Constants.KEY_SOURCE);\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// This line should already exist, we're just adding mSource as an additional parameter:\u003c/span\u003e\r\n        adapterViewPager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantPagerAdapter(getSupportFragmentManager(), mRestaurants, mSource);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you may have guessed, we now need to ensure our RestaurantPagerAdapter is setup to accommodate this extra parameter.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantPagerAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragmentPagerAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(FragmentManager fm, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, String source)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(fm);\r\n        mRestaurants = restaurants;\r\n        mSource = source;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Fragment \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e RestaurantDetailFragment.newInstance(mRestaurants, position, mSource);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the RestaurantPagerAdapter simply declares the member variable, defines it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantPagerAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e, and then provides it as an additional parameter to the RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod called in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll now need to ensure the RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod may also accommodate this additional parameter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mSource;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e RestaurantDetailFragment \u003cspan class=\"hljs-title\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ArrayList\u0026lt;Restaurant\u0026gt; restaurants, Integer position, String source)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        args.putString(Constants.KEY_SOURCE, source);\r\n        ...\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've also included it as an additional parameter to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003ch2\u003eHiding and Showing Fragment Elements\u003c/h2\u003e\r\n\u003cp\u003eNow that this information is being successfully passed to any RestaurantDetailFragments, we can finally use it to impact the appearance of our menu in the RestaurantDetailFragment.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll snag the source information in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetHasMenuOptions(true)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto invoke the menu items in our Fragment class:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSource = getArguments().getString(Constants.KEY_SOURCE);\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n     }\r\n  ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we'll hide or show the \"Save Restaurant\" button depending on the value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSource\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mSource.equals(Constants.SOURCE_SAVED)) {\r\n            mSaveRestaurantButton.setVisibility(View.GONE);\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            \u003cspan class=\"hljs-comment\"\u003e// This line of code should already exist. Make sure it now resides in this conditional:\u003c/span\u003e\r\n            mSaveRestaurantButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, if the user is viewing the RestaurantDetailFragment after having come from the SavedRestaurantListActivity (ie: they're viewing details for restaurants in their \"Saved Restaurants\" list) we will hide the \"Save Restaurant\" button entirely. If they're coming from anywhere else (the RestaurantListActivity, in our case) we will continue to attach the appropriate click listener to the button.\u003c/p\u003e\r\n\u003cp\u003eNow, if we run the application, and view our saved restaurants, we should see that we're no longer offered an option to save a restaurant we've\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready saved\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/mmwwdk8fqwbaipo/no-save-restaurant-button-portrait.png\" alt=\"no-save-restaurant-button-portrait\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/6qtadnfbzglq5mf/no-save-restaurant-button-landscape.png\" alt=\"no-save-restaurant-button-landscape\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll make use of our new ability to pass our RestaurantDetailFragment information regarding the user's navigational context in order to hide or show a photo option in the menu, and offer users the ability to take and save photos of their visit to a saved restaurant!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/26_Customizing_Reusable_Fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEssentially, to hide and show different elements of a re-usable fragment depending on where the user is viewing said fragment, we can include data regarding the user's location in intent extras, and hide elements based on this information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo hide a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e, call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetVisibility()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the parameters\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.GONE\u003c/code\u003e. Example:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSaveRestaurantButton.setVisibility(View.GONE);\u003c/code\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/26_Customizing_Reusable_Fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-discussion-forum-two-day-project","title":"Monday:Discussion Forum (Two-day project)","type":"WikiPage","content":"\u003ch1\u003eDiscussion Forum (Two-day project)\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoals\u003c/strong\u003e: Follow along with the weekend's homework to successfully configure a Firebase database to work with an Android application. Then, practice creating event listeners, saving 'plain old Java objects' to your data store, and retrieving information from Firebase to display back into your application.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a node? What does it represent?\u003c/li\u003e\r\n\u003cli\u003eHow do we listen to a node?\u003c/li\u003e\r\n\u003cli\u003eHow do we stop listening to a node? Why would we want to do this?\u003c/li\u003e\r\n\u003cli\u003eWhat is a data snapshot? What process provides a new data snapshot to an application?\u003c/li\u003e\r\n\u003cli\u003eWith your partner, walk through the basic steps that occur in order to save a new piece of data to a Firebase database in an Android application.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003cp\u003eBefore beginning the Discussion Forum, follow along with the weekend homework to integrate shared preferences and Firebase into our ongoing MyRestaurants application.\u003c/p\u003e\r\n\u003ch3\u003eDiscussion Forum (Two-day project)\u003c/h3\u003e\r\n\u003cp\u003eYou and your partner will spend the next two days building a discussion forum. This forum may be based upon one of the popular discussion forum apps already available, such as\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.yik.yak\u0026amp;hl=en\" target=\"_blank\"\u003eYikYak\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.psst.messenger\" target=\"_blank\"\u003ePsst!\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.reddit.frontpage\" target=\"_blank\"\u003eReddit\u003c/a\u003e, another app; or it can be something entirely of your own creation!\u003c/p\u003e\r\n\u003cp\u003eMessage boards are very common type of app! Take advantage of these two days to create a well-executed portfolio project that demonstrates your capability to create such a popular style of application.\u003c/p\u003e\r\n\u003cp\u003eThis app should:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAllow users to post messages that show up in their app.\u003c/li\u003e\r\n\u003cli\u003eAllow users to browse existing categories.\u003c/li\u003e\r\n\u003cli\u003eAllow users to create a new category, if the category they're looking for doesn't already exist.\u003c/li\u003e\r\n\u003cli\u003eAllow users to select a message to read more.\u003c/li\u003e\r\n\u003cli\u003eAllow users to comment on/reply to messages.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAllow users to upvote a message or response they like.\u003c/li\u003e\r\n\u003cli\u003eAllow users to downvote a message or response they dislike.\u003c/li\u003e\r\n\u003cli\u003eAllow users to respond to other users' comments.\u003c/li\u003e\r\n\u003cli\u003eAdd any features you'd like to see in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eforum app. Have a new and exciting idea you haven't seen in other discussion boards? A feature you wish YikYak, Reddit, or another popular discussion forum offered?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application successfully link to Firebase?\u003c/li\u003e\r\n\u003cli\u003eIs the Firebase database structured correctly?\u003c/li\u003e\r\n\u003cli\u003eAre Firebase listeners providing updated data automatically?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eIs this an application you would use? Why or why not? If not, how could it be improved?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-connecting-users-and-object-data","title":"Thursday:Connecting Users and Object Data","type":"WikiPage","content":"\u003ch1\u003eConnecting Users and Object Data\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that our app allows each user their own personal account, let's make sure each user's \"Saved Restaurants\" list is correctly associated with them. This will ensure that when a user logs in, they see\u003cspan\u003e \u003c/span\u003e\u003cem\u003etheir\u003c/em\u003e\"Saved Restaurants\" .\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll alter the structure of our database to ensure that each restaurant a user saves is attributed to their account user has a unique node, add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our Restaurant objects which will allow us to locate them when we implement delete functionality next week, and alter our existing Firebase query to return only a user's own data.\u003c/p\u003e\r\n\u003ch2\u003eReview: Data Structure in MyRestaurants\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, let's review some ground we have already covered where data structure in Firebase is concerned.\u003c/p\u003e\r\n\u003cp\u003eWhen a user adds a restaurant to their list, we want to save the restaurant object to a user's own dedicated node in our database. To do this, we'll create a node for each user under their account's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty, since it's guaranteed to be unique. And, while we'll continue to save restaurants under a unique push ID, we'll also capture this ID and save it as an attribute in each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cp\u003eThis will result in a database that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/f8fnjxcpf35luh4/new_database_structure.png?raw=1\" alt=\"Firebase Data Structure\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eSaving User-Specific Data\u003c/h2\u003e\r\n\u003ch3\u003eRestaurant Push IDs\u003c/h3\u003e\r\n\u003cp\u003eWe'll begin by adding a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. As detailed in the image above, we'll save each restaurant's unique\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our database. Next week, when we add functionality to delete restaurants from \"Saved Restaurants\" we'll need a method of identifying the specific restaurant to remove from a user's node. This\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute will allow our app to pinpoint the exact restaurant object to delete.\u003c/p\u003e\r\n\u003cp\u003eLet's add this new attribute now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-annotation\"\u003e@Parcel\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    String name;\r\n    String phone;\r\n    String website;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating;String imageUrl;\r\n    List\u0026lt;String\u0026gt; address = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude;\r\n    List\u0026lt;String\u0026gt; categories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String pushId;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.phone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.website = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.rating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.imageUrl = getLargeImageUrl(imageUrl);\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.address = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.latitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.longitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.categories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e name;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e phone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  website;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e imageUrl;}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetLargeImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String imageUrl)\u003c/span\u003e \u003c/span\u003e{\r\n        String largeImageUrl = imageUrl.substring(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, imageUrl.length() - \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e).concat(\u003cspan class=\"hljs-string\"\u003e\"o.jpg\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e largeImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e address;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e latitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e longitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPushId\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e pushId;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetPushId\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String pushId)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.pushId = pushId;\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've declared a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof type String, and created\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetPushId()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetPushId()\u003c/code\u003emethods to retrieve or assign the relevant ID to an object. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not included in the constructor because it won't be provided when the object is first created. Since Firebase creates this value, we cannot assign it to the object until later on, when we're ready to save to Firebase.\u003c/p\u003e\r\n\u003ch3\u003eSaving Objects\u003c/h3\u003e\r\n\u003cp\u003eNow that we have added user authentication to our app, we need to update how we save restaurants to our Firebase database. In order to associate restaurants to a given user, we need to add the restaurants by the user's UID.\u003c/p\u003e\r\n\u003cp\u003eLet's start by grabbing the currently authenticated user's UID in our RestaurantDetailFragment since that's where we are saving our restaurant objects. Add the following to our mSaveRestaurantsButton click listener:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n            String uid = user.getUid();\r\n\r\n            ...\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo get the currently authorized user, we simply need to get the current instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCurrentUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/li\u003e\r\n\u003cli\u003eWe can then grab their UID by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetUid()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow we just need to update our restaurantRef variable so that it points to the correct location in the Firebase database to save restaurants to the user with the returned UID:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n            String uid = user.getUid();\r\n            DatabaseReference restaurantRef = FirebaseDatabase\r\n                    .getInstance()\r\n                    .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                    .child(uid);\r\n            ...\r\n        }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003echild()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to create a node within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode to store the given user's list of restaurants.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, let's add the pushID of the restaurant to be saved before setting the value at given reference:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n            String uid = user.getUid();\r\n\r\n            DatabaseReference restaurantRef = FirebaseDatabase\r\n                    .getInstance()\r\n                    .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                    .child(uid);\r\n\r\n            DatabaseReference pushRef = restaurantRef.push();\r\n            String pushId = pushRef.getKey();\r\n            mRestaurant.setPushId(pushId);\r\n            pushRef.setValue(mRestaurant);\r\n\r\n            Toast.makeText(getContext(), \u003cspan class=\"hljs-string\"\u003e\"Saved\"\u003c/span\u003e, Toast.LENGTH_SHORT).show();\r\n        }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the new child node. This prompts Firebase to create a unique push ID. This is the ID we will assign to the restaurant's new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe collect this ID by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetKey()\u003c/code\u003e, and assign it a variable name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetPushId()\u003c/code\u003e, providing the Firebase push ID as an argument, to define the\u003ccode\u003erestaurant\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epushId\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto save the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in the specified node in Firebase, and display a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we run our app we should be able to log in, save several restaurants, and see these restaurants appear under the appropriate\u003cspan\u003e \u003c/span\u003e\u003ccode\u003euid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our database.\u003c/p\u003e\r\n\u003ch2\u003eMaintaining Database Consistency\u003c/h2\u003e\r\n\u003cp\u003eHowever, we do have one small problem. Now that we've added a new attribute to restaurants and changed where we save them, any\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurants we save will conform to our new standards, but any restaurants added\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethese changes will have an entirely different data structure.\u003c/p\u003e\r\n\u003cp\u003eWe\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewant our databases to be as consistent as possible. Therefore, we'll need to delete all existing restaurants from Firebase by selecting the red \"X\" next to the restaurants node:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s0irladwq4oa92i/delete-restaurants-firebase.png?raw=1\" alt=\"deleting-restaurants-from-firebase\"\u003e\u003c/p\u003e\r\n\u003cp\u003eMoving forward, all restaurants saved will be saved in the appropriate data structure, with the necessary attributes, and our database will have consistent structure that follows best practices!\u003c/p\u003e\r\n\u003ch2\u003eRetrieving User-Specific Data\u003c/h2\u003e\r\n\u003cp\u003eNow that we've organized our database appropriately, we need to alter our SavedRestaurantListActivity in order to display the \"Saved Restaurants\" list associated with the user currently logged in. Let's start by grabbing the currently authorized user's UID in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e. We can do this by adding the following two lines:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we need to update our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable so that it points to the correct location in the database, just like we did in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSaveRestaurantButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclick listener in the RestaurantDetailFragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n         ...\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        mRestaurantReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid);\r\n        ...\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe completed\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n  \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        mRestaurantReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid);\r\n\r\n        setUpFirebaseAdapter();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we launch the app again, save a few restaurants, and then navigate to the SavedRestaurantsActivity, we should see that each user can only see their own individual \"Saved Restaurants\" list.\u003c/p\u003e\r\n\u003cp\u003eDon't forget to update the \u003cspan\u003eFirebaseRestaurantViewHolder database reference to include the userId in the new referencing style:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eDatabaseReference ref = FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e)\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e to\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirebaseRestaurantViewHolder.java\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eFirebaseUser user = FirebaseAuth.\u003cspan\u003egetInstance\u003c/span\u003e().getCurrentUser()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003eString uid = user.getUid()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003eDatabaseReference ref = FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e).child(uid)\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e Now the restaurant details will display just fine in the Restaurant. The only problem you will notice is that it won't be displaying the details to the specific restaurant you clicked. We will fix this in a later lesson.\u003c/p\u003e\r\n\u003ch2\u003eDatabase Rules\u003c/h2\u003e\r\n\u003cp\u003eWith authorized users fully established and able to save restaurants to their personalized node, let's update the security settings in our Firebase Database so that only authorized users can read and write to it. Navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRules\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDatabase\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand change the rules to the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003erules\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.read\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.write\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor more information on Firebase Database rules, read\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/security/quickstart\"\u003eGet Started with Database Rules\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eFirebase database rules allowing only\u003cspan\u003e \u003c/span\u003e\u003cem\u003eauthenticated\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eusers to write to the database:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003erules\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.read\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.write\u003c/span\u003e\": \u003cspan class=\"hljs-string\"\u003e\"auth != null\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirebase's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.firebase.com/docs/android/guide/structuring-data.html\"\u003eStructuring Data\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle covers best practices for organizing and structuring Firebase databases.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Firebase Database rules, read\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/security/quickstart\"\u003eGet Started with Database Rules\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-body-language-awareness","title":"Wednesday: Body Language Awareness","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow aware are you of your body language?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBody language is broken down into eye contact, facial expressions, and gestures. In your day-to-day life, how often do you use good body language when communicating with people?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eOver the next two weeks, pay attention to how you use body language. The below questions should help you recognize your body language tendencies in preparation for the body language workshop in two weeks.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eEye Contact\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat do you do right or wrong in terms of eye contact?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you maintain a steady eye contact when conversing with someone?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you look at someone directly or are you easily distracted?\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eGestures\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you express your language using gestures? If yes, how often?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you nod your head to show approval?\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you use your hands when conversing with people?\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-weight: 400;\"\u003eFacial Expressions\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDo you convey facial expressions that are consistent with the information you are conveying? \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen delivering information or feelings like excitement, sadness, frustration, anger, boredom, anger, etc. do your face, eyes and eyebrows show these feelings?  \u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-custom-fragments","title":"Tuesday: Custom Fragments","type":"WikiPage","content":"\u003ch1\u003eCustom Fragments\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eUp until this point, we've built user interfaces with activities and adapters primarily, before getting some exposure to Fragments with the lesson on creating a Dialog Fragment. To review, we can consider Fragments the Components of the Android world -- they function similarly to how a component would inside a JS framework such as Angular, for example.\u003c/p\u003e\r\n\u003cp\u003eThe allow us to move some of our design and functionality out of our activities and into smaller, more modular and reusable pieces. Fragments seem daunting at first, as they are definitely trickier to work with than Activities, but the effort in learning and utilizing how to craft and employ custom fragments is the key to an efficient, responsive application that is in line with current development standards!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll add a RestaurantDetailActivity fragment and corresponding layout to our ongoing MyRestaurants application. This fragment will be responsible for displaying details about a restaurant when the user clicks one in our ListView. Let's get started.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, read Code Path's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Creating-and-Using-Fragments\" target=\"_blank\"\u003eCreating and Using Fragments\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor a brief overview of the functionality fragments offer, and how they may be implemented.\u003c/p\u003e\r\n\u003ch2\u003eFragments in MyRestaurants\u003c/h2\u003e\r\n\u003ch3\u003eRefactoring Activity Names\u003c/h3\u003e\r\n\u003cp\u003eFirst, we'll refactor RestaurantsActivity to RestaurantListActivity so that we can easily distinguish it from our detail activity. Right click on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRefactor \u0026gt; Rename...\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCreating a Detail Activity\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an Empty activity in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eour _ui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epackage_ called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailActivity\u003c/code\u003e. Select the option to generate a layout file. In the corresponding layout, add the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurant_detail.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.RestaurantDetailActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v4.view.ViewPager\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/viewPager\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v4.view.PagerTabStrip\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/pagerHeader\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"top\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eandroid.support.v4.view.ViewPager\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill act as a container to hold our fragment.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePagerTabStrip\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill create a header at the top of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will eventually display the current restaurant's name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreating Fragments\u003c/h3\u003e\r\n\u003cp\u003eLet’s create our fragment now. We can right click on our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Fragment(Blank)\u003c/em\u003e. We'll call it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e. Leave\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate layout XML?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption checked, but be sure to uncheck\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude fragment factory methods?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude interface callbacks?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas these options will create unnecessary boilerplate code.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/s9micuhlbgagci0/create-blank-fragment.png\" alt=\"create-blank-fragment\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/pelf0wa0wp4maeo/create-blank-fragment_options.png\" alt=\"create-blank-fragment-options\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eDetail View Layout\u003c/h3\u003e\r\n\u003cp\u003eIn the corresponding layout, let's design our detail view. Our layout will integrate icons next to restaurant phone numbers, addresses, and websites.\u003c/p\u003e\r\n\u003ch3\u003eDownloading and Adding Icons\u003c/h3\u003e\r\n\u003cp\u003eDownload the Google Material icons listed below. Or, feel free to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/\" target=\"_blank\"\u003ebrowse the entire collection here\u003c/a\u003e.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://design.google.com/icons/#ic_exit_to_app\" target=\"_blank\"\u003eic_exit_to_app_white\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://design.google.com/icons/#ic_local_phone\" target=\"_blank\"\u003eic_call_white\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://design.google.com/icons/#ic_map\" target=\"_blank\"\u003eic_map_white\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eEach of these downloads will provide a folder containing several subdirectories. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroid\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-directory you'll see five additional sub-directories:\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-hdpi, drawable-mhdpi, drawable-xhdpi, drawable-xxhdpi\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-xxxhdpi\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehdpi\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for \"high dot per inch\". Each of these represents a different size icon.\u003c/p\u003e\r\n\u003cp\u003eIn upcoming lessons, we'll learn about\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#16.html\" target=\"_blank\"\u003eAlternative Resources\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand implement them into our project. Alternative resources support different device configurations, like screen size, or orientation. We'll need multiple icon sizes for our Alternative Resources, so we'll include\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeach\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esize of all three icons in our project now.\u003c/p\u003e\r\n\u003cp\u003eCopy/paste or drag/drop the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-hdpi, drawable-mhdpi, drawable-xhdpi, drawable-xxhdpi\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable-xxxhdpi\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectories from one of the icon folder's into our project's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. Then, also place the individual .PNG files of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etwo icons in the sub-directories corresponding to their size. Once completed,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould be organized like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/a5ib7ft8265m9j7/icons-organized-by-size.png\" alt=\"icons-organized-by-size\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can now implement these icons into our layout. The finished product will look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_restaurant_detail.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.RestaurantDetailFragment\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"180dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryDark\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4.5/5\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentEnd\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Brunch, American\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/cuisineTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorSecondaryText\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/saveRestaurantButton\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"View on Yelp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/websiteTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_exit_to_app_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"(503) 223-1282\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/phoneTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_local_phone_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"123 SW Best Ever Ave. Portland, Oregon, 97222\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_map_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/addressTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Save Restaurant\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/saveRestaurantButton\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eA few additional notes about this layout:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFeel free to use a placeholder image in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eandroid:gravity=\"center\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis used inside the information\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto vertically center-align text next to its corresponding icon.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor the time being, the hard-coded fields you see above (such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:text=\"123 SW Best Ever Ave. Portland, Oregon, 97222\"\u003c/code\u003e) will act as placeholders for our actual restaurant data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn the next lesson, we'll use a tool called Parceler to fill these placeholders with the dynamic data we're collecting from Yelp's API.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/11_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFragments\u003c/strong\u003e: Small pieces of user interfaces that can be embedded in activities or displayed by adapters.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ehdpi\u003c/strong\u003e: \"dpi\" stands for \"dot per inch\", and the \"h\" stands for \"high\". Essentially, higher-quality resolution.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/11_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Creating-and-Using-Fragments\" target=\"_blank\"\u003eCreating and Using Fragments\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Fragment.html\" target=\"_blank\"\u003eFragments Documentation Entry\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/fragments.html\" target=\"_blank\"\u003eFragments Guide\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eVogella Tutorial on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.vogella.com/tutorials/AndroidFragments/article.html\" target=\"_blank\"\u003eAndroid Fragments\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://design.google.com/icons/\" target=\"_blank\"\u003eGoogle Material icons\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-unit-testing-basics-with-robolectric","title":"Pre-course work: Unit Testing Basics with Robolectric","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eTesting is an important aspect of development, especially in Android. There are a number of factors that affect the behavior of a mobile app that we haven't had to consider when writing web apps. Android applications run on devices with limited memory, CPU power, and power supply and can be negatively impacted by external factors like connectivity, general system utilization, etc.\u003c/p\u003e\r\n\u003cp\u003eTesting in Android can be broken down into two categories:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLocal tests which run on the JVM without an emulator or device\u003c/li\u003e\r\n\u003cli\u003eInstrumentation tests which require an android device or emulator to simulate a user\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eLocal Testing\u003c/h2\u003e\r\n\u003cp\u003eTo run local tests we will use the Robolectric unit testing framework. With Robolectric, we will test the behaviors of a particular component in isolation of other components.\u003c/p\u003e\r\n\u003ch3\u003eConfiguration\u003c/h3\u003e\r\n\u003ch4\u003eAdding Libraries and Dependencies\u003c/h4\u003e\r\n\u003cp\u003eLet’s start with a simple test using our MyRestaurants app. To get started, configure your app to use the 'org.apache.http.legacy' library (necessary for testing\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eshadows\u003c/strong\u003e, which we will cover momentarily) and add the following repositories and dependencies to your build.gradle file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003eandroid {\r\n  ...\r\n    testOptions {\u003cbr\u003e        unitTests {\u003cbr\u003e            includeAndroidResources = true\u003cbr\u003e        }\u003cbr\u003e    }\r\n  ...\u003c/code\u003e\u003ccode class=\"groovy hljs bash\"\u003e\r\n}\r\n\r\ndependencies {\r\n    ...\r\n    testImplementation \"org.robolectric:robolectric:3.8\"\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ebuild.gradle(Project:MyRestaurant) \u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e...\r\n\r\n  repositories {\r\n      \u003c/code\u003ejcenter()\u003cbr\u003e//\u003cspan\u003eNote: if you are planning to use the \u003c/span\u003e\u003ccode\u003egoogle() \u003c/code\u003e\u003cspan\u003e, you need Gradle 4.x+, Android Studio 3.x+ and Gradle plugin for Android 3.x+.\u003c/span\u003e\u003cbr\u003egoogle()\u003cbr\u003emaven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\u003ccode class=\"groovy hljs bash\"\u003e\u003cbr\u003e  }\r\n  ...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch4\u003eCreating Test Classes\u003c/h4\u003e\r\n\u003cp\u003eNavigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejava/com.moringaschool.myrestaurants (test)\u003c/em\u003e, right click on the test package name, and create a new class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivityTest\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/vf3xl9oi0pnua1c/creating-new-unit-test-class.png\" alt=\"create-new-test-class-android\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdd the following annotation to our test class to allow our code to be run natively in the JVM instead of on an Android device:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/MainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e@RunWith(RobolectricTestRunner.class)\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRemember, each time a class name appears red, it means the class needs to be imported. You can do this by clicking on the red and underlined class name, and pressing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e. After importing all classes, your MainActivityTest file should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/MainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant;\u003c/span\u003e\r\n\r\nimport org.junit.runner.RunWith;\u003cbr\u003eimport org.robolectric.RobolectricTestRunner;\r\n\r\n@RunWith(RobolectricTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore we write our first test, we'll also want to configure our test class so it knows which Activity we will use to write our tests:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/MainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.\u003cspan\u003eBefore\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.runner.\u003cspan\u003eRunWith\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.Robolectric\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.RobolectricTestRunner\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e@RunWith\u003c/span\u003e(RobolectricTestRunner.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e\u003cbr\u003e\u003cspan\u003epublic class \u003c/span\u003eMainActivityTest {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eMainActivity \u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Before\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003esetup\u003c/span\u003e(){\u003cbr\u003e        \u003cspan\u003eactivity \u003c/span\u003e= Robolectric.\u003cspan\u003esetupActivity\u003c/span\u003e(MainActivity.\u003cspan\u003eclass\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003ch3\u003eWriting Tests\u003c/h3\u003e\r\n\u003cp\u003eFor our first test, we will assert that the text in our MainActivity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis equal to “MyRestaurants”. To do this, we need to give our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean ID:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003e...\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/appNameTextView\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are finally ready to write our first test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eandroid.widget.TextView\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.\u003cspan\u003eBefore\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.\u003cspan\u003eTest\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.junit.runner.\u003cspan\u003eRunWith\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.Robolectric\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eorg.robolectric.RobolectricTestRunner\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport static \u003c/span\u003ejunit.framework.TestCase.\u003cspan\u003eassertTrue\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e@RunWith\u003c/span\u003e(RobolectricTestRunner.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e\u003cbr\u003e\u003cspan\u003epublic class \u003c/span\u003eMainActivityTest {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eMainActivity \u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Before\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003esetup\u003c/span\u003e(){\u003cbr\u003e        \u003cspan\u003eactivity \u003c/span\u003e= Robolectric.\u003cspan\u003esetupActivity\u003c/span\u003e(MainActivity.\u003cspan\u003eclass\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Test\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003evalidateTextViewContent\u003c/span\u003e(){\u003cbr\u003e        TextView appNameTextView = \u003cspan\u003eactivity\u003c/span\u003e.findViewById(R.id.\u003cspan\u003eappNameTextView\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eassertTrue\u003c/span\u003e(\u003cspan\u003e\"MyRestaurants\"\u003c/span\u003e.equals(appNameTextView.getText().toString()))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWith your cursor over ‘assertTrue’, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption + Enter\u003c/em\u003e, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStatic import method...\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand select the first option to import it. This should add the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimport static junit.framework.Assert.assertTrue;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the top of your file.\u003c/li\u003e\r\n\u003cli\u003eAll JUnit tests require the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Test\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation before the method declaration.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eactivity.findViewById\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the appNameTextView which we will cast as type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eInside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eassertTrue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe test to see that the text from our appNameTextView is equal to “MyRestaurants”\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eRunning Tests\u003c/h3\u003e\r\n\u003cp\u003eLet’s run this test and see if it passes. Right click on class name in the file structure view and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun ‘MainActivityTest’\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/n964c12l2gvv3ii/running-unit-tests-in-android-studio.png\" alt=\"running-unit-tests-android\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe console should automatically open and display the progress of the running test. The progress bar indicator should turn green and read ‘1 test passed’. We just passed our first Android unit test -- nice work!\u003c/p\u003e\r\n\u003cp\u003eNote: Note if your tests fail with an error message like;\u003c/p\u003e\r\n\u003cpre\u003ejava.lang.UnsupportedOperationException: Robolectric does not support API level 28.\u003c/pre\u003e\r\n\u003cp\u003eJust navigate to your: build.gradle(Module: app) and change the value of the \u003cstrong\u003ecompileSdkVersion\u003c/strong\u003e and \u003cstrong\u003etargetSdkVersion \u003c/strong\u003eto \u003cstrong\u003e27 \u003c/strong\u003eand that of the dependency \u003cem\u003eimplementation 'com.android.support:appcompat-v7:28.0.0' \u003c/em\u003eto look like this \u003cem\u003eimplementation 'com.android.support:appcompat-v7:27.1.1' \u003c/em\u003e. They should look like this:\u003c/p\u003e\r\n\u003cpre\u003eandroid {\u003cbr\u003e    compileSdkVersion \u003cspan\u003e27\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003edefaultConfig {\u003cbr\u003e       ...\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etargetSdkVersion \u003cspan\u003e27\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e       ...\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e       \u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003c/pre\u003e\r\n\u003cpre\u003edependencies {\u003cbr\u003e  ...\u003cbr\u003e    implementation \u003cspan\u003e'com.android.support:appcompat-v7:27.1.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e  ...\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e}\u003cspan\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/prkgz0uj2tcmqad/passing-test-in-console.png\" alt=\"passing-test-in-console\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eWriting Tests with Shadows\u003c/h3\u003e\r\n\u003cp\u003eLet's write one more test to verify the RestaurantsActivity is started when findRestaurantsButton is clicked. To do this, we will need to use something called shadows.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eShadows\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare classes that modify or extend behavior of a class in the Android SDK. Robolectric looks for Shadow classes that correspond with any Android classes that are run as part of a Robolectric test.\u003c/p\u003e\r\n\u003ch3\u003eRequired Reading\u003c/h3\u003e\r\n\u003cp\u003eRead about using shadows in Robolectric\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Unit-Testing-with-Robolectric#using-shadows\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand then check out the test below that asserts that the correct activity is launched when we click on our findRestaurantsButton:\u003c/p\u003e\r\n\u003ch3\u003eExample Test Using Shadows\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003e...\u003cbr\u003e@Test\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003esecondActivityStarted\u003c/span\u003e(){\u003cbr\u003e    \u003cspan\u003eactivity\u003c/span\u003e.findViewById(R.id.\u003cspan\u003efindRestaurantsButton\u003c/span\u003e).performClick()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eIntent expectedIntent = \u003cspan\u003enew \u003c/span\u003eIntent(\u003cspan\u003eactivity\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eRestaurantsActivity.\u003cspan\u003eclass\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eShadowActivity shadowActivity = org.robolectric.Shadows.\u003cspan\u003eshadowOf\u003c/span\u003e(\u003cspan\u003eactivity\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eIntent actualIntent = shadowActivity.getNextStartedActivity()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eassertTrue\u003c/span\u003e(actualIntent.filterEquals(expectedIntent))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003cbr\u003e...\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/2_robolectrics\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLocal Testing\u003c/strong\u003e: Tests that run locally on the JVM, without an emulator or device.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInstrumentation Testing:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTests that require an Android device or emulator to simulate a user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRobolectric\u003c/strong\u003e: A unit testing framework for Android applications.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eShadows\u003c/strong\u003e: Classes that modify or extend the behavior of a class in the Android SDK. Robolectric looks for Shadow classes that correspond with any Android classes that are run as part of a Robolectric test.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn order to use shadows, applications must be configured to use the 'org.apache.http.legacy' library.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eUnit test classes should reflect the activity whose logic they're testing. (ie: Tests meant to cover logic present in MainActivity will reside in a MainActivityTest class. Tests covering logic in a WelcomeActivity will reside in a WelcomeActivityTest class.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/2_robolectrics\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://robolectric.org/getting-started/\"\u003eRobolectric Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003eCode Path Tutorial on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Unit-Testing-with-Robolectric\"\u003eUnit Testing with Robolectric\u003c/a\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e","frontPage":false},{"exportId":"weekend-api-requests-and-responses","title":"Weekend: API Requests and Responses","type":"WikiPage","content":"\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that we have everything in place, let's begin creating authenticated OAuth API requests to the Yelp API, and return the resulting data into our application.\u003c/p\u003e\r\n\u003ch2\u003eBuilding a Request\u003c/h2\u003e\r\n\u003cp\u003eFirst, we’ll add the base URL and query parameters to our Constants.java file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic class \u003c/span\u003eConstants {\u003cbr\u003e    \u003cspan\u003epublic static final \u003c/span\u003eString \u003cspan\u003eYELP_TOKEN \u003c/span\u003e= BuildConfig.\u003cspan\u003eYELP_TOKEN\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public static final \u003c/span\u003eString \u003cspan\u003eYELP_BASE_URL \u003c/span\u003e= \u003cspan\u003e\"https://api.yelp.com/v3/businesses/search\"\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public static final \u003c/span\u003eString \u003cspan\u003eYELP_LOCATION_QUERY_PARAMETER \u003c/span\u003e= \u003cspan\u003e\"location\"\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003eThere are many different types of information the Yelp API can return. But because our app will only be requesting restaurant information, we can simply re-use this URL \"template\", and insert a different zip code each time. This also keeps our code DRY, because we only ever have to declare the base URL in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eplace.\u003c/p\u003e\r\n\u003ch2\u003eYelpService\u003c/h2\u003e\r\n\u003cp\u003eNext, let's create a new class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eYelpService.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside our main package. This class will contain all logic necessary for interacting with the Yelp API, including using OkHttp and SignPost to create and authenticate requests.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll define a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that takes two parameters: The location a user provides, and a callback that will execute when our API request receives a readable response from Yelp.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eimport okhttp3.Callback;\u003cbr\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eYelpService\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efindRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location, Callback callback)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n  }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cem\u003e(\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWhen importing necessary classes, several classes listed here (such as\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003c/code\u003e) have multiple options. Make sure to double-check that you're importing the correct classes, as depicted in this lesson's example code.)\u003c/em\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 18pt;\"\u003eOkHttp Client\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, we'll create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclient to create and send our request. We can do this using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003eincluding in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epackage, like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003epackage io.github.vinge1718.restaurant;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003eclass\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eYelpService\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n    \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003estatic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003evoid\u003c/span\u003e\u003cspan class=\"pln\"\u003e findRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pln\"\u003e callback\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pln\"\u003e client \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003enew\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eOkHttp Client\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOkHttpClient\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create and send our request. We'll tie it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsumer\u003c/code\u003eSignPost object responsible for creating our signature:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epackage \u003c/span\u003eio.github.vinge1718.restaurant\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.Callback\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.HttpUrl\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.OkHttpClient\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003eimport \u003c/span\u003eokhttp3.Request\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic class \u003c/span\u003eYelpService {\u003cbr\u003e    \u003cspan\u003epublic static void \u003c/span\u003e\u003cspan\u003efindRestaurants\u003c/span\u003e(String location\u003cspan\u003e, \u003c/span\u003eCallback callback){\u003cbr\u003e        OkHttpClient client = \u003cspan\u003enew \u003c/span\u003eOkHttpClient.Builder()\u003cbr\u003e                .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eHttpUrl.Builder urlBuilder = HttpUrl.\u003cspan\u003eparse\u003c/span\u003e(Constants.\u003cspan\u003eYELP_BASE_URL\u003c/span\u003e).newBuilder()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eurlBuilder.addQueryParameter(Constants.\u003cspan\u003eYELP_LOCATION_QUERY_PARAMETER\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003elocation)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eString url = urlBuilder.build().toString()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eRequest request = \u003cspan\u003enew \u003c/span\u003eRequest.Builder()\u003cbr\u003e                .url(url)\u003cbr\u003e                .header(\u003cspan\u003e\"Authorization\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eConstants.\u003cspan\u003eYELP_TOKEN\u003c/span\u003e)\u003cbr\u003e                .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject aptly named\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003erequest\u003c/span\u003e\u003c/code\u003e, and provide it the string\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe've just constructed using the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eheader\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto add a header to our request. The Yelp API requires our requests include a header with our unique access token. As explicitly stated in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/authentication\"\u003eYelp Fusion Documentation on Authentication\u003c/a\u003e:\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003eTo authenticate API calls with the access token, set the Authorization HTTP header value as Bearer ACCESS_TOKEN.\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHeaders, like parameters, are key-value pairs. So, in the code above we're adding a header with the key\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"str\"\u003e\"Authorization\"\u003c/span\u003e\u003c/code\u003e, and a value of our\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eYELP_TOKEN\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstant, which includes both the term\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand our unique access token, per the requirements of the Yelp API.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAfter adding the header, we call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto build our new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCalling a Request Asynchronously\u003c/h3\u003e\r\n\u003cp\u003eAnd finally, we'll execute this request:\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eYelpService.java\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eCall\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eHttpUrl\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"kwd\"\u003eimport\u003c/span\u003e\u003cspan class=\"pln\"\u003e okhttp3\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003eclass\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eYelpService\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n    \u003c/span\u003e\u003cspan class=\"kwd\"\u003epublic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003estatic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003evoid\u003c/span\u003e\u003cspan class=\"pln\"\u003e findRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eCallback\u003c/span\u003e\u003cspan class=\"pln\"\u003e callback\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pln\"\u003e client \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003enew\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eOkHttpClient\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eHttpUrl\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pln\"\u003e urlBuilder \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eHttpUrl\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eparse\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eConstants\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_BASE_URL\u003c/span\u003e\u003cspan class=\"pun\"\u003e).\u003c/span\u003e\u003cspan class=\"pln\"\u003enewBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        urlBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eaddQueryParameter\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"typ\"\u003eConstants\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_LOCATION_QUERY_PARAMETER\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e url \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e urlBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e().\u003c/span\u003e\u003cspan class=\"pln\"\u003etoString\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003cspan class=\"pln\"\u003e request\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003enew\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eRequest\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"typ\"\u003eBuilder\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eurl\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eheader\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"str\"\u003e\"Authorization\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eConstants\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_TOKEN\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n                \u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003ebuild\u003c/span\u003e\u003cspan class=\"pun\"\u003e();\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n        \u003c/span\u003e\u003cspan class=\"typ\"\u003eCall\u003c/span\u003e\u003cspan class=\"pln\"\u003e call \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e client\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003enewCall\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003erequest\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        call\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003ecallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we create a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eCall\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and place our request in it.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ecall\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003ecallback\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto execute it. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ecall\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eexecute\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to synchronously dispatch the request, but this would clog the main thread of our application. Instead, we use\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto perform an asynchronous request.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe OkHttp\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eenqueue\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will add our request to a queue. Since this is the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecall in the queue of our app, it will run right away. OkHttp will create a new thread to dispatch our request. Once it has a readable response it will trigger our callback method, where it will send our response data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e(Don't worry too much about threading now. We'll look at thread and threading in detail in an upcoming lesson!)\u003c/p\u003e\r\n\u003ch2\u003eReceiving a Response\u003c/h2\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass is a great place to separate our network call from our user interface code, but because we will be updating the UI with our response data, let's create our callback method inside of RestaurantsActivity. We'll call it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    ...\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n            yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe first thing this method will do is create a new instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e, and call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As we know,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're searching for restaurants in, and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCallback\u003c/code\u003e. We create a new empty\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto provide as the second argument.\u003c/p\u003e\r\n\u003ch3\u003eCallback Methods\u003c/h3\u003e\r\n\u003cp\u003eOur callback will have two methods to override:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis triggered when our request fails (if we create a bad URL, for example).\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis triggered when the request is successful. Let's add\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efirst:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Call;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Callback;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\r\n\r\n    ...\r\n\r\n       \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n            yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf the API request executed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efails for any reason, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003ecallback method will execute. It simply calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.printStackTrace();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto print details regarding the error to our output console.\u003c/p\u003e\r\n\u003cp\u003eNext, inside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe will tell our app what to do with the data returned from Yelp. We'll eventually save this data into a model, but for now we'll log it to the logcat:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.io.IOException;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Call;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Callback;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e okhttp3.Response;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n    ...\r\n\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n            yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                    String jsonData = response.body().string();\r\n                    Log.v(TAG, jsonData);\r\n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new string,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejsonData\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it to the string of the response body. Then, we print the data to the logcat. If we catch any exceptions, we display their error messages.\u003c/p\u003e\r\n\u003cp\u003eNext, let's call our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of RestaurantsActivity. Because RestaurantsActivity is only ever accessed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea user has submitted the form from MainActivity, we can safely assume that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould be called each time RestaurantsActivity is accessed:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        getRestaurants(location);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to launch the application in the emulator, submit a zip code into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003eon our MainActivity, and see data returned from the Yelp API in the logcat!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003eThe following method builds, signs, and sends an OAuth API request using OkHttp and Signpost:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003efindRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location, Callback callback)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        OkHttpClient client = new OkHttpClient.Builder()\u003cbr\u003e                .build();\r\n\r\n        HttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.YELP_BASE_URL).newBuilder();\u003cbr\u003e        urlBuilder.addQueryParameter(Constants.YELP_LOCATION_QUERY_PARAMETER, location);\u003cbr\u003e        String url = urlBuilder.build().toString();\r\n\r\n        Request request = new Request.Builder()\u003cbr\u003e                .url(url)\u003cbr\u003e                .header(\"Authorization\", Constants.YELP_TOKEN)\u003cbr\u003e                .build();\r\n\r\n        Call call = client.newCall(request);\r\n        call.enqueue(callback);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe following calls the method above, providing a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject as a parameter. It contains\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonFailure()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback methods that are executed depending on the status of the API request:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                    String jsonData = response.body().string();\r\n                    Log.v(TAG, jsonData);\r\n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://hueniverse.com/oauth/guide/terminology/\" target=\"_blank\"\u003eTerminology Section\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof Eran Hammer's OAuth guide for more information regarding OAuth terminology.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf you are unfamiliar with the concept of threading check out this link:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Managing-Threads-and-Custom-Services#thread\" target=\"_blank\"\u003eThread | Android Developers\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-view-dot-onclicklistener-interface","title":"Tuesday: View.OnClickListener Interface","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eCurrently, we are creating a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor our findRestaurantsButton, like so:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, eventually we'll add another button to take the user to an account registration page. This second button will need its own\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etoo! And we'll need a sign-in button for the user to log in once they create an account. That will also need its own \u003ccode\u003eView.onClickListener\u003c/code\u003e! And what if we wanted to add a link to an About page? Yep! You guessed, it, we'd need\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanother \u003c/em\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e! All of these listeners would confound our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod! Not to mention that our code would be redundant and difficult-to-follow.\u003c/p\u003e\r\n\u003cp\u003eThankfully, there's a way we can refactor. Instead of creating a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.onClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor each individual button, let’s implement something called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface. The interface is more reusable, and will result in much cleaner code.\u003c/p\u003e\r\n\u003ch2\u003eInterfaces\u003c/h2\u003e\r\n\u003cp\u003eBut what's an interface anyway? Before we begin, let's explore interfaces in general. While Android uses interfaces, they're certainly not Android-specific. They're not even specific to Java. Interfaces are a concept used in many programming languages, including C#, Visual Basic, Python, Java, PHP, and Swift.\u003c/p\u003e\r\n\u003cp\u003eIn simple terms, an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einterface\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a group of methods multiple different classes may inherit.\u003c/p\u003e\r\n\u003cp\u003eFor instance, say we had an interface called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e {\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e; \r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e;  \r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface contains two methods: One for making a happy noise, and one for making an angry noise. Now, we know\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethings are capable of being noisy. So,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclasses can implement this interface. For instance, an Elephant could be pretty noisy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eElephant\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"rumble\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"trumpet\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a Dog can be pretty loud, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"growl\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"bark\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, despite both\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eElephant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclasses implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einterface with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame \u003c/em\u003emethods, Dogs and Elephants make\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enoises; so the interface's methods are personalized to each animal's class.\u003c/p\u003e\r\n\u003cp\u003eInterfaces allow us to separate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea class does (make angry noises, for instance) from\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit does it (either rumbling or. growling, depending on the animal).\u003c/p\u003e\r\n\u003ch3\u003eRules for Interfaces\u003c/h3\u003e\r\n\u003cp\u003eThere are several rules to consider when creating and using interfaces:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInterface methods can only be public (and are by default).\u003c/li\u003e\r\n\u003cli\u003eMember variables can only be public, static, and final (and are by default).\u003c/li\u003e\r\n\u003cli\u003eA class must implement\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods of an interface, unless the class is declared as abstract. That means, using the example above, any other People or Animal classes that implement the interface\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust have methods for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehappyNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eangryNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefined in their class.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFor more information, read the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html\"\u003eOracle documentation on Creating Interfaces\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eBuilt-In Android Interfaces\u003c/h2\u003e\r\n\u003cp\u003eIn the example above, we created a rudimentary\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface from scratch. However, Android comes with many of the most commonly-used interfaces built right in! The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis one of\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/view/View.html#nestedclasses\"\u003emany interfaces\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eincluded in Android's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003ch3\u003eImplementing an Interface\u003c/h3\u003e\r\n\u003cp\u003eOur MainActivity should currently look something like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo begin using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface, we'll first need to provide the class access to it. We do this by adding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimplements View.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the end of the class declaration, like so:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eimplements\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a keyword specific to interfaces, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eextends\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(also seen here) is used to inherit classes. Whenever we add an interface, we always use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimplements\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eAs soon as you add this, Android Studio will immediately underline this line in red, and present you with the following error message:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/oog7um305mu7y91/error-implementing-click-listener-interface.png\" alt=\"android-studio-error-on-click-listener\"\u003e\u003c/p\u003e\r\n\u003cp\u003eRemember, the rules for implementing interfaces we just covered? A class must implement\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods of an interface, unless the class is declared as abstract. Therefore, we will need to include every method in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface here in our MainActivity. If we check the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/view/View.OnClickListener.html\"\u003edocumentation for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewe can see that it only has\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may notice that our MainActivity actually already has an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod; but it's not part of the class! It's currently nested in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e. Let's move it outside of this method:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        String location = mLocationEditText.getText().toString();\r\n        Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n        intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n        startActivity(intent);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, instead of creating individual click listeners for anything clickable, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003einterface is available to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eentire class\u003c/em\u003e. Therefore, when we attach a listener to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e, we can pass the current context as an argument:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton.setOnClickListener(this);\u003c/code\u003e, because the current context (MainActivity) now includes the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit requires.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, because the interface applies to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhole class\u003c/em\u003e, its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will be called whenever\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclick listener is triggered. So, let's include a conditional that will execute different code depending on\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis clicked:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, as we add more links and buttons we can simply call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.setOnClickListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003eelement we'd like to attach a click listener to, and add another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003emethod. Awesome!\u003c/p\u003e\r\n\u003cp\u003eFrom now on, we'll implement our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListeners\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this fashion.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eInterface\u003c/strong\u003e: A group of methods multiple different classes may inherit. They allow us to separate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea class does from\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eit does it.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003ch3\u003eInterface Rules\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInterface methods can only be public (and are by default).\u003c/li\u003e\r\n\u003cli\u003eMember variables can only be public, static, and final (and are by default).\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA class must implement\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods of an interface, unless the class is declared as abstract. That means, using the example above, any other People or Animal classes that implement the interface Noisy must have methods for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehappyNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eangryNoise()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefined in their class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eimplements\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a keyword specific to interfaces, whereas\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eextends\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(also seen here) is used to inherit classes. Whenever we add an interface, we always use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimplements\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003ch3\u003eInterfaces\u003c/h3\u003e\r\n\u003cp\u003eFor instance, say we had an interface called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs cs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e {\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e; \r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e(\u003cspan class=\"hljs-params\"\u003e\u003c/span\u003e)\u003c/span\u003e;  \r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoisy\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface contains two methods: One for making a happy noise, and one for making an angry noise. Now, we know\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethings are capable of being noisy. So,\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclasses can implement this interface. For instance, an Elephant could be pretty noisy:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eElephant\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"rumble\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"trumpet\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd a Dog can be pretty loud, too:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eNoisy\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eangryNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"growl\"\u003c/span\u003e);\r\n    }\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ehappyNoise\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"bark\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, despite both\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eElephant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclasses implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einterface with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003emethods, Dogs and Elephants make\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enoises; so the interface's methods are personalized to each animal's class.\u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants MainActivity Refactored with View.OnClickListener\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information, read the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/IandI/createinterface.html\"\u003eOracle documentation on Creating Interfaces\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid provides a number of built-in interface elements such as the onClickListener. To learn more, check out this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/ui/index.html\"\u003elink to the Android Developers site\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-android-emulator","title":"Pre-course work: Android Emulator","type":"WikiPage","content":"\u003cp\u003eWhen we start a new project, Android Studio creates all of the initial files and folders we need. We can see the structure of these files and folders in the panel on the left side of the screen.\u003c/p\u003e\r\n\u003cp\u003eThere are a variety of different views to choose from that allow us to visualize our project structure. We will use the default\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroid\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproject view as it provides quick access to the key source files of an Android project.\u003c/p\u003e\r\n\u003cp\u003e\u003cem\u003eNote: Sometimes this panel does not automatically open along with your project. To open it manually, either type \u003c/em\u003eCommand + 1\u003cem\u003e on a Mac, click on the vertical text \u003c/em\u003e1:Project\u003cem\u003e on the left side of the window, or select \u003c/em\u003eView \u0026gt; Tool Windows \u0026gt; Project\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eLet’s run the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eMy Restaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproject we just created to make sure everything is working. Type\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCtrl + R, \u003c/em\u003eor click the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eicon from the toolbar (the green play arrow).\u003c/p\u003e\r\n\u003cp\u003eFrom the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDevice Chooser\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu, we can select the device we want to run our app on. We haven’t created a virtual device yet, so let’s do that now.\u003c/p\u003e\r\n\u003cp\u003eWe can create and manage our virtual devices in the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAndroid Virtual Device (AVD) Manager\u003c/strong\u003e. Select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAVD Manager\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eicon (the little green android guy in front of the purple phone) in the toolbar and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate a virtual device\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eFrom here, we can choose from a variety of different hardwares to emulate. We will be concentrating on apps for mobile phones throughout this course, so let’s choose a standard phone such as the Google Nexus 6.\u003c/p\u003e\r\n\u003cp\u003eNext, we need to select a system image. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esystem image\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepresents the version of Android we want on our virtual device. Let’s choose Marshmallow API 23 x86 with Google APIs which means it will come preloaded with Google apps such as Google Maps.\u003c/p\u003e\r\n\u003cp\u003eOn the next screen, we are presented with a number of customization options. Here you can control the size of the emulator in relation to your computer’s screen size and even set the emulator’s camera to your computer’s built-in camera.\u003c/p\u003e\r\n\u003cp\u003eNow that we have created a device, let’s select it from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDevice Chooser\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOK\u003c/em\u003e. Android Studio takes a bit of time to load the emulator so it’s best to always keep it running in the background.\u003c/p\u003e\r\n\u003cp\u003eOnce the emulator is done loading, we should be able to navigate to our app and interact with it.\u003c/p\u003e\r\n\u003cp\u003eThis video walks through the steps in this lesson:\u003c/p\u003e\r\n\u003cdiv id=\"video\" class=\"tab-pane active in video\"\u003e\u003ciframe src=\"https://player.vimeo.com/video/158109088\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/div\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAndroid Virtual Device (AVD) Manager\u003c/strong\u003e: A tool for the creation and management of virtual devices.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSystem image\u003c/strong\u003e: A representation of the version of Android on a virtual device.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor this course, we will use the Google Nexus 6 hardware and Marshmallow API 23 x86 for our standard emulator. Additionally, select the option to use the computer's built-in webcam as the emulator's camera.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eShortcuts\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cem\u003eCtrl + R\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill run the application in the emulator.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-debugging-breakpoints-and-the-android-debugger","title":"Monday: Debugging: Breakpoints and the Android Debugger","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eIn the last lesson, we learned about the Android Studio logcat, and how to record information to it using various\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods. This process is similar to using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we learned in JavaScript, but with a few expanded options and functionalities.\u003c/p\u003e\r\n\u003cp\u003eDo you remember using the JavaScript console and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edebugger;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Intro to Programming and JavaScript? Android studio\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoffers a feature like this to assist in tracking down bugs and other issues. It can pause code, allow us to walk through code line-by-line, check what variables are, and more.\u003c/p\u003e\r\n\u003ch2\u003eThe Android Studio Debugger\u003c/h2\u003e\r\n\u003cp\u003eSimilar in name, the Android Studio version is also called the debugger. It allows us to monitor our application in real time, and can provide additional insight regarding a connected device or emulator. Let's walk through using the debugger in Android Studio, to familiarize ourselves with this process and make future bugs easier to track down and address.\u003c/p\u003e\r\n\u003cp\u003eFirst, let's remove the two\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages we added in the last lesson:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.locationTextView) TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.listView) ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                String restaurant = ((TextView)view).getText().toString();\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eBreakpoints\u003c/h2\u003e\r\n\u003cp\u003eNext, in order to pause the code at a given location, we need to add something called a breakpoint. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebreakpoint\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a language-agnostic term meaning the location at which code is intentionally paused.\u003c/p\u003e\r\n\u003ch3\u003ePlacing Breakpoints\u003c/h3\u003e\r\n\u003cp\u003eWe can insert a breakpoint (or even multiple breakpoints) where we would like our code to pause. There are several ways to add a breakpoint.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eClick the line where you would like to add a breakpoint. Then, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun \u0026gt; Toggle Line Breakpoint\u003c/em\u003e.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/tlg8h7ov9gsfkzs/debugger-toggle-breakpoint.png?raw=1\" alt=\"toggle-breakpoint\"\u003e\u003c/p\u003e\r\n\u003cp\u003eA red circle will appear directly to the left of this line of code. The area this red circle resides in is known as the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egutter\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/tth2zfkow259sms/debugger-add-breakpoint-gutter.png?raw=1\" alt=\"breakpoint-in-gutter\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo remove a breakpoint in the same fashion, we can simply select the same line, then select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun \u0026gt; Toggle Line Breakpoint\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eagain to toggle it off.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWe can also simply click on the gutter to the immediate left of the line of code we'd like to add a breakpoint to. The same red circle should appear in the gutter where you clicked:\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/tth2zfkow259sms/debugger-add-breakpoint-gutter.png?raw=1\" alt=\"breakpoint-in-gutter\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eHitting Breakpoints\u003c/h3\u003e\r\n\u003cp\u003eThen, we can run our code by selecting the \"Debug\" icon at the top. This will launch our application in the emulator or connected device.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/wpzyl4lilluik72/debugger-icon.png?raw=1\" alt=\"debugger-icon\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf an emulator is not already running, this will prompt you to select an emulator or device to run the application on. Once an emulator is up and running, travel to the activity the breakpoint was placed in. When the code containing the breakpoint is executed, the application will pause, and the debugger console will appear in the lower half of the Android Studio window:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/bpd5qzxgyvp7k3q/debugger-console.png?raw=1\" alt=\"debugger-console\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eUsing the Android Debugger\u003c/h2\u003e\r\n\u003cp\u003eOnce the application is paused, we have several options. We can hover over variables to see their current values:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/yvz4f0dq96ilgvm/debugger-hover-variables.png?raw=1\" alt=\"hover-over-variables\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we click the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esymbol on the left side of the yellow pop-over that appears when we hover over a variable, we can see further details, too:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/2oacn1byjzssqua/debugger-hover-variable-more-info.png?raw=1\" alt=\"more-variable-details\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eNavigating Through Code\u003c/h3\u003e\r\n\u003cp\u003eAdditionally, the Debugger pane will open in the lower half of the Android Studio window. The debugger contains multiple buttons for interacting with code. Here are the 10 you'll use the most:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/w7x5idkazkjgi7y/debugger-navigation-options.png?raw=1\" alt=\"debugger-navigation-options\"\u003e\u003c/p\u003e\r\n\u003ch4\u003e1. Show Execution Point\u003c/h4\u003e\r\n\u003cp\u003eThis will place the cursor back to the spot you're currently debugging. (ie: if you insert a breakpoint somewhere, look around in a few other files, you can hit this to return to your original breakpoint).\u003c/p\u003e\r\n\u003ch4\u003e2. Step Over\u003c/h4\u003e\r\n\u003cp\u003eThis advances to the next line of code\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eentering a method.\u003c/p\u003e\r\n\u003ch4\u003e3. Step Into\u003c/h4\u003e\r\n\u003cp\u003eThis will advance to the first line of code inside a method call.\u003c/p\u003e\r\n\u003ch4\u003e4. Force Step Into\u003c/h4\u003e\r\n\u003cp\u003eThis will forcibly advance to the first line of code inside a method call, if the option above does not work for any reason.\u003c/p\u003e\r\n\u003ch4\u003e5. Step Out\u003c/h4\u003e\r\n\u003cp\u003eThis advances to the next line of code\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoutside\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the current method.\u003c/p\u003e\r\n\u003ch4\u003e6. Resume Program\u003c/h4\u003e\r\n\u003cp\u003eThis will continue running the app normally.\u003c/p\u003e\r\n\u003ch4\u003e7. Pause Program\u003c/h4\u003e\r\n\u003cp\u003eThis will be greyed-out at first, because the program is\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epaused. If you opt to resume the program, you may pause it again with this option.\u003c/p\u003e\r\n\u003ch4\u003e8. Stop App\u003c/h4\u003e\r\n\u003cp\u003eThis halts the running applicaiton in the emulator or device entirely.\u003c/p\u003e\r\n\u003ch4\u003e9. View Breakpoints\u003c/h4\u003e\r\n\u003cp\u003eThis will open a window that will summarize exactly which breakpoints have been inserted into what areas of your application. In addition, it will allow you to customize settings for each individual breakpoints. For instance, you can select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRemove once hit\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto automatically remove the breakpoint after it pauses your code.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLog message to console\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto include a message in the logcat when this breakpoint is hit, or add conditions, log messages, and filters.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/xd2t03bnly1yqf9/debugger-view-breakpoints.png?raw=1\" alt=\"view-breakpoints\"\u003e\u003c/p\u003e\r\n\u003ch4\u003e10. Mute Breakpoints\u003c/h4\u003e\r\n\u003cp\u003eThis is an option you can toggle on and off that will temporarily ignore other breakpoints in the code while you interact with the code in other ways (primarily stepping into/out of/through/etc.)\u003c/p\u003e\r\n\u003cp\u003eAs you can see, this is a pretty powerful tool. Begin to experiment with using the debugger in your upcoming projects, even before you experience bugs. That way, you should have a decent idea of how to use this powerful tool when you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eneed it.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"weekend-api-research","title":"Weekend: API Research","type":"WikiPage","content":"\u003cp\u003eThis week we’ll focus on gathering data from an API for use in our Android applications. This means Friday’s independent project will require you integrate an API into the ongoing independent project you began last week.\u003c/p\u003e\r\n\u003cp\u003eIn order to prepare,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eyou must decide which API you’ll integrate\u003cspan\u003e \u003c/span\u003e\u003cem\u003eahead of time\u003c/em\u003e\u003c/strong\u003e. You need to ensure the API functions as anticipated, contains the data you require, and that you can successfully gather the parameters necessary to make the proper requests.\u003c/p\u003e\r\n\u003ch2\u003eAPI Resources\u003c/h2\u003e\r\n\u003cp\u003eNot sure where to begin? The following two resources offer expansive lists of APIs, organized by format, category, authentication requirements, and more:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTodd Motto's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/toddmotto/public-apis\"\u003eList of Public APIs\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.programmableweb.com/\"\u003eProgrammable Web\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eAPI Directory\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003eRevisit the \u003c/span\u003e\u003ca href=\"pages/pre-course-work-android-weekly-independent-projects?module_item_id=i8bea7f867c3c744e1d8d3f01e57aff7d\"\u003eAndroid Independent Projects\u003c/a\u003e\u003cspan\u003e lesson for examples of how these APIs could be integrated into each of the 4 project categories.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eEven if you’re opting to use one of the recommended API resources from the lesson linked above, you should still\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eresearch the API thoroughly.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eResearching and Testing\u003c/h2\u003e\r\n\u003cp\u003eYou must complete the following steps\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebefore Thursday\u003c/strong\u003e, as outlined in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.learnhowtoprogram.com/android/getting-started-with-android/android-weekly-independent-projects\"\u003eAndroid Independent Projects\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSelect an API\u003c/strong\u003e. Using the links above, Google, and any other resources you'd like, select an API with the content relevant for your project.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eResearch the API thoroughly.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eNot every resource is the same. Not every API is accessed in the same manner. Some APIs require complex multi-step authentication, others provide data in formats you may not be familiar with. Thoroughly research the API to ensure it\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtain the information you’re seeking, and it\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ework with your project. Spend some careful time here. You don't want to begin work Friday only to discover your API doesn't work the way you anticipated.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMake thorough test requests.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eConfirm your research is accurate by actually requesting and receiving data from the API. Test each and every endpoint you anticipate your application will use. You\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon’t\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehave to build an entire application to do this. Free Chrome extensions like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.getpostman.com/\"\u003ePostman\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eallow you to make test API requests with parameters of your choosing, and browse the response data. Postman offers a series of short\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLM-7VG-sgbtD8qBnGeQM5nvlpqB_ktaLZ\"\u003etutorial videos on YouTube\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edemonstrating how to install, open, and use their extension.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eBe prepared to demonstrate the API to your instructor.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter confirming your API will work in your application, be prepared to demonstrate it. Your instructor may ask you to demonstrate how you'll integrate your API choice. Explain to your instructor what the API is, how you will access it, the format it will return data in, and how you’ll use this data in your application. Be prepared to provide an example request and response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eUnderstand that the same objectives and deadlines apply.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThe same deadlines and objectives will apply to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estudents, regardless of their API choice. You will not be excused from objectives or deadlines due to unforeseen API issues. It is your responsibility to research your API, and confirm it will work\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eadding it to your project.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"tuesday-logging-out-and-overflow-menus","title":"Tuesday: Logging Out and Overflow Menus","type":"WikiPage","content":"\u003ch1\u003eLogging Out and Overflow Menus\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe can now register new users, and Firebase authenticates their account automatically. The next logical step is ensuring they can log themselves back out (and eventually back in). In this lesson we'll address how to create additional menu options and easily\u003cspan\u003e \u003c/span\u003e\u003cem\u003eun\u003c/em\u003e-authenticate a user's session using Firebase.\u003c/p\u003e\r\n\u003ch2\u003eOverflow Menu\u003c/h2\u003e\r\n\u003cp\u003eFirst off, we'll need an option or button users may click to log themselves out. Let's place this in an overflow menu.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eOverflow menu\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the name for the additional options displayed when the icon with three vertical dots is clicked.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/jqbilh8dl7gogxz/main-acitivity-app-bar.png?raw=1\" alt=\"new-dots-in-main-activity-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFor now, we'll only inflate our overflow menu in the MainActivity. Later on we'll explore approaches to refactoring, and use something called a BaseActivity to re-use the code from this lesson to make menu options accessible from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanywhere\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCreating and Inflating an Overflow Menu\u003c/h3\u003e\r\n\u003cp\u003eTo create our new menu's layout file, first we'll right-click in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, and add a new resource directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof type\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emenu \u003cspan style=\"font-weight: 400;\"\u003e(If you hadn’t already done this from \u003c/span\u003e\u003ca href=\"pages/monday-searchview-widget?module_item_id=ia919aa0007c0466d3b5eb34f35557b90\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/monday-searchview-widget\" data-api-returntype=\"Page\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ethis lesson\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e)\u003c/span\u003e\u003c/strong\u003e. Then, we'll right-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Menu resource file\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eLet's name this file\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu_main.xml\u003c/em\u003e, and place the following code inside:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003emenu_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visible\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"never\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eJust as we did when creating our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewidget, we'll inflate our new menu in an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod within MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_main, menu);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu);\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll need to tell our app what action to perform when the user selects the\u003cspan\u003e \u003c/span\u003e\u003cem\u003elogout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption. We'll do this by adding the following code to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e id = item.getItemId();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (id == R.id.action_logout) {\r\n            logout();\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAt the moment, we only have\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu action item. But we may want to add more options in the future. Therefore, we'll include a conditional that only calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogout()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eif the logout option was specifically selected, similar to the manner we organize our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods that correspond to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface.\u003c/p\u003e\r\n\u003cp\u003eLet's create the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogout()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogout\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        FirebaseAuth.getInstance().signOut();\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003ePretty straightforward! Here, we simply call Firebase's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. Then, we can then use Firebase's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignOut()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to sign the user out of their session.\u003c/p\u003e\r\n\u003ch2\u003eReturning to MainActivity on Logout\u003c/h2\u003e\r\n\u003cp\u003eRemember, we decided users must log in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einteracting with our app. That way, any restaurants they save can be associated with their own, personal list in our database. With this in mind, let's return users to the LoginActivity after logging out.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following code to our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogout()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elogout\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        FirebaseAuth.getInstance().signOut();\r\n        Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, LoginActivity.class);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return the user to the LoginActivity, add flags to remove the current activity from our stack, start the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, and end the current instance of MainActivity with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003ch2\u003eUpdating MainActivity Layout\u003c/h2\u003e\r\n\u003cp\u003eNow,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewe won't be able to see the logout option in our overflow menu quite yet\u003c/strong\u003e. There's still one more step we must complete. Several weeks ago, we hid the app bar in the MainActivity of MyRestaurants (as seen in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-app-bar-hierarchical-parent-and-android-themes?module_item_id=i048bfc57e88458706f01194f9fd32e62\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/tuesday-app-bar-hierarchical-parent-and-android-themes\" data-api-returntype=\"Page\"\u003ethis lesson\u003c/a\u003e) because we simply didn't have any menu options to display yet. Now that we\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e, we'll need to remove the \"NoActionBarTheme\" previously applied to the MainActivity.\u003c/p\u003e\r\n\u003cp\u003eWe can do this by removing the following line from MainActivity's entry in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManifest.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003eandroid:theme=\"@style/NoActionBarTheme\"\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe updated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManifest.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e\u0026lt;manifest \u003c/span\u003e\u003cspan\u003exmlns:\u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\"http://schemas.android.com/apk/res/android\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epackage=\u003c/span\u003e\u003cspan\u003e\"io.github.vinge1718.restaurant\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;uses-permission \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.permission.INTERNET\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;application\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:allowBackup=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:icon=\u003c/span\u003e\u003cspan\u003e\"@mipmap/ic_launcher\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:label=\u003c/span\u003e\u003cspan\u003e\"@string/app_name\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:roundIcon=\u003c/span\u003e\u003cspan\u003e\"@mipmap/ic_launcher_round\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:supportsRtl=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:theme=\u003c/span\u003e\u003cspan\u003e\"@style/AppTheme\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.LoginActivity\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;intent-filter\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;action \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.intent.action.MAIN\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;action \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.intent.action.VIEW\"\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;category \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.intent.category.LAUNCHER\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/intent-filter\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/activity\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.CreateAccountActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.SavedRestaurantListActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.RestaurantDetailActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;meta-data\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\"android.support.PARENT_ACTIVITY\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:value=\u003c/span\u003e\u003cspan\u003e\"io.github.vinge1718.restaurant.ui.MainActivity\" \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/activity\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;activity\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:name=\u003c/span\u003e\u003cspan\u003e\".ui.MainActivity\"\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/activity\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e \u0026lt;/application\u0026gt;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u0026lt;/manifest\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we launch our application we should see three dots in our MainActivity's AppBar that indicate an overflow menu is available:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/jqbilh8dl7gogxz/main-acitivity-app-bar.png?raw=1\" alt=\"new-dots-in-main-activity-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we click this icon the overflow menu is expanded, and we can see our new \"Logout\" option:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/4r5pnm2jepvl06j/main-activity-overflow-menu.png?raw=1\" alt=\"log-out-overflow-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClicking this will log the current user out of their session, and return them to the LoginActivity. Try it out!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/18_authorization_login\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOverflow menu\u003c/strong\u003e: The name for the additional options displayed when the icon with three vertical dots is clicked, as seen below:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/jqbilh8dl7gogxz/main-acitivity-app-bar.png?raw=1\" alt=\"new-dots-in-main-activity-menu\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eFirebaseAuth.getInstance().signOut();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the general way to un-authenticate a Firebase user session.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCreating and Using Menus\u003c/h3\u003e\r\n\u003cp\u003eRight-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Menu resource file\u003c/em\u003e. Populate the layout with the necessary XML:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Logout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visible\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"never\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInflate the menu in an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod within the corresponding activity:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_main, menu);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInstruct the app what action to perform when the user selects menu option(s) by adding code to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride in the corresponding activity:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e id = item.getItemId();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (id == R.id.action_logout) {\r\n            logout();\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/18_authorization_login\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-boggle-solitaire","title":"Wednesday: Boggle Solitaire","type":"WikiPage","content":"\u003ch1\u003eBoggle Solitaire\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal for today is to practice using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es to display lists of data.\u003c/p\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eBoggle Solitaire\u003c/h3\u003e\r\n\u003cp\u003eAre you familiar with the game\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Boggle\"\u003eBoggle\u003c/a\u003e? Players write down words using the letters that appear after rolling lettered dice. Create an app that allows users to play a solitaire version of this game. The gameplay should function like this:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eYour app randomly generates a string of 8 letters.\u003c/li\u003e\r\n\u003cli\u003eThis string should always contain at least two vowels.\u003c/li\u003e\r\n\u003cli\u003eThe user enters a word that contains at least three of these randomly generated letters.\u003c/li\u003e\r\n\u003cli\u003eYour app confirms that at least three of these randomly generated letters are included in the user's word.\u003c/li\u003e\r\n\u003cli\u003eThe user's word is then added to an array and displayed in a ListView at the end of each round (Hint: use intent extras).\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eDon't forget to use the \u003ccode\u003e.equals()\u003c/code\u003e method if you are comparing String objects!\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement tests for the features listed above. When those tests successfully pass, write tests for the new features you intend on adding. Make sure they fail appropriately,\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einclude code to make them pass. Continue this process for each and every additional feature you add.\u003c/li\u003e\r\n\u003cli\u003eUse a timer to limit the time your users have to complete each round:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/os/CountDownTimer.html\"\u003eCountDownTimer\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eAllow users to scramble the randomly generated string of 8 letters.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app contain all of the required functionality?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eintegrated correctly?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eIs information being passed between activities successfully?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-data-persistence-objectives","title":"Monday: Data persistence objectives","type":"WikiPage","content":"\u003ch2\u003e\u003c/h2\u003e\r\n\u003ch2\u003eDaily Objectives\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eIn this section, we will be learning how to save our data that we have received from our API. In the previous module, we used Postgres database as our data storage. Now, we will be using the cloud. Phones have limited storage spaces as compared to laptops or servers. So we would want our data to be held elsewhere other than on our phone. Other than that, other important topics that we will cover are:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUser Authentication setup\u003c/li\u003e\r\n\u003cli\u003eAdding a searchview widget\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eSet up an Authentication system\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eImplement a searchview\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eSave data to Firebase\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003eImplement logout functionality\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003e\u003cspan\u003eAdd a README to the GitHub repository that includes:\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-web-service-backends-and-custom-fragments-objectives","title":"Weekend: Web Service Backends and Custom Fragments Objectives","type":"WikiPage","content":"\u003cp\u003eThis week we are going to learn how to implement web services and custom fragments in Android!\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll dive into backend web services by using OkHttp and Signpost to assist in building and authenticating requests to the Yelp API. This will allow us to pull data on local restaurants\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein any zipcode\u003c/em\u003einto our ongoing MyRestaurants project!\u003c/p\u003e\r\n\u003cp\u003eThen we'll learn how to parse through an API's JSON response, select only the information we require, and build objects out of it using constructors and data models.\u003c/p\u003e\r\n\u003cp\u003eAlong the way we'll also refactor and organize our project with subpackages, implement a tool called Picasso to handle displaying images, and build our own custom layouts and adapters to display a wider variety of information within our app.\u003c/p\u003e\r\n\u003cp\u003eWe'll even learn how our app can interact with other applications using something called implicit intent. Our MyRestaurants app will really begin to come together this week!\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eAt the end of the week, your independent project will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement OkHttp to retrieve data from a backend.\u003c/li\u003e\r\n\u003cli\u003eCreate a data model to store the data.\u003c/li\u003e\r\n\u003cli\u003eDisplay a list of information using a RecyclerView, OR use fragments and a PagerAdapter to swipe through views. (Or both.)\u003c/li\u003e\r\n\u003cli\u003eIncorporate at least one implicit intent.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003cli\u003eRequired functionality is present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"pre-course-work-introduction-to-xml-and-android-layouts","title":"Pre-course work: Introduction to XML and Android Layouts","type":"WikiPage","content":"\u003cp\u003eAs we'll see firsthand when we create our first layout in the next lesson, Android layouts are written in\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eeXtensible Markup Language\u003c/strong\u003e, also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eXML\u003c/strong\u003e. Much like HTML (or HyperText\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMarkup Language\u003c/em\u003e), XML is also a markup language. It was created as a standard way to encode data in internet-based applications. However,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eunlike\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eHTML, XML is case-sensitive, requires each tag is closed properly and preserves whitespace.\u003c/p\u003e\r\n\u003cp\u003eMuch like creating an HTML layout and later altering it with jQuery, as we've done in previous courses, we can create XML layouts in Android, and later alter them using Java logic.\u003c/p\u003e\r\n\u003cp\u003eAndroid XML layouts are also part of a larger umbrella of Android files and components called resources.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eResources\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare the additional files and static content an application needs, such as animations, color schemes, layouts, menu layouts.\u003c/p\u003e\r\n\u003ch2\u003eAnatomy of Android XML Layouts\u003c/h2\u003e\r\n\u003cp\u003eEach layout file must contain one (and only one!) root element. Linear Layouts, Relative Layouts, and Frame Layouts (see Root Views section below) may all be root elements. Other layouts may not be. All other XML elements will reside within this root object.\u003c/p\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eView\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply an object from Android's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. It represents a rectangular area of the screen, and is responsible for displaying information or content, and event handling. Text, images, and buttons are all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews \u003c/code\u003ein Android.\u003c/p\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eViewGroup\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a subclass of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e, and is essentially an 'invisible container' that holds multiple\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003es together, and defines their layout properties.\u003c/p\u003e\r\n\u003ch3\u003eRoot Views\u003c/h3\u003e\r\n\u003cp\u003eThe following three layout types may be the root element in an Android XML Layout:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/linear.html\"\u003eLinear Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ealigns its contents into a single direction, whether vertical or horizontal.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/relative.html\"\u003eRelative Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays its child content in positions relative to the parent. (ie: lining an element up to the top edge of a parent, centering it within a parent, etc.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/FrameLayout.html\"\u003eFrame Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a placeholder on a screen that can display only a single view. (For this reason, Frame Layouts should be used sparingly; usually as a placeholder for Fragments, which we will cover later.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eCommon ViewGroups\u003c/h3\u003e\r\n\u003cp\u003eOther commonly used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003es are as follows. These may not be the root element of a layout, but they may reside within the root element:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/listview.html\"\u003eList View\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays a list of scrollable items.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/guide/topics/ui/layout/gridview.html\"\u003eGrid View\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays items in a two-dimensional, scrollable grid.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/TableLayout.html\"\u003eTable Layout\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003egroups views into rows and columns.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eLayout Attributes\u003c/h3\u003e\r\n\u003cp\u003eEvery type of layout has attributes that define the way its elements appear. There are both common attributes that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayouts share, and attributes specific to some of the layout types listed above. The following are attributes that apply to all layouts:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:id\u003c/code\u003e: A unique ID that corresponds to the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_width\u003c/code\u003e: The width of the layout. (required for every view)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_height\u003c/code\u003e: The height of the layout. (required for every view)\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginTop\u003c/code\u003e: Extra space on the top of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginBottom\u003c/code\u003e: Extra space on the bottom of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginLeft\u003c/code\u003e: Extra space to the left of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_marginRight\u003c/code\u003e: Extra space to the right of the layout.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_weight\u003c/code\u003e: Specifies how much of the extra space in the layout should be allocated to the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingLeft\u003c/code\u003e: Padding to the left of the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingRight\u003c/code\u003e: Padding to the right of the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingTop\u003c/code\u003e: Padding at the top of the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:paddingBottom\u003c/code\u003e: Padding at the bottom of the view.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eRelative Sizing\u003c/h4\u003e\r\n\u003cp\u003eHeight and width properties can be set to specific measurements, but the following are much more common:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_width=wrap_content\u003c/code\u003e: Sets the width of the view to whatever size is required by its contents. This may also be used with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eheight\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eandroid:layout_width=match_parent\u003c/code\u003e: Sets the width of the view to the width of its parent. This may also be used with with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eheight\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eSetting Properties and IDs\u003c/h3\u003e\r\n\u003cp\u003eMuch like in HTML, we can also add id attributes to XML elements. You'll often need to do this in order to later locate and interact with a specific view. However, the syntax for assigning an ID differs from that in HTML.\u003c/p\u003e\r\n\u003cp\u003eAssigning an id attribute looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003eandroid:id=\"@+id/search_button\"\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@+id/\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eportion indicates that the name following is a string containing this element's ID, and that it is a new resource that should be created and added to our resources.\u003c/p\u003e\r\n\u003cp\u003eFor instance, the following XML will create a Button with the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearch_button\u003c/code\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/search_button\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/my_button_text\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the above, you will notice the line\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/my_button_text\"\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e, this means that the name has been defined in the \u003cem\u003estrings.xml\u003c/em\u003e file. You can decide to hardcode the name of the button on the button like this\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Click Me!\".\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003ch3\u003eTargeting Views by ID\u003c/h3\u003e\r\n\u003cp\u003eSimilar to the way we used jQuery to target individual HTML elements and alter them in some fashion, we can also target individual XML elements and interact with them. The following code can be used to target the example XML button from above:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eButton myButton = (Button) findViewById(R.id.search_button);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod can locate both\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand root views. Don't worry too much about this specific syntax\u003cspan\u003e \u003c/span\u003e\u003cem\u003equite\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eyet; we'll explore this more in future lessons. Just notice that we're re-using the same\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute we assigned in the XML to later locate this element in our Java logic.\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson, we'll walk through creating an Android XML layout from scratch in our MyRestaurants application.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-logging-in","title":"Wednesday:Logging In","type":"WikiPage","content":"\u003ch1\u003eLogging In\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that we can successfully register user accounts and save their information to their FirebaseUser profile, let's add functionality to allow users to log in. The code we'll write for signing a user in with Firebase will actually be very similar to the code we wrote to create a user in our CreateAccountActivity.\u003c/p\u003e\r\n\u003cp\u003eFirst, we will need to declare and set the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. At the same time, let's bind our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditTexts\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eviews using ButterKnife:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = LoginActivity.class.getSimpleName();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.passwordLoginButton) Button mPasswordLoginButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.emailEditText) EditText mEmailEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.passwordEditText) EditText mPasswordEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.registerTextView) TextView mRegisterTextView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth mAuth;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        ...\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's add a click listener to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPasswordLoginButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will trigger a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eloginWithPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we will create momentarily:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mPasswordLoginButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mPasswordLoginButton) {\r\n            loginWithPassword();\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, the user will complete the login form, click\u003ccode\u003emPasswordLoginButton\u003c/code\u003e, and our app will run a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eloginWithPassword()\u003c/code\u003e. This method will eventually be responsible for reaching out to Firebase and authenticating the account with the user-provided credentials. But first, we'll gather the user's email and password, and double-check for blank fields:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloginWithPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        String email = mEmailEditText.getText().toString().trim();\r\n        String password = mPasswordEditText.getText().toString().trim();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (email.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mEmailEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please enter your email\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (password.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Password cannot be blank\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf either the email of password values are empty we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetError()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display relevant error messages and then\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto stop the method entirely\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe ever reach out to Firebase.\u003c/p\u003e\r\n\u003ch2\u003eBuilt-In Firebase Authentication Methods and Listeners\u003c/h2\u003e\r\n\u003cp\u003eWith the user's login credentials in hand, we can begin actually authenticating their account. To do this, we'll call a built-in Firebase method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignInWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithin our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eloginWithPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eAs outlined in its\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signInWithEmailAndPassword\"\u003edocumentation\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignInWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust be called on a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and takes the user's email and password as arguments. In addition, we must provide an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnCompleteListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto handle the authentication attempt.\u003c/p\u003e\r\n\u003cp\u003eAs the name suggests, this listener is responsible for determining when the authentication attempt is complete, and executes the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonComplete()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride when it is:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloginWithPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                        Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"signInWithEmail:onComplete:\"\u003c/span\u003e + task.isSuccessful());\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!task.isSuccessful()) {\r\n                            Log.w(TAG, \u003cspan class=\"hljs-string\"\u003e\"signInWithEmail\"\u003c/span\u003e, task.getException());\r\n                            Toast.makeText(LoginActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                                    Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the user entered an email and password, we pass them to the\u003ccode\u003e signInWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateUserWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we utilized in our CreateAccountActivity, we add a completion listener to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esignInWithEmailAndPassword()\u003c/code\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the sign-in attempt was unsuccessful, we display a toast to inform the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we launch the application now, we can see whether our login attempts are successful in our logcat,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebut the application won't navigate anywhere after successful authentication quite yet\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch2\u003eAdd AuthStateListener\u003c/h2\u003e\r\n\u003cp\u003eNext, let's tell our app what to\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhen the user's account is successfully authenticated. When a user logs in we want them to see our MainActivity. Just like we did in our CreateAccountActivity, let's add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto listen for changes in the current authentication state. If a user is authenticated, the app will navigate to the MainActivity.\u003c/p\u003e\r\n\u003cp\u003eSimilar to its implementation in CreateAccountActivity, we will attach and remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth.AuthStateListener mAuthListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                FirebaseUser user = firebaseAuth.getCurrentUser();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (user != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(LoginActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, MainActivity.class);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n                    startActivity(intent);\r\n                    finish();\r\n                }\r\n            }\r\n        };\r\n\r\n        ...\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStart\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStop\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStop();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mAuthListener != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run our app, sign out the current user in the MainActivity, and then log them back in. If everything is setup properly, our app will bring the us to the MainActivity after we click \"Log In\". If we restart the app our user should\u003cspan\u003e \u003c/span\u003e\u003cem\u003estill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe logged in, and our app should navigate to the MainActivity automatically and your name which was missing in the apps status bar upon sign up should now display your name just fine - because the user is already present in the Firebase database.\u003c/p\u003e\r\n\u003ch2\u003eAdd ProgressDialog\u003c/h2\u003e\r\n\u003cp\u003eLastly, let's add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our LoginActivity to notify the user that the app is processing their authenticate request. This code should look identical to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecode we wrote in CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ProgressDialog mAuthProgressDialog;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        createAuthProgressDialog();\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateAuthProgressDialog\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mAuthProgressDialog = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ProgressDialog(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mAuthProgressDialog.setTitle(\u003cspan class=\"hljs-string\"\u003e\"Loading...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setMessage(\u003cspan class=\"hljs-string\"\u003e\"Authenticating with Firebase...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setCancelable(\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eloginWithPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (password.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Password cannot be blank\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n        }\r\n        mAuthProgressDialog.show();\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                        mAuthProgressDialog.dismiss();\r\n                        ...\r\n                    }\r\n                });\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's run the app one more time, log out the currently authorized user and then log them back in to make sure our progress dialogs are displaying properly.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-user-authentication-setup","title":"Monday:User Authentication Setup","type":"WikiPage","content":"\u003ch1\u003eUser Authentication Setup\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\u003c/div\u003e\r\n\u003cp\u003eMost applications need to know the identity of a user. This allows them to offer a personalized experience, and to associate content with a specific users. For example, social media apps only display content from users\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehave followed, and can attribute anything you post to your own account. And a note-taking app displays only\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enotes when you log in, allowing you to keep some content private.\u003c/p\u003e\r\n\u003cp\u003eIn our case, MyRestaurants should associate each user's \"Saved Restaurants\" list with a specific user account. This will allow every user to have their own private, personalized list. Conveniently, Firebase offers built-in tools for managing user authentication.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we will prepare to integrate user authentication into our application by configuring the necessary components and settings. In subsequent lessons we'll write the actual methods to handle registering new users and logging them in and out.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eTo get started, read the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/#key_functions\" target=\"_blank\"\u003eFirebase Authentication Overview\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/password-auth\" target=\"_blank\"\u003eAuthenticate with Firebase using Password-Based Accounts on Android\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticles.\u003c/p\u003e\r\n\u003ch2\u003eAdding Dependencies\u003c/h2\u003e\r\n\u003cp\u003eFirst off, to use Firebase's built-in authentication tools we'll need to add the firebase-auth dependency. Add the following to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n    ...\r\n    implementation 'com.google.firebase:firebase-auth:16.1.0'\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Authentication1.jpg?canvas_download=1\" alt=\"Authentication1.jpg\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/12629\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...clicking the \"set up sign in method\" button...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/lnjhbxloa958ky5/firebase-setup-signin-method.png?raw=1\" alt=\"firebase-setup-signin-method\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...selecting the _edit _icon for the \"Email/Password\" provider...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/sd875vvh2h4pgk8/edit-email-password.png?raw=1\" alt=\"edit-email-password\"\u003e\u003c/p\u003e\r\n\u003cp\u003e... and checking the \"Enable\" switch:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/6d486lvjq7aaygd/enable-email-password-auth.png?raw=1\" alt=\"enable-email-password\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYou can enable the password less login option as well but we won't get into that right now given it's fairly self explanatory.\u003c/p\u003e\r\n\u003ch2\u003eAccount Registration Page\u003c/h2\u003e\r\n\u003cp\u003eBefore users can sign in and out they'll need to be able to create an account. Let's create a new activity in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called CreateAccountActivity. We'll also check the box labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create a corresponding xml file in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003elayouts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/yxbv1svwi9qgvvz/user-auth-create-new-activity.png?raw=1\" alt=\"create-new-blank-activity-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/p0wmso6w0tkerqm/user-auth-generate-layout-option.png?raw=1\" alt=\"generate-layout-file-when-creating-new-activity\"\u003e\u003c/p\u003e\r\n\u003cp\u003eBefore writing any logic, let's construct a basic layout for this area of our application. We'll begin by adding the following to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_create_account.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile generated when we created our new activity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_create_account.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.CreateAccountActivity\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/nameEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/emailEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Email\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textEmailAddress\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Password\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textPassword\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/confirmPasswordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Confirm Password\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textPassword\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/createUserButton\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Sign up\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Already have an account? Log in here!\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/loginTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Create Account\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryLight\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis creates a registration form where users may enter their name, email address, password, and password confirmation. We've also included a \"Create Account\" button that will eventually trigger the account registration process.\u003c/p\u003e\r\n\u003ch2\u003eAccount Login Page\u003c/h2\u003e\r\n\u003cp\u003eNow that they can register for accounts, users will also need a place to log in. Let's create another empty activity in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called LoginActivity. Again, make sure to check\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll populate the corresponding\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_login.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout with email and password\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003es, a button, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will take users to our CreateAccountActivity if they are not yet registered, and some basic styling:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_login.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.LoginActivity\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/emailEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Email\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textEmailAddress\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Password\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:inputType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"textPassword\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:nextFocusDown\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordEditText\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/black\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColorHint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorDivider\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/passwordLoginButton\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Log in\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Don't have an account? Sign up here!\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/registerTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Login\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryLight\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/linearLayout\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eIntent Filters and the Category Launcher\u003c/h2\u003e\r\n\u003cp\u003eIn our AndroidManifest, the block of XML corresponding to our MainActivity currently contains the following code:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs xml\"\u003e...\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis is called an intent filter. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eintent filter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an expression in the manifest that specifies the type of intents a particular component may receive. This particular line of code adds the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html#CATEGORY_LAUNCHER\" target=\"_blank\"\u003ecategory_launcher filter\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto our MainActivity. This means we're instructing our app to display MainActivity when it first launches.\u003c/p\u003e\r\n\u003cp\u003eHowever, now that we're implementing authentication we'll want users to log in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanything else. Let's move this line from the MainActivity block of AndroidManifest into the LoginActivity block. This will ensure the LoginActivity is the first thing users see when launching our app.\u003c/p\u003e\r\n\u003cp\u003eOur updated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManfest.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.MainActivity\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/NoActionBarTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.PARENT_ACTIVITY\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:value\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.MainActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantDetailActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.SavedRestaurantListActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.CreateAccountActivity\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.LoginActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd, if we restart our application we should see our LoginActivity first:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/cuza2u3ewdviaf6/login-screen.png?raw=1\" alt=\"login-page-myrestaurants\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFor more information about intent filters, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/components/intents-filters.html\"\u003eAndroid Developers Guide\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/17_user_authentication\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eIntent filter\u003c/strong\u003e: An expression in the manifest that specifies the type of intents a particular component may receive.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://firebase.google.com/docs/auth/#key_functions\" target=\"_blank\"\u003eFirebase Authentication Overview\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/password-auth\" target=\"_blank\"\u003eAuthenticate with Firebase using Password-Based Accounts on Android\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Developers Guide entry on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/components/intents-filters.html\" target=\"_blank\"\u003eIntent Filters\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-capstone-project-ideation","title":"Wednesday: Capstone Project Ideation","type":"WikiPage","content":"\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt Moringa you are learning skills that you can use to solve your own problems: what is something that you want to see in the world? Use this time to build that product. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003cspan style=\"font-weight: 400;\"\u003eWe want our students to utilize their full potential during their time at Moringa School. In order to do that, it is up to each student to strive to attain that potential.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs Software Engineers, our portfolios are the best way for us to share our abilities. When thinking of ideas for the products that you will build throughout your time at Moringa, make sure that you’re looking to build truly excellent projects rather than the status quo.\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eNo matter your goals post-Moringa School, for your portfolio to stand out to other developers, entrepreneurs, and hiring partners, it is important that your product ideas are innovative. \u003c/span\u003e\u003cstrong\u003eAny average developer can recreate an existing product, your projects should represent that you can do more.\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eThat being said: not every project idea makes a good project. When choosing a project, is extremely important to maximize the following qualities:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cspan style=\"font-weight: 400;\"\u003eClearly articulated, solid idea: projects should have a clear question or problem they are trying to solve \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003eplus\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e a reasonably specific proposed solution.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAttainable: in our experience, students tend to overestimate their ability to produce and will accomplish about 25% of what they set out to accomplish in the limited time they have. Make sure that each project’s goals should be attainable so you are able to feel accomplished at the end of the session.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInnovative: at Moringa we have seen far too many projects that do the exact same thing. To have a truly world-class project, we need to see you solving real problems. Take time to think of a real problem that you notice in society, and an innovative way of solving that problem.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIntentional: from the technical strategy behind your application, technologies used, to the design, producing excellent products means paying attention to the details in the decisions you are making. Don’t take shortcuts, make something truly incredible.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYou have been working hard over the past few months to learn incredible skills. Use this time to boost yourself to the next level by building an awesome product with your skills. Below are guidelines to prompt your thinking in your project ideation.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eFor this project, don’t just create another ticket sales app, another ecommerce app, another uber for Boda Bodas - create, innovative, do something that \u003c/span\u003e\u003ci\u003e\u003cspan style=\"font-weight: 400;\"\u003ematters\u003c/span\u003e\u003c/i\u003e\u003cspan style=\"font-weight: 400;\"\u003e and has some technical challenges for you to solve. You are becoming a software engineer, utilize and explore your technical skills and show employers that you’re really creating a strong product and give yourself opportunities to learn and push yourselves in your technical skills. \u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cstrong\u003eUnmet Customer Needs (Pain Points) – Businesses\u003c/strong\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNeed more customers\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMore leads (web traffic, etc.)\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to convert leads to customers\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eImproved targeting\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter understanding of customer needs\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter personalized messaging\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to get customers to buy more\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ePersonalization\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to pay and track payments using a smartphone instead of credit cards and cash\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnalyzing and making sense of increasing large amounts of data coming from the web\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eRestaurants, event venues, etc.: fill up empty time slots which would otherwise be lost inventory\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNeed to comply with new regulations\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ePreventing security breaches and data theft\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEmail overload\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAn efficient way to check-in people at events\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFast and easy to use\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBusiness meeting coordinations\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eData centers exceeding their power, cooling, or space limits\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEnterprises need to engage with their customers via Social Media – and are not sure how\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eEliminating the pain and expense of backup and disaster recovery\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003cstrong\u003eUnmet Customer Needs (Pain Points) – Consumers\u003c/strong\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to find and meet the right people to date\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBetter ways to find a job when they are out of work, or looking to change jobs\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIdentity theft/Crime across Africa\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAging parents that have health and other issues\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAging grandparents\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFitness\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMore effective and entertaining education\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFinancial security and a way to retire with confidence\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInformation overload\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWant computers that are easier to use and manage\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eTransportation assistance, such as ridesharing or navigating bus schedules\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWith those ideas in mind, the project period is a time to explore and take advantage of a wide variety of technologies and showcase your talents. Here are just a few ideas to get you started:\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cstrong\u003eBusiness Concepts\u003c/strong\u003e\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eLeveraging platforms like Facebook, etc. for low cost, viral customer acquisition\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eApp Stores from Apple, Android, etc. for low cost customer acquisition\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eOpen Source\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFreemium\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSaaS\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eVirtual Goods\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCrowdSourcing\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eFlash sales\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eGroup buying\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMarketplaces to match buyers and sellers\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eLead generation (e.g. LendingTree.com, Quinn Street)\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eDisruptive Technologies\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eMobile\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eGPS - Geomapping\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAccelerometer and Gyroscopes\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCameras and video cameras built-in\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn application payments\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNew features in iOS and Android operating systems\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCross-platform\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAugmented Reality\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eAPI’s: the Social Graph, Facebook, LinkedIn, etc\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eCloud computing\u003c/span\u003e\u003c/li\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eInfrastructure as a Service (IaaS) – Amazon, Rackspace, etc.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003ePlatform as a Service (PaaS) – Heroku, EngineYard, CloudBees,\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSoftware as a Service (SaaS)\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHD video on the Web, and IPTV\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eSSD disk drives dropping in price and increasing in capacity\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBig data, and NoSQL alternatives\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eVirtualization and desktop virtualization\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eNanotechnology\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eIoT\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBlockchain\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-work-data-persistence","title":"Weekend Work:Data Persistence ","type":"WikiPage","content":"\u003ch1\u003eData Persistence Objectives\u003c/h1\u003e\r\n\u003cp\u003eThis week we are going to learn how to save information from our Android applications into a database, and access this information later. This is known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edata persistence\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll learn how to use SharedPreferences to save small bits of data directly into the user's phone. Next, we'll learn how to save more substantial portions of information by connecting to a tool called Firebase. You are familiar with connecting to Firebase already from your work in JavaScript unit, but also review Firebase data structuring conventions in order to ensure our databases are well-organized and follow best practices.\u003c/p\u003e\r\n\u003cp\u003eOnce we've successfully connected to Firebase, we'll use their built-in user authentication tools to add user accounts to our applications. We'll also learn how to implement additional features such as dialog boxes, personalized welcome messages, and remembering user emails to auto-populate the login form.\u003c/p\u003e\r\n\u003cp\u003eFinally, we'll learn how to add a SearchView widget to allow users to input their own terms to search for specific content.\u003c/p\u003e\r\n\u003cp\u003eIn addition to integrating these new tools and functionalities into our ongoing MyRestaurants project, you'll also have the opportunity to practice new material and add to your portfolio by creating two very common Android applications: A discussion forum, and instant messaging application.\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eAfter this week, your ongoing personal project will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement Firebase user authentication.\u003c/li\u003e\r\n\u003cli\u003eSave and retrieve data using Firebase, making sure to structure your data according to Firebase guidelines.\u003c/li\u003e\r\n\u003cli\u003eEmploy the Firebase-RecyclerAdapter to display from your database.\u003c/li\u003e\r\n\u003cli\u003eUse SharedPreferences to save an important piece of data in your app.\u003c/li\u003e\r\n\u003cli\u003eUtilize dialogs to inform users of login status, etc.\u003c/li\u003e\r\n\u003cli\u003eUse a SearchView widget to gather user input.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eShared Preferences\u003c/h1\u003e\r\n\u003cp\u003eNow that we know how to retrieve data from a web service, let's learn how to save data from our application. There are many ways to persist data in Android. In this lesson we will learn how to save small bits of data directly into the user's phone with shared preferences. In subsequent lessons we'll explore saving larger portions of data to a web service backend called Firebase.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eShared preferences\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an Android class that allows apps to store key-value pairs of primitive data types. Once saved, information in shared preferences will persist across sessions. It's important to note that despite the name, shared preferences are not strictly reserved for saving user preferences, options or settings. Also, any modifications to shared preferences must go through a dedicated tool called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSharedPreferences.Editor\u003c/code\u003e. This is to ensure values remain consistent, and are saved correctly.\u003c/p\u003e\r\n\u003cp\u003eWe will use shared preferences in our MyRestaurants application to save the zip code a user enters in our MainActivity. This will prevent users from having to enter a zip code each time they open our application. The data will persist in the phone's shared preferences until the user overrides it by manually entering a different zip code.\u003c/p\u003e\r\n\u003ch2\u003eSaving to Shared Preferences\u003c/h2\u003e\r\n\u003cp\u003eLet's begin integrating shared preferences into our MyRestaurants application. Remember, shared preferences may only store primitive data types in key-value pairs. We'll start by adding the following key to our Constants class:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String PREFERENCES_LOCATION_KEY = \u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"location\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill act as the key in our key-value pair. We've placed this in our Constants file because no matter what zip code the user enters, we will always use the same key to access this value.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll add the following code to our MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            addToSharedPreferences(location);\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's go through this step by step:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFirst, we begin by creating member variables to store reference to the shared preferences tool itself (\u003ccode\u003emSharedPreferences\u003c/code\u003e) and the dedicated tool we must use to edit them (\u003ccode\u003emEditor\u003c/code\u003e).\u003c/li\u003e\r\n\u003cli\u003eNext, we create a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e, which takes the user-inputted zip code as an argument\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalls upon the editor to write this information to shared preferences.\u003c/li\u003e\r\n\u003cli\u003eThe, since shared preference data must be in key-value pairs, we provide the editor the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe've stored in our Constants file called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePREFERENCES_LOCATION_KEY\u003c/code\u003e, and the zip code\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe've passed in as an argument,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eFinally, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapply()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto save this information.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTesting Shared Preferences\u003c/h2\u003e\r\n\u003cp\u003eTo test that this is successfully saving information, let’s log the contents of our shared preferences to the logcat in our RestaurantListActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"Shared Pref Location\"\u003c/span\u003e, mRecentAddress);\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSimilar to the dedicated editor we must use to alter shared preferences, we also call the dedicated\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePreferenceManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto access them.\u003c/p\u003e\r\n\u003cp\u003eHere, we retrieve our shared preferences from the preference manager, pull data from it by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand providing the key that corresponds to the data we'd like to retrieve. We also pass in the default value\u003ccode\u003enull\u003c/code\u003e. The default value will be returned if the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is unable to find a value that corresponds to the key we provided.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app, enter a zip code, and see if it prints to the logcat in RestaurantListActivity:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/u45ih3yc7prcnjf/logging-shared-preferences-locations.png\" alt=\"logging-shared-preferences-data-to-logcat-successfully\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd look, there it is! We're successfully saving and retrieving data in Android's shared preferences!\u003c/p\u003e\r\n\u003ch2\u003eUsing Shared Preferences Data Automatically\u003c/h2\u003e\r\n\u003cp\u003eNow that we can successfully save a user's zip code in shared preferences, let's program our application to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eautomatically\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eretrieve restaurant data from the Yelp API if a location has already been saved. After all, if we already know the user's location, we don't need to ask them to provide it again.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eBe mindful of storing zip code data in your shared prefs for your individual projects! Does it make sense for your app to do this? In many cases, users will explicitly\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewant\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto be able to search for zipcodes other than their home zipcodes. Use SharedPrefs wisely and sparsely, and provide clear opportunities for your users to edit them!\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following code to our RestaurantListActivity, and remove our logcat line :\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere we are defining\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSharedPreferences\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the shared preferences information we're using the preference manager to access, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the value we're attempting to retrieve. We then check if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eequal\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e. If it does not, we know we have a zip code saved, and we pass\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ezip code to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As we know, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod then calls the Yelp API and returns restaurants near that location.\u003c/p\u003e\r\n\u003cp\u003eAlso, we only want to save the location to shared preferences\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user has actually entered something into the form field. We'll add the following conditional to instruct our app to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esave locations into shared preferences if they are\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean empty string:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(!(location).equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n                addToSharedPreferences(location);\r\n            }\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s run the app again. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estill need to hit the \"Find Restaurants\" button to view restaurants, but we may now leave the form field blank and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the RestaurantListActivity will automatically populate with restaurants near our saved location.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant Note:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like submitting a blank form to access the saved location is a little counter-intuitive and clunky, you're entirely correct. Know that this is only temporary! In future lessons we'll add features that circumvent the need to do this. But for now, if you can hit \"Find Restaurants\"\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eentering a zip code and receive the list of restaurants in the zip code you last searched, your shared preferences are working!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/13_shared_preferences\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eShared preferences\u003c/strong\u003e: An Android class that allows apps to store key-value pairs of primitive data types. Once saved, information in shared preferences will persist across sessions.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAny modifications to shared preferences must be made through a dedicated tool called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSharedPreferences.Editor\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eShared preferences may only store primitive data types in key-value pairs.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eSaving to Shared Preferences\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003emSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\nmEditor = mSharedPreferences.edit();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003emEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAccessing Data from Shared Preferences\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/13_shared_preferences\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information on implementing shared preferences, check out CodePath's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Storing-and-Accessing-SharedPreferences\"\u003eStoring and Accessing SharedPreferences\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eNoSQL vs SQL : Database Review and Prep\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eBefore we get too deep in the hands on implementation of Firebase for Android, lets take a step back for a moment and review what we’ve learned about databases so far.\u003c/p\u003e\r\n\u003cp\u003eA database comes into play any time we wish to serve data for our applications in a persistent way.\u003c/p\u003e\r\n\u003cp\u003eIf you think back to your explorations of Postgres in Java class, you already have experience with one type of Database - namely a SQL database. There are different kinds of SQL databases, with slightly different syntax and capabilities, but they are all structured the same. There are also other kinds of databases that do not run SQL, but are nonetheless relational databases. An umbrella term for these kinds of databases is RDBMS (Relational Database Management Systems). They first came into popularity in the 1970’s, and are therefore very well supported, highly evolved, and very widely used.\u003c/p\u003e\r\n\u003cp\u003eAs you hopefully remember, SQL stands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eStructured Query Language\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(remember this) and is the language in which we issue commands to our database, either via the command line or through executing our backend code. This example may look familiar:\u003c/p\u003e\r\n\u003cpre\u003ecourses\r\n-------\r\n\r\n id | name\r\n ---+------------------------\r\n  1 | moringaschool\r\n  2 | How to cook vegan\r\n  3 | Intro to rocket science\r\n\r\nstudents\r\n--------\r\n\r\nid | first_name | last_name |course_id\r\n---+------------+-----------+---------\r\n 1 | libby      | brown     |1\r\n 2 | tiny       | tim       |1\r\n 3 | bub        | bles      |2\r\n 4 | lizzy      | cool      |1\r\n 5 | hank       | fresh     |3\r\n 6 | tiny       | tom       |1\r\n\r\n\r\n id | number     | type | friend_id\r\n ---+------------+------+----------\r\n  1 | 9165551212 | cell | 1\r\n  2 | 3235551212 | cell | 2\r\n  3 | 4155551212 | cell | 3\r\n  4 | 9165552020 | work | 1\r\n  5 | 3235552020 | work | 2\r\n  6 | 4155552020 | work | 3\r\n\r\n\r\n\u003c/pre\u003e\r\n\u003cp\u003eSQL databases are fast, well supported and allow us to find, sort and retrieve data easily.\u003c/p\u003e\r\n\u003cp\u003eReview the following pseudocode for examples of how SQL can interact with the tables above:\u003c/p\u003e\r\n\u003cpre\u003eRetrieve all cols of table `students` where `course_id` ==  course from table `courses` with id = 1;\r\n\r\nRetrieve all rows of table where `first_name` of student is == ‘tiny’ and `last_name` is == unique;\r\n\r\nRetrieve `ids` of all students in table `students` in order == ascending;\r\n\u003c/pre\u003e\r\n\u003cp\u003eThese are all examples of how SQL allows us to specifically pinpoint data and return it to our code.\u003c/p\u003e\r\n\u003cp\u003eSQL databases can be difficult to scale. By nature, RDBMS have to run on a single server in order to maintain database consistency, as the data is basically stored in one giant file. This was not a problem for common data storage needs in the 1970’s, but as data collection needs grew exponentially to where they are today, maintaining the hardware to keep a RDBMS consistent with a guaranteed 99%+ uptime became prohibitively expensive to maintain.\u003c/p\u003e\r\n\u003cp\u003eNoSQL databases provide an alternative to RDBMS because they are lightweight, scalable, and can be run much more easily on distributable systems. Next to Firebase, some of the most well known NoSQL databases are Hadoop, MongoDB, Cassandra (used by Facebook) and CouchBase.\u003c/p\u003e\r\n\u003cp\u003eNoSQL databases are, by definition, not relational databases and do not store data in a relational way. This literally means that there are no relations between individual parts of the data such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estudents\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclasses\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emajors\u003c/code\u003e, or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebrands\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshoes\u003c/code\u003e! Firebase, our NoSQL database of choice, stores data in key-value pairs on the server. Firebase is a cloud services provider that offers realtime databases.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eCloud services\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare simply any resource provided over the internet. Realtime databases are databases that are constantly updating and syncing whenever our data changes. This means we can create a remote database online that will continually sync our data.\u003c/p\u003e\r\n\u003cp\u003eNoSQL can easily store the properties of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003es as key-value pairs. That said, it can be harder to pinpoint specific data, or to pull a dataset that matches a specific set of requirements from a NoSQL database due to its non-relational nature. You can no longer ask the server to provide you a dataset based on how the contents of that set relates to the rest of the data.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/jy1hvwkbuhdpkch/android-firebase-example-db.png\" alt=\"android-firebase-example-db\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTherefore, in your projects, it may be necessary to sort data in the code rather than the database, or to limit which data can be added to the database to avoid data duplicates, as it is not possible to simply ask for \"all data where a set of conditions are met but with no duplicates\". In general, data redundancy is much less of a concern with non-relational databases as in other areas of our programming - in fact it, it is sometimes necessary in order to link data to other pieces of data. As with planning a SQL database, sketching out a diagram and thinking through your data model before you begin can give you a major advantage.\u003c/p\u003e\r\n\u003cp\u003eIf all of this is still feeling a little fuzzy - not to worry! You’ll be getting your feet wet very soon, and the pros and cons of SQL vs NoSQL will become very clear.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eSetting up Firebase\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you receive Gradle Sync errors, verify whether your SDK version requires updating. Please note that the update process may take additional time.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eIn this lesson we'll learn how to create a Firebase database, install and configure the Firebase client into our Android application, and connect our app to its database in the cloud! In subsequent lessons we'll address how to read, write and delete Firebase entries.\u003c/p\u003e\r\n\u003ch2\u003eFirebase Accounts and Applications\u003c/h2\u003e\r\n\u003cp\u003eFirst off, in order to use Firebase services we'll need to create a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/\"\u003efree Firebase account\u003c/a\u003e. If you already have one from JavaScript unit, you can use the same account.\u003c/p\u003e\r\n\u003cp\u003eOnce registered, we will be taken to a dashboard reading \"Welcome to the new Firebase Console\". Click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate new project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto make a new Firebase app:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/th7pqltorbsz6dc/create-firebase-project-step1.png?raw=1\" alt=\"create-firebase-app1\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the modal window, enter the name of the app,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurants\u003c/em\u003e, and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate Project\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9lk6tupjfk5laoq/create-firebase-project-step2.png?raw=1\" alt=\"create-firebase-app2\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe will be taken to our app's overview page. Select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAdd Firebase to your Android App\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton from the top panel. Click on the android Icon.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Screenshot%20from%202019-02-25%2012-54-41.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Add_firease_to_your_project.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/12257\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn the modal popup window, enter your app's package name and the SHA-1 Key. If you don't know how to create an SHA-1 key, click on the question mark icon to learn how to generate the debug key. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epassword\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003efor the Android debug-keystore is\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eandroid\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eby default:\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eClick\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAdd App\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. Another modal window will appear, and you'll need to download a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoogle-services.json\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Screenshot%20from%202019-02-25%2013-35-23.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"adding_google_service_json_to_your_project\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/12259\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFollow the instructions depicted in the modal, and copy the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egoogle-services.json\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile into your app module root directory. Then, hit\u003cspan\u003e \u003c/span\u003e\u003cem\u003eContinue\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eOne last modal will appear containing instructions for adding the necessary Google services plugins to both your project-level and app-level build.gradle files. Follow these instructions to add the necessary dependencies.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the google services classpath to our project-level\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild.gradle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile. The class path tells JDK tools and applications where to find third-party and user-defined classes -- that is, classes that are not Java extensions or part of the Java platform.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Project: MyRestaurants)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e\r\n...\r\n    dependencies {\r\n        ...\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur project-level build.gradle file should now look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Project: MyRestaurants)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:3.3.2'\r\n        classpath 'com.google.gms:google-services:4.2.0'\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\u003cbr\u003e        google()\r\n        jcenter()\r\n    }\r\n}\r\n\r\ntask clean(\u003cspan class=\"hljs-built_in\"\u003etype\u003c/span\u003e: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll need to add the Firebase-database dependency in order to utilize the realtime database service:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e build.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003e...\r\ndependencies {\r\n    ...\r\n    // The latest version of firebase-ui currently at \u003cbr\u003e    //  implementation 'com.firebaseui:firebase-ui-database:4.3.1' causes compile errors so use the one below instead.\u003cbr\u003e    implementation 'com.firebaseui:firebase-ui-database:3.3.1'\r\n}\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need to add the google-services plugin to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebottom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof your app-level build.gradle file. Your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebuild.gradle (Module: app)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould now look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003eapply \u003cspan\u003eplugin\u003c/span\u003e: \u003cspan\u003e'com.android.application'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003eandroid {\u003cbr\u003e    compileSdkVersion \u003cspan\u003e28\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003edefaultConfig {\u003cbr\u003e        applicationId \u003cspan\u003e\"io.github.vinge1718.restaurant\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eminSdkVersion \u003cspan\u003e15\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etargetSdkVersion \u003cspan\u003e28\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionCode \u003cspan\u003e1\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionName \u003cspan\u003e\"1.0\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etestInstrumentationRunner \u003cspan\u003e\"android.support.test.runner.AndroidJUnitRunner\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    buildTypes {\u003cbr\u003e        release {\u003cbr\u003e            minifyEnabled \u003cspan\u003efalse\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003eproguardFiles getDefaultProguardFile(\u003cspan\u003e'proguard-android-optimize.txt'\u003c/span\u003e), \u003cspan\u003e'proguard-rules.pro'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e    buildTypes.each {\u003cbr\u003e        it.buildConfigField \u003cspan\u003e'String'\u003c/span\u003e, \u003cspan\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\u003cbr\u003e    }\u003cbr\u003e    testOptions {\u003cbr\u003e        unitTests {\u003cbr\u003e            includeAndroidResources = \u003cspan\u003etrue\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edependencies {\u003cbr\u003e    implementation fileTree(\u003cspan\u003edir\u003c/span\u003e: \u003cspan\u003e'libs'\u003c/span\u003e, \u003cspan\u003einclude\u003c/span\u003e: [\u003cspan\u003e'*.jar'\u003c/span\u003e])\u003cbr\u003e    implementation \u003cspan\u003e'com.android.support:preference-v7:28.0.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.android.support.constraint:constraint-layout:1.1.3'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.android.support:support-v4:28.0.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003etestImplementation \u003cspan\u003e'junit:junit:4.12'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test:runner:1.0.2'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test.espresso:espresso-core:3.0.2'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//Robolectric dependencies\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003etestImplementation \u003cspan\u003e\"org.robolectric:robolectric:3.8\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//Espresso dependencies\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eandroidTestImplementation \u003cspan\u003e\"com.android.support.test:rules:1.0.2\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//butterknife\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.jakewharton:butterknife:8.8.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eannotationProcessor \u003cspan\u003e'com.jakewharton:butterknife-compiler:8.8.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//OkHttp\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.squareup.okhttp3:okhttp:3.10.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//RecylcerView\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.android.support:recyclerview-v7:28.0.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Picasso image processing\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.squareup.picasso:picasso:2.71828'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//parceler\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'org.parceler:parceler-api:1.1.12'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eannotationProcessor \u003cspan\u003e'org.parceler:parceler:1.1.12'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e//Add firebase SDK\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eimplementation \u003cspan\u003e'com.google.firebase:firebase-core:16.0.7'\u003cbr\u003e\u003c/span\u003e}\u003cbr\u003eapply \u003cspan\u003eplugin\u003c/span\u003e: \u003cspan\u003e'com.google.gms.google-services'\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eMake sure to sync your project with Gradle before continuing.\u003c/p\u003e\r\n\u003ch2\u003ePermissions\u003c/h2\u003e\r\n\u003cp\u003eBecause our Firebase database exists online, we also need to ensure our application has internet access to communicate with our database. To do this, we need to add internet permissions throughout the app.\u003c/p\u003e\r\n\u003cp\u003eWe've already added these permissions in MyRestaurants when we configured it to use OkHttp. As a refresher, adding internet permissions is done by placing the following code in your AndroidManifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n        ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePackaging Options\u003c/h2\u003e\r\n\u003cp\u003eEach time Gradle builds our project it creates meta files for each SDK included in the dependencies. These files don't contain code our application needs to operate. They actually hold information like legal notices, license information, dependency information, etc. When we use multiple third party libraries they may each have meta files with the same name (especially common names like\u003cspan\u003e \u003c/span\u003e\u003cem\u003elicense.txt\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003enotice.txt\u003c/em\u003e). Unfortunately, these duplicate files can create issues during the build process.\u003c/p\u003e\r\n\u003cp\u003eTo avoid this, let's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eexclude\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethese files from our build by adding the following packaging options to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle Module:app\u003c/div\u003e\r\n\u003cpre\u003eandroid {\u003cbr\u003e    compileSdkVersion \u003cspan\u003e28\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003edefaultConfig {\u003cbr\u003e        applicationId \u003cspan\u003e\"io.github.vinge1718.restaurant\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eminSdkVersion \u003cspan\u003e15\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etargetSdkVersion \u003cspan\u003e27\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionCode \u003cspan\u003e1\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eversionName \u003cspan\u003e\"1.0\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003etestInstrumentationRunner \u003cspan\u003e\"android.support.test.runner.AndroidJUnitRunner\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    buildTypes {\u003cbr\u003e        release {\u003cbr\u003e            minifyEnabled \u003cspan\u003efalse\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003eproguardFiles getDefaultProguardFile(\u003cspan\u003e'proguard-android-optimize.txt'\u003c/span\u003e), \u003cspan\u003e'proguard-rules.pro'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e    packagingOptions {\u003cbr\u003e        exclude \u003cspan\u003e'META-INF/DEPENDENCIES.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/DEPENDENCIES'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/dependencies.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/LICENSE.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/LICENSE'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/license.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/LGPL2.1'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/NOTICE.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/NOTICE'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eexclude \u003cspan\u003e'META-INF/notice.txt'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    buildTypes.each {\u003cbr\u003e        it.buildConfigField \u003cspan\u003e'String'\u003c/span\u003e, \u003cspan\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\u003cbr\u003e    }\u003cbr\u003e    testOptions {\u003cbr\u003e        unitTests {\u003cbr\u003e            includeAndroidResources = \u003cspan\u003etrue\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e}\u003c/pre\u003e\r\n\u003ch2\u003eUpdate Google Play Services\u003c/h2\u003e\r\n\u003cp\u003eBefore running your app, check the SDK Manager to ensure you have the latest version of Google Play Services installed. Finally, run your app to make sure you don't receive errors.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/android/setup\"\u003eAdd Firebase to your Android Project\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eportion of Firebase's Android documentation.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/13_shared_preferences\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirebase\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a cloud services provider that offers realtime databases.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eCloud services\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare simply any resource provided over the internet.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe password for the Android debug-keystore is in Firebase is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eandroid\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby default.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/epicodus-lessons/myrestaurants/tree/3.1_setting_up_firebase\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/android/setup\"\u003eAdd Firebase to your Android Project\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eportion of Firebase's Android documentation.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eFirebase: Firebase Structure and Further Setup\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that our application is configured to use our new Firebase database, let's learn how to save data to it. In this lesson we'll create our first Firebase objects and nodes which will allow us to write data to our database.\u003c/p\u003e\r\n\u003cp\u003eIn later lessons we'll dive into retrieving and displaying data from Firebase, and creating listeners that will watch for changes and sync our data automatically.\u003c/p\u003e\r\n\u003ch2\u003eBasic Firebase Methods and Format\u003c/h2\u003e\r\n\u003cp\u003eLet's briefly explore the methods we'll use to create database entries to give you a bit more of an overview, and get some more background on how firebase is structured. Each time we interact with Firebase, we need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e. Why? What does this mean?\u003c/p\u003e\r\n\u003cp\u003eKeep the following in mind:\u003c/p\u003e\r\n\u003cp\u003eA NoSQL database does not allow us to access data in the same way a SQL database does because of its different structure. Instead of pinpointing data sets that meet certain qualifiers, or locating a specific piece of information through it's relationship to other data, we can look at\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enodes\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ein our database and pull data from those specific locations. We identify those nodes through references.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/bkw9xauninpw34n/firebase-node-structure.png\" alt=\"firebase-node-structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdditionally, remember that in Java and therefore Android,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeverything\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(with the exception of primitives and interfaces). Our datatypes of course, but also our activities, our adapters, our services, our views. How we connect and work with databases is no different. So let's start by creating a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edatabase\u003c/code\u003e. We can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to access our database and then write that into a local\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFirebaseDatabase database = FirebaseDatabase.getInstance();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we can create a reference by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetReference()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstance.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eref\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enow refers to our entire database at the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eroot level\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eDatabaseReference ref = FirebaseDatabase.getInstance().getReference();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFrequently, these lines are written back-to back:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFirebaseDatabase database = FirebaseDatabase.getInstance();\r\nDatabaseReference ref = database.getReference();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can access data nodes below our root level, by descending down to a child node. This process is somewhat similar to traversing through the DOM with jQuery: We find an element, then locate a secondary element or set of elements in relationship to that parent.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/7u5swiybn5kqpi3/dom_tree_traversal.png\" alt=\"dom_tree_traversal.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eData in Firebase is stored in JSON-formatted key-value pairs. When we write to the database we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the appropriate child\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eref.child(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;childNodeName\u0026gt;\"\u003c/span\u003e).setValue(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;someValue\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis example creates a new child node with a key of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003echildNodeName\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand a value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esomeValue\u003c/code\u003e. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enode\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a general computing term referring to an individual piece of a larger data structure. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003echild node\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply a node extending from another node.\u003c/p\u003e\r\n\u003ch2\u003eUpdate Security Rules\u003c/h2\u003e\r\n\u003cp\u003eBy default, Firebase security rules require users to be authenticated in order to both read and write to the database. We will not be working with user authorization until later this week, so let's alter these rules so we can practice writing and reading to the database without having authorized users.\u003c/p\u003e\r\n\u003cp\u003eNavigate to your Firebase app's overview. Select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDatabase\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the panel on the left-hand side of the window.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/v5l01j2jj421rf4/firebase-overview-panel-database.png?raw=1\" alt=\"firebase-overview-panel-database\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you already had a database initialized  you can go ahead and select the \u003cstrong\u003e\u003cem\u003e\u003cspan style=\"font-size: 1rem;\"\u003erules\u003c/span\u003e\u003c/em\u003e\u003c/strong\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003cspan style=\"font-size: 1rem;\"\u003etab, if not scroll down and click on \u003cstrong\u003e\u003cem\u003eCreate Realtime Database\u003c/em\u003e\u003c/strong\u003e: This will initialize your database and now you can click on the \u003cstrong\u003e\u003cem\u003erules\u003c/em\u003e\u003c/strong\u003e tab.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/nett0vvo78n9raf/firebase-security-rule-tab.png?raw=1\" alt=\"firebase-security-rules-tab\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAlter the default rules to reflect the following following:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"json hljs\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003erules\u003c/span\u003e\": \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.read\u003c/span\u003e\": \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e.write\u003c/span\u003e\": \u003cspan class=\"hljs-literal\"\u003etrue\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePublish\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto save these changes. This will allow any application with the information in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egoogle-services.json\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to write to our database. We will change the rules back once we have added user authentication to our app.\u003c/p\u003e\r\n\u003ch2\u003eWriting to Firebase\u003c/h2\u003e\r\n\u003cp\u003eNow that we have permissions to read and write to Firebase, let's write our first piece of data. We're currently saving the zip code a user enters into MyRestaurants in Android's shared preferences. Let's practice writing to Firebase by implementing code that will save this data to Firebase instead. Later on, when we have more data to work with, we'll switch back to saving the user's zip code to shared preferences. As you follow along, simply comment out any code referring to shared preferences.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to define the child name of the Firebase node we'd like to save this information to in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e. We'll call our node\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e, and it will contain data for zip codes a user has searched for:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_CHILD_SEARCHED_LOCATION = \u003cspan class=\"hljs-string\"\u003e\"searchedLocation\"\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we define a constant called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_LOCATION_SEARCHED_LOCATION\u003c/code\u003e, and set it equivalent to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"searchedLocation\"\u003c/code\u003e. This will be the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof our node's key-value pair in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow, we'll save user-entered zip codes into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode by adding the following to our MainActivity, and commenting out our previous code saving this data to shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences.Editor mEditor;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor = mSharedPreferences.edit();\u003c/span\u003e\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n\r\n            saveLocationToFirebase(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//            if(!(location).equals(\"\")) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//                addToSharedPreferences(location);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            }\u003c/span\u003e\r\n\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.setValue(location);\r\n    }\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//    private void addToSharedPreferences(String location) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    }\u003c/span\u003e\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we add the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchedLocations\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e, instantiating it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod passing in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_CHILD_SEARCHED_LOCATION\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument.\u003c/p\u003e\r\n\u003cp\u003eNote: If you get a red squiggly line under the \u003cstrong\u003e\u003cem\u003e\u003ccode class=\"java hljs\"\u003eDatabaseReference\u003c/code\u003e\u003c/em\u003e\u003ccode class=\"java hljs\"\u003e \u003c/code\u003e\u003c/strong\u003eyou'll need to add the Realtime Firebase dependency in the (app) build.gradle and sync - then go back to the MainActivity.java and Alt-Enter to import the necessary library.\u003c/p\u003e\r\n\u003cpre\u003eimplementation \u003cspan\u003e'com.google.firebase:firebase-database:16.0.6'\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, providing the user-submitted zip code as an argument. Remember, nodes are specific locations in your database, and they're\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey-value pairs. By calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're providing a\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that we have not yet defined or created a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in our Firebase dashboard. However, when the method above runs, Firebase will create this node for us if it cannot find a pre-existing node of the same name.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will now call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaveLocationToFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of saving this location into shared preferences. Each time the method is called a new zip code will be saved to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow if we run the app and enter a new zip code we should see it appear in our Firebase dashboard under the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eData\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/76tjk31ahwe7zc5/searchedLocation-setValue-example1.png?raw=1\" alt=\"first-searched-location-saved-in-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eUnique Node IDs\u003c/h2\u003e\r\n\u003cp\u003eHowever, if we enter a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elocation the previous location will be overwritten. To prevent this, let's call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod before setting the value. This will ensure each new entry is added to the node under a unique, randomly generated id called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epush id\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.push().setValue(location);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter making the changes above, we can run the app, enter a few new locations and see that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode now contains multiple locations with their own unique id:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/66dld414jz4jabx/searchedLocation-push-example.png?raw=1\" alt=\"firebase-dashboard-multiple-location-entries\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSince we're (at least temporarily) saving the user's searched zip codes in Firebase, let's make the following quick alteration to RestaurantListActivity to ensure our Yelp API requests are being made with the user's most recent search, not an older zip code stored in shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private String mRecentAddress;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, null);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        if (mRecentAddress != null) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            getRestaurants(mRecentAddress);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        }\u003c/span\u003e\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're simply commenting out any reference to shared preferences, and the code that previously made a Yelp API request using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e. Instead, we're making a request with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike we were previously. Again, we'll revisit using shared preferences later on.\u003c/p\u003e\r\n\u003ch2\u003eFirebase Data Structure\u003c/h2\u003e\r\n\u003cp\u003eUnlike SQL, Firebase is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ea relational database and it's structure is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etabular. Instead, Firebase data is stored in JSON, which has a nested structure and can be represented using a tree. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eData\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edashboard in your Firebase dashboard is simply a visual representation of your JSON database tree.\u003c/p\u003e\r\n\u003cp\u003eIn fact, we can export our data by clicking on the overflow menu from the database toolbar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/bv40p1t2tqo31au/firebase-database-overflow-menu.png?raw=1\" alt=\"firebase-overflow-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eand then selecting the \"Export Data\" button:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/njgtcvxial2dkpt/firebase-export-json.png?raw=1\" alt=\"firebase-export-json\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd download our database's JSON, which currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003esearchedLocation\u003c/span\u003e\" : \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi05yPv_0tjM2Jiqz\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97204\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi5m6uamM1IkHfXhC\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97201\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe database for our MyRestaurants app will eventually look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/869yzvlkli2l0bl/data_structure_myrestaurants.png?raw=1\" alt=\"MyRestaurants Database Structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOur Firebase database will contain key-value pairs for each restaurant a user saves. The value associated with a restaurant is a map of 10 child key-value pairs.\u003c/p\u003e\r\n\u003cp\u003eEach collection of data, called a node, also has a path associated with it. For example, the path to access the phone number for the restaurant with the push id\u003cspan\u003e \u003c/span\u003e\u003cem\u003eKFB1RHsfuEVcpORnzaH\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Snack Shack, in this case) would be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference phoneRef = FirebaseDatabse.getInstance().getReference(\"restaurants\").child(\"KFB1RHsfuEVcpORnzaH\").child(\"phone\");\u003c/code\u003e. Like a file path, these data references are unique paths to access a specific piece or group of data.\u003c/p\u003e\r\n\u003ch3\u003eFinal Thoughts - How do I efficiently structure my database?\u003c/h3\u003e\r\n\u003cp\u003eBecause of your exposure to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eJSON\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas part of JS Unit, you may be compelled to structure your database in a nested fashion - nesting individual key/value pairs in a list, nesting that list within another list, nesting that list as a value of a key, and so on.\u003c/p\u003e\r\n\u003cp\u003eThe result of this structure has some benefits -- it is intuitively readable, and, at first glance, has little data repetition. After all, being DRY and not having repetitive code is one of hallmarks of an efficient developer.\u003c/p\u003e\r\n\u003cp\u003eBut wait - this approach is actually\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNOT\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erecommendable when it comes to this kind of database. In fact, it is actually preferable to have nodes that reference each other, and, in some cases, may even\u003cspan\u003e \u003c/span\u003e\u003cem\u003eduplicate \u003c/em\u003ecertain aspects of the data. Restructuring your data to prevent nesting is called \"denormalizing\" the data to achieve a \"flat\" data structure.\u003c/p\u003e\r\n\u003cp\u003eBut wait, why is this preferable? Data repetition - no way!\u003c/p\u003e\r\n\u003cp\u003eHere's why.\u003c/p\u003e\r\n\u003cp\u003eWith Firebase, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecan be tasked with downloading information from a specific node. But when this is completed, the node and\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof its child nodes are also downloaded and stored in the app, even if you only want one specific subset of that data.\u003c/p\u003e\r\n\u003cp\u003eThis unnecessarily taxes the server with requests for data through nested listeners, and the performance of both the server and the app can plummet due to inefficient data retrieval.\u003c/p\u003e\r\n\u003cp\u003eTherefore, when building an app that is even slightly complex, always denormalize your data, creating as flat of a hierarchy as possible - even if this means some data repetition or seeming redundancy.\u003c/p\u003e\r\n\u003cp\u003eFor more information, I really recommend checking out\u003cspan\u003e \u003c/span\u003e\u003ca class=\"\" href=\"https://www.youtube.com/watch?v=3qN4BBpLeyw\"\u003ethis\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca class=\"\" href=\"https://www.youtube.com/watch?v=-12ATQn3e0s\"\u003ethis video\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom Udacity's Firebase Essentials for Android series and reading the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/structure-data\"\u003eStructure Your Database\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esection of the Firebase docs.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eNode\u003c/strong\u003e: a general computing term referring to an individual piece of a larger data structure.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChild node\u003c/strong\u003e: A node extending from another node.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ePush ID\u003c/strong\u003e: A unique, randomly generated id associated with each entry by the node, and created by Firebase.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEach time we interact with Firebase we need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e. We can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to access our database and then using the database object, we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetReference()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to get a specific reference within our database:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFirebaseDatabase database = FirebaseDatabase.getInstance();\r\nDatabaseReference ref = database.getReference();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eData in Firebase is stored in JSON-formatted key-value pairs. When we write to the database we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and pass in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the appropriate child\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eref.child(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;childNodeName\u0026gt;\"\u003c/span\u003e).setValue(\u003cspan class=\"hljs-string\"\u003e\"\u0026lt;someValue\u0026gt;\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen writing data, if Firebase cannot find the node specified it will create one automatically.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/structure-data#avoid_nesting_data\"\u003eData Structure\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esection of Firebase's Android Guides.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eData Persistence: Writing to Firebase\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eWriting to Firebase\u003c/h2\u003e\r\n\u003cp\u003eNow that we have permissions to read and write to Firebase, let's write our finally store our first piece of data. We're currently saving the zip code a user enters into MyRestaurants in Android's shared preferences. Let's practice writing to Firebase by implementing code that will save this data to Firebase instead. Later on, when we have more data to work with, we'll switch back to saving the user's zip code to shared preferences. As you follow along, simply comment out any code referring to shared preferences.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to define the child name of the Firebase node we'd like to save this information to in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e. We'll call our node\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e, and it will contain data for zip codes a user has searched for:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_CHILD_SEARCHED_LOCATION = \u003cspan class=\"hljs-string\"\u003e\"searchedLocation\"\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we define a constant called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_LOCATION_SEARCHED_LOCATION\u003c/code\u003e, and set it equivalent to the string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"searchedLocation\"\u003c/code\u003e. This will be the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof our node's key-value pair in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow, we'll save user-entered zip codes into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode by adding the following to our MainActivity, and commenting out our previous code saving this data to shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences.Editor mEditor;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor = mSharedPreferences.edit();\u003c/span\u003e\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n\r\n            saveLocationToFirebase(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//            if(!(location).equals(\"\")) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//                addToSharedPreferences(location);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            }\u003c/span\u003e\r\n\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.setValue(location);\r\n    }\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//    private void addToSharedPreferences(String location) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    }\u003c/span\u003e\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we add the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchedLocations\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e, instantiating it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod passing in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFIREBASE_CHILD_SEARCHED_LOCATION\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument.\u003c/p\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, providing the user-submitted zip code as an argument. Remember, nodes are specific locations in your database, and they're\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ekey-value pairs. By calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're providing a\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethat corresponds to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekey\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eYou may have noticed that we have not yet defined or created a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in our Firebase dashboard. However, when the method above runs, Firebase will create this node for us if it cannot find a pre-existing node of the same name.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will now call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esaveLocationToFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of saving this location into shared preferences. Each time the method is called a new zip code will be saved to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in Firebase.\u003c/p\u003e\r\n\u003cp\u003eNow if we run the app and enter a new zip code we should see it appear in our Firebase dashboard under the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eData\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/76tjk31ahwe7zc5/searchedLocation-setValue-example1.png?raw=1\" alt=\"first-searched-location-saved-in-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eUnique Node IDs\u003c/h2\u003e\r\n\u003cp\u003eHowever, if we enter a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elocation the previous location will be overwritten. To prevent this, let's call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod before setting the value. This will ensure each new entry is added to the node under a unique, randomly generated id called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epush id\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.push().setValue(location);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter making the changes above, we can run the app, enter a few new locations and see that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode now contains multiple locations with their own unique id:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/66dld414jz4jabx/searchedLocation-push-example.png?raw=1\" alt=\"firebase-dashboard-multiple-location-entries\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSince we're (at least temporarily) saving the user's searched zip codes in Firebase, let's make the following quick alteration to RestaurantListActivity to ensure our Yelp API requests are being made with the user's most recent search, not an older zip code stored in shared preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private String mRecentAddress;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, null);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        if (mRecentAddress != null) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            getRestaurants(mRecentAddress);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        }\u003c/span\u003e\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're simply commenting out any reference to shared preferences, and the code that previously made a Yelp API request using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecentAddress\u003c/code\u003e. Instead, we're making a request with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elike we were previously. Again, we'll revisit using shared preferences later on.\u003c/p\u003e\r\n\u003ch2\u003eExporting Firebase Data\u003c/h2\u003e\r\n\u003cp\u003eBecause data is stored in Firebase in JSON, it is super easy for us to download our data and view it in a text editor, or hand it over to another application where it can be parsed.\u003c/p\u003e\r\n\u003cp\u003eThis is how:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/bv40p1t2tqo31au/firebase-database-overflow-menu.png?raw=1\" alt=\"firebase-overflow-menu\"\u003e\u003c/p\u003e\r\n\u003cp\u003eand then selecting the \"Export Data\" button:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/njgtcvxial2dkpt/firebase-export-json.png?raw=1\" alt=\"firebase-export-json\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd download our database's JSON, which currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs json\"\u003e{\r\n  \"\u003cspan class=\"hljs-attribute\"\u003esearchedLocation\u003c/span\u003e\" : \u003cspan class=\"hljs-value\"\u003e{\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi05yPv_0tjM2Jiqz\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97204\"\u003c/span\u003e,\r\n    \"\u003cspan class=\"hljs-attribute\"\u003e-KGTi5m6uamM1IkHfXhC\u003c/span\u003e\" : \u003cspan class=\"hljs-string\"\u003e\"97201\"\u003c/span\u003e\r\n  }\r\n\u003c/span\u003e}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe database for our MyRestaurants app will eventually look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/869yzvlkli2l0bl/data_structure_myrestaurants.png?raw=1\" alt=\"MyRestaurants Database Structure\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOur Firebase database will contain key-value pairs for each restaurant a user saves. The value associated with a restaurant is a map of 10 child key-value pairs.\u003c/p\u003e\r\n\u003cp\u003eEach collection of data, called a node, also has a path associated with it. For example, the path to access the phone number for the restaurant with the push id\u003cspan\u003e \u003c/span\u003e\u003cem\u003eKFB1RHsfuEVcpORnzaH\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(Snack Shack, in this case) would be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference phoneRef = FirebaseDatabse.getInstance().getReference(\"restaurants\").child(\"KFB1RHsfuEVcpORnzaH\").child(\"phone\");\u003c/code\u003e. Like a file path, these data references are unique paths to access a specific piece or group of data.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Reading\u003c/h3\u003e\r\n\u003cp\u003eFor more information about data structuring with Firebase, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/structure-data\"\u003eStructure Your Database\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esection of the Firebase docs.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirebase: Reading Data and Event Listeners\u003c/h1\u003e\r\n\u003cp\u003eNow that we can successfully save data from our MyRestaurants application into Firebase, how do we retrieve that data when we need it? Remember, again, that unlike in a SQL database we cannot pinpoint data in the same way we can with a RDBMS - instead, we identify data through changes to a certain node, or reference point. In this lesson we'll learn how to create and implement\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elisteners\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat will deliver updated database information directly to our app.\u003c/p\u003e\r\n\u003ch2\u003eListeners and Snapshots\u003c/h2\u003e\r\n\u003cp\u003eFirebase utilizes\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elisteners\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto watch for changes in a specified node. It is similar to an event handler in the sense that a code is triggered based on a certain circumstance. In our case, whenever changes in that node's data occur, the listener automatically provides the application updated data, called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esnapshot\u003c/strong\u003e. The application can then use information from the snapshot to update the UI.\u003c/p\u003e\r\n\u003cp\u003eThis differs drastically from the request/response model we've used in the past, such as requesting information from Yelp's API. The request/response format requires our application make new request threads to regularly check for new data from the data source. When using listeners, Firebase\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esends updates to our app\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhen\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata changes.\u003c/p\u003e\r\n\u003cp\u003eSimilar to OKHttp, the Firebase SDK handles all threading and asynchronicity for us, too! We just need to determine what data we'd like to listen to, and what to do when the listener returns new data.\u003c/p\u003e\r\n\u003ch2\u003eTypes of Listeners in Firebase\u003c/h2\u003e\r\n\u003cp\u003eThere are several types of Listeners for Firebase, and each Listener type has a different kind of callback that is triggered when the listener is activated.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003c/strong\u003e: A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elistens for data changes to a specific location in your database - i.e a node.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas one event callback method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDataChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto read a static snapshot of the contents at a given path, as they existed at the time of the event. This method is triggered once when the listener is attached and again every time the data, including children, changes. The event callback is passed a snapshot containing all data at that location, including child data. If there is no data, the snapshot returned is null.\u003c/p\u003e\r\n\u003cp\u003eIf the Event can not be completed, a second callback method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCancelled()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003c/strong\u003e: A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elistens for changes to the children of a specific database reference, for example the root node of a database. It has the following callback methods:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eonCancelled(DatabaseError error) \r\n\u003cspan class=\"hljs-comment\"\u003e// This method will be triggered in the event that this listener either failed at the server, or is removed as a result of the security and Firebase rules.\u003c/span\u003e\r\n\r\nonChildAdded(DataSnapshot snapshot, String previousChildName)\r\n \u003cspan class=\"hljs-comment\"\u003e// triggered when a new child is added to the location to which this listener was added.\u003c/span\u003e\r\n\r\nonChildChanged(DataSnapshot snapshot, String previousChildName)\r\n \u003cspan class=\"hljs-comment\"\u003e//  triggered when the data at a child location has changed.\u003c/span\u003e\r\n\r\nonChildMoved(DataSnapshot snapshot, String previousChildName) \r\n\u003cspan class=\"hljs-comment\"\u003e// triggered when a child location's priority changes.\u003c/span\u003e\r\n\r\nonChildRemoved(DataSnapshot snapshot) \r\n\u003cspan class=\"hljs-comment\"\u003e// triggered when a child is removed from the location to which this listener was added.\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor your own apps that require data persistence, it is a good idea to read through the additional documentation on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(read both\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/read-and-write\"\u003ethe guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/reference/android/com/google/firebase/database/ValueEventListener\"\u003ereference\u003c/a\u003e) and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/reference/android/com/google/firebase/database/ChildEventListener\"\u003eread the reference\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eMake sure you understand the difference between event listener types and when they are used - alone, or in combination.\u003c/p\u003e\r\n\u003ch2\u003eCreating a ValueEventListener\u003c/h2\u003e\r\n\u003cp\u003eLet’s add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto MyRestaurants. We'll include code that logs data from our searchedLocations node in Firebase whenever changes occur (such as when we add a new location):\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\u003cspan class=\"hljs-comment\"\u003e//pinpoint location node\u003c/span\u003e\r\n\r\n        mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() { \u003cspan class=\"hljs-comment\"\u003e//attach listener\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-comment\"\u003e//something changed!\u003c/span\u003e\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot locationSnapshot : dataSnapshot.getChildren()) {\r\n                    String location = locationSnapshot.getValue().toString();\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"Locations updated\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"location: \"\u003c/span\u003e + location); \u003cspan class=\"hljs-comment\"\u003e//log\u003c/span\u003e\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-comment\"\u003e//update UI here if error occurred.\u003c/span\u003e\r\n\r\n            }\r\n        });\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n     ...\r\n\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we define a Firebase\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSearchedLocationReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand pass it the child key of the searchedLocations node (as covered in Data Persistence: Writing to Firebase lesson). Then, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddValueEventListener()\u003c/code\u003eon our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSearchedLocationReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to attach a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which we provide as a parameter).\u003c/p\u003e\r\n\u003cp\u003eAs mentioned above,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003es have two methods that must be overridden;\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDataChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCancelled()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003eTo recap:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonDataChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called whenever data at the specified node changes. Such as adding a new zip code. It will return a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edataSnapshot\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, which is essentially a read-only copy of the Firebase state.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonCancelled()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called if the listener is unsuccessful for any reason. We won't add any code here right now, but could in the future.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDataChange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we'll snag the values returned in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edataSnapshot\u003c/code\u003e, loop through each of the children with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetChildren()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and print their values to the logcat. Other methods we can call on a dataSnapshot include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.child()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getKey()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eEach time a new location is added it will be saved to our searchedLocations node, which will trigger our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto provide an updated list of locations to our app. When our app receives these locations, it will log them to the logcat. Here, we can see several locations logged to the logcat:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/as5bzl3ofobw054/locations-updated-logcat1.png?raw=1\" alt=\"logging-event-listener-data\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAnd, if we search for yet another zip code, we can see there are now\u003cspan\u003e \u003c/span\u003e\u003cem\u003emore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elocations logged. The listener recognized changes in the searchedLocations node, and automatically sent the updated information to our app. Pretty cool!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/wr41juzri5lxhb7/locations-updated-logcat2.png?raw=1\" alt=\"logging-event-listener-data-again\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eRemoving Event Listeners\u003c/h2\u003e\r\n\u003cp\u003eWhen creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evalueEventListeners\u003c/code\u003e, it's important to consider how they should be handled while the user is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eactively interacting with our application. In its current state, when a user navigates away from MyRestaurants, our listener will\u003cspan\u003e \u003c/span\u003e\u003cem\u003econtinue\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto listen for changes in Firebase. As you can imagine, continually listening will eat away battery life, and eventually can cause memory leaks.\u003c/p\u003e\r\n\u003cp\u003eLet's remove our listener when the user quits interacting with the activity. To do this, we'll declare and attach a variable name to the listener itself, so we may instruct our app to destroy it when the user quits the activity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ValueEventListener mSearchedLocationReferenceListener;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        mSearchedLocationReferenceListener = mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot locationSnapshot : dataSnapshot.getChildren()) {\r\n                    String location = locationSnapshot.getValue().toString();\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"Locations updated\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"location: \"\u003c/span\u003e + location);\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n        });\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mSearchedLocationReference.removeEventListener(mSearchedLocationReferenceListener);\r\n    }\r\n\r\n  ...\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the code above, we declare the member variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSearchedLocationReferenceListener\u003c/code\u003eand assign it to the event listener. Then, we override the activity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that automatically runs when the activity is halted. We explicitly instruct our app to remove the listener from our Firebase node when the activity is destroyed.\u003c/p\u003e\r\n\u003cp\u003eNote that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is an override for the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity\u003c/em\u003e, not the listener. It is defined in the top level of the class, not nested within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddValueEventListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock.\u003c/p\u003e\r\n\u003cp\u003eThe completed activity should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences mSharedPreferences;\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    private SharedPreferences.Editor mEditor;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mSearchedLocationReference;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ValueEventListener mSearchedLocationReferenceListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        mSearchedLocationReferenceListener = mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot locationSnapshot : dataSnapshot.getChildren()) {\r\n                    String location = locationSnapshot.getValue().toString();\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"Locations updated\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"location: \"\u003c/span\u003e + location);\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n        });\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor = mSharedPreferences.edit();\u003c/span\u003e\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            String location = mLocationEditText.getText().toString();\r\n\r\n            saveLocationToFirebase(location);\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//            if(!(location).equals(\"\")) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//                addToSharedPreferences(location);\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//            }\u003c/span\u003e\r\n\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esaveLocationToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mSearchedLocationReference.push().setValue(location);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mSearchedLocationReference.removeEventListener(mSearchedLocationReferenceListener);\r\n    }\r\n\r\n\u003cspan class=\"hljs-comment\"\u003e//    private void addToSharedPreferences(String location) {\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\u003c/span\u003e\r\n\u003cspan class=\"hljs-comment\"\u003e//    }\u003c/span\u003e\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eListeners\u003c/strong\u003e: Watch for changes in a specified node. Whenever changes occur, listeners automatically provide the application updated data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSnapshot\u003c/strong\u003e: Updated data from a node. Usually provided to the application by a listener, when changes to the node occur.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo prevent consuming unnecessary battery power and memory, remove valueEventListeners manually when the user is no longer interacting with the application. This can be done by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremoveEventListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the Firebase database reference in the activity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eDefining a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003evalueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand removing it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen a user quits an activity:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ValueEventListener mSearchedLocationReferenceListener;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        mSearchedLocationReference = FirebaseDatabase\r\n                .getInstance()\r\n                .getReference()\r\n                .child(Constants.FIREBASE_CHILD_SEARCHED_LOCATION);\r\n\r\n        mSearchedLocationReferenceListener = mSearchedLocationReference.addValueEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                \u003cspan class=\"hljs-comment\"\u003e//   code here is executed when Firebase recognizes a change made to the \u003c/span\u003e\r\n                \u003cspan class=\"hljs-comment\"\u003e//   node being listened to, and provides a new dataSnapshot. \u003c/span\u003e\r\n                }\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-comment\"\u003e//   code here is executed if the listener is unsuccessful \u003c/span\u003e\r\n                \u003cspan class=\"hljs-comment\"\u003e//   for any reason.\u003c/span\u003e\r\n            }\r\n        });\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e//    defined in 'top level' of activity, not nested within another block. \u003c/span\u003e\r\n        \u003cspan class=\"hljs-comment\"\u003e//    code here is executed when the user quits the activity. \u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mSearchedLocationReference.removeEventListener(mSearchedLocationReferenceListener);\r\n    }\r\n  ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor more information, check out Firebase's Java Android Guides for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/database/android/retrieve-data\"\u003eRetrieve Data on Android\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirebase: Writing POJOs\u003c/h1\u003e\r\n\u003cp\u003eIn the previous lesson we successfully wrote small strings of data to Firebase. However, we eventually want our MyRestaurants users to save entire restaurants to their own personalized lists. Our restaurants are complex Java objects, not just string values. In this lesson we'll cover writing Java objects to Firebase, and implement functionality to allow users to save restaurants to their own personal list.\u003c/p\u003e\r\n\u003ch2\u003eObject Formatting in Firebase\u003c/h2\u003e\r\n\u003cp\u003eFirebase makes it rather simple to read and write\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ePOJOs\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(plain old Java objects) with its built-in serialization capabilities. We just need to adhere to a few simple rules:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach member variable name must match the name of the keys of our children nodes. In our case, this means we need to remove the ‘m’ prefix from variables in our Restaurant class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach member variable must be a valid JSON type.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a valid JSON type, so we need to change our address and categories variables to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etypes.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe must provide an empty constructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe must also provide public getter methods for every member variable.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eConveniently enough, we already have an empty\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor created for use by the Parceler library, and public getter methods. We just need to remove any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003em\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefixes, and alter any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype variables in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.List;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Parcel\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    String name;\r\n    String phone;\r\n    String website;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating;\r\n    String imageUrl;\r\n    List\u0026lt;String\u0026gt; address = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude;\r\n    List\u0026lt;String\u0026gt; categories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.name = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.phone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.website = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.rating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.imageUrl = getLargeImageUrl(imageUrl);\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.address = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.latitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.longitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.categories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e name;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e phone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e website;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e imageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e address;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e latitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e longitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e List\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetLargeImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String imageUrl)\u003c/span\u003e \u003c/span\u003e{\r\n        String largeImageUrl = imageUrl.substring(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, imageUrl.length() - \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e).concat(\u003cspan class=\"hljs-string\"\u003e\"o.jpg\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e largeImageUrl;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, we've removed the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003em\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eprefix from our member variables and any references to them, and we've changed the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddress\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecategories\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables to be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype, including within the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetAddress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCategories()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003egetter methods.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you receive\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efailed to bounce type\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eerrors, double-check that public getter methods exist for each variable and that each is a valid JSON type.\u003c/p\u003e\r\n\u003ch2\u003eSaving Objects\u003c/h2\u003e\r\n\u003cp\u003eNow that we’ve altered our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to adhere to Firebase's rules, let’s begin saving restaurants. Remember, we want users to be able to use our app to search for restaurants in a provided area, and save any restaurants they're interested in to their own customizable list.\u003c/p\u003e\r\n\u003cp\u003eWe should already have a \"Save Restaurant\" button in our restaurant detail view. Let's configure our application to actually save a restaurant to our database when a user clicks this option:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9mmgh2w4n4xod2p/save-restaurant-button.png?raw=1\" alt=\"save-restaurant-button-in-detail-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add the restaurants node's key name (which will serve as the key in our data's key-value relationship) to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, just like we did for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esearchedLocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in the previous lessons.\u003c/p\u003e\r\n\u003cp\u003eRemember, this node doesn't exist\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyet\u003c/em\u003e, but Firebase will create it when it doesn't find an existing node with this name. Moving forward, we should\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esave the node names as constants in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_CHILD_RESTAURANTS = \u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we'll attach a click listener to our \"Save Restaurants\" button, and add code to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003emethod that will save a restaurant to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode in Firebase when the button is selected:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        Picasso.get()\u003cbr\u003e                .load(mRestaurant.getImageUrl())\u003cbr\u003e                .into(mImageLabel);\r\n\r\n        mNameLabel.setText(mRestaurant.getName());\r\n        mCategoriesLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getCategories()));\r\n        mRatingLabel.setText(Double.toString(mRestaurant.getRating()) + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        mPhoneLabel.setText(mRestaurant.getPhone());\r\n        mAddressLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getAddress()));\r\n\r\n        mWebsiteLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mPhoneLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mAddressLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSaveRestaurantButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSaveRestaurantButton) {\r\n            DatabaseReference restaurantRef = FirebaseDatabase\r\n                    .getInstance()\r\n                    .getReference(Constants.FIREBASE_CHILD_RESTAURANTS);\r\n            restaurantRef.push().setValue(mRestaurant);\r\n            Toast.makeText(getContext(), \u003cspan class=\"hljs-string\"\u003e\"Saved\"\u003c/span\u003e, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the above code, we do the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eSet a click listener for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSaveRestaurantButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the fragment's existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAdd another conditional statement to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003eoverride (we should already have several conditionals that create implicit intents if the user clicks on an address, phone number, or website, as covered in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/wednesday-implicit-intents?module_item_id=i395fbc4796bb4258cbf441d02a355a34\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/wednesday-implicit-intents\" data-api-returntype=\"Page\"\u003ethis lesson\u003c/a\u003e).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn the conditional, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurantRef\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetReference()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods, passing in the key for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003enode.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003epush()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e, passing in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject as an argument, to create a node for the selected restaurant with a unique push id.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we display a brief toast to confirm the restaurant has been saved.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, if we run our app, we should be able to click the Save Restaurant button, navigate to our Firebase app's Data tab and see all of the data pertaining to the selected restaurant!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/cjj828ulyqxygu2/save-restaurant-firebase-database.png?raw=1\" alt=\"pojo-visible-in-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003ePOJOs\u003c/strong\u003e: Stands for \"Plain old Java objects\".\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eWriting Java Objects to Firebase\u003c/h3\u003e\r\n\u003cp\u003eIn order to read and write POJOS to FIrebase, we must adhere to the following rules:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eEach member variable name must match the name of the keys of children nodes.\u003c/li\u003e\r\n\u003cli\u003eEach member variable must be a valid JSON type.\u003c/li\u003e\r\n\u003cli\u003eAn empty constructor must be provided.\u003c/li\u003e\r\n\u003cli\u003ePublic getter methods for every member variable must be included.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eFirebase: RecyclerAdapter\u003c/h1\u003e\r\n\u003cp\u003eNow that users can successfully save their favorite restaurants to Firebase, let's make sure they can view the list of restaurants they've saved. To do this, we'll integrate another open source library called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eFirebaseUI-Android\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eSimilar to our RestaurantListActivity, we will display each saved restaurant using the custom\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout. It is therefore possible for us to reuse our RestaurantListAdapter and RestaurantListViewHolder. However, when we delete data from our database, the RestaurantListAdapter won't know it needs to update the view!\u003c/p\u003e\r\n\u003cp\u003eWe've already integrated listeners that automatically return updated data to our application; let's make sure our user interface is similarly dynamic and also automatically updates when changes occur. In order to address this, we'll use FirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eFirebaseRecyclerAdapter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto map our Restaurant data from Firebase to Android.\u003c/p\u003e\r\n\u003ch2\u003eFirebase RecyclerView Setup\u003c/h2\u003e\r\n\u003cp\u003eFirst off, take a moment to glance over the general FirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android\"\u003eREADME\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android/blob/master/database/README.md\"\u003efirebase-ui-database docs\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo install this tool we'll add the following to our app's dependencies:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n    ...\r\n    implementation 'com.firebaseui:firebase-ui-database:3.3.1'\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eFirebase ViewHolder\u003c/h2\u003e\r\n\u003cp\u003eBefore we create our FirebaseRecyclerAdapter, let's create a new ViewHolder. It will look similar to our RestaurantViewHolder, but because FirebaseUI handles the ViewHolder construction for us, we won't have as many customization options.\u003c/p\u003e\r\n\u003cp\u003eFirst, create a new Java class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFirebaseRestaurantViewHolder.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package. Then, add the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n   \r\n    View mView;\r\n    Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n        mView = itemView;\r\n        mContext = itemView.getContext();\r\n        itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        ImageView restaurantImageView = (ImageView) mView.findViewById(R.id.restaurantImageView);\r\n        TextView nameTextView = (TextView) mView.findViewById(R.id.restaurantNameTextView);\r\n        TextView categoryTextView = (TextView) mView.findViewById(R.id.categoryTextView);\r\n        TextView ratingTextView = (TextView) mView.findViewById(R.id.ratingTextView);\r\n\r\n        Picasso.get().load(restaurant.getImageUrl()).into(restaurantImageView);\r\n\r\n        nameTextView.setText(restaurant.getName());\r\n        categoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n        ratingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(Constants.FIREBASE_CHILD_RESTAURANTS);\r\n        ref.addListenerForSingleValueEvent(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ValueEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDataChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n                    restaurants.add(snapshot.getValue(Restaurant.class));\r\n                }\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, itemPosition + \u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e, Parcels.wrap(restaurants));\r\n\r\n                mContext.startActivity(intent);\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like in our RestaurantViewHolder, we add static variables to hold the width and height of our images for Picasso.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then add member variables to hold the view and context which we set in our constructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe also implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface and set the click listener on our itemView.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we first bind the views and then set the image and text views.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we create a singleValueEventListener to grab out the current list of restaurants from Firebase which we pass along to the RestaurantDetailActivity in the form of an intent extra. We will need this ArrayList when constructing an instance of the RestaurantDetailFragment.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eSavedRestaurantListActivity\u003c/h2\u003e\r\n\u003cp\u003eBefore we can hook our app up with the corresponding data in Firebase, we first need to create a place to display it. Let's start by creating a new activity called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSavedRestaurantListActivity.java\u003c/em\u003e. We can reuse the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout since all we need is a RecyclerView so when creating this new activity, make sure to uncheck the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/3q0j30wdf1sejil/dont-generate-layout-when-creating-new-activity.png\" alt=\"dont-generate-layout-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWe can now set the appropriate content view, bind the RecyclerView, and set the FirebaseRecyclerAdapter from the FirebaseUI library:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eSavedRestaurantListActivity \u003cspan\u003eextends \u003c/span\u003eAppCompatActivity {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt; \u003cspan\u003emFirebaseAdapter\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003erecyclerView\u003c/span\u003e) RecyclerView \u003cspan\u003emRecyclerView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e(Bundle savedInstanceState) {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetContentView(R.layout.\u003cspan\u003eactivity_restaurants\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eButterKnife.\u003cspan\u003ebind\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRestaurantReference \u003c/span\u003e= FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetUpFirebaseAdapter()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003eprivate void \u003c/span\u003e\u003cspan\u003esetUpFirebaseAdapter\u003c/span\u003e(){\u003cbr\u003e        FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(\u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eRestaurant.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e                        .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt;(options) {\u003cbr\u003e            \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eFirebaseRestaurantViewHolder firebaseRestaurantViewHolder\u003cspan\u003e, int \u003c/span\u003eposition\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e@NonNull \u003c/span\u003eRestaurant restaurant) {\u003cbr\u003e                firebaseRestaurantViewHolder.bindRestaurant(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e            \u003cspan\u003e@NonNull\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            @Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003epublic \u003c/span\u003eFirebaseRestaurantViewHolder \u003cspan\u003eonCreateViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eViewGroup parent\u003cspan\u003e, int \u003c/span\u003eviewType) {\u003cbr\u003e                View view = LayoutInflater.\u003cspan\u003efrom\u003c/span\u003e(parent.getContext()).inflate(R.layout.\u003cspan\u003erestaurant_list_item\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eparent\u003cspan\u003e, false\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                return new \u003c/span\u003eFirebaseRestaurantViewHolder(view)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setLayoutManager(\u003cspan\u003enew \u003c/span\u003eLinearLayoutManager(\u003cspan\u003ethis\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setAdapter(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStart\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStart()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter\u003c/span\u003e.startListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStop\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStop()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if\u003c/span\u003e(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e!= \u003cspan\u003enull\u003c/span\u003e) {\u003cbr\u003e            \u003cspan\u003emFirebaseAdapter\u003c/span\u003e.stopListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cpre\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we initialize our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variables.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eactivity_restaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetContentView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to display the correct layout.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the \"restaurants\" child node key from our Constants class.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then create a method to set up the FirebaseAdapter by first \u003cspan\u003ecreating a \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerOptions \u003cspan\u003eobject \u003c/span\u003e\u003c/code\u003ewhich is cast into the model class, we build the object by setting the query (or database reference) (by) passing in the database-reference and the Model class the objects will be parsed into\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our viewHolder to set the appropriate text and image with the given restaurant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then set the adapter on our RecyclerView.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we need to clean up the FirebaseAdapter. When the activity is stops, we need to call\u003cspan\u003e \u003ccode class=\"java hljs\"\u003eonStop()\u003c/code\u003e\u003c/span\u003e\u003cspan\u003e \u003c/span\u003eon the adapter so that it can stop listening for changes in the Firebase database.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdd Navigation to SavedRestaurantListActivity\u003c/h2\u003e\r\n\u003cp\u003eFinally, we just need to create a button to navigate to this new activity. Add the following button to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"My Saved Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"visible\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd alter your existing \"Find Restaurants\" button to make room for the new \"Saved Restaurants\" button:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"visible\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also bind the new \"Saved Restaurants\" button's view, call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetOnClickListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eupon it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of MainActivity, and add an additional\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003eoverride to handle creating and beginning a new intent when the Saved Restaurants button is selected:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.savedRestaurantsButton) Button mSavedRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mSavedRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        ...\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSavedRestaurantsButton) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, SavedRestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we can run our app, click on “My Saved Restaurants” and see our list of saved restaurants!\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003echildValueEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the location we specified in our reference.\u003c/p\u003e\r\n\u003cp\u003eTo test that the view automatically updates when an item is deleted, let’s open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDatabase\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab in our Firebase app and delete a restaurant by selecting the red \"X\" near its node:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0xgnkpd85sdj4td/delete-from-firebase-dashboard.png\" alt=\"delete-node-from-firebase-dashboard\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe view in our emulator should update immediately if everything was set up properly; the deleted restaurant should immediately be removed from the list of saved restaurants.\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirebaseUI-Android\u003c/strong\u003e: An open-source library that connects common user interface elements to the FIrebase API.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirebaseRecyclerAdapter\u003c/strong\u003e: A RecyclerAdapter specially-made for integration with Firebase.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/15_firebase_realtime_db\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android\" target=\"_blank\"\u003eREADME\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/firebase/FirebaseUI-Android/blob/master/database/README.md\" target=\"_blank\"\u003efirebase-ui-database docs\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eCapstone Project Brainstorming Homework\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eUnlike your previous courses here at Moringa School you will work\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindependently\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon a capstone project of your choosing during week 5, instead of a group project. This project should act as a cumulative demonstration of the skills you’ve gained throughout your time at Moringa School. Capstone projects will be presented to employers at the Demo Day event.\u003c/p\u003e\r\n\u003cp\u003eYou’re encouraged to begin brainstorming potential project ideas now.\u003c/p\u003e\r\n\u003ch2\u003eTimeline\u003c/h2\u003e\r\n\u003cp\u003eKeep the following deadlines in mind. You’ll receive more information about each as they near:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSign-Up\u003c/strong\u003e: You will sign up with a descriptive, one-sentence summary of your project on the designated whiteboard no later than\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eMonday of week 4\u003c/strong\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProposal\u003c/strong\u003e: You are required to email your teacher a project proposal outlining your MVP (minimum viable product) no later than\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eWednesday of week 4\u003c/strong\u003e. \u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTrade Show\u003c/strong\u003e: Similar to the group projects you’ve completed in other courses, you are required to demo your application to your Moringa School classmates on week 5. This will also act as a practice run for the pitch you’ll give employers on Demo Day.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eBrainstorming Homework\u003c/h2\u003e\r\n\u003cp\u003eYour homework is to begin brainstorming potential project ideas\u003cspan\u003e \u003c/span\u003e\u003cem\u003enow\u003c/em\u003e, so you’ll be prepared for these deadlines.\u003c/p\u003e\r\n\u003cp\u003eTry to craft a project idea that’s both complex enough to demonstrate the multi-faceted skillset you’ve acquired, yet still reasonable enough to complete in time for Demo Day.\u003c/p\u003e\r\n\u003ch3\u003ePast Student Work\u003c/h3\u003e\r\n\u003cp\u003eHere are a few examples of projects past students have built independently, and presented at Demo Day in past cohorts:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eApplications to rank, track, score, and record results of various sports and game matches (everything from video games, to bowling, foosball, table games, kickball, and intramural sports). Including creating player leaderboards, and social areas to connect players.\u003c/li\u003e\r\n\u003cli\u003eFully-functioning websites for the businesses of friends and family (including catering companies, dog breeders, local stores, and other companies)\u003c/li\u003e\r\n\u003cli\u003eApplications to manage tasks, including timers to use the Pomodoro method manage the developing video games\u003c/li\u003e\r\n\u003cli\u003eSocial organizers to create and share events with friends.\u003c/li\u003e\r\n\u003cli\u003eApplications that assist in user’s health; including creating unique workout plans, timing workouts, connecting individuals to exercise together, creating or recommend diet plans, tracking calories, etc.\u003c/li\u003e\r\n\u003cli\u003eTools to catalog items; including the contents of your fridge, in-home bar, or other hobby-specific inventories.\u003c/li\u003e\r\n\u003cli\u003eTrivia games to test your knowledge in different specialized areas.\u003c/li\u003e\r\n\u003cli\u003eApplications and websites to track and rate local favorites: Including restaurants, coffee shops, gyms, bars, and more.\u003c/li\u003e\r\n\u003cli\u003eTools to connect people with benefactors and crowdsourced funding in their area, to fund art installations, charitable causes, community programs, and more.\u003c/li\u003e\r\n\u003cli\u003eWebsites and applications that compile resources into a single, easy-to-navigate spot. Including resources for the homeless, emergency preparation, etc.\u003c/li\u003e\r\n\u003cli\u003eE-commerce sites for real-life businesses, compete with functionality to make and process orders, and accept payment.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-android-introduction-objectives","title":"Monday: Android Introduction Objectives","type":"WikiPage","content":"\u003ch2\u003eDaily Objectives\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eThis week we are going to learn how to implement basic user interface elements in Android. Tools and concepts that we'll cover include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid emulator\u003c/li\u003e\r\n\u003cli\u003eLayouts\u003c/li\u003e\r\n\u003cli\u003eButtons\u003c/li\u003e\r\n\u003cli\u003eToasts\u003c/li\u003e\r\n\u003cli\u003eIntents\u003c/li\u003e\r\n\u003cli\u003eUser input\u003c/li\u003e\r\n\u003cli\u003eButter Knife\u003c/li\u003e\r\n\u003cli\u003eListViews and ArrayAdapters\u003c/li\u003e\r\n\u003cli\u003eApp bar\u003c/li\u003e\r\n\u003cli\u003eHierarchical relationships\u003c/li\u003e\r\n\u003cli\u003eAndroid Manifest\u003c/li\u003e\r\n\u003cli\u003eView.OnClickListener interface\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAt the end of the week, you will submit the first draft of a personal project of your choice which should meet the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eUse at least 3 activities that the user can navigate to.\u003c/li\u003e\r\n\u003cli\u003eDisplay a list of information.\u003c/li\u003e\r\n\u003cli\u003eGather user input and pass it to another activity.\u003c/li\u003e\r\n\u003cli\u003eUse ButterKnife to bind all of your views.\u003c/li\u003e\r\n\u003cli\u003eImplement the View.OnClickListener interface to set click listeners to view elements.\u003c/li\u003e\r\n\u003cli\u003eContinue to use good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eUse custom fonts\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eImplement at least one List View\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse at least two Android Activities\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003eImplement an Intent with FLAGS\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003e\u003cspan\u003eAdd a README to the GitHub repository that includes:\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of the site \u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-mad-libs","title":"Tuesday: Mad Libs","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal\u003c/strong\u003e: Practice gathering input from your users, passing information between intents, and using string resources. Try and implement ArrayAdapters if possible. Also, practice using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages and breakpoints, as seen in last night's homework.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between the five different log types? (v, d, i, w, e)\u003c/li\u003e\r\n\u003cli\u003eWhat is a breakpoint?\u003c/li\u003e\r\n\u003cli\u003eWhat are the two general categories testing in Android may be broken down into? What are the differences between them? Similarities?\u003c/li\u003e\r\n\u003cli\u003eWhat are the differences between Robolectric and Espresso? When do we use one versus the other?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003ch3\u003eMad Libs\u003c/h3\u003e\r\n\u003cp\u003eHave you ever played Mad Libs? Mad Libs are silly stories with some of the words missing. Without looking at the story, you are prompted to fill out a list of nouns, verbs, adjectives, etc. Then, copy them onto another piece of paper that contains a story, missing those crucial words that you are now providing. The idea is to pick bizarre words without knowing what the story is, and then when you fill them in the results can be hilarious.\u003c/p\u003e\r\n\u003cp\u003eMake an app where users can play Mad Libs. Prompt them to provide several types of words. Then, use those words to fill in the blanks of a story. Let the user clear the story and start over if they'd like.\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLearn how to use the string.xml file to hold a static string array:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://alvinalexander.com/android/how-to-create-static-array-strings-in-android-xml-file\"\u003eHow to create static array string in Android XML\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eUsing the weekend homework on Robolectric and Espresso as a guide, write tests for your Mad Libs application. Make sure all tests are passing before implementing any new features. Then, write new tests for\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethose\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeatures. Do not move on to additional features or functionalities until tests pass.\u003c/li\u003e\r\n\u003cli\u003eAdd multiple stories, and allow users to select the story they'd like to fill in.\u003c/li\u003e\r\n\u003cli\u003eExperiment with different input types. For example, create a field with two possible values (such as day or night, decaf or regular, etc) and use a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/ui/controls/radiobutton.html\"\u003eradio button\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app gather user input and pass it to another activity.\u003c/li\u003e\r\n\u003cli\u003eAre click listeners successfully attached to elements with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e?\u003c/li\u003e\r\n\u003cli\u003eAre the git commits clear and descriptive?\u003c/li\u003e\r\n\u003cli\u003eIs the README detailed and descriptive, with all necessary elements?\u003c/li\u003e\r\n\u003cli\u003eIs the code properly indented? Do naming conventions make sense?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-implicit-intents","title":"Wednesday:Implicit Intents","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eImplicit Intents\u003c/h1\u003e\r\n\u003cp\u003eThink about apps you use frequently. Chances are, these apps include options to interact with\u003cspan\u003e \u003c/span\u003e\u003cem\u003eother\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapps: Hitting \"Share\" allows you to open text messages, email, Facebook, or Instagram; \"Find Friends\" may access your contacts, etc. Coding your app to interact with other applications is a common feature in mobile development!\u003c/p\u003e\r\n\u003cp\u003eIn this lesson, we'll learn how to instruct our applications to interact with outside applications using something called implicit intents. We'll also integrate this functionality into our ongoing MyRestaurants project.\u003c/p\u003e\r\n\u003ch2\u003eExplicit vs. Implicit intents\u003c/h2\u003e\r\n\u003cp\u003eAs we learned in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/pre-course-work-intents?module_item_id=id2dd7b0fefc80a18a2f26f7918077395\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/pre-course-work-intents\" data-api-returntype=\"Page\"\u003eprevious lessons\u003c/a\u003e, an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eintent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an Android component that represents the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eintention\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto complete an action.\u003c/p\u003e\r\n\u003cp\u003eThere are two types of intents: Explicit intents, and implicit intents. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eexplicit intent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis directly passed the activity to which it will travel, and generally stays within the app. The intents we have created thus far are all explicit intents.\u003c/p\u003e\r\n\u003cp\u003eFor instance, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe know the intent is explicit because we're explicitly providing it both the current activity (\u003ccode\u003eMainActivity.this\u003c/code\u003e) and the activity to which it will travel (\u003ccode\u003eRestaurantsActivity.class\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eimplicit intent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003epasses the responsibility of completing the intended action to a\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapplication. It relies on Android to automatically fire up whatever tool is responsible for handling the type of action we specify. For instance, we can use an implicit intent to open the user's default internet browser when a user selects a link to a restaurant's website in our MyRestaurants application.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eRead through the Training for Android sections on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/sending.html\" target=\"_blank\"\u003eSending the User to Another App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/result.html\" target=\"_blank\"\u003eGetting a Result from an Activity\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eMyRestaurants\u003c/h2\u003e\r\n\u003cp\u003eNext, let's apply what we've just learned to our MyRestaurants app. We will add click listeners for the website, phone, and address\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the restaurant detail fragment. When clicked, these click listeners will create implicit intents to open outside apps.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n                    View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n                    ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n                    ...\r\n                    mWebsiteLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                    mPhoneLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                    mAddressLabel.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                    \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n                }\r\n                \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mWebsiteLabel) {\r\n                        Intent webIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_VIEW,\r\n                                Uri.parse(mRestaurant.getWebsite()));\r\n                        startActivity(webIntent);\r\n                    }\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mPhoneLabel) {\r\n                        Intent phoneIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_DIAL,\r\n                                Uri.parse(\u003cspan class=\"hljs-string\"\u003e\"tel:\"\u003c/span\u003e + mRestaurant.getPhone()));\r\n                        startActivity(phoneIntent);\r\n                    }\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mAddressLabel) {\r\n                        Intent mapIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_VIEW,\r\n                                Uri.parse(\u003cspan class=\"hljs-string\"\u003e\"geo:\"\u003c/span\u003e + mRestaurant.getLatitude()\r\n                                        + \u003cspan class=\"hljs-string\"\u003e\",\"\u003c/span\u003e + mRestaurant.getLongitude()\r\n                                        + \u003cspan class=\"hljs-string\"\u003e\"?q=(\"\u003c/span\u003e + mRestaurant.getName() + \u003cspan class=\"hljs-string\"\u003e\")\"\u003c/span\u003e));\r\n                        startActivity(mapIntent);\r\n                    }\r\n                }\r\n            }\r\n        \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've instructed\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface. Then, we create three click listeners for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emWebsiteLabel\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPhoneLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAddressLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. We also create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that will execute one of the following three intents, depending upon what is clicked:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eif\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emWebsiteLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis clicked, we create a new implicit intent called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand provide it two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity, responsible for displaying data to the user, and the restaurant's website URL. We start this new activity by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPhoneLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis clicked, we create an implicit intent called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ephoneIntent\u003c/code\u003e, and provide it two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_DIAL\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity, which dials the number in the user's phone app, and the restaurant's telephone number. Again, we start this activity by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAddressLabel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis selected, we create an implicit intent called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emapIntent\u003c/code\u003e, and provide it two arguments: The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity, and the restaurant's longitude and latitude, and begin the activity with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eA few things to take note of:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAs we see above, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eactivity is rather flexible. We use it in both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewebIntent\u003c/code\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emapIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eimplicit intents. This is because it's programmed to perform different actions depending on the type of data passed to it. For instance, if passed a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emailto:\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elink to an email address, it will open the user's email app. If passed a web URL, it will open the browser. If passed geographical coordinates, it knows to open the map. For more information, see the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW\" target=\"_blank\"\u003eAndroid Developers article on ACTION_VIEW\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e?q=(\" + mRestaurant.getName() + \")\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreates a marker on the map with a label of the restaurant’s name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we launch the application in our emulator, we can see that clicking a restaurant's phone number, address, or website will now launch another application!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/14_implicit_intents\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eIntent\u003c/strong\u003e: An Android component that represents the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eintention\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto complete an action. For instance, MyRestaurants contains\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/pre-course-work-intents?module_item_id=id2dd7b0fefc80a18a2f26f7918077395\" target=\"_blank\"\u003ean intent\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat takes us from the MainActivity to the RestaurantsActivity when the \"Find Restaurants\" button is clicked.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eExplicit intent\u003c/strong\u003e: Directly passed the activity to which it will travel, and generally stays within the app. For instance, when we say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe know the intent is explicit because we're explicitly providing it both the current activity (\u003ccode\u003eMainActivity.this\u003c/code\u003e) and the activity to which it will travel (\u003ccode\u003eRestaurantsActivity.class\u003c/code\u003e).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003eThe following is an example of creating an implicit intent to dial a specified number:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e Intent phoneIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(Intent.ACTION_DIAL, Uri.parse(\u003cspan class=\"hljs-string\"\u003e\"tel:\"\u003c/span\u003e + mRestaurant.getPhone()));\r\n        \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/14_implicit_intents\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/sending.html\" target=\"_blank\"\u003eSending the User to Another App\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/result.html\" target=\"_blank\"\u003eGetting a Result from an Activity\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_VIEW\" target=\"_blank\"\u003eACTION_VIEW documentation\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-flexible-uis-alternative-resources","title":"Wednesday:Flexible UIs: Alternative Resources","type":"WikiPage","content":"\u003ch1\u003eFlexible UIs: Alternative Resources\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eIn Android, we can create alternative resources, such as layouts, and our device will automatically select the correct resource based on a built-in set of naming conventions.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eAlternative resources\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003esupport different device configurations, including screen sizes and orientations.\u003c/p\u003e\r\n\u003cp\u003eAs we saw in the previous lesson, when a user visits our list activities while in landscape mode, we want to display the list of restaurants on the left and the detail view on the right, like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/lgxkulkcginqyqw/fancy-new-layout.png\" alt=\"landscape-detail-layout-my-restaurants\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThankfully, we've already refactored the necessary activities into fragments so we can easily call in multiple fragments into a single activity. In this lesson, we'll create alternative resource layouts for our restaurant detail and \"Saved Restaurants\" areas of our application specially-formatted to display when the phone is in landscape orientation.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, read more about Alternative Resources in the Android Developer's Guides\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eCreating Alternative Resource Layout Files\u003c/h2\u003e\r\n\u003cp\u003eTo begin, we will need to create separate layout files for Android to use when the phone is in landscape mode. Just like creating an ordinary layout file, right click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003elayout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Layout resource file\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/eicbjl7debq52ge/creating-new-layout-resource.png\" alt=\"creating-new-layout-resource\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFirst we'll create an alternate landscape-orientation layout for our existing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout. When naming an alternative resource file,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ealways name the file exactly as the filename of the layout we will be replacing\u003c/strong\u003e. So, let's also name this new layout\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAvailable qualifiers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epanel on the left of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew Resource\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu, scroll down and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOrientation\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/spc89eyge8p12ev/orientation-alternative-resource.png\" alt=\"orientation-in-available-qualifiers-panel\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAdd it to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eChosen qualifiers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eby selecting it, and hitting the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u0026gt;\u0026gt;\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton, then select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLandscape\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eScreen orientation\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edropdown:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/as0vuwnaiw7jubz/landscape-orientation-option.png\" alt=\"landscape-orientation-in-layout\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis new layout will automatically be inflated when the phone's orientation changes to landscape! Follow this exact same process to make an alternative resource landscape-orientation layout for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_saved_restaurant_list\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etoo.\u003c/p\u003e\r\n\u003cp\u003eOnce done, the left-hand sidebar in Android should list two layouts under each layout name, like so:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/gjq3nhfyaijnpky/multiple-alternative-resource-files.png\" alt=\"multiple-alternative-resource-layout-files\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eWriting Alternative Resource XML Layouts\u003c/h2\u003e\r\n\u003ch3\u003eactivity_restaurants\u003c/h3\u003e\r\n\u003cp\u003eNow, let's add our restaurant list fragment and a placeholder for our detail fragment into our new landscape activity_restaurants layout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/LinearLayout1\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:showDividers\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"middle\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:baselineAligned\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentItemsList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.morngaschool.myrestaurants.ui.RestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2dp\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantDetailContainer\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eelement to add a vertical divider between our list and detail views, as we can see in the image at the top of this lesson.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe use something called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto act as a placeholder for our RestaurantDetailFragment. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eFrameLayout\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis used when blocking out an area on the screen to display a single item. It should hold only one child view.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhen the RestaurantDetailFragment is rendered (whether by the application rendering the first restaurant in the list by default, or the user selecting a restaurant) it will replace the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eactivity_saved_restaurant_list\u003c/h3\u003e\r\n\u003cp\u003eWe'll add the SavedRestaurantListFragment and a placeholder\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_ saved_restaurant_list\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout as well:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_saved_restaurant_list.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:showDividers\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"middle\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:baselineAligned\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentItemsList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.SavedRestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"2dp\"\u003c/span\u003e\r\n          \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantDetailContainer\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"6\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eChanging Layouts Based on Device Orientation\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to programmatically replace the temporary\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith a RestaurantDetailFragment when the user selects a restaurant; but\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhen the phone is in landscape mode. First, we'll do this in the \"Find Restaurants\" area of our application, and afterwards we'll add this functionality to the \"Saved Restaurants\" area.\u003c/p\u003e\r\n\u003ch3\u003eFind Restaurants\u003c/h3\u003e\r\n\u003cp\u003eTo do this, we will add a conditional to the RestaurantViewHolder (which is actually a subclass of the RestaurantListAdapter) that will create a new instance of the RestaurantDetailFragment when a particular restaurant is selected\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe device is currently in landscape-orientation:\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need a new member variable to represent the orientation of the device:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mOrientation;\r\n    ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll check for the orientation of the device in the RestaurantViewHolder's constructor, and create a fragment if it is in landscape:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n     \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n       \u003cspan class=\"hljs-comment\"\u003e// Determines the current orientation of the device:\u003c/span\u003e\r\n        mOrientation = itemView.getResources().getConfiguration().orientation;\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// Checks if the recorded orientation matches Android's landscape configuration.\u003c/span\u003e\r\n        \u003cspan class=\"hljs-comment\"\u003e// if so, we create a new DetailFragment to display in our special landscape layout:\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            createDetailFragment(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n        }\r\n       ...\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we determine the orientation and call a method named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateDetailFragment()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe device is in landscape orientation. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eargument will default to displaying the first restaurant's details when the list activity is first created.\u003c/p\u003e\r\n\u003cp\u003eLet's create this method now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e// Takes position of restaurant in list as parameter:\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Creates new RestaurantDetailFragment with the given position:\u003c/span\u003e\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Gathers necessary components to replace the FrameLayout in the layout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        \u003cspan class=\"hljs-comment\"\u003e//  Replaces the FrameLayout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Commits these changes:\u003c/span\u003e\r\n        ft.commit();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call a built-in Android interface called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"http://developer.android.com/reference/android/app/FragmentManager.html\"\u003eFragmentManager\u003c/a\u003e\u003c/strong\u003e, which is responsible for interacting with Fragment objects. We then call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebeginTransaction()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto open up the capability to make changes to this activity, as described in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/FragmentManager.html#beginTransaction()\"\u003emethod's documentation\u003c/a\u003e. Finally, we instruct Android to replace the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFrameLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our layout (which we gave the id\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurantDetailContainer\u003c/code\u003e) with a new RestaurantDetailFragment, and commit these changes.\u003c/p\u003e\r\n\u003cp\u003eThis will eventually result in a new RestaurantDetailFragment being rendered on the right-side of our layout:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/4uo8c1exu7uxoh9/restaurantdetailfragment.png\" alt=\"restaurantdetailfragment\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHowever, the way we're currently calling the method would only display the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant's details when the fragment first loads. Let's also ensure users are able to select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant from the list and see its details:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            ...\r\n            itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n\r\n        ...\r\n\r\n        \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-comment\"\u003e// Determines the position of the restaurant clicked:\u003c/span\u003e\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n           \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                createDetailFragment(itemPosition);\r\n            } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                mContext.startActivity(intent);\r\n            }\r\n        }\r\n   ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, when the user clicks on a restaurant from the list, we use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetLayoutPosition()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto determine\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhich\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant was selected. We check the orientation of the device again. If it's in landscape we create a new RestaurantDetailFragment by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateDetailFragment()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand specifying which restaurant's details to display with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThis means that the page will always default to showing the details of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurant in the list; but as soon as another restaurant is selected, it will display their details instead.\u003c/p\u003e\r\n\u003cp\u003eAs you can see above, we're also including the position and list of restaurants in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eelse\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e, using keys from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. Let's add these key values to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003eclass now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String EXTRA_KEY_POSITION = \u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String EXTRA_KEY_RESTAURANTS = \u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that the RestaurantDetailFragment must be able to quickly switch between multiple restaurants' details in our new orientation-mode, we must pass it multiple arguments. Instead of handing it a\u003cspan\u003e \u003c/span\u003e\u003cem\u003esingle\u003c/em\u003erestaurant, we'll need to provide it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erestaurants, and the specific position of the one we currently want to display.\u003c/p\u003e\r\n\u003cp\u003eLet's make these changes now. First, we'll declare\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e, and provide them as parameters to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Within the method, we'll bundle our new arguments:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n   \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mPosition;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e RestaurantDetailFragment \u003cspan class=\"hljs-title\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ArrayList\u0026lt;Restaurant\u0026gt; restaurants, Integer position)\u003c/span\u003e \u003c/span\u003e{\r\n        RestaurantDetailFragment restaurantDetailFragment = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantDetailFragment();\r\n        Bundle args = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bundle();\r\n\r\n        args.putParcelable(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(restaurants));\r\n        args.putInt(Constants.EXTRA_KEY_POSITION, position);\r\n\r\n        restaurantDetailFragment.setArguments(args);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e restaurantDetailFragment;\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need to change the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. When our fragment is created, it will need access to the parameters we've provided:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        mRestaurants = Parcels.unwrap(getArguments().getParcelable(Constants.EXTRA_KEY_RESTAURANTS));\r\n        mPosition = getArguments().getInt(Constants.EXTRA_KEY_POSITION);\r\n        mRestaurant = mRestaurants.get(mPosition);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we retrieve the parceled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the parameters we passed into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby utilizing the key in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we retrieve the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable, which represents the specific position of the restaurant we'd like to display.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe get the specific restaurant at the position indicated, and define it as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurant\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis then used later on in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand when we assign our click listeners. We don't need to make any further changes to that logic.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe just need to make sure both parameters for new RestaurantDetailFragments are included when we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our RestaurantPagerAdapter, too:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantPagerAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Fragment \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e RestaurantDetailFragment.newInstance(mRestaurants, position);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run our app, navigate to the RestaurantListActivity and then change the layout to landscape, we should now see that it displays both the RestaurantListFragment and the RestaurantDetailFragment. Let's make sure our app behaves the same way when we navigate to the SavedRestaurantListActivity, too.\u003c/p\u003e\r\n\u003ch3\u003eSaved Restaurants\u003c/h3\u003e\r\n\u003cp\u003eThis process will be similar to what we just did, but rather than adding these changes to the ViewHolder, we will add it to our adapter since that is where we have access to our ArrayList of restaurants.\u003c/p\u003e\r\n\u003cp\u003eLet's start by adding the orientation member variable:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mOrientation;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we will set the orientation. If the phone is currently in landscape mode, we will create a detail fragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        viewHolder.bindRestaurant(model);\r\n\r\n        mOrientation = viewHolder.itemView.getResources().getConfiguration().orientation;\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            createDetailFragment(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n        }\r\n\r\n        viewHolder.mRestaurantImageView.setOnTouchListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnTouchListener() {\r\n            ...\r\n        });\r\n\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n           ...\r\n        });\r\n\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateDetailFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Creates new RestaurantDetailFragment with the given position:\u003c/span\u003e\r\n        RestaurantDetailFragment detailFragment = RestaurantDetailFragment.newInstance(mRestaurants, position);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Gathers necessary components to replace the FrameLayout in the layout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        FragmentTransaction ft = ((FragmentActivity) mContext).getSupportFragmentManager().beginTransaction();\r\n        \u003cspan class=\"hljs-comment\"\u003e//  Replaces the FrameLayout with the RestaurantDetailFragment:\u003c/span\u003e\r\n        ft.replace(R.id.restaurantDetailContainer, detailFragment);\r\n        \u003cspan class=\"hljs-comment\"\u003e// Commits these changes:\u003c/span\u003e\r\n        ft.commit();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFinally, we need to update our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eitemView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclick listener:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = viewHolder.getAdapterPosition();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n                    createDetailFragment(itemPosition);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    mContext.startActivity(intent);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eMore Alternative Layouts\u003c/h2\u003e\r\n\u003cp\u003eFinally, let’s also add alternative layout files for our\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item\u003c/em\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item_drag\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_restaurant_detail\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eIn these list item layouts, we will change the layout so that it better displays in a narrower column when the phone is in landscape. Follow the same process we did earlier, and add\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOrientation landscape\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas a qualifier to both:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item_drag.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e \u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/dragIcon\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bottom|left\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_reorder_white_24dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"14dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"gone\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"14dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:visibility\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"gone\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe set the visibility for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eratingTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto \"gone\" to avoid crowding the smaller list item area we have in landscape mode. We don't remove it entirely to avoid errors in our ViewHolder.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAnd finally, the alternate layout for our restaurant detail fragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_restaurant_detail.xml(land)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"io.github.vinge1718.restaurant.ui.RestaurantDetailFragment\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"3\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"View on Yelp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/websiteTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_exit_to_app_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"12sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"(503) 223-1282\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/phoneTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_local_phone_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"12sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"123 SW Best Ever Ave. Portland, Oregon, 97222\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawableLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_map_white_24dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:drawablePadding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/addressTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"12sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_vertical\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"5\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@android:color/white\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20sp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryDark\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Brunch, American\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/cuisineTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorSecondaryText\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"4.5/5\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"6\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Save Restaurant\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/saveRestaurantButton\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eFrameLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s run our app and change the orientation of the phone using the arrows on the side of the emulator. We should now see the new layout we created appears automatically!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/24_Alternative_Resources\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eAlternative Resources\u003c/strong\u003e: Resources that Android can choose from based on different device configurations such as screen sizes or orientations.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen naming an alternative resource file, always name the file exactly as the filename of the layout we will be replacing.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/24_Alternative_Resources\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources\"\u003eAlternative Resources in the Android Developer's Guides\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"weekend-backend-web-services-with-okhttp","title":"Weekend: Backend Web Services With OkHttp","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eAlmost every Android app interacts with a web server to retrieve information, store data, and interact with users. In this section, we'll begin exploring information retrieval from backend web services using a tool called OkHttp.\u003c/p\u003e\r\n\u003ch2\u003eRequesting Information from an API\u003c/h2\u003e\r\n\u003cp\u003eYou've probably worked with APIs in your previous courses here at Moringa School. APIs are a web service. We can access their information by submitting a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGET\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequest to a specific URL of the API, including any parameters that specify the type or amount of information we're requesting.\u003c/p\u003e\r\n\u003cp\u003eAfter receiving a request, the API's server sends a response containing a status, headers, and a body. If everything is executed successfully, the body will contain the data we have requested.\u003c/p\u003e\r\n\u003ch2\u003eContacting APIs in Android\u003c/h2\u003e\r\n\u003cp\u003eHowever, in mobile development contacting an API can be a bit trickier. For instance, devices often switch back and forth between using a WiFi and cellular connections. And sometimes these connections\u003cspan\u003e \u003c/span\u003e\u003cem\u003earen't that great\u003c/em\u003e. This can make connecting to APIs difficult. Thankfully, there are several tools designed to gracefully handle the inconsistency of mobile connections while simultaneously making it easier to construct and send requests.\u003c/p\u003e\r\n\u003ch2\u003eOkHttp\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003eOkHttp\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis one of several HTTP networking libraries available for Android. It manages the process of creating, sending, and receiving HTTP requests and responses. Additionally, it offers several features that make it particularly beneficial to mobile applications:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAutomatically alternates IP addresses (if possible) if a connection to a web service fails for any reason.\u003c/li\u003e\r\n\u003cli\u003ePools connections to reduce latency. (\u003ca href=\"https://en.wikipedia.org/wiki/Connection_pool\"\u003eConnection pooling\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis the act of recycling previous connections for future requests.)\u003c/li\u003e\r\n\u003cli\u003eCaches responses to avoid sending duplicate requests.\u003c/li\u003e\r\n\u003cli\u003eBuilds and sends requests.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eEssentially, if any issues occur in contacting the API, OkHttp will attempt to resolve these issues\u003cspan\u003e \u003c/span\u003e\u003cem\u003efor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eus before giving up, sending errors, or crashing our application entirely.\u003c/p\u003e\r\n\u003ch3\u003eAdding OkHttp to MyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eWe've already added our credentials to our application. Let's also add OkHttp in anticipation of making HTTP requests in the following lessons.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll add OkHttp as a dependency in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cdiv class=\"filename\"\u003e\r\n\u003cpre\u003e...\u003cbr\u003edependencies {\u003cbr\u003e          ...             \u003cbr\u003e      implementation \u003cspan\u003e'com.squareup.okhttp3:okhttp:3.10.0'\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e  \u003c/span\u003e... }\u003c/pre\u003e\r\n\u003c/div\u003e\r\n\u003ch3\u003eRequesting Internet Permissions\u003c/h3\u003e\r\n\u003cp\u003eIn order to contact an API web service, our application will need internet access. In Android applications, internet access is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eprovided by default. Any application that requires internet access must explicitly request access in its manifest.\u003c/p\u003e\r\n\u003cp\u003eTo do this, we can add the following line to our manifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs xml\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/manifest/uses-permission-element.html\"\u003e\u003ccode\u003e\u0026lt;uses-permission\u0026gt;\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eelement requests access to the specified resource from the user.\u003c/p\u003e\r\n\u003cp\u003eThe OkHttp library should now be included in our MyRestaurants application. We're almost ready to make API requests! In the next lesson we'll learn about API security, what those credentials we placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConstants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass are meant for, and how to use them to successfully gather information from an outside web service.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\"\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eOkHttp\u003c/strong\u003e: An Android Networking library developed by Square. It handles making HTTP requests and receiving responses for us, with built-in features to compensate for poor network connections, and minimize data usage.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003eRequesting internet access permissions in the manifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs xml\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://packetzoom.com/blog/which-android-http-library-to-use.html\" target=\"_blank\"\u003ePacket Zoom Blog Post comparing HTTP Libraries\u003c/a\u003e, including a history of multiple different HTTP clients.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCodePath's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-OkHttp\" target=\"_blank\"\u003eUsing OkHttp Guide\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-communicating-between-fragments-and-activities","title":"Wednesday:Communicating Between Fragments \u0026 Activities","type":"WikiPage","content":"\u003ch1\u003eCommunicating Between Fragments \u0026amp; Activities\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eYou might have noticed that when we run the MyRestaurants app and change the orientation of the screen back and forth, our list activities restart each time; if we're looking at a restaurant's details, then rotate the device, it takes us back to the main list!\u003c/p\u003e\r\n\u003cp\u003eOn an Android device, every time the orientation configuration changes the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is automatically called, thus restarting the current activity. Let's make sure our users can continue to view the same content seamlessly while transitioning between landscape and portrait orientations.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we will create additional pathways of communication between our RestaurantListFragment and RestaurantListActivity by implementing a custom interface. This will allow our application to \"remember\" which restaurant we were viewing, and continue displaying the same content no matter how many times the user twists and turns their device.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Because this process involves refactoring multiple areas throughout the application, you will likely receive errors until\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esteps depicted here are complete. This is completely normal.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eIf you haven't already in previous lessons, take time to read the Android documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/fragments/communicating.html\"\u003eDefining an Interface\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eDefining Custom Interfaces\u003c/h2\u003e\r\n\u003cp\u003eTo start, let’s define an interface in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called OnRestaurantSelectedListener, and place the following method inside:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eOnRestaurantSelectedListener.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eImplementing Android Interfaces\u003c/h2\u003e\r\n\u003cp\u003eWe will use this interface to listen for the position of the currently-selected restaurant and the list of all restaurants from Yelp. Let's start by implementing our new interface and declaring our new\u003ccode\u003emPosition\u003c/code\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Integer mPosition;\r\n    ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll override our interface's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This method will be responsible for updating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the list of all restaurants, and position in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003eof the currently-selected restaurant.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mPosition = position;\r\n        mRestaurants = restaurants;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUpdating ViewHolders\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to update our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto actively listen for the position of the currently-selected restaurant in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof all restaurants. To do this, we'll add the OnRestaurantSelectedListener to our RestaurantListAdapter constructor, and pass it to any new ViewHolders we create:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_WIDTH = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_HEIGHT = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnRestaurantSelectedListener mOnRestaurantSelectedListener;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, OnRestaurantSelectedListener restaurantSelectedListener)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n        mOnRestaurantSelectedListener = restaurantSelectedListener;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e RestaurantListAdapter.\u003cspan class=\"hljs-function\"\u003eRestaurantViewHolder \u003cspan class=\"hljs-title\"\u003eonCreateViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ViewGroup parent, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e viewType)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.restaurant_list_item, parent, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        RestaurantViewHolder viewHolder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantViewHolder(view, mRestaurants, mOnRestaurantSelectedListener);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e viewHolder;\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUpdating RestaurantListFragment\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll update our list fragment to pass the listener interface into the RestaurantListAdapter. In order to allow fragments and activities to communicate we need to capture an instance of our interface and cast it into the context of the activities we need to communicate with.\u003c/p\u003e\r\n\u003cp\u003eThankfully, we can do this in something called the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAttach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Similar to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods we've previously utilized,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAttach()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis part of a fragment's built-in lifecycle and is always automatically called before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, as detailed in the Android Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eFragment Lifecycles\u003c/a\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnRestaurantSelectedListener mOnRestaurantSelectedListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAttach\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onAttach(context);\r\n        \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n            mOnRestaurantSelectedListener = (OnRestaurantSelectedListener) context;\r\n        } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (ClassCastException e) {\r\n            \u003cspan class=\"hljs-keyword\"\u003ethrow\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ClassCastException(context.toString() + e.getMessage());\r\n        }\r\n    }\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n               getActivity().runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getActivity(), mRestaurants, mOnRestaurantSelectedListener);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        ...\r\n                    }\r\n                });\r\n            }\r\n        ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eInvoking Listeners\u003c/h2\u003e\r\n\u003cp\u003eNext we need to invoke our interface method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen a specific restaurant is selected:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e mOrientation;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnRestaurantSelectedListener mRestaurantSelectedListener;\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView, ArrayList\u0026lt;Restaurant\u0026gt; restaurants, OnRestaurantSelectedListener restaurantSelectedListener)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n\r\n            mContext = itemView.getContext();\r\n            mOrientation = itemView.getResources().getConfiguration().orientation;\r\n            mRestaurants = restaurants;\r\n            mRestaurantSelectedListener = restaurantSelectedListener;\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE){\r\n                createDetailFragment(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n            }\r\n            itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n        mRestaurantSelectedListener.onRestaurantSelected(itemPosition, mRestaurants);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mOrientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n            createDetailFragment(itemPosition);\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n        Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n        intent.putExtra(Constants.EXTRA_KEY_POSITION, itemPosition);\r\n        intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n        mContext.startActivity(intent);\r\n         ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we save the OnRestaurantClickListener that was passed into the view holder constructor as a member variable.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen, we trigger our OnRestaurantSelectedListener interface by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestaurantSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing the position and restaurants\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThese variables will now be available in any activities that implement this interface!\u003c/p\u003e\r\n\u003ch2\u003eUpdating Activities\u003c/h2\u003e\r\n\u003cp\u003eFinally, we just need to tell our activities what to\u003cspan\u003e \u003c/span\u003e\u003cem\u003edo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith the data passed through our listener interface.\u003c/p\u003e\r\n\u003cp\u003eBefore an activity is destroyed, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonSaveInstanceState()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is called. Inside of this method we want to save the existing position and restaurants\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eif they exist. Then, when the activity is recreated, we can pull out these variables in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esavedInstanceState\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebundle that is passed in to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnRestaurantSelectedListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Integer mPosition;\r\n    ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (savedInstanceState != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n                mPosition = savedInstanceState.getInt(Constants.EXTRA_KEY_POSITION);\r\n                mRestaurants = Parcels.unwrap(savedInstanceState.getParcelable(Constants.EXTRA_KEY_RESTAURANTS));\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantDetailActivity.class);\r\n                    intent.putExtra(Constants.EXTRA_KEY_POSITION, mPosition);\r\n                    intent.putExtra(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n                    startActivity(intent);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n     \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSaveInstanceState\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle outState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onSaveInstanceState(outState);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mPosition != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; mRestaurants != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            outState.putInt(Constants.EXTRA_KEY_POSITION, mPosition);\r\n            outState.putParcelable(Constants.EXTRA_KEY_RESTAURANTS, Parcels.wrap(mRestaurants));\r\n        }\r\n\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonRestaurantSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Integer position, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mPosition = position;\r\n        mRestaurants = restaurants;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we just need to make sure that our RestaurantDetailActivity is pulling out the correct intent extras:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e   ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurant_detail);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mRestaurants = Parcels.unwrap(getIntent().getParcelableExtra(Constants.EXTRA_KEY_RESTAURANTS));\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e startingPosition = getIntent().getIntExtra(Constants.EXTRA_KEY_POSITION, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n\r\n        adapterViewPager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantPagerAdapter(getSupportFragmentManager(), mRestaurants);\r\n        mViewPager.setAdapter(adapterViewPager);\r\n        mViewPager.setCurrentItem(startingPosition);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are now finished with the OnRestaurantSelectedListener implementation. Let’s run our app, rotate the device to activate landscape mode, Visit \"Find Restaurants\", select a restaurant from the list view...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/wp9yj22a37mm6cr/landscape-detail-view.png\" alt=\"detail-view-landscape\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...And then rotate the device back to portrait mode. Our app should bring us to the (portrait) detail view for the restaurant that we selected!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0deo7mubmxgr0cb/portrait-detail-view.png\" alt=\"detail-view-portrait\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/25_Communicating_Between_Fragments_\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/25_Communicating_Between_Fragments_\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/fragments/communicating.html\"\u003eDefining an Interface\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eAndroid Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eFragment Lifecycles\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-app-bar-hierarchical-parent-and-android-themes","title":"Tuesday: App Bar, Hierarchical Parent, and Android Themes","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eThe bar with the ‘MyRestaurants’ text at the top of our app is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eApp Bar\u003c/strong\u003e, App Toolbar, or Action Bar. It is a toolbar used for branding, navigation, search, and actions. Now that we have multiple activities to travel between, let's add some additional navigational functionality to this app bar. When we travel from our MainActivity to our RestaurantsActivity, we should also be able to navigate\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the MainActivity using the App Bar.\u003c/p\u003e\r\n\u003ch2\u003eThe Android Manifest\u003c/h2\u003e\r\n\u003cp\u003eTo do this, we will need to make the MainActivity the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ehierarchical parent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof our RestaurantsActivity. This informs our application that RestaurantsActivity is a \"child\" of MainActivity (essentially, that RestaurantsActivity should be accessed by travelling\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethrough\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eMainActivity).\u003c/p\u003e\r\n\u003cp\u003eWe'll open our project's Android Manifest and add the following meta-data to the RestaurantsActivity entry in the manifest:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eapp/manifests/AndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.PARENT_ACTIVITY\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:value\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eMeta-data\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply data\u003cspan\u003e \u003c/span\u003e\u003cem\u003eabout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata. In this case, we've provided additional data about RestaurantActivity by declaring MainActivity as its hierarchical parent. Declaring MainActivity as the parent of RestaurantActivity will allow our App Bar to contain a button that can navigate back to MainActivity from RestaurantActivity!\u003c/p\u003e\r\n\u003ch2\u003eThe Up Button\u003c/h2\u003e\r\n\u003cp\u003eIf we launch our application and visit our RestaurantsActivity we can see a new arrow button on the left side of the app bar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/evtozrv0v9j1psz/hierarchical_parent_in_app_bar.png?raw=1\" alt=\"up-button-hierarchical-parent-myrestaurants\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is called the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eup button\u003c/strong\u003e. It is used to navigate within an app based on the hierarchical relationships between screens. Within our manifest we established that MainActivity is the hierarchical parent of RestaurantsActivity. Therefore, this button will navigate from RestaurantsActivity to its hierarchical parent MainActivity when clicked. (But since MainActivity doesn’t have a hierarchical parent, it won't have an up button.)\u003c/p\u003e\r\n\u003cp\u003eAdditionally know that the up button differs from the device's back button. The back button is used to reverse the chronological order of\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003escreens the user has recently visited. This includes traveling between different apps, or the home screen.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003eup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton only navigates to the parent of the current screen\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewithin the application\u003c/strong\u003e.\u003c/p\u003e\r\n\u003ch2\u003eRemoving the App Bar and Android Themes\u003c/h2\u003e\r\n\u003ch3\u003eApplication-Wide Themes\u003c/h3\u003e\r\n\u003cp\u003eBut, what if we didn’t want an App Bar\u003cspan\u003e \u003c/span\u003e\u003cem\u003eat all\u003c/em\u003e? The App Bar in our MainActivity does not have any functionality. Instead, it simply displays the name of the application. This is alright, but our MainActivity's layout\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edisplays the application name in a nice, custom font.\u003c/p\u003e\r\n\u003cp\u003eIf we revisit the manifest, we see the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:theme=@style/AppTheme\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epoints to a pre-existing theme inside the\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyle \u003c/em\u003efile in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003evalues\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder within in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory. If we navigate to this file, we can change this theme's parent theme from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDarkActionBar\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNoActionBar\u003c/em\u003e. These are two of the many built-in themes in Android.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis will remove the App Bar from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the activities in our app. We can save this change and run our application in the emulator to see the result:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/x9t4nzqdmbi7odx/no-app-bar-example.png?raw=1\" alt=\"no-app-bar-example\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eActivity-Specific Themes\u003c/h3\u003e\r\n\u003cp\u003eIt's valuable to know how to apply a theme to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eentire\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapp in this fashion. However, in the case of our App Bar, we really only want to remove it from the MainActivity where it's unnecessary. We still want our App Bar and its up button present in our RestaurantsActivity. Let's create a new theme that inherits from the built-in NoActionBar theme, and apply it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the Main Activity.\u003c/p\u003e\r\n\u003ch4\u003eCreating a Theme\u003c/h4\u003e\r\n\u003cp\u003eFirst, we'll create a new theme within\u003cspan\u003e \u003c/span\u003e\u003cem\u003estyles.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name it ''NoActionBarTheme\". We'll also give this new theme a parent value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTheme.AppCompat.Light.NoActionBar\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.DarkActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"NoActionBarTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we wanted to add additional styles to this theme, we could do so within these\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eXML tags. For example, we can see the colors we previously defined in the theme preceding this one. However, we'll stick to simply removing that app bar in this lesson. Feel free to experiment with themes on your own!\u003c/p\u003e\r\n\u003ch4\u003eApplying a Theme\u003c/h4\u003e\r\n\u003cp\u003eNow we need to apply this theme to our MainActivity and\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eour MainActivity. Back in the Android Manifest, add our ‘NoActionBarTheme’ to MainActivity's entry, like so:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/NoActionBarTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we run the app again the app bar should\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eappear on the RestaurantsActivity. Perfect!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/7_appBar_Nav\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAndroid manifest\u003c/strong\u003e: File that presents essential information about an application , such as package name, component details, minimun level of API required to the Android system.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eApp bar\u003c/strong\u003e: A toolbar used for branding, navigation, search and actions; also known as the App toolbar or Action bar.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eHierarchical relationship\u003c/strong\u003e: A relationship between one screen and another that is navigated in \"up\" and \"down\" levels of parent and child. Example: the MainActivity is the hierarchical parent of the RestaurantsActivity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMetadata\u003c/strong\u003e: Data about other data.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eUp button\u003c/strong\u003e: Used to navigate within an app based on the hierarchical relationships between screens. A 'child' view will contain an up button back to its hierarchical parent.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cdiv class=\"filename\"\u003eapp/manifests/AndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.PARENT_ACTIVITY\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:value\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emeta-data\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis XML establishes MainActivity as the hierarchical parent of RestaurantsActivity in the Android Manifest.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis applying the built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eNoActionBar\u003c/code\u003etheme to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eentire\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapplication.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/styles.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e\u0026lt;!-- Base application theme. --\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"AppTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.DarkActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\r\n        \u0026lt;!\u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eCustomize\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003eyour\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003etheme\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ehere\u003c/span\u003e. \u003cspan class=\"hljs-tag\"\u003e--\u003c/span\u003e\u0026gt;\r\n        \u0026lt;\u003cspan class=\"hljs-tag\"\u003eitem\u003c/span\u003e \u003cspan class=\"hljs-tag\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"hljs-tag\"\u003ecolorPrimary\u003c/span\u003e\"\u0026gt;\u003cspan class=\"hljs-at_rule\"\u003e@\u003cspan class=\"hljs-keyword\"\u003ecolor/colorPrimary\u0026lt;/item\u0026gt;\u003c/span\u003e\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorPrimaryDark\"\u003c/span\u003e\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt;\r\n        \u0026lt;item name=\u003cspan class=\"hljs-string\"\u003e\"colorAccent\"\u003c/span\u003e\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt;\r\n    \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003ename\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"NoActionBarTheme\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eparent\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Theme.AppCompat.Light.NoActionBar\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"css\"\u003e\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003estyle\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new theme called \"NoActionBarTheme\" that inherits from the built-in NoActionBar theme.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/NoActionBarTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can apply specific themes defined in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/values/styles.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto specific activities in the activity's entry of the Android Manifest.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/7_appBar_Nav\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-android-weekly-independent-projects","title":"Pre-course work: Android Weekly Independent Projects","type":"WikiPage","content":"\u003ch2\u003eWeekly Independent Project Overview\u003c/h2\u003e\r\n\u003cp\u003eDue to the complexity of Android applications, you will not complete 4 separate independent projects each Friday as you’ve done in previous courses. Instead, your weekly independent project will be ongoing. Each Friday you’ll implement the new concepts you’ve learned that week into last week’s independent project. This means that you must keep your project’s codebase in good shape at all times; thoughtful comments, and appropriate workflow practices (branch-work-merge in small batches) will help achieve this goal.\u003c/p\u003e\r\n\u003ch3\u003eCategory Options\u003c/h3\u003e\r\n\u003cp\u003eHowever, you and your classmates will not be required to create the same application each week as you’ve done in other courses. Instead, you will be provided several categories to choose from.\u003c/p\u003e\r\n\u003cp\u003eBy selecting from a pre-defined category you’ll ensure your application's scope is not\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoo large\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto reasonably complete in four Fridays, nor\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoo small\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto accurately demonstrate each week’s concepts and objectives.\u003c/p\u003e\r\n\u003cp\u003eProject category options are listed below. Begin considering which you’d like to create throughout the course. You will begin work this Friday.\u003c/p\u003e\r\n\u003ch3\u003eAPI Requirement\u003c/h3\u003e\r\n\u003cp\u003eIn the second week, we’ll also learn how to integrate web service backends (also known as APIs) into applications.\u003c/p\u003e\r\n\u003cp\u003eYou will be required to implement an API into your project on the second Friday of the course. Take this into consideration when selecting a project category, and/or the theme or focus of your application.\u003c/p\u003e\r\n\u003cp\u003eRecommended APIs are also provided below.\u003c/p\u003e\r\n\u003ch2\u003eProject Categories\u003c/h2\u003e\r\n\u003ch3\u003e1.) Tracking and Collecting Custom Objects\u003c/h3\u003e\r\n\u003cp\u003eThis type of application collects, tracks, and displays data that the user inputs themselves.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this category of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.oristats.habitbull\u0026amp;hl=en\"\u003eHabitBull\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.pilanites.streaks\"\u003eStreaks\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.journey.app\"\u003eJourney\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.evernote\"\u003eEvernote\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.myfitnesspal.android\"\u003eMyFitnessPal\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.clue.android\"\u003eClue\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this category of app. (These are simply examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e: To search for and retrieve recipe and food data.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e: Gather information from your or others’ profiles.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedIn\u003c/a\u003e: To retrieve information from LinkedIn.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e2.) Tracking and Collecting Objects from an API\u003c/h3\u003e\r\n\u003cp\u003eThis type of application tracks organizes or collects information that is retrieved from an API. For instance, applications that collect information on microbrews, wine, movies, or hiking trails and allow you to either compose favorites lists, rate them, or save them for later reference.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eExamples of this category of application include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMyRestaurants project from the curriculum. The main “object” (restaurants) is from information provided from an outside resource. The application allows users to track and organize information from this outside resource.\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.untappdllc.app\"\u003eUntappd\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.hellovino.android\"\u003eHello Vino\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.alltrails.alltrails\"\u003eAllTrails\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (Again, these are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub\u003c/a\u003e: To keep track of ongoing projects, whether yours or other developers’.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://strava.github.io/api/\"\u003eStrava\u003c/a\u003e: To organize/record/maintain/track information about your and others’ workouts, specifically running and biking, routes, gear, and other information.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://www.petfinder.com/developers/api-docs\"\u003ePetfinder\u003c/a\u003e: To track information about available pets for adoption in your area.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://www.brewerydb.com/developers\"\u003eBreweryDB\u003c/a\u003e: To track information about various beers.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e: To compile lists of meetups in your region.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e3.) Social Networking and Engagement\u003c/h3\u003e\r\n\u003cp\u003eApplications that allow users to interact with others. These apps can allow a general platform for interaction of all kinds, or focus on a specific interest, hobby or community.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this type of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.facebook.katana\"\u003eFacebook\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/developer?id=Twitter,+Inc.\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.instagram.android\"\u003eInstagram\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.bumble.app\"\u003eBumble\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.nextdoor\"\u003eNextDoor\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (These are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e: To share entries and information from your social network with your followers on another popular social network.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://api.imgflip.com/\"\u003eMeme Maker\u003c/a\u003e: To create funny images and memes to share on your social network.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e: To incorporate in-person meetups into your online social life.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://www.flickr.com/services/developer/api/\"\u003eFlickr\u003c/a\u003e: To share images from your Flickr account with friends.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedIn\u003c/a\u003e: To share information or incorporate data from your LinkedIn network.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e4.) Marketplace\u003c/h3\u003e\r\n\u003cp\u003eThis application allows users to buy (and oftentimes sell) items and experiences. Some are focused on a specific field or hobby, and others are more generalized.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this type of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.abtnprojects.ambatana\u0026amp;hl=en\"\u003eLetGo\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.poshmark.app\u0026amp;hl=en\"\u003ePoshmark\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.threadflip.android\u0026amp;hl=en\"\u003eThreadflip\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.groupon\u0026amp;hl=en\"\u003eGroupon\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.etsy.android\u0026amp;hl=en\"\u003eEtsy\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (These are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e: To cross-post or advertise your new store listings.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.walmartlabs.com/\"\u003eWalmart Labs\u003c/a\u003e: To gather information on various products.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developers.pinterest.com/\"\u003ePinterest\u003c/a\u003e: To share or advertise products.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e5.) Reference\u003c/h3\u003e\r\n\u003cp\u003eThis type of application allows users to search for and view reference materials and data on a wide variety of topics.\u003c/p\u003e\r\n\u003ch4\u003eExamples\u003c/h4\u003e\r\n\u003cp\u003eHere are several real-world examples of this type of application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/search?q=weather\u0026amp;c=apps\u0026amp;hl=en\"\u003eVarious Weather applications\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=org.wikipedia\u0026amp;hl=en\"\u003eWikipedia\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.allrecipes.spinner.free\u0026amp;hl=en\"\u003eAllRecipes\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://play.google.com/store/search?q=song%20lyrics\u0026amp;c=apps\u0026amp;hl=en\"\u003eVarious Song Lyrics applications\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003ePossible APIs\u003c/h4\u003e\r\n\u003cp\u003eHere's how an API might fit into this type of application. (These are examples; you may choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eAPI from the list below).\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e: To search for and retrieve recipe and food data.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://www.recipepuppy.com/api/\"\u003eRecipe Puppy\u003c/a\u003e: To gather and reference recipe and food information.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://betterdoctor.com/developers\"\u003eBetter Doctor\u003c/a\u003e: To gather and reference healthcare resources.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.musixmatch.com/\"\u003eMusix Match\u003c/a\u003e: To retrieve and display music information.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://www.giantbomb.com/api\"\u003eGiant Bomb\u003c/a\u003e: To retrieve and display information on various video games and devices.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://darksky.net/dev/\"\u003eDarkSky\u003c/a\u003e: To gather and display weather information from around the world.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAPIs\u003c/h2\u003e\r\n\u003cp\u003eBelow is list of recommended APIs you may implement into any of the project categories above. Each has been successfully used in applications by past students, and vetted by Android instructors. You’re encouraged to explore this list and research what information you can collect from each API.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedin\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.pinterest.com/\"\u003ePinterest\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.flickr.com/services/developer/api/\"\u003eFlickr\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.meetup.com/meetup_api/\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://darksky.net/dev/\"\u003eDarkSky\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/overview\"\u003eYelp\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://strava.github.io/api/\"\u003eStrava\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://sunlightlabs.github.io/congress/\"\u003eSunlight Congress\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.petfinder.com/developers/api-docs\"\u003ePetfinder\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.brewerydb.com/developers\"\u003eBreweryDB\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.giantbomb.com/api\"\u003eGiant Bomb\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.walmartlabs.com/\"\u003eWalmart Labs\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.recipepuppy.com/api/\"\u003eRecipe Puppy\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.musixmatch.com/\"\u003eMusixMatch\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://betterdoctor.com/developers\"\u003eBetter Doctor\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eOther APIs\u003c/h3\u003e\r\n\u003cp\u003eIt may be possible to use an API\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eincluded in the list above, but you must complete the following steps. In the past, students have struggled (and consequently failed to meet deadlines) when using API’s that were not carefully researched beforehand. We want to ensure you spend as much time developing as possible and have the greatest chance of success! The following research process will be time well spent:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eResearch the API thoroughly.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eNot every resource is the same. Not every API is accessed in the same manner. Some APIs require complex multi-step authentication, others provide data in formats you may not be familiar with. Thoroughly research the API to ensure it\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtain the information you’re seeking, and it\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewill\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ework with your project. Do not assume integrating Google products (such as Google Maps, Places, etc.) will be straightforward. They can be time-consuming to configure, integrate, and use.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMake test requests to the API.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eConfirm your research is accurate by actually requesting and receiving data from the API. Thankfully, you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon’t\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehave to build an entire application to do this. Instead, check out the free Chrome extension\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.getpostman.com/\"\u003ePostman\u003c/a\u003e. It allows you to make test API requests with parameters of your choice, and browse response data. There is a series of brief\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.youtube.com/playlist?list=PLM-7VG-sgbtD8qBnGeQM5nvlpqB_ktaLZ\"\u003etutorial videos available on YouTube\u003c/a\u003e demonstrating how to install, access, and use Postman.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDemonstrate the API to your instructor.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter confirming your API will work in your application, you must demonstrate this to your instructor. Explain to your instructor what the API is, how you will access it, the format it will return data in, and how you’ll use this data in your application. Provide an example request and response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eUnderstand that the same objectives and deadlines apply.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eThe same deadlines and objectives will apply to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003estudents, regardless of their API choice. You will not be excused from objectives or deadlines due to unforeseen API issues. It is your responsibility to research your API, and confirm it will work\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eadding it to your project.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"monday-custom-fonts","title":"Monday: Custom Fonts","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eOne way to quickly add aesthetic touches to your Android applications is to implement custom fonts. In this lesson, we'll briefly cover how to import a font into our project's assets, and apply this font to a specific area of our application at runtime.\u003c/p\u003e\r\n\u003ch2\u003eSelecting a Font File\u003c/h2\u003e\r\n\u003cp\u003eFirst, you'll need to locate a specific font you'd like to use. You can download fonts from\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.fontsquirrel.com/fonts/list/popular\" target=\"_blank\"\u003eFontSquirrel\u003c/a\u003e, or feel free to explore other available font providers. Just know that\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003efonts must be in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eformat, with a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile extension.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eFor our MyRestaurants app, we'll download the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.fontsquirrel.com/fonts/ostrich-sans\" target=\"_blank\"\u003eOstrich Sans\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efont from Font Squirrel. Or, feel free to use another font you find more appealing.\u003c/p\u003e\r\n\u003ch2\u003eFont Sub-Directory\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll need an assets folder to store our app's fonts. Right click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and then select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Folder \u0026gt; Assets Folder\u003c/em\u003e. Keep the default\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTarget Source Set\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinish\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9qo28aog6uckw71/create-assets-folder.png?raw=1\" alt=\"create-assets-folder\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, right click on the newly-created\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Directory\u003c/em\u003e. Name this directory\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eRight click on the new\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReveal in Finder\u003c/em\u003e. Copy your\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont file into this folder.\u003c/p\u003e\r\n\u003ch2\u003eApplying Fonts at Runtime\u003c/h2\u003e\r\n\u003cp\u003eWe can now apply the font at runtime by using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003esetTypeface()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto which we want to apply the custom font. Let's apply this font to the \"MyRestaurants\"\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our MainActivity. In a previous lesson we assigned this\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe id of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eappNameTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto use it in an Espresso test. We'll reference that same ID here in the MainActivity.java file to locate it, and set its typeface.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll need to declare a member variable, and define it at runtime in\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eonCreate()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n       ...\r\n...\r\n\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll define our new font as\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTypeface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype (you'll have to import this new class), and call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003ecreateFromAsset()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto reference the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efont file we've just included in the project:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.graphics.Typeface;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n       ...\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter that, we simply call\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003esetTypeface()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e, providing the new\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTypeface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject we've just created as an argument. Perfect!\u003c/p\u003e\r\n\u003cp\u003eIf we run our application in the emulator, we should see a new, custom font greet us on the MainActivity:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/59j92jyv4tk0o35/custom-font-on-main-activity-small.png\" alt=\"custom-font-main-activity-small\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis is great! But this particular font looks just a bit small here. Let's quickly tweak the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTextView\u003c/code\u003e's XML to increase the size of the font:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"35dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/appNameTextView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've simply changed the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eandroid:textSize\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty from\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e40sp\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e60sp\u003c/code\u003e. This looks much better!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/wkg0oefr9zmxc08/custom-font-on-main-activity-larger.png\" alt=\"custom-font-main-activity-larger\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFeel free to experiment with different fonts, and sizes in your own application. \u003c/p\u003e\r\n\u003cp\u003eKeep in mind that custom fonts can dramatically slow down your app, including causing skipped frames and sluggish performance, if they are used excessively. Use system fonts when possible, and reserve custom fonts for areas where they make the biggest impact.\u003c/p\u003e\r\n\u003cp\u003eNote: in the example github repo \u003cem\u003e\u003cstrong\u003eCaviarDreams.ttf \u003c/strong\u003e\u003c/em\u003ehas been implemented instead of the \u003cem\u003e\u003cstrong\u003eostrich-regular.ttf\u003c/strong\u003e\u003c/em\u003e used in the demo code - feel free to experiment with other fonts extensions as well like the \u003cstrong\u003e\u003cem\u003e*.otf\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/4_custom_fonts\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFonts must be of the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003e.ttf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile extension.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFont files should reside in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory, in a sub-directory named\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e. If you have not already, you will need to create these directories.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003ethe\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003esetTypeface()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod can be called upon a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and will apply the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eTypeface\u003c/code\u003eprovided as an argument to that specific\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint\"\u003eView\u003c/code\u003e's text.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003eThe following example assumes a file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eostrich-regular.ttf\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-directory of an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory under\u003cspan\u003e \u003c/span\u003e\u003cem\u003eapp\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.graphics.Typeface;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n       ...\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/4_custom_fonts\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"thursday-movie-app","title":"Thursday:Movie App","type":"WikiPage","content":"\u003ch1\u003eMovie App\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: For Friday's code review, we ask that you\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e.gitignore API keys or credentials unless they grant access to sensitive information, since your instructor will need these keys to review your project with you. Before Friday, determine whether the API you plan on implementing includes sensitive keys. If so, make arrangements with your instructor ahead of time.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eContinue building on your knowledge of requesting data from a backend web service and displaying it using fragments, ListViews, and RecyclerViews. Pay special attention to implementing implicit intents throughout your application.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRead through the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html\"\u003eAndroid documentation on Intents\u003c/a\u003e, up through the 'Standard Activity Actions' section with your partner. We've already covered\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html\"\u003e\u003ccode\u003eACTION_VIEW\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/content/Intent.html#ACTION_DIAL\"\u003e\u003ccode\u003eACTION_DIAL\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein last night's homework, but what about the other activities listed? Browse through a few of the available options and discuss possible use cases with your partner.\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between implicit and explicit intents? Provide an example of each.\u003c/li\u003e\r\n\u003cli\u003eWhat arguments do we need to provide when creating an explicit intent?\u003c/li\u003e\r\n\u003cli\u003eWhat about when we create an implicit intent?\u003c/li\u003e\r\n\u003cli\u003eWhy do we need to resize images? What errors could occur if we don't?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMovie App\u003c/h3\u003e\r\n\u003cp\u003eBuild a movie app that allows users to search for movies by title, rating, and release date. You will use information from\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.themoviedb.org/documentation/api\"\u003eThe Movie Database API\u003c/a\u003e. Display the movie poster, title, synopsis, director, and main actors for each movie.\u003c/p\u003e\r\n\u003cp\u003eHere are some additional ideas to explore. It's not required to implement each and every one of these. Select one or more to focus on for your own app:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAdd a feature that allows users to click on an actor’s name and return a list of other movies they appear in.\u003c/li\u003e\r\n\u003cli\u003eAdd a feature that allows users to open the contact book, select a contact, and then send the contact a text message which includes the name and rating of the selected movie along with a personalized note such as\u003cspan\u003e \u003c/span\u003e\u003cem\u003e“Let’s go see this together!”\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erefer to the article from the warmup exercise, and Tuesday’s homework on Implicit Intents. Keep in mind you will need to create fake contacts in the emulator’s contact book in order to test this feature out.\u003c/li\u003e\r\n\u003cli\u003eImplement custom layouts, icons and other aesthetics.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003eHint: Append to Response\u003c/h4\u003e\r\n\u003cp\u003eThis particular movie API supports appending additional information to a response, which will allow you to receive multiple types of data from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eresponse instead of making two separate responses.\u003c/p\u003e\r\n\u003cp\u003eFor example, if you wanted both alternative titles and similar movies, you could append them as part of an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eappend_to_response\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ruby\"\u003e\u003cspan class=\"hljs-symbol\"\u003ehttp:\u003c/span\u003e/\u003cspan class=\"hljs-regexp\"\u003e/api.themoviedb.org/\u003c/span\u003e\u003cspan class=\"hljs-number\"\u003e3\u003c/span\u003e/movie/\u003cspan class=\"hljs-number\"\u003e550\u003c/span\u003e?api_key= \u003cspan class=\"hljs-comment\"\u003e###\u0026amp;append_to_response=similar_movies,alternative_titles\u0026amp;language=DE\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTry it out!\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application successfully request information from the Movie Database API?\u003c/li\u003e\r\n\u003cli\u003eIs it parsing the JSON response appropriately?\u003c/li\u003e\r\n\u003cli\u003eIs the code clean and well-refactored?\u003c/li\u003e\r\n\u003cli\u003eAre fragments being utilized? Are there any spots where fragments are not necessary? Any spots that don't use fragments that should?\u003c/li\u003e\r\n\u003cli\u003eDoes the application make use of implicit intent(s)? Are they functional?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-using-a-builder-class-to-create-a-dialog-optional-further-exploration","title":"Wednesday: Using a Builder Class to Create a Dialog (Optional Further Exploration)","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eIn the main lesson on DialogFragments, we explored creating a DialogFragment with a custom layout, overriding the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to do so. This is a common (and useful) way to interact with your users. Not every DialogFragment needs a custom layout, however, especially if you don't have to interact with its views. In many cases, it will suffice to have a title, a short text, and a yes/no button confirmation:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/soc0jkmofw4x2u9/dialog-builder-standard.png\" alt=\"dialog-builder-standard.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eFor this dialog, I supplied no unique layout but instead built it with a Builder. The Builder design pattern is very common and is essentially a way to build a complex object utilizing other subobjects and helper methods.\u003c/p\u003e\r\n\u003ch3\u003eIntroducing: Builder Classes\u003c/h3\u003e\r\n\u003cp\u003eVery briefly, let’s say we have an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject type (yes, I know that this is an unscientific term. Bear with me - get it?). Now let’s say that we wanted to build an instance. But what kind of animal? Animals vary so incredibly widely - from habitat to size to number of appendages to diet to lifespan to reproduction and a million other ways. Consider the difference between a duck and a spider. Both are animals in the broadest sense. But a lot of data that might have a property for spider (say: venomous = true) is impossible to map onto the properties of a duck, because they are quite profoundly different. Now if we add in the difference between chimpanzee and an owl, or a blue whale and a termite, then the complexity of difference becomes pretty boggling. There would be about a million properties that might be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor many of the potential\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003es we might build.\u003c/p\u003e\r\n\u003cp\u003eOne solution would be to write many different constructors in order to build any possible kind of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e, but that becomes inefficient very quickly. We also don't want a ton of different constructors clogging up our code. Protecting against code rot (imagine adding a new global property, say \"endangered\" that wasn't present in the original spec to all of those constructors...!) would be a nightmare. We need a better way.\u003c/p\u003e\r\n\u003cp\u003eIf the above example is too cerebral for you, imagine the builder as sandwich maker. You tick all the appropriate boxes on your order form: bread type, meat, cheese, condiments - and the sandwich maker makes it according to your specs. You can leave out the meat, even leave out the toppings if you like, the sandwich maker still knows how to make you a meal.\u003c/p\u003e\r\n\u003cp\u003eA builder class further abstracts the process of creating complex Objects for us, and we don’t worry too much about how it’s done.\u003c/p\u003e\r\n\u003cp\u003eThere are many articles online on the topic of builders, but if you are looking for a primer, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://jlordiales.me/2012/12/13/the-builder-pattern-in-practice/\"\u003ethis article\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eby Jose Luis Ordiales. It’s quick and easy to follow.\u003c/p\u003e\r\n\u003ch3\u003eHow to Implement a Builder\u003c/h3\u003e\r\n\u003cp\u003eLet’s take a first look at the code I wrote to create the dialog above.\u003c/p\u003e\r\n\u003cp\u003eHere is my class:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMoodDialogFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDialogFragment\u003c/span\u003e\u003c/span\u003e{\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Dialog \u003cspan class=\"hljs-title\"\u003eonCreateDialog\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n       AlertDialog.Builder builder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AlertDialog.Builder(getActivity());\r\n       builder.setTitle(\u003cspan class=\"hljs-string\"\u003e\"Dialog via Builder\"\u003c/span\u003e);\r\n       builder.setMessage(\u003cspan class=\"hljs-string\"\u003e\"Would you like to take a survey?\"\u003c/span\u003e);\r\n\r\n       builder.setPositiveButton(\u003cspan class=\"hljs-string\"\u003e\"Yes\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e DialogInterface.OnClickListener() {\r\n           \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DialogInterface dialog, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e which)\u003c/span\u003e \u003c/span\u003e{\r\n               dismiss();\r\n           }\r\n       });\r\n\r\n       builder.setNegativeButton(\u003cspan class=\"hljs-string\"\u003e\"Nope\"\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e DialogInterface.OnClickListener() {\r\n           \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DialogInterface dialog, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e which)\u003c/span\u003e \u003c/span\u003e{\r\n               dismiss();\r\n           }\r\n       });\r\n       \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e builder.create();\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSuper short, super concise. Perfect.\u003c/p\u003e\r\n\u003cp\u003eLet’s go through this briefly.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eFirst\u003c/strong\u003e, I make a new builder object that is knowledgeable in the art of building AlertDialogs and their variants:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eSecond\u003c/strong\u003e, I use some simple methods with supplied arguments to affect how the builder builds the object when I finally tell it to start building. These methods are predefined in the builder class - check\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/AlertDialog.Builder.html\"\u003ethis reference\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see a complete list of available methods.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThird\u003c/strong\u003e, I define some actions I want to take when a button is clicked - these take the form of callbacks (try and read them as if they were jQuery if you are having trouble understanding how they work.) I can set positive, negative, and neutral buttons.\u003c/p\u003e\r\n\u003cp\u003eWhen I’m done setting my settings, all I need to do is tell the builder to “go build!” and it will craft me a dialog window that is exactly how I set it up to be. Nice!\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-creating-a-basic-layout","title":"Pre-course work: Creating a Basic Layout","type":"WikiPage","content":"\u003cp\u003eNow that we successfully have our app up and running in the emulator, let’s get to work! First, we are going to make a basic welcome page with a button that will eventually link to a page with a list of restaurants.\u003c/p\u003e\r\n\u003cp\u003eWhile in the Android project view, navigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/layout/activity_main.xml\u003c/em\u003e. The\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder contains all of the static resources that comprise our app. This folder will house all of our images, layout files, launcher icon, and string, color, and style values. We will learn about all of these resources over time.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile is where we are going to style what the user sees and interacts with when they are viewing the welcome page of our app. As the filename specifies, layouts in Android are written in\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eeXtensible Markup Language (XML)\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e- that means no more CSS for us!\u003c/p\u003e\r\n\u003cp\u003eNote: \u003cspan\u003eMany of our Android lessons refer to features from Android Studio 2.1. However, many students are working with the newer versions. One of the primary differences from the old version is the introduction of \u003cstrong\u003eConstraintLayout\u003c/strong\u003e. Constraint layouts are relatively new, and not all companies or applications use them yet. Therefore, we think it's important to learn \u003cem\u003eboth\u003c/em\u003e newer Constraint layouts, \u003cem\u003eand\u003c/em\u003e standard Relative layouts to best prepare for what you'll likely see on the job.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWe'll focus on using standard Relative layouts for the first part of this week. Then, on Wednesday night we'll discuss using Constraint layouts in greater detail in the \u003c/span\u003e\u003cem\u003eFurther Exploration: Working with Constraint Layouts\u003c/em\u003e\u003cspan\u003e lesson.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eBut there's just one tiny hiccup: In newer version of Android Studio (2.2+), Constraint Layouts are automatically created for new activities by default. So, in order to practice Relative layouts we'll need to turn these Constraint layouts back into their Relative cousins. But don't worry, it's not too hard. This lesson will address how to turn the default \u003cstrong\u003eConstraintLayout\u003c/strong\u003e back into a \u003cstrong\u003eRelativeLayout\u003c/strong\u003e. If you don't understand what all this constraint is all about don't worry, they'll both be common conjecture pretty soon.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSo while following along with lessons to create the MyRestaurants app, it's recommended that you turn your default constraint layouts back into relative layouts, in order to follow the lessons exactly - but you are familiar with android layouts may want to experiment with integrating constraint layouts into your own projects. Again, \u003cstrong\u003ethis is completely optional\u003c/strong\u003e. But, for those that would like to try them out, the videos \u003ca href=\"pages/wednesday-working-with-constraint-layouts?module_item_id=i1c40fef33c171d8de8011f485abbd728\"\u003e\u003cstrong\u003eHERE\u003c/strong\u003e\u003c/a\u003e will walk through creating this new type of layout, including how to use the new layout editor tool. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 18pt;\"\u003eTurning Constraint Layouts into Relative Layouts\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 12pt;\"\u003e\u003cspan\u003eWe can replace an activity's auto-generated \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eConstraintLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e with a standard \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e by doing the following, as shown below:\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eWhile in the Android project view, navigate to \u003cem\u003eres/layout/activity_main.xml\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDelete the constraint layout file created automatically when you made a new activity. A pop-up alert will ask you to confirm. Select OK. A second pop-up will alert you that this layout is being used in other parts of the app. Select Delete anyway. (Since we're going to immediately create a new layout to replace the one we're deleting, this is okay.)\u003c/li\u003e\r\n\u003cli\u003eCreate a new layout file by right-clicking the \u003cem\u003eres/layout\u003c/em\u003e directory, and selecting \u003cem\u003eNew \u0026gt; Layout Resource\u003c/em\u003e files.\u003c/li\u003e\r\n\u003cli\u003eGive the new layout file the same name as the constraint layout file you've just deleted. This ensures it will be correctly associated with the corresponding activity \u003cem\u003eactivity_main.xml\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eErase the default contents of the \u003cem\u003eRoot Element\u003c/em\u003e field, and replace with \u003cem\u003eRelativeLayout. \u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003eClick \u003c/span\u003e\u003cem\u003eOk\u003c/em\u003e\u003cspan\u003e. You should now have a new \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e to work with!\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan\u003eThe GIF below breakdowns how to go about the instructions depicted above. Download the file and play it with your preferred image viewer.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003ca class=\"instructure_file_link instructure_image_thumbnail\" title=\"constraint_to_relative_layout_android_studio.gif\" href=\"viewer/files/constraint_to_relative_layout_android_studio.gif?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/11929\" data-api-returntype=\"File\"\u003econstraint_to_relative_layout_android_studio.gif\u003c/a\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003e\u003cspan style=\"font-size: 12pt;\"\u003e\u003cspan\u003eDon't worry about memorizing this right now. We'll review this process in the next lesson when we create our first layouts together.\u003c/span\u003e\u003c/span\u003e\u003c/h2\u003e\r\n\u003ch2\u003eAltering the activity_main Layout\u003c/h2\u003e\r\n\u003cp\u003eTo edit our layout's XML directly, we'll need to navigate out of the visual editor and into the XML editor. Near the bottom-left of the screen you should see two tabs reading \u003cstrong\u003eDesign\u003c/strong\u003e and \u003cstrong\u003eText\u003c/strong\u003e (see image below). Select the Text tab to toggle into the XML editor.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/xmlDesign_edit_screenshot.png\" alt=\"xmlDesign_edit_screenshot.png\" width=\"564\" height=\"621\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/11930\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eMake sure to go back and revisit the Creating Relative Layouts lesson if any of this feels unclear.\u003c/p\u003e\r\n\u003cp\u003eIf we open\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e, we can see that it came pre-populated with XML! Currently, this file should look something like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-xml prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;RelativeLayout\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003exmlns:android\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_width\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_height\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/RelativeLayout\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt;\"\u003eLet's add a \"Hello World\" message, like our default-created Constraint layout previously had. We can do so by adding the following XML:\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp class=\"filename\"\u003eactivity_main.xml\u003c/p\u003e\r\n\u003cpre class=\"filename\"\u003e\u003cbr\u003e\u003ccode class=\"prettyprint lang-xml prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;RelativeLayout\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003exmlns:android\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_width\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_height\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"match_parent\"\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n    \u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;TextView\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_width\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"wrap_content\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:layout_height\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"wrap_content\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"atn\"\u003eandroid:text\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"atv\"\u003e\"Hello World!\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"tag\"\u003e/\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"tag\"\u003e\u0026lt;/RelativeLayout\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-size: 12pt;\"\u003eAt any point, we can also toggle back to the Design tab to preview what our layout XML looks like.\u003c/span\u003e\u003c/h3\u003e\r\n\u003ch3\u003eAdding and Altering Views\u003c/h3\u003e\r\n\u003cp\u003eLet’s change the existing \"Hello World!\" text and add a button. Each of these elements is what we will refer to in Android as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eview\u003c/strong\u003e. As we covered previously, a view is anything on the screen that we can see and/or interact with such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButtons\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageViews\u003c/code\u003e, and so on.\u003c/p\u003e\r\n\u003cp\u003eTo change the text, double click the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e. We’ll change it to the name of our app, \"MyRestaurants\", and then reposition it so that it is centered horizontally. Let’s take a look at the resulting XML by switching to the text view. To switch to the text view, select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003etext\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab at the bottom of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePalette\u003c/em\u003e. It should look like the following:\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e\u0026lt;TextView\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_width=\u003c/span\u003e\u003cspan\u003e\"wrap_content\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_height=\u003c/span\u003e\u003cspan\u003e\"wrap_content\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:text=\u003c/span\u003e\u003cspan\u003e\"MyRestaurants\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_alignParentTop=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_centerHorizontal=\u003c/span\u003e\u003cspan\u003e\"true\"\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eandroid\u003c/span\u003e\u003cspan\u003e:layout_marginTop=\u003c/span\u003e\u003cspan\u003e\"35dp\"\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see in the design view, setting the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elayout_marginTop\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to \u003ccode\u003e35dp\u003c/code\u003e will automatically reposition the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edp\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for density independent pixel and it is the unit of measurement we will use when specifying the size of our views in Android. Because Android devices have a variety of different screen resolutions, using pixels would result in views that would appear very small on the higher density devices and much larger on lower density devices. Using dps helps our apps to look consistent across devices.\u003c/p\u003e\r\n\u003ch2\u003eAdding Views\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s drag and drop a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePalette\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu into our layout. We’ll place it at the bottom center of the layout. Double click and change the text to \"Find restaurants\". The XML should now look like:\u003c/p\u003e\r\n\u003cp\u003eNOTE: The drag and drop feature may not work but - in retrospect this is a good thing (for now) moving a view will re position other views because each views position is \u003cstrong\u003e\u003cem\u003erelative\u003c/em\u003e\u003c/strong\u003e to others, therefore familiarize yourself with moving the views using the \u003cspan style=\"background-color: #808080;\"\u003eandroid:layout_*\u003c/span\u003e view property. (The as\u003cspan\u003eterisk\u003c/span\u003e * here stands for various layout features like the screen width, height that are defined by the RelativeLayout). For instance the centered position of the \u003cstrong\u003e\u003cem\u003eTextView\u003c/em\u003e\u003c/strong\u003e below within the layout is determined by the \u003cspan style=\"background-color: #808080;\"\u003eandroid:layout_centerHorizontal=\"true\"\u003cspan style=\"background-color: #808080;\"\u003e \u003cspan style=\"background-color: #ffffff;\"\u003e property.\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003cbr\u003e\u0026lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003cbr\u003e    xmlns:tools=\"http://schemas.android.com/tools\"\u003cbr\u003e    android:layout_width=\"match_parent\"\u003cbr\u003e    android:layout_height=\"match_parent\"\u003cbr\u003e    tools:context=\"com.epicodus.myrestaurants.MainActivity\"\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;TextView\u003cbr\u003e        android:layout_width=\"wrap_content\"\u003cbr\u003e        android:layout_height=\"wrap_content\"\u003cbr\u003e        android:text=\"MyRestaurants\"\u003cbr\u003e        android:layout_alignParentTop=\"true\"\u003cbr\u003e        android:layout_centerHorizontal=\"true\"\u003cbr\u003e        android:layout_marginTop=\"35dp\"\u003cbr\u003e        android:id=\"@+id/textView\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;Button\u003cbr\u003e        android:layout_width=\"wrap_content\"\u003cbr\u003e        android:layout_height=\"wrap_content\"\u003cbr\u003e        android:text=\"Find Restaurants\"\u003cbr\u003e        android:id=\"@+id/button\"\u003cbr\u003e        android:layout_alignParentBottom=\"true\"\u003cbr\u003e        android:layout_centerHorizontal=\"true\" /\u0026gt;\u003cbr\u003e\u0026lt;/RelativeLayout\u0026gt;\u003ccode class=\"xml hljs\"\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding Colors\u003c/h2\u003e\r\n\u003cp\u003eOur welcome page doesn’t look all that great yet. Let’s go ahead and add some basic styles such as colors and a background image. Feel free to use any colors/images that you like. If you need help deciding on a color scheme, try this\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.materialpalette.com/\"\u003eMaterial Design Color Palette\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esite.\u003c/p\u003e\r\n\u003ch3\u003ecolors.xml Resource\u003c/h3\u003e\r\n\u003cp\u003eNow that we have decided on a color scheme, let's go ahead and copy and paste the colors into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile located in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/values\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. It's generally considered a best practice in Android to not hardcode strings and color values into your user interface, but rather to consolidate them into their corresponding files inside of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/values\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Read more about Android resources here:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Understanding-App-Resources\"\u003eUnderstanding App Resources\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eCopying our colors into this\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile will allow us to reference our colors all throughout our app by their \"nicknames\" instead of the more complex hex codes. Your colors file should now look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/values/colors.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u0026lt;color name=\"colorPrimary\"\u0026gt;#FF5722\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorPrimaryDark\"\u0026gt;#E64A19\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorPrimaryLight\"\u0026gt;#FFCCBC\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorTextIcons\"\u0026gt;#FFFFFF\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorAccent\"\u0026gt;#009688\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorPrimaryText\"\u0026gt;#212121\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorSecondaryText\"\u0026gt;#727272\u0026lt;/color\u0026gt;\u003cbr\u003e    \u0026lt;color name=\"colorDivider\"\u0026gt;#B6B6B6\u0026lt;/color\u0026gt;\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eresources\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eApplying Colors\u003c/h3\u003e\r\n\u003cp\u003eNow let's apply our colors to style our welcome page. With the \"MyRestaurants\" text selected, find the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextColor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and then click on the three little dots to open the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eResources\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. In the color tab, we can choose from one of the many preset color values, specify a color using hexadecimal or RGB values, or scroll down to find the values we added to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Let's select one of the colors we just added to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecolors.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. I will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecolorTextIcons\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue which is simply white. The XML should now look like this with a link to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e@colors\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"35dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur background is currently white, so let's change it’s color for now so we can see what we are working on. Select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRelativeLayout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eComponentTree\u003c/em\u003e, select the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebackground\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e#000000\u003c/code\u003e. Our background should now be black.\u003c/p\u003e\r\n\u003ch2\u003eAltering Font and Other Styles\u003c/h2\u003e\r\n\u003cp\u003eBack to our \"MyRestaurants\" text, let’s make the font bigger so that it is easier to read. Select the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextSize\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty and give it a value of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e40sp\u003c/code\u003e. When specifying the size of text in Android, you should always use\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esp\u003c/strong\u003e. sp stands for scale-independent pixel and it helps text to look the same across different screen sizes and different pixel densities. It is also affected by the font size preferences in the user’s settings. Let’s also make our text bold by checking the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebold\u003c/em\u003e\u003cspan\u003e \u003c/span\u003echeckbox from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etextStyle\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty dropdown.\u003c/p\u003e\r\n\u003cp\u003eBack in the design view, let’s add some styles to our button. With the button selected, click on \u003cspan style=\"background-color: #999999;\"\u003elayout:width\u003c/span\u003e option on the top left of the design view and change t to expand the width of the button to match the width of the parent. This icon looks like a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esquare with two arrows inside pointing at the the center to a dotted vertical line.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eLet’s also change the background color of the Button and change the font color of the text inside. Here is the resulting XML.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/button\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhile we are in the Text view of our layout, let’s also give our button an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003es are important because they give us a way to refer to these views within our code. Let’s give our button an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof ‘findRestaurantsButton’ by changing the existing line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:id=\"@+id/button\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e... to instead read\u003c/code\u003eandroid:id=\"@+id/findRestaurantsButton\"`.\u003c/p\u003e\r\n\u003ch2\u003eAdding Images\u003c/h2\u003e\r\n\u003cp\u003eLast, let's use an image as a background for our welcome page layout. For free images, check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://unsplash.com/\"\u003eunsplash\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAll images for an Android project are stored in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres/drawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder.\u003c/p\u003e\r\n\u003cp\u003eUnfortunately, Android Studio does not let you drag and drop images directly into the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder. Instead, Right click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eReveal in Finder\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto reveal the folder and drag and drop your images that way.\u003c/p\u003e\r\n\u003cp\u003eNext, let's add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our layout and set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esource\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty. Double click on the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e, click on the three little dots, navigate to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder under the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProject\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab and select the name of your image.\u003c/p\u003e\r\n\u003cp\u003eWe want the image to fill the background so let’s change its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escaleType\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecenterCrop\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elayout_height\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efill_parent\u003c/code\u003e. Uh oh, our image is covering our text! To fix that, open the XML view and copy and paste the ImageView XML so that it is above your first TextView. Let's also delete all of the padding properties from our RelativeLayout.\u003c/p\u003e\r\n\u003cp\u003eNow we are done with our activity_main layout. The resulting XML should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u003c/span\u003e\u003c/code\u003e\u003cbr\u003e\u003cbr\u003e\u0026lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003cbr\u003exmlns:tools=\"http://schemas.android.com/tools\"\u003cbr\u003eandroid:layout_width=\"match_parent\"\u003cbr\u003eandroid:layout_height=\"match_parent\"\u003cbr\u003etools:context=\"com.epicodus.myrestaurants.MainActivity\"\u003cbr\u003eandroid:background=\"#000000\"\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;ImageView\u003cbr\u003eandroid:layout_width=\"wrap_content\"\u003cbr\u003eandroid:layout_height=\"match_parent\"\u003cbr\u003eandroid:id=\"@+id/imageView\"\u003cbr\u003eandroid:src=\"@drawable/background\"\u003cbr\u003eandroid:scaleType=\"centerCrop\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;TextView\u003cbr\u003eandroid:layout_width=\"wrap_content\"\u003cbr\u003eandroid:layout_height=\"wrap_content\"\u003cbr\u003eandroid:text=\"MyRestaurants\"\u003cbr\u003eandroid:layout_marginTop=\"35dp\"\u003cbr\u003eandroid:id=\"@+id/textView\"\u003cbr\u003eandroid:textColor=\"@color/colorTextIcons\"\u003cbr\u003eandroid:textSize=\"40sp\"\u003cbr\u003eandroid:layout_alignParentTop=\"true\"\u003cbr\u003eandroid:layout_centerHorizontal=\"true\"\u003cbr\u003eandroid:textStyle=\"bold\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;Button\u003cbr\u003eandroid:layout_width=\"match_parent\"\u003cbr\u003eandroid:layout_height=\"wrap_content\"\u003cbr\u003eandroid:text=\"Find Restaurants\"\u003cbr\u003eandroid:id=\"@+id/findRestaurantsButton\"\u003cbr\u003eandroid:layout_alignParentBottom=\"true\"\u003cbr\u003eandroid:layout_centerHorizontal=\"true\"\u003cbr\u003eandroid:background=\"@color/colorAccent\"\u003cbr\u003eandroid:textColor=\"@color/colorTextIcons\" /\u0026gt;\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eWarning:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eMake sure your image file sizes aren’t too big. Excessively large images will cause the following error when attempting to run your app:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ejava.lang.OutOfMemoryError\u003c/code\u003e. Resize your images to 1000pixels x 1000pixels or less to solve this issue.\u003c/p\u003e","frontPage":false},{"exportId":"pre-course-work-passing-data-between-activities","title":"Pre-course work: Passing Data Between Activities","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eAt the moment we are gathering the user's input and printing it to the log in our MainActivity. However, our goal is to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeventually\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse this information to complete an API request in our RestaurantsActivity. But how do we send data to another activity?\u003c/p\u003e\r\n\u003ch2\u003ePassing Data with Intent Extras\u003c/h2\u003e\r\n\u003cp\u003eData can be passed to our RestaurantsActivity along with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the form of ‘extras’. We attach data to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a key value pair, using a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eputExtra()\u003c/code\u003e, like so:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eintent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"String key\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"value\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's do this for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring value we created in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the previous lesson. (We can also remove the line to print our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the logcat at this time). Our code should look as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.util.Log;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Button;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.EditText;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eGathering Data from Intent Extras\u003c/h2\u003e\r\n\u003cp\u003eNow, when we click our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e, an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto take us from our MainActivity to our RestaurantsActivity should be initiated. This\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill now include an extra key-value pair of data containing the value the user placed in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eform field.\u003c/p\u003e\r\n\u003cp\u003eNow, let’s pull the data\u003cspan\u003e \u003c/span\u003e\u003cem\u003eout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the intent extra in our RestaurantsActivity. To do this, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetIntent()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to recreate the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetStringExtra()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to pull out the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue based using the string key we provided:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHowever, we aren't displaying the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata anywhere, so we can't see if this is working! Let's change this: To test that we can successfully retrieve data from the intent extra, we'll first add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout that will be responsible for displaying this information: (If you need a refresher on how to create a RelativeLayout refer back to \u003ca href=\"pages/pre-course-work-creating-a-basic-layout?module_item_id=i39097043baea41b6d7a6f8b8c204f330\"\u003ethis lesson\u003c/a\u003e)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/layout/activity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurants near \"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've added a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e, set its height and width to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewrap_content\u003c/code\u003e, which will allow the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto simply expand to whatever size its inner content requires, added the filler text \"Restaurants near\", assigned it the ID\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto reference later in our Java logic, and centered it within the layout.\u003c/p\u003e\r\n\u003cp\u003eThen, back in our RestaurantsActivity, we'll declare\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the top of the file, define it in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, then update its content to display the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.TextView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto update its text to contain the sentence we include, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estring we previously defined.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app and make sure that our message displays as expected. Great work!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/1_intents\" target=\"_blank\"\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eThis video walks through the steps in this lesson:\u003c/p\u003e\r\n\u003cdiv id=\"video\" class=\"tab-pane active in video\"\u003e\u003ciframe src=\"https://player.vimeo.com/video/158240167\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/div\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eIntent Extra\u003c/strong\u003e: Additional data attached to an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, in the form of a key-value pair. This data is assigned to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand retrieved using the methods described below.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eMethods\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eputExtra()\u003c/code\u003e: Is called upon an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, adds additional information to the intent in the form of a key-value pair. Takes two arguments: One representing the key, and the other representing the value corresponding to that key.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003egetStringExtra()\u003c/code\u003e: Called upon an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat has additional data attached to it. If provided an argument representing the string key in the key-value pair described above, it will return the value.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003esetText()\u003c/code\u003e: Similar to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetText()\u003c/code\u003e, can be called upon any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to set the text within it equal to the argument provided to the method.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003emFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the code above...\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eA string\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis defined by getting the text a user has input into an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efield, and transforming it into a string.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto travel from the MainActivity to the RestaurantsActivity is created.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintent.putExtra(\"location\", location); attaches\u003c/code\u003elocation\u003ccode\u003eto the newly-created\u003c/code\u003eIntent\u003ccode\u003ein the form of an intent extra.\u003c/code\u003e\"location\"\u003ccode\u003eis the key of the key-value pair, and the\u003c/code\u003elocation` variable is the value.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cdiv class=\"filename\"\u003eres/layout/activity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurants near \"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerVertical\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhen the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edefined in the MainActivity takes the user from the MainActivity to the RestaurantsActivity, the code above is executed.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = getIntent();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erecreates the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat has just taken us to this new activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003emLocationTextView = (TextView) findViewById(R.id.locationTextView);\u003c/code\u003eLocates a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the RestaurantActivity's corresponding XML layout.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString location = intent.getStringExtra(\"location\");\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euses the key\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"location\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto retrieve the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocation\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattached to this intent in the form of an intent extra.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThis location is then displayed in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epreviously located on the current layout, when\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLocationTextView.setText(\"Here are all the restaurants near: \" + location);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-android-documentation-and-resources","title":"Pre-course work: Android Documentation and Resources","type":"WikiPage","content":"\u003cp\u003eAndroid is a platform. Unlike iOS, it is used across many different devices from the Samsung Galaxy to the Google Nexus (now pixel). Manufacturers take the base Android software components and customize them, which makes developing for Android a bit more challenging than developing for iOS.\u003c/p\u003e\r\n\u003cp\u003eTo get started, let’s get familiar with the Android Documentation and other helpful resources. On the Android Developers site, we can find anything from material design guidelines to how-to references - and even information on distributing your completed apps on Google Play.\u003c/p\u003e\r\n\u003ch2\u003eEssential Resources\u003c/h2\u003e\r\n\u003cp\u003eThe following resources will be essential when starting with Android. Take a few moments to glance through them now:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/index.html\"\u003eAndroid Developers Site\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki\"\u003eCodePath Android Cliffnotes\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developers.google.com/android/for-all/vocab-words/\"\u003eGoogle Developers Android Vocabulary Glossary\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eDesign Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://labs.ribot.co.uk/exploring-the-new-android-design-support-library-b7cda56d2c32#.qqvzr4doe\"\u003eAndroid Design Support Library\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://jgilfelt.github.io/android-actionbarstylegenerator\"\u003eActionBar Style Generator\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://www.codementor.io/android/tutorial/android-ui-layouts-animations-mirror\"\u003eLayouts and Animations\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eTutorials\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://android-developers.blogspot.com/2015/12/invitation-your-ultimate-31-course.html\"\u003eAndroid Developers Blog\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://vogella.com/\"\u003eVogella.com\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/training/index.html\"\u003eAndroid Developers Getting Started Training\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eTesting Resources\u003c/h2\u003e\r\n\u003cp\u003eBeyond setting up your project for testing, we will not delve into testing quite yet. However, it is often a desirable skill for junior Android developers, and testing may be part of your internship. Spend some time during this course learning about the fundamentals of unit and integration testing in Android:\u003c/p\u003e\r\n\u003ch3\u003eUnit Testing\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1iDhPreOut0T7B2qARhq8BCBbeLMWZnP1STQp4I7hCrM/edit#slide=id.gd264f346c_0_159\"\u003eAndroid Unit Testing w/ Robolectric\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eInstrumentation Testing\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/UI-Testing-with-Espresso\"\u003eUI Testing with Espresso\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/jordanterry/Espresso-Examples\"\u003eEspresso Examples\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/jordanterry/Espresso-Examples/blob/master/app/src/androidTest/java/uk/co/jordanterry/espressoexamples/MainActivityTests.java\"\u003eMore Espresso Examples\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eData Persistence with SQLite\u003c/h2\u003e\r\n\u003cp\u003eIn this course, we will be using a JSON database called Firebase to store our data. We won’t cover relational database storage with databases like SQLite. but like testing, SQLite may be used during your internship, so familiarizing yourself with it will make you that much more marketable:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.techotopia.com/index.php/An_Android_SQLite_Database_Tutorial\" target=\"_blank\"\u003eAn Android SQLite Database Tutorial\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eHelpful Libraries\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/google/ExoPlayer\" target=\"_blank\"\u003eExoPlayer for Audio and Video\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/vbartacek/aacdecoder-android\" target=\"_blank\"\u003eAAC Decoder for radio streaming playback\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAndroid Studio\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.android.com/studio/intro/index.html\" target=\"_blank\"\u003eAndroid Studio IDE Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003chr\u003e\r\n\u003ch2\u003eAndroid Interview Questions\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/channel/UCMEmNnHT69aZuaOrE-dF6ug\" target=\"_blank\"\u003eAndroid Dialogs: Interview questions, tips and tricks\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch1\u003eAndroid Installation and Setup\u003c/h1\u003e\r\n\u003cp\u003eBefore class, take time to ensure all necessary tools are correctly installed on your personal machine. For Android, this primarily includes making sure your machine is equipped with JDK 6 or higher and installing Android Studio.\u003c/p\u003e\r\n\u003cp\u003eDouble-check your version of JDK by running the following command in the terminal:\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e$ javac -version\u003c/code\u003e If the output is not 1.6.0 or higher, install an updated version of Java using one of the following two lessons:\u003c/p\u003e\r\n\u003cp\u003eIf you encounter any issues installing or configuring any of these technologies, there will be an opportunity to receive setup assistance from Moringa school staff. It's important to try setting up these tools up now, so that you may take advantage of installation and setup assistance if any errors or issues occur.\u003c/p\u003e","frontPage":false},{"exportId":"weekend-json-and-xml-and-data-models","title":"Weekend: JSON (and XML) and Data Models","type":"WikiPage","content":"\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that we can successfully receive restaurant information from Yelp's API, let's begin integrating it into our app. In this lesson, we will parse out the data we need from Yelp's JSON response and build a constructor to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003ch2\u003eYelp API Responses\u003c/h2\u003e\r\n\u003cp\u003eTo begin, let's consider some sample data from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/search_api\" target=\"_blank\"\u003eYelp Search API\u003c/a\u003e. As detailed in their documentation, responses from the API look like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-json prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"total\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e8228\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"businesses\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"rating\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e4\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"price\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"$\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"phone\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"+14152520800\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"id\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"is_closed\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003efalse\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"categories\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"alias\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"title\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Coffee \u0026amp; Tea\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"review_count\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1738\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Four Barrel Coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"https://www.yelp.com/biz/four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coordinates\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.7670169511878\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42184275\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"image_url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"http://s3-media2.fl.yelpcdn.com/bphoto/MmgtASP3l_t4tPCL1iAsCg/o.jpg\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"location\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"city\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"San Francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"country\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"US\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address2\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address3\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"state\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"CA\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address1\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"375 Valencia St\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"zip_code\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"94103\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"distance\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1604.23\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"transactions\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"str\"\u003e\"pickup\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"delivery\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e]\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e//\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"region\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"str\"\u003e\"center\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.767413217936834\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42820739746094\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003eThere is a\u003c/span\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003cem style=\"font-size: 1rem;\"\u003elot\u003c/em\u003e\u003cspan style=\"font-size: 1rem;\"\u003e \u003c/span\u003e\u003cspan style=\"font-size: 1rem;\"\u003eof information here; but we will only concentrate on the key pieces of information our app will use: Restaurant name, address, and ratings. By identifying where these pieces of information reside within the response, we can begin to understand how to parse it back out.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eCreating a Model\u003c/h2\u003e\r\n\u003cp\u003eBased on the JSON response depicted in the sample, let's create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodel to create objects containing necessary data for each restaurant.\u003c/p\u003e\r\n\u003cp\u003eAt first our app will just display a list of restaurant names (in place of the names we hard-coded earlier). Later, we will include a details page for each restaurant.\u003c/p\u003e\r\n\u003cp\u003eLet's begin by creating a new class in the main package named\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurant.java\u003c/em\u003e. Within it, we'll include the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mName;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mPhone;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mWebsite;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mRating;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mImageUrl;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLatitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLongitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mCategories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mName = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mPhone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mWebsite = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mImageUrl = imageUrl;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mAddress = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLatitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLongitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCategories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mName;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mPhone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  mWebsite;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mAddress;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLatitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLongitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mCategories;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include a constructor for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emodel and getters for each member variable.\u003c/p\u003e\r\n\u003ch2\u003eParsing JSON and Creating Objects\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to parse the JSON data from the API's response, and pass them into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003econstructor. We will do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass by creating a new method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.processResults()\u003c/code\u003e. This method will return an array list of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects which we can then display.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003eprocessResults\u003c/span\u003e(Response response){\u003cbr\u003e    ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try\u003c/span\u003e{\u003cbr\u003e        String jsonData = response.body().string()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONObject yelpJSON = \u003cspan\u003enew \u003c/span\u003eJSONObject(jsonData)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONArray businessesJSON = yelpJSON.getJSONArray(\u003cspan\u003e\"businesses\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if \u003c/span\u003e(response.isSuccessful()){\u003cbr\u003e            \u003cspan\u003efor \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ei = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ei \u0026lt; businessesJSON.length()\u003cspan\u003e; \u003c/span\u003ei++){\u003cbr\u003e                JSONObject restaurantJSON = businessesJSON.getJSONObject(i)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString name = restaurantJSON.getString(\u003cspan\u003e\"name\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString phone = restaurantJSON.optString(\u003cspan\u003e\"display_phone\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Phone not available\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString website = restaurantJSON.getString(\u003cspan\u003e\"url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003erating = restaurantJSON.getDouble(\u003cspan\u003e\"rating\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString imageUrl = restaurantJSON.getString(\u003cspan\u003e\"image_url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elatitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"latitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elongitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"longitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eArrayList\u0026lt;String\u0026gt; address = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray addressJSON = restaurantJSON.getJSONObject(\u003cspan\u003e\"location\"\u003c/span\u003e).getJSONArray(\u003cspan\u003e\"display_address\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; addressJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    address.add(addressJSON.get(y).toString())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                ArrayList\u0026lt;String\u0026gt; categories = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray categoriesJSON = restaurantJSON.getJSONArray(\u003cspan\u003e\"categories\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; categoriesJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    categories.add(categoriesJSON.getJSONObject(y).getString(\u003cspan\u003e\"title\"\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                Restaurant restaurant = \u003cspan\u003enew \u003c/span\u003eRestaurant(name\u003cspan\u003e, \u003c/span\u003ephone\u003cspan\u003e, \u003c/span\u003ewebsite\u003cspan\u003e, \u003c/span\u003erating\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        \u003c/span\u003eimageUrl\u003cspan\u003e, \u003c/span\u003eaddress\u003cspan\u003e, \u003c/span\u003elatitude\u003cspan\u003e, \u003c/span\u003elongitude\u003cspan\u003e, \u003c/span\u003ecategories)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003erestaurants.add(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003cbr\u003e    } \u003cspan\u003ecatch \u003c/span\u003e(IOException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e} \u003cspan\u003ecatch \u003c/span\u003e(JSONException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    \u003cspan\u003ereturn \u003c/span\u003erestaurants\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003eHere, we...\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray to eventually contain all\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTransform the API response into a String with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString jsonData = response.body().string();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to double-check the response was successful.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf so, we create a Java\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eJSONObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe target the \"businesses\" array from the response (see example response above) that contains the information our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor requires.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn a loop, we collect the name, phone, url, rating, image_url, location (both latitude and longitude), addresses, and categories for each restaurant.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject for each restaurant in the response.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe catch any errors, then return the array of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Because some restaurants do not have phone numbers listed on Yelp, we can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.optString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.getString()\u003c/code\u003e. If data is not available, we can set a default value( i.e. \"Phone not available\") to act as the restaurant's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ephone\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute instead.\u003c/p\u003e\r\n\u003cp\u003eFor a refresher on JSONObjects check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/org/json/JSONObject.html\" target=\"_blank\"\u003eAndroid Developers documentation\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch1 class=\"title style-scope ytd-video-primary-info-renderer\"\u003eXML to JSON Conversion (Only for those consuming APIs that respond in XML format)\u003c/h1\u003e\r\n\u003cp class=\"shortdesc\"\u003eREST services support JSON and XML formats for input and output data formats by default. The default format is JSON.\u003c/p\u003e\r\n\u003cp class=\"shortdesc\"\u003e\u003cspan\u003eThe format of returned data is defined in the request header. The format you choose depends on what you are familiar with most or tools available to you. \u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"section\"\u003e\r\n\u003cp class=\"p\"\u003eWhen an XML String is sent to a REST service (Post request), you must set Content-Type HTTP header to be \"application/xml\". The REST service converts the XML input data to the JSON format that is accepted by REST services. Therefore, your input XML format must follow a certain structure so that it can be transformed to the JSON object that is accepted by REST services. \u003cspan\u003eWhen requesting XML response format for a REST service, some services have inbuilt utilities that serialize the content into JSON format but for those sites that don't. Some REST services have alternative query URLs or URL parameters through which you can request for data through either JSON or XML formats, so make sure to read thoroughly comb through the your specific API documentation to identify the prerequisites for getting the data file format you want. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp class=\"p\"\u003e\u003cspan\u003eFor those consuming APIs that only return XML file formats, here is one way of converting your data to JSON format so you can follow along with the Restaurant feature project tutorial.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli class=\"p\"\u003e\n\u003cspan\u003eFirst you need to download \u003ca class=\"instructure_file_link\" title=\"java-json.jar\" href=\"viewer/files/java-json.jar?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13483\" data-api-returntype=\"File\"\u003ethis java-son.jar\u003c/a\u003e file and add it as a library to your project. Let's go through how to go about that.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli class=\"p\"\u003e\u003cspan\u003eChange your project view (if it's not already set to \"Project Files\") From the top left corner of your Android Studio in the \"project\" tab.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli class=\"p\"\u003e\n\u003cspan\u003eCreate a directory in your \u003cem\u003eApp \u003c/em\u003efolder name it \u003cem\u003elibs and c\u003c/em\u003eopy the java-json.jar file there by right-clicking on the app folder and selecting paste, click OK on the dialogue below to save.\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/jar-file_transfer_SS.png?canvas_download=1\" alt=\"jar-file_transfer_SS.png\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13485\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRight-click on the \u003cspan\u003e java-json.jar file and click on the \"Add As Library\" \u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003cimg src=\"viewer/files/Add_Jar_As_library.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"Add_Jar_As_Library\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13487\" data-api-returntype=\"File\"\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe default option for where to \"add the module\" is the App resource directory. Click OK an wait for it to synchronize and index.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/making-a-library-from-jar-file.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"making_library_from_jar_file\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13486\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe final file structure for newly added files should look like this:\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cimg src=\"viewer/files/Final_jar_structure.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" alt=\"final_file_structure\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/13488\" data-api-returntype=\"File\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWith everything set up, you can now. Add the following code in our YelpService.java file to convert the XML content into JSONObjetct format.\u003c/p\u003e\r\n\u003cp\u003eYelpService.java\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003eprocessResults\u003c/span\u003e(Response response){\u003cbr\u003e    ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try\u003c/span\u003e{\u003cbr\u003e// \u003cbr\u003e        String xmlData = response.body().string()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONObject yelpJSON = XML.toJSONObject(xmlData)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONArray businessesJSON = yelpJSON.getJSONArray(\u003cspan\u003e\"businesses\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e...\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003eYou can fix the squiggly line underthe XML by hitting alt-enter and importing the necessary libraries. And we are good to go! \u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch2\u003eDisplaying Objects Created from JSON Data\u003c/h2\u003e\r\n\u003cp\u003eWe'll need to trigger our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.processResults()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod inside RestaurantsActivity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback, and collect its return value in a member variable called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e. This\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray will eventually replace our hard-coded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationTextView) TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.listView) ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n   ...\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                    String jsonData = response.body().string();\r\n                    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (response.isSuccessful()) {\r\n                        Log.v(TAG, jsonData);\r\n                        mRestaurants = yelpService.processResults(response);\r\n                    }\r\n                } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can now successfully construct and execute an OAuth-authenticated call to Yelp, parse relevant information from the response, and create objects with it! In the next lesson we'll learn how to display this new information to our users.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/8_OkHttp\" target=\"_blank\"\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cdiv class=\"filename\"\u003eYelpService.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003eprocessResults\u003c/span\u003e(Response response){\u003cbr\u003e    ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try\u003c/span\u003e{\u003cbr\u003e        String jsonData = response.body().string()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONObject yelpJSON = \u003cspan\u003enew \u003c/span\u003eJSONObject(jsonData)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eJSONArray businessesJSON = yelpJSON.getJSONArray(\u003cspan\u003e\"businesses\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if \u003c/span\u003e(response.isSuccessful()){\u003cbr\u003e            \u003cspan\u003efor \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ei = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ei \u0026lt; businessesJSON.length()\u003cspan\u003e; \u003c/span\u003ei++){\u003cbr\u003e                JSONObject restaurantJSON = businessesJSON.getJSONObject(i)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString name = restaurantJSON.getString(\u003cspan\u003e\"name\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString phone = restaurantJSON.optString(\u003cspan\u003e\"display_phone\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Phone not available\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString website = restaurantJSON.getString(\u003cspan\u003e\"url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003erating = restaurantJSON.getDouble(\u003cspan\u003e\"rating\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString imageUrl = restaurantJSON.getString(\u003cspan\u003e\"image_url\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elatitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"latitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                double \u003c/span\u003elongitude = restaurantJSON.getJSONObject(\u003cspan\u003e\"coordinates\"\u003c/span\u003e).getDouble(\u003cspan\u003e\"longitude\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eArrayList\u0026lt;String\u0026gt; address = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray addressJSON = restaurantJSON.getJSONObject(\u003cspan\u003e\"location\"\u003c/span\u003e).getJSONArray(\u003cspan\u003e\"display_address\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; addressJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    address.add(addressJSON.get(y).toString())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                ArrayList\u0026lt;String\u0026gt; categories = \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eJSONArray categoriesJSON = restaurantJSON.getJSONArray(\u003cspan\u003e\"categories\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                for \u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ey = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ey \u0026lt; categoriesJSON.length()\u003cspan\u003e; \u003c/span\u003ey++){\u003cbr\u003e                    categories.add(categoriesJSON.getJSONObject(y).getString(\u003cspan\u003e\"title\"\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e}\u003cbr\u003e                Restaurant restaurant = \u003cspan\u003enew \u003c/span\u003eRestaurant(name\u003cspan\u003e, \u003c/span\u003ephone\u003cspan\u003e, \u003c/span\u003ewebsite\u003cspan\u003e, \u003c/span\u003erating\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        \u003c/span\u003eimageUrl\u003cspan\u003e, \u003c/span\u003eaddress\u003cspan\u003e, \u003c/span\u003elatitude\u003cspan\u003e, \u003c/span\u003elongitude\u003cspan\u003e, \u003c/span\u003ecategories)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003erestaurants.add(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003cbr\u003e    } \u003cspan\u003ecatch \u003c/span\u003e(IOException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e} \u003cspan\u003ecatch \u003c/span\u003e(JSONException e) {\u003cbr\u003e        e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    \u003cspan\u003ereturn \u003c/span\u003erestaurants\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003eThe method above parses out information from this API response format: ...\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-json prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"total\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e8228\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"businesses\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"rating\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e4\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"price\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"$\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"phone\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"+14152520800\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"id\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"is_closed\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003efalse\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"categories\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"alias\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n          \u003c/span\u003e\u003cspan class=\"str\"\u003e\"title\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Coffee \u0026amp; Tea\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"review_count\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1738\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"name\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Four Barrel Coffee\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"https://www.yelp.com/biz/four-barrel-coffee-san-francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"coordinates\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.7670169511878\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42184275\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"image_url\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"http://s3-media2.fl.yelpcdn.com/bphoto/MmgtASP3l_t4tPCL1iAsCg/o.jpg\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"location\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"city\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"San Francisco\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"country\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"US\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address2\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address3\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"state\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"CA\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"address1\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"375 Valencia St\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"str\"\u003e\"zip_code\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"94103\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"distance\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e1604.23\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"transactions\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e[\u003c/span\u003e\u003cspan class=\"str\"\u003e\"pickup\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"delivery\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e]\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e},\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e//\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e],\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"str\"\u003e\"region\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"str\"\u003e\"center\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e{\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"latitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"lit\"\u003e37.767413217936834\u003c/span\u003e\u003cspan class=\"pun\"\u003e,\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n      \u003c/span\u003e\u003cspan class=\"str\"\u003e\"longitude\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"lit\"\u003e122.42820739746094\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n  \u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 1rem;\"\u003e... and creates objects of the following class:\u003c/span\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mName;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mPhone;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mWebsite;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mRating;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mImageUrl;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLatitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLongitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; mCategories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mName = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mPhone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mWebsite = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mImageUrl = imageUrl;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mAddress = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLatitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLongitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCategories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mName;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mPhone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  mWebsite;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mAddress;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLatitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLongitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mCategories;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor a refresher on JSONObjects check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/org/json/JSONObject.html\" target=\"_blank\"\u003eAndroid developer documentation\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-myrestaurants-bells-and-whistles","title":"Monday:MyRestaurants, Bells \u0026 Whistles","type":"WikiPage","content":"\u003ch2\u003eMyRestaurants, Bells \u0026amp; Whistles\u003c/h2\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is an interface? What functionality do they offer?\u003c/li\u003e\r\n\u003cli\u003eHow does an interface differ from a class?\u003c/li\u003e\r\n\u003cli\u003eHow do we implement interfaces?\u003c/li\u003e\r\n\u003cli\u003eHow are gestures enabled or disabled?\u003c/li\u003e\r\n\u003cli\u003eHow do we use our user interface to indicate to a user what gestures are available?\u003c/li\u003e\r\n\u003cli\u003eHow is a touchscreen gesture processed? Which portion of the application is responsible? What other components are involved?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003cp\u003eFollow along with today's work together with the weekend homework to implement the drag and drop, swipe to delete, and animation functionality into our ongoing MyRestaurants project.\u003c/p\u003e\r\n\u003ch3\u003e\"Bells \u0026amp; Whistles\" App of Choice\u003c/h3\u003e\r\n\u003cp\u003eLet’s continue to explore animations and the various touch events recognized in Android. To do so, create an app of your choosing that responds to the following touch events. Each event should trigger a different property animation, including):\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html\"\u003eDouble tap\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/design/patterns/swipe-views.html\"\u003eSwipe\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/reference/android/view/View.OnLongClickListener.html\"\u003eLongclick\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/training/gestures/scale.html#scale\"\u003ePinch to Zoom\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/reference/android/widget/Scroller.html#fling(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int)\"\u003eFling\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003ePotential project ideas could include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInteractive to-do list that allows you to order events based on priority, swipe or fling to delete, long-click to update, etc.\u003c/li\u003e\r\n\u003cli\u003eA\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Bop_It\"\u003eBop-It!\u003c/a\u003e-inspired application, or soundboard-style app that offers a variety of fun noises based on different gesture interactions.\u003cspan\u003e \u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli\u003eImplementing gesture capability into one of your favorite existing Android projects.\u003c/li\u003e\r\n\u003cli\u003eAnything else you and your partner may think of. Get creative!\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eHere are some additional resources to get you started:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://guides.codepath.com/android/Gestures-and-Touch-Events\"\u003eCode Path | Gestures and Touch Events\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.sitepoint.com/android-gestures-and-touch-mechanics/\"\u003eAndroid Gestures and Touch Mechanics\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/championswimmer/SimpleFingerGestures_Android_Library\"\u003eSimpleFingerGestures Library\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner are able to successfully implement each of the touch gestures listed above, give shake gestures a shot! To get you started, see the below is example that prints a log message when the phone is shaken:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSensorEventListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SensorManager mSensorManager;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Sensor mSensor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e lastUpdate = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e last_x, last_y, last_z;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e SHAKE_THRESHOLD = \u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\r\n        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\r\n        mSensorManager.registerListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, mSensor, mSensorManager.SENSOR_DELAY_NORMAL);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSensorChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(SensorEvent event)\u003c/span\u003e \u003c/span\u003e{\r\n        Sensor sensor = event.sensor;\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\r\n            \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e x = event.values[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e];\r\n            \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e y = event.values[\u003cspan class=\"hljs-number\"\u003e1\u003c/span\u003e];\r\n            \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e z = event.values[\u003cspan class=\"hljs-number\"\u003e2\u003c/span\u003e];\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e curTime = System.currentTimeMillis();\r\n\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e ((curTime - lastUpdate) \u0026gt; \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e ) {\r\n                \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e diffTime = (curTime - lastUpdate);\r\n                lastUpdate = curTime;\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003efloat\u003c/span\u003e speed = Math.abs(x + y + z - last_x - last_y - last_z)/diffTime * \u003cspan class=\"hljs-number\"\u003e10000\u003c/span\u003e;\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(speed \u0026gt; SHAKE_THRESHOLD) {\r\n                    Log.d(\u003cspan class=\"hljs-string\"\u003e\"SensorEventListener\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"shaking\"\u003c/span\u003e);\r\n\r\n                last_x = x;\r\n                last_y = y;\r\n                last_z = z;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAccuracyChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Sensor sensor, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e accuracy)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application include functional gesture listeners?\u003c/li\u003e\r\n\u003cli\u003eIs it clear what gestures is required to interact with the application? Why or why not?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eWould you use this application? Why or why not?\u003c/li\u003e\r\n\u003cli\u003eWhat other features might you like to see in this app?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-images-with-picasso","title":"Weekend: Images with Picasso","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.8em;\"\u003eImages with Picasso\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eThe text in our custom list adapter is working just right, but we haven't updated the source for our ImageView yet. Let's do that now.\u003c/p\u003e\r\n\u003cp\u003eWe will use another library by Square called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://square.github.io/picasso/\"\u003ePicasso\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewhich will make this task a piece of cake. Picasso simplifies the task of loading images into an Android application by offering automatic memory and disk caching, and other features.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by adding it to our dependencies:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n   ...\r\n    implementation 'com.squareup.picasso:picasso:2.71828'\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let's update the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor our list item ImageView. To attach the string imageUrl to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esrc\u003c/em\u003e, simply add the following to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n    P\u003c/code\u003eicasso.\u003cspan\u003eget\u003c/span\u003e().load(restaurant.getImageUrl()).into(\u003cspan\u003emRestaurantImageView\u003c/span\u003e)\u003ccode class=\"java hljs\"\u003e; \u003cbr\u003e...\u003cbr\u003e } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThis line of code instructs the application to allow Picasso to handle the image loading. Now, if we run our application, we should see images next to each restaurant's details!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003cspan style=\"font-size: 14pt;\"\u003eWorking with HTTP and HTTPS (Not Yelp related) \u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eFor those of you following along with the feature project while implementing the functional features into your IP - Some may encounter a situation where the images are not displaying but after debugging your code (and finding no error - you models are fine, the viewholder in the adapter and recycler view are both initialized and attached in the right way). Logging the url-value received from the API in the logcat works just fine and finally the url loads an image in your browser when you load it in your browsers address bar. Yet there are no related errors in the logcat.\u003c/p\u003e\r\n\u003cp\u003eOne possible source of the problem if/when all conditions checkout, is the scheme used to construct the image url. For a refresher on url schemes \u003ca href=\"https://moringaschool.instructure.com/courses/12/pages/weekend-uniform-resource-locator-url?module_item_id=499\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/12/pages/weekend-uniform-resource-locator-url\" data-api-returntype=\"Page\"\u003eread-up-on-them-here\u003c/a\u003e. This error comes about because f\u003cspan\u003erom Android 9 Pie, requests without encryption won't work. And by default, the System will expect you to use TLS by default. You can \u003ca href=\"https://android-developers.googleblog.com/2018/08/introducing-android-9-pie.html\"\u003eread more about this here\u003c/a\u003e.  There are several ways around this issue, among them:\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSolution 1. In your \u003cem\u003eprocessResults(results)\u003c/em\u003e in the ...service.java class, you can convert the already received the url from a \u003cem\u003ehttp \u003c/em\u003escheme into a \u003cem\u003ehttps \u003c/em\u003escheme using the replace function, i.e \u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003eString newUrlString = API-Url\u003cspan class=\"pl-k\"\u003e.\u003c/span\u003ereplace(\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ehttp\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e,\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ehttps\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e);  //API-Url being the variable holding the value of the url retrieved from your respective API\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eThen use the \u003cem\u003enewUrlString \u003c/em\u003evariable as your new imageUrl variable to construct your object. The new Url will eventually be used by picasso as a parameter in making a successful fetch-image request. \u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eSolution 2.  This is manly meant formbig projects where changing every re-formatting every url may prove inefficient. Set a \u003ccode\u003enetworkSecurityConfig\u003c/code\u003e in your Manifest \u003ccode\u003eapplication\u003c/code\u003e tag like this:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre class=\"lang-java prettyprint prettyprinted\"\u003e\u003ccode\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003emanifest \u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003eapplication android\u003c/span\u003e\u003cspan class=\"pun\"\u003e:\u003c/span\u003e\u003cspan class=\"pln\"\u003enetworkSecurityConfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"@xml/network_security_config\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\r\n\r\n\r\n\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003eapplication\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003emanifest\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen in your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003exml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efolder you now have to create a file named\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enetwork_security_config\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust like the way you have named it in the Manifest and from there the content of your file should be like this to enable all requests without encryptions:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eres/xml/network_security_config.xml\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre class=\"lang-java prettyprint prettyprinted\"\u003e\u003ccode\u003e\u003cspan class=\"pun\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"pln\"\u003exml version\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"1.0\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e encoding\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"utf-8\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003enetwork\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003esecurity\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003ebase\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig cleartextTrafficPermitted\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"true\"\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003etrust\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003eanchors\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n            \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pln\"\u003ecertificates src\u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"str\"\u003e\"system\"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003etrust\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003eanchors\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003ebase\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pln\"\u003enetwork\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003esecurity\u003c/span\u003e\u003cspan class=\"pun\"\u003e-\u003c/span\u003e\u003cspan class=\"pln\"\u003econfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFrom there you are good to go. Now your app will make requests for all types of connections. For additional information \u003ca href=\"https://developer.android.com/training/articles/security-config\"\u003eread-up-on-the-process-here.\u003c/a\u003e  \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e \u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/10_picasso\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"weekend-threading-and-the-ui-thread","title":"Weekend: Threading and the UI Thread","type":"WikiPage","content":"\u003cp\u003eIn this lesson we'll update our MyRestaurants application to display the names of the restaurants received from the Yelp API instead of the hard-coded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray in RestaurantsActivity.\u003c/p\u003e\r\n\u003cp\u003ePreviously, we created an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand attached it to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003emethod. However, now that we're relying on the Yelp API, we cannot actually display any restaurants until\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe've successfully received a response. In order to ensure these things are handled gracefully and in the correct order, we'll need to explore a concept called threading.\u003c/p\u003e\r\n\u003ch2\u003eThreads and Multi-Threading\u003c/h2\u003e\r\n\u003cp\u003eIn programming, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ethread\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the execution of instructions that can be managed independently. For instance, following a recipe to make pancakes in the morning can be considered a metaphorical \"thread\".\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eMulti-threading\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply a program executing multiple threads at once. Let's say you're simultaneously making coffee\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhile\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecooking pancakes. That's multi-threading.\u003c/p\u003e\r\n\u003ch2\u003eThreading in Android\u003c/h2\u003e\r\n\u003cp\u003eWhen an Android application is launched, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emain thread\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis always created. This thread is in charge of the user interface. Every additional component is also run on this thread, unless explicitly instructed otherwise.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eIt is also the only thread that may update the user interface\u003c/strong\u003e. For this reason, it's also often referred to as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUI thread\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eIt's\u003cspan\u003e \u003c/span\u003e\u003cem\u003ereally\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eimportant not to slow down the main thread with lengthy processes. If tons of complex code is executed on the main thread, it can get held up. This results in poor performance: Apps can slow down, freeze, or even crash entirely.\u003c/p\u003e\r\n\u003cp\u003eAs we know, OkHttp and SignPost manage the complex process of contacting Yelp. Because creating OAuth signatures, requesting data, and waiting for a response all take time, OkHttp completes this work on a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ebackground\u003c/strong\u003e, or\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eworker thread\u003c/strong\u003e. This is an additional thread, separate from our main thread, that may execute code. By keeping API requests off our main/UI thread, our application remains performant and responsive.\u003c/p\u003e\r\n\u003ch3\u003eThreading in MyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eCurrently, our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback is triggered as soon as we receive data from the Yelp API. In this callback, we run our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.processResults()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to parse JSON, create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects, and return an array of each new object.\u003c/p\u003e\r\n\u003cp\u003eAfter this occurs, we need to update our RestaurantsActivity's corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003eshow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user these restaurants. But how do we do this?\u003c/p\u003e\r\n\u003cp\u003eBecause\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a callback executed by OkHttp, it's actually running on that background thread OkHttp creates. And, we can\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eonly alter the user interface from the main/UI thread.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eSo, we can't add code to display our restaurants in the callback. If we tried, our app would crash and we would receive an error reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod always occurs on the main/UI thread. But we can't set the adapter and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display our list of restaurants there either. Because\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis executed\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe complete our API request, we simply don't have the information to display yet.\u003c/p\u003e\r\n\u003cp\u003eIn order to ensure everything occurs in the correct order and thread we'll need to wait until our restaurant information is successfully returned, then explicitly instruct our app to return to the UI thread where we can alter the user interface, and display restaurants to the user.\u003c/p\u003e\r\n\u003ch2\u003eSwitching to UI Thread\u003c/h2\u003e\r\n\u003cp\u003eThankfully, this is such a common conundrum that there's a built-in method in Android to do this:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.runOnUiThread()\u003c/code\u003e. As described in its\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#runOnUiThread(java.lang.Runnable)\"\u003edocumentation entry\u003c/a\u003e, this method takes something called a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument, and places all code within it in the UI thread.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an interface meant to handle sharing code between threads. It has only one method:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erun()\u003c/code\u003e. This method contains the code we want to run on the thread specified.\u003c/p\u003e\r\n\u003cp\u003eWe'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.runOnUiThread()\u003c/code\u003e, and override its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erun()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n  ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n        ...\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        }\r\n\r\n                    }\r\n            ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eAdditionally, \u003c/span\u003e\u003cstrong\u003enotice we've removed the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003etry\u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u003c/span\u003e\u003cspan class=\"kwd\"\u003ecatch\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock from the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback\u003c/strong\u003e\u003cspan\u003e in \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e. We originally introduced this \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003etry\u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u003c/span\u003e\u003cspan class=\"kwd\"\u003ecatch\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e in the \u003c/span\u003e\u003ca href=\"pages/weekend-api-requests-and-responses?module_item_id=i2c373f4e22f011d0470b0a1a6daf3d83\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/weekend-api-requests-and-responses\" data-api-returntype=\"Page\"\u003eAPI Requests and Responses\u003c/a\u003e\u003cspan\u003e lesson \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e we wrote a method to parse our data. However, we now have a \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003etry\u003c/span\u003e\u003cspan class=\"pun\"\u003e/\u003c/span\u003e\u003cspan class=\"kwd\"\u003ecatch\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e block in Yelp Service's \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eprocessResults\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e method to handle any exceptions. Because \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eprocessResults\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e is being called right here in \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e, we don't need to catch exceptions twice.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eWhen a user navigates to the RestaurantsActivity, we want them to see a list of restaurant names specific to the zip code they entered in the MainActivity. Let's create a list of these names here:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        String[] restaurantNames = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[mRestaurants.size()];\r\n                        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; restaurantNames.length; i++) {\r\n                            restaurantNames[i] = mRestaurants.get(i).getName();\r\n                        }\r\n             ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we can create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto pass our data to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e. The resulting code should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        String[] restaurantNames = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[mRestaurants.size()];\r\n                        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; i \u0026lt; restaurantNames.length; i++) {\r\n                            restaurantNames[i] = mRestaurants.get(i).getName();\r\n                        }\r\n\r\n                        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \r\n                           android.R.layout.simple_list_item_1, restaurantNames);\r\n                        mListView.setAdapter(adapter);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eRefactoring\u003c/h3\u003e\r\n\u003cp\u003eWe can also refactor by removing the following code:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eRemove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray of hard-coded restaurant names, \u003cspan\u003eif you haven't already done so.\u003c/span\u003e We're now receiving restaurant names directly from the Yelp API.\u003c/li\u003e\r\n\u003cli\u003eRemove any lines creating or setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. We're now creating and setting adapters in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRunnable\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.run()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResponse()\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eRemove our click listener that displays a toast with the restaurant name from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e. We'll no longer need this feature. In the next few lessons we'll program our app to navigate to a detail page when the user selects a restaurant.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eBecause our user Interface is only displaying restaurant\u003cspan\u003e \u003c/span\u003e\u003cem\u003enames\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(for now) let's log the other attributes of each restaurant to ensure they've been correctly saved too.\u003c/p\u003e\r\n\u003cp\u003eAfter all changes described here, RestaurantsActivity should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eRestaurantsActivity \u003cspan\u003eextends \u003c/span\u003eAppCompatActivity {\u003cbr\u003e    \u003cspan\u003epublic static final \u003c/span\u003eString \u003cspan\u003eTAG \u003c/span\u003e= RestaurantsActivity.\u003cspan\u003eclass\u003c/span\u003e.getSimpleName()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003elocationTextView\u003c/span\u003e) TextView \u003cspan\u003emLocationTextView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003elistView\u003c/span\u003e) ListView \u003cspan\u003emListView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eArrayList\u0026lt;Restaurant\u0026gt; \u003cspan\u003erestaurants \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eArrayList\u0026lt;\u0026gt;()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e(Bundle savedInstanceState) {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetContentView(R.layout.\u003cspan\u003eactivity_restaurants\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eButterKnife.\u003cspan\u003ebind\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eIntent intent = getIntent()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eString location = intent.getStringExtra(\u003cspan\u003e\"location\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emLocationTextView\u003c/span\u003e.setText(\u003cspan\u003e\"Here are all the restaurants near: \" \u003c/span\u003e+ location)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003egetRestaurants(location)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003eprivate void \u003c/span\u003e\u003cspan\u003egetRestaurants\u003c/span\u003e(String location){\u003cbr\u003e        \u003cspan\u003efinal \u003c/span\u003eYelpService yelpService = \u003cspan\u003enew \u003c/span\u003eYelpService()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eyelpService.\u003cspan\u003efindRestaurants\u003c/span\u003e(location\u003cspan\u003e, new \u003c/span\u003eCallback(){\u003cbr\u003e\u003cbr\u003e            \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonFailure\u003c/span\u003e(Call call\u003cspan\u003e, \u003c/span\u003eIOException e){\u003cbr\u003e                e.printStackTrace()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e            \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonResponse\u003c/span\u003e(Call call\u003cspan\u003e, \u003c/span\u003eResponse response) \u003cspan\u003ethrows \u003c/span\u003eIOException {\u003cbr\u003e                \u003cspan\u003erestaurants \u003c/span\u003e= \u003cspan\u003eyelpService\u003c/span\u003e.processResults(response)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eRestaurantsActivity.\u003cspan\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan\u003enew \u003c/span\u003eRunnable() {\u003cbr\u003e                    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003erun\u003c/span\u003e() {\u003cbr\u003e                      String[] restaurantNames = \u003cspan\u003enew \u003c/span\u003eString[\u003cspan\u003erestaurants\u003c/span\u003e.size()]\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                      for\u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003ei = \u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e; \u003c/span\u003ei\u0026lt;restaurantNames.\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003ei++){\u003cbr\u003e                          restaurantNames[i]=\u003cspan\u003erestaurants\u003c/span\u003e.get(i).getName()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                      \u003c/span\u003e}\u003cbr\u003e                      ArrayAdapter adapter = \u003cspan\u003enew \u003c/span\u003eArrayAdapter(RestaurantsActivity.\u003cspan\u003ethis, \u003c/span\u003eandroid.R.layout.\u003cspan\u003esimple_list_item_1\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003erestaurantNames)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                      \u003c/span\u003e\u003cspan\u003emListView\u003c/span\u003e.setAdapter(adapter)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        for \u003c/span\u003e(Restaurant restaurant : \u003cspan\u003erestaurants\u003c/span\u003e) {\u003cbr\u003e                            Log.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Name: \" \u003c/span\u003e+ restaurant.getName())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Phone: \" \u003c/span\u003e+ restaurant.getPhone())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Website: \" \u003c/span\u003e+ restaurant.getWebsite())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Image url: \" \u003c/span\u003e+ restaurant.getImageUrl())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Rating: \" \u003c/span\u003e+ Double.\u003cspan\u003etoString\u003c/span\u003e(restaurant.getRating()))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Address: \" \u003c/span\u003e+ android.text.TextUtils.\u003cspan\u003ejoin\u003c/span\u003e(\u003cspan\u003e\", \"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003erestaurant.getAddress()))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                            \u003c/span\u003eLog.\u003cspan\u003ed\u003c/span\u003e(\u003cspan\u003eTAG\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Categories: \" \u003c/span\u003e+ restaurant.getCategories().toString())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                        \u003c/span\u003e}\u003cbr\u003e                    }\u003cbr\u003e                })\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        })\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e}\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.text.TextUtils.join(\", \", restaurant.getAddress())\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just a nice little shortcut to join\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLists\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayLists\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Android.\u003c/p\u003e\r\n\u003cp\u003eNow let's run our app and we should see a new list of restaurants on our RestaurantActivity and a bunch of corresponding data in the logcat. Good work!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e\u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eThread\u003c/strong\u003e: The execution of instructions that can be managed independently.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMulti-threading\u003c/strong\u003e: A program executing multiple threads at once.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eMain Thread\u003c/strong\u003e: The default, primary thread created anytime an Android application is launched. Also known as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUI thread\u003c/strong\u003e, it is in charge of handling all user interface and activities, unless otherwise specified.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an interface meant to handle sharing code between threads. It contains only one method:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erun()\u003c/code\u003e. This method generally contains the code we want to run on the thread specified.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/processes-and-threads.html\"\u003eProcesses and Threads\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOkHttp Documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/square/okhttp/wiki/Concurrency\"\u003eThreading in OkHttp\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eStack Overflow discussion regarding\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://stackoverflow.com/questions/24246783/okhttp-response-callbacks-on-the-main-thread\"\u003eAltering UI in OkHttp Callbacks\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-preparing-apps-for-production","title":"Thursday:Preparing Apps for Production","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003ePreparing Apps For Production\u003c/h1\u003e\r\n\u003cp\u003e\u003cspan\u003eAfter all your hard work developing Android applications, you’re probably ready to begin showing them off! This lesson will help curate the resources and instructions necessary to begin releasing your applications to the world.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch2\u003eGoogle Play Developer Accounts\u003c/h2\u003e\r\n\u003cp\u003eAs you may already know, the primary marketplace for Android applications is the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps?hl=en\"\u003eGoogle Play store\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eTo publish your own applications on Google Play you must first register for a Google Play Developer account. Registering costs a one-time fee of $25. You are not required to attain a paid Google Play Developer account for this course, but it’s highly recommended to do so.\u003c/p\u003e\r\n\u003cp\u003eTo register visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/apps/publish/signup/#\"\u003eSign Up section in the Google Play Developer Console\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eLaunch Checklist\u003c/h2\u003e\r\n\u003cp\u003eBefore beginning the publishing process, thoroughly review the Android\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/distribute/tools/launch-checklist.html\"\u003eLaunch Checklist\u003c/a\u003e. This checklist contains everything you need to know in order to prepare, package, and publish an application for distribution. Plan to follow this resource step-by-step when you’re ready to publish your first app.\u003c/p\u003e\r\n\u003ch2\u003eSigning your Application\u003c/h2\u003e\r\n\u003cp\u003eAs you’ll see, many of the steps in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/distribute/tools/launch-checklist.html\"\u003eLaunch Checklist\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efocus on preparatory tasks such as reviewing policies and agreements, double-checking your application meets quality expectations, and determining content for your app’s listing (countries, price, rating, description, size, compatibility, promotional graphics, etc.). This steps describes the process of actually packaging and uploading your application to the Play Store, which is widely considered the most challenging part.\u003c/p\u003e\r\n\u003cp\u003eApplications must be uploaded to Google Play as an APK (Android Package) file (This is currently undergoing some changes though). This file must also be “signed” with a unique certificate. Similar to the way your ID card, passport or driver’s license identifies your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eperson\u003c/em\u003e, this unique certificate identifies you as the original author/owner of an Android application. You will also be required to verify your identity with this same certificate in order to make future updates to the application.\u003c/p\u003e\r\n\u003cp\u003eThese certificates are sometimes referred to as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epublic-key certificates\u003c/strong\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edigital certificates\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eidentity certificates\u003c/strong\u003e. In the context of publishing Android applications, know that these all refer to the same thing. Also, this certificate information resides in a binary file called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ekeystore\u003c/strong\u003e. You will see these terms appear throughout the Android documentation.\u003c/p\u003e\r\n\u003ch2\u003eCreating a Certificate\u003c/h2\u003e\r\n\u003cp\u003eIf this is your first time publishing an app, you likely don’t have a certificate in a special keystore file yet. You can follow the instructions detailed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/publish/app-signing.html\"\u003eSign Your App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle (also linked in the Launch Checklist) to attain one. While this article walks through the entire process of creating and using a certificate, there are several important points we’d like to emphasize:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAlways remove signing information from your build files!\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWhen you sign your application through Android Studio using the instructions linked above, it may add your signing information to your\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles in plain text. Remove this from the build files so others may not access it. You may do so by following the instructions\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/publish/app-signing.html#secure-shared-keystore\"\u003ehere\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto create a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekeystore.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to hold this sensitive information.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not commit the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ekeystore.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to GitHub, or you will risk publishing your sensitive signing information publically\u003c/strong\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAlways, always, always keep your keystore file and its corresponding password.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAs mentioned, this keystore is used to confirm your identity as the application’s original author.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDo not lose it, or you won't have access to later update your application.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you create your certificate, sign, and publish your application on one machine and would later like to update your app from a\u003cspan\u003e \u003c/span\u003e\u003cem\u003edifferent machine\u003c/em\u003e, you will need to provide the same keystore information to verify your identity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eIf you generate a keystore at Epicodus, make sure to save it somewhere you can access later\u003c/strong\u003e. Similar to the point above, you\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003emust always keep your keystore file and remember its corresponding password\u003c/strong\u003e. Epicodus computers wipe their contents each night. So make sure to save any keystore files you generate at Epicodus somewhere you may access later. On a flash drive, for instance. (Remember, you\u003cspan\u003e \u003c/span\u003e\u003cem\u003edon’t\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewant to publish this information to GitHub!)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eYou may use the same keystore in different applications.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDon’t worry, you won’t have to go through the process of creating a new certificate in a new keystore every time you publish an application. As long as the applications have different package names, you can continue to use the same certificate to sign multiple apps.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"thursday-using-the-camera-and-saving-images-to-firebase","title":"Thursday:Using the Camera and Saving Images to Firebase","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eUsing the Camera and Saving Images to Firebase\u003c/h1\u003e\r\n\u003cp\u003eOur MyRestaurants application is essentially complete! All features we set out to include have been implemented: Users can look up restaurants in their zip code, create secure and personalized accounts, log in and out, and save restaurants to their own custom list in Firebase. We've even included a flexible user interface that can display our content in the best manner for the device's current orientation, and hide any irrelevant elements depending on where the user is viewing a restaurant's details.\u003c/p\u003e\r\n\u003cp\u003eNow, how about exploring extra features? It's becoming more and more common to take pictures of the delicious dishes you receive at restaurants. Let's support custom user photos in MyRestaurants, allowing users to take their own thumbnail photos for their saved restaurant's listings in the application.\u003c/p\u003e\r\n\u003ch2\u003eCamera Menu Option\u003c/h2\u003e\r\n\u003ch3\u003eIcon\u003c/h3\u003e\r\n\u003cp\u003eFirst, let's make sure to include a button on our menu to indicate to users that a photo option is available. Download Google Material's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/#ic_camera_alt\"\u003ecamera-alt\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eicon. Select the white PNG option, and place each size included in its corresponding sub-directory in\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/n36g3e3ibzaihjt/completed-icon-directories.png\" alt=\"completed-icon-directory\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eLayout\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a new menu in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eresource directory. We'll call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu_photo.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand place the following inside:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003emenu_photo.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_photo\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_camera_alt_white_24dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"always\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Photo\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll need to inflate this new menu in our RestaurantDetailFragment. Confirm that the following line allowing menu options is present. If not, add it now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's inflate our new menu, and include logic to handle user interactions with the menu options:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu, MenuInflater inflater)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu, inflater);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mSource.equals(Constants.SOURCE_SAVED)) {\r\n            inflater.inflate(R.menu.menu_photo, menu);\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            inflater.inflate(R.menu.menu_main, menu);\r\n        }\r\n    }\r\n\r\n       \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eswitch\u003c/span\u003e (item.getItemId()) {\r\n            \u003cspan class=\"hljs-keyword\"\u003ecase\u003c/span\u003e R.id.action_photo:\r\n                onLaunchCamera();\r\n            \u003cspan class=\"hljs-keyword\"\u003edefault\u003c/span\u003e:\r\n                \u003cspan class=\"hljs-keyword\"\u003ebreak\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include a conditional statement in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat only inflates the photo menu if the user has navigated to RestaurantDetailFragment from the \"Saved Restaurants\" list. If they did not, only the main menu is inflated.\u003c/p\u003e\r\n\u003cp\u003eThen, in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe include a switch statement that will trigger a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonLaunchCamera()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the user selects the photo icon from the menu. We'll write this method momentarily.\u003c/p\u003e\r\n\u003cp\u003eAt this point, we should be able to launch the application, navigate to the detail view of one of our saved restaurants, and see a new photo icon in the menu:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/3u8wnpfi74q7rss/new-camera-icon.png\" alt=\"camera-button-portrait\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eLaunching the Camera\u003c/h2\u003e\r\n\u003cp\u003eNext, let's define the method we will call when the user selects the camera icon from their menu:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonLaunchCamera\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        Intent takePictureIntent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (takePictureIntent.resolveActivity(getActivity().getPackageManager()) != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe set up our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, providing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMediaStore.ACTION_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a parameter. This is an\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/wednesday-implicit-intents?module_item_id=i395fbc4796bb4258cbf441d02a355a34\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/wednesday-implicit-intents\" data-api-returntype=\"Page\"\u003eimplicit intent\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat will instruct Android to automatically access the device's camera.\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/provider/MediaStore.html\" target=\"_blank\"\u003eMediaStore\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis a built-in Android class that handles all things media, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE\" target=\"_blank\"\u003e\u003ccode\u003eACTION_IMAGE_CAPTURE\u003c/code\u003e\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis the standard intent that accesses the device's camera application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe include a conditional that checks if\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etakePictureIntent.resolveActivity(getPackageManager())\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edoes\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eequal\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresolveActivity(getPackageManager())\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the first component capable of handling our intent. Essentially, it's ensuring a camera app is available and accessible. It's important to perform this check, because if we launch our intent and there is no camera application present to handle it, our app will crash.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elaunches our intent, indicating that we'd like a result returned from it. In our case, we launch the camera, and retrieve the resulting image. This method takes our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e, and the constant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould be an integer value. If it is greater than 1, the result of the action we are launching will be returned automatically in a callback method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonActivityResult()\u003c/code\u003e, which we will define momentarily. This value may also be used to identify specific results when multiple implicit intents are being triggered, and returning multiple pieces of information back into the app. Because we are only handling\u003cspan\u003e \u003c/span\u003e\u003cem\u003eone\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esuch intent, this constant may be any number greater than 0. For more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent,%20int,%20android.os.Bundle)\" target=\"_blank\"\u003eAndroid Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor this method.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eLet's make sure this constant is defined at the top of our class now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBaseFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e REQUEST_IMAGE_CAPTURE = \u003cspan class=\"hljs-number\"\u003e111\u003c/span\u003e;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs we just discussed,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill automatically trigger the callback method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonActivityResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the result of our activity is available. (In our case, a picture the user has taken). We'll override this method in order to snag our picture:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonActivityResult\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e requestCode, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e resultCode, Intent data)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (requestCode == REQUEST_IMAGE_CAPTURE \u0026amp;\u0026amp; resultCode == getActivity().RESULT_OK) {\r\n            Bundle extras = data.getExtras();\r\n            Bitmap imageBitmap = (Bitmap) extras.get(\u003cspan class=\"hljs-string\"\u003e\"data\"\u003c/span\u003e);\r\n            mImageLabel.setImageBitmap(imageBitmap);\r\n            encodeBitmapAndSaveToFirebase(imageBitmap);\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eonActivityResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains the following information:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequestCode\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter represents the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue we provided in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod that launched this activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresultCode\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eparameter represents the status of the activity (ie: whether it was successfully completed, cancelled, etc.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject that includes intent extras containing the information being returned. In our case, an image.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThis in mind, we're doing the following in the code above:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eDouble-check that the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erequestCode\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ematches our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eREQUEST_IMAGE_CAPTURE\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstant. This confirms that the information being returned is indeed from the request we executed in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivityForResult()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetExtras();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to retrieve the intent extras it contains.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimageBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the intent extra information under the key \"data\". (This is our image)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003emImageLabel.setImageBitmap(imageBitmap);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets our detail view's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto contain the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimageBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject returned from the camera. This immediately places the new photo in the detail view.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then call a custom method that will encode our image in Base64 and save it to Firebase. Even though the previous line of code immediately sets the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e, we must still save it to Firebase if we'd like it to remain there when we re-open the app.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eBase 64 Encoding\u003c/h2\u003e\r\n\u003cp\u003eThankfully, our existing Firebase database is capable of storing images in several formats. In this lesson we'll use Base64.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBase64\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a format of binary-to-text encoding. Essentially, this just means that the very binary of the object being encoded is turned into a really long string. Firebase has very recently begun supporting\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/storage/\" target=\"_blank\"\u003eother formats\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eof photo and videos, too.\u003c/p\u003e\r\n\u003cp\u003eConvenient for our purposes, both Android and Firebase have built-in tools to help manage encoding and decoding objects in Base64. We'll use them in order to process this image, save it to Firebase, and later retrieve and decode it.\u003c/p\u003e\r\n\u003ch3\u003eSaving Encoded Images\u003c/h3\u003e\r\n\u003cp\u003eIn the above code, we called a method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eencodeBitmapAndSaveToFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the photo we gathered. Let's write that method now:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eencodeBitmapAndSaveToFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bitmap bitmap)\u003c/span\u003e \u003c/span\u003e{\r\n       ByteArrayOutputStream baos = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, \u003cspan class=\"hljs-number\"\u003e100\u003c/span\u003e, baos);\r\n        String imageEncoded = Base64.encodeToString(baos.toByteArray(), Base64.DEFAULT);\r\n        DatabaseReference ref = FirebaseDatabase.getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(FirebaseAuth.getInstance().getCurrentUser().getUid())\r\n                .child(mRestaurant.getPushId())\r\n                .child(\u003cspan class=\"hljs-string\"\u003e\"imageUrl\"\u003c/span\u003e);\r\n        ref.setValue(imageEncoded);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eByteArrayOutputStream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject and name it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebaos\u003c/code\u003e. The name has no special meaning, it's simply a common go-to naming convention for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eByteArrayOutputStream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects. As described in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/java/io/ByteArrayOutputStream.html\" target=\"_blank\"\u003eAndroid documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethis object is simply a place where we may temporarily store our data while working with it.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe compress our image using Android's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompress()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. The first argument specifies the format the image should be in. The second argument indicates the quality we'd like to save the image in (this is a 1-100 scale; 100 being the highest possible quality). The third argument represents the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eByteArrayOutputStream\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe've just created, which is where Android will place this compressed information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eNext, we use the built-in Firebase method to encode this array of bytes into a long Base64 string. In the arguments, we turn the information we've placed in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebaos\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto an array of individual bytes, and specify the type of encoding we'd like to use (the default Base64).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we locate the node containing the current image URL for this specific restaurant on this specific user's saved restaurants list, and overwrite it with our new, encoded image.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, we should be able to launch the application, select our camera icon, and take an image. Then, if we navigate to this specific restaurant's node in the current user's saved restaurants, we can see that the URL from the Yelp API has been replaced with a long, Base64 encoded string!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/zbt0kg5cfzcdzkg/base64-in-firebase.png\" alt=\"base-64-in-firebase\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you have any issue taking a photograph in your Android emulator, double-check that your emulator has been set up to utilize the computer's webcam as it's camera application, as depicted in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework4.html\" target=\"_blank\"\u003ethis video\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eIf we navigate away from our SavedRestaurantsListActivity however, you will notice that our the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eimageUrl\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eproperty resets back to the original URL provided by Yelp. This is because we're currently resetting the entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in our FirebaseRestaurantListAdapter. We hadn't yet needed to reset a specific property. Let's change our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetIndexInFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod so that we only ever set the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eindex\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eproperty rather than reset the entire object:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetIndexInFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (Restaurant restaurant : mRestaurants) {\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e index = mRestaurants.indexOf(restaurant);\r\n            DatabaseReference ref = getRef(index);\r\n            ref.child(\u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e).setValue(Integer.toString(index));\r\n        }\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRetrieving and Decoding Images\u003c/h2\u003e\r\n\u003cp\u003eNow that our images are encoded and saved in Firebase, we need to be able to de-code them to retrieve them and display them back into our application.\u003c/p\u003e\r\n\u003ch3\u003eList View\u003c/h3\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in FirebaseRestaurantViewHolder currently contains logic for using the Picasso library to handle image resizing in the \"Saved Restaurants\"\u003cspan\u003e \u003c/span\u003e\u003cem\u003elist\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eview. Let's also handle decoding our images here:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!restaurant.getImageUrl().contains(\u003cspan class=\"hljs-string\"\u003e\"http\"\u003c/span\u003e)) {\r\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                Bitmap imageBitmap = decodeFromFirebaseBase64(restaurant.getImageUrl());\r\n                mRestaurantImageView.setImageBitmap(imageBitmap);\r\n            } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            \u003cspan class=\"hljs-comment\"\u003e// This block of code should already exist, we're just moving it to the 'else' statement:\u003c/span\u003e\r\n            Picasso.get().load(restaurant.getImageUrl()).into(mRestaurantImageView);\r\n            nameTextView.setText(restaurant.getName());\r\n            categoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            ratingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n        mNameTextView.setText(restaurant.getName());\r\n        mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n        mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we check if the image url returned from the database does\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtains \"http\". Because our application returns the image URL available from the Yelp API by default, we know that if \"http\" is not included in the image saved in our database, then it's\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe URL to Yelp, and must be one of our encoded images.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe define a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject called image, and set it to the equivalent of running\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edecodeFromFirebaseBase64()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which we will write in a moment) on the encoded string. We then set the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith our newly-decoded image. We've also included some error handling in the case that this doesn't work as expected.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf the image\u003cspan\u003e \u003c/span\u003e\u003cem\u003edoes\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econtain \"http\", we execute the same block of code using Picasso that we did previously.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e*We then set the text in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003es as normal.\u003c/p\u003e\r\n\u003cp\u003eNext, let's write the method responsible for decoding Base64:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e Bitmap \u003cspan class=\"hljs-title\"\u003edecodeFromFirebaseBase64\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String image)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ebyte\u003c/span\u003e[] decodedByteArray = android.util.Base64.decode(image, Base64.DEFAULT);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e BitmapFactory.decodeByteArray(decodedByteArray, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, decodedByteArray.length);\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eHere, we simply take the encoded image's string, and use the built-in firebase utility to decode it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback \u003c/em\u003einto a byte array.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThen we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003edecodeByteArray()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod built-in to Android's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmapFactory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, as described\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/graphics/BitmapFactory.html#decodeByteArray(byte%5B%5D,%20int,%20int)\" target=\"_blank\"\u003ehere\u003c/a\u003e, to turn this byte array back into a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBitmap\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eimage. The first argument is the byte array itself. The second argument is the position in the array the method should begin decoding at (\u003cem\u003eeverything\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein this array is our image, so we simply start at 0), and the number of places in the array that should be decoded (again,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eeverything\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the array is our image, so we instruct it to decode the entire length.)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIf we launch our application, we should be able to take our own custom picture for one of our saved restaurants, navigate away, and return to \"Saved Restaurants\" and still see it in our list!\u003c/p\u003e\r\n\u003ch3\u003eDetail View\u003c/h3\u003e\r\n\u003cp\u003eAgain, the code we've just added handles decoding our custom images in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003elist\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof all saved restaurants. We also want our custom images to appear in the restaurant's individual detail view. Let's handle that now!\u003c/p\u003e\r\n\u003cp\u003eWe'll include some very similar logic in the RestaurantDetailFragment's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!mRestaurant.getImageUrl().contains(\u003cspan class=\"hljs-string\"\u003e\"http\"\u003c/span\u003e)) {\r\n            \u003cspan class=\"hljs-keyword\"\u003etry\u003c/span\u003e {\r\n                Bitmap image = decodeFromFirebaseBase64(mRestaurant.getImageUrl());\r\n                mImageLabel.setImageBitmap(image);\r\n            } \u003cspan class=\"hljs-keyword\"\u003ecatch\u003c/span\u003e (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n            \u003cspan class=\"hljs-comment\"\u003e// This block of code should already exist, we're just moving it to the 'else' statement:\u003c/span\u003e\r\n            Picasso.get()\u003cbr\u003e                    .load(mRestaurant.getImageUrl())\u003cbr\u003e                    .into(mImageLabel);\r\n        }\r\n    ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd define the same method for decoding from RestaurantViewHolder here in RestaurantDetailFragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e Bitmap \u003cspan class=\"hljs-title\"\u003edecodeFromFirebaseBase64\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String image)\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003ethrows\u003c/span\u003e IOException \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ebyte\u003c/span\u003e[] decodedByteArray = android.util.Base64.decode(image, Base64.DEFAULT);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e BitmapFactory.decodeByteArray(decodedByteArray, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e, decodedByteArray.length);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we should be able to run the application, add a custom photo to a saved restaurant, navigate away from this restaurant, and see that our image is\u003cspan\u003e \u003c/span\u003e\u003cem\u003estill there\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eif we later come back to it We can even re-boot the emulator, and our image will still be there!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/fb22agcdo889sa1/custom-image-saved.png\" alt=\"custom-image\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eManifest Options\u003c/h2\u003e\r\n\u003cp\u003eNow that our application uses the camera feature on our users' devices, let's make sure to detail this accordingly in our manifest.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAndroidManifest.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003epackage\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-permission\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.permission.INTERNET\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003euses-feature\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.hardware.camera\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:required\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we include the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;uses-feature android:name=\"android.hardware.camera\" android:required=\"false\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto declare that our application uses the camera. As explained in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/manifest/uses-feature-element.html\"\u003eAndroid Documentation\u003c/a\u003e, the\u003cspan\u003e \u003c/span\u003elist in our manifest corresponds to the set of feature constants made available by the Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ePackageManager\u003c/code\u003e. Each feature an app uses must be specified on its own line.\u003c/p\u003e\r\n\u003cp\u003eYou may also notice that the above code sets\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid:required\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efalse\u003c/code\u003e. This means that while our application\u003cspan\u003e \u003c/span\u003e\u003cem\u003euses\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe camera, use of the camera isn't downright required to run the application. If we had instead set this to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etrue\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#weekend-three.html\"\u003epublished\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eour app on the Google Play, it would only be displayed to devices that had camera access.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-size: 18pt;\"\u003ePreventing Data Duplication of Restaurant Objects In Database\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eOur Restaurant app is almost done save for one issue, when a user is saving restaurants, one can save the same restaurants as many times as possible. This can result in the abuse of resources and unnecessarily extra charges especially in an enterprise application where Firebase charges you (application owner) based on Storage memory consumed on Firebase and amount of downloaded data. \u003cspan\u003e(Note that SSL handshake, protocol and encryption is also counted in downloaded data). Uploading data to the cloud is completely free.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirebase Database SDK works offline if we enable persistence:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre id=\"1d9a\" class=\"graf graf--pre graf-after--p\"\u003e\u003cstrong class=\"markup--strong markup--pre-strong\"\u003eval database \u003c/strong\u003e= FirebaseDatabase.getInstance()\u003cbr\u003edatabase.setPersistenceEnabled(\u003cstrong class=\"markup--strong markup--pre-strong\"\u003etrue\u003c/strong\u003e)\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eEnabling persistence allows normal operation of the app while the user is not connected to the internet, Firebase keeps a local cache with the favorites and if the user makes any change, changes will be propagated to the cloud next time internet is available. But we won't get into that right now. Lets fix our app so the user can't save the same restaurant twice. The newly added code will be explained in the comments within the code block.\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eRestaurantDetailFragment.java\u003cbr\u003e   \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public void \u003c/span\u003e\u003cspan\u003eonClick\u003c/span\u003e(View v){\u003cbr\u003e    ...\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003e    if \u003c/span\u003e(v == \u003cspan\u003emSaveRestaurantButton\u003c/span\u003e) {\u003cbr\u003e    FirebaseUser user = FirebaseAuth.\u003cspan\u003egetInstance\u003c/span\u003e().getCurrentUser()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eString uid = user.getUid()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    final \u003c/span\u003eDatabaseReference restaurantRef = FirebaseDatabase\u003cbr\u003e            .\u003cspan\u003egetInstance\u003c/span\u003e()\u003cbr\u003e            .getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e)\u003cbr\u003e            .child(uid)\u003cspan\u003e;\u003cbr\u003e\u003cbr\u003e    // The String 'name' variable below stores the name-property of the currently selected restaurant object.\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003eString name = \u003cspan\u003emRestaurant\u003c/span\u003e.getName()\u003cspan\u003e;\u003cbr\u003e\u003cbr\u003e    // We then use the databasereference above 'restaurantRef' where we attach the addValueEventListener to \u003cbr\u003e    // search in the restaurants node in the databe for a restaurant with the same name,\u003cbr\u003e    // and if the restaurant exists then it will give you the Toast message that the currently selected restaurant exists.\u003cbr\u003e    // else (if the name of the selected restaurant doesn't exist) the code to save the selected restaurant will run.\u003cbr\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003erestaurantRef.orderByChild(\u003cspan\u003e\"name\"\u003c/span\u003e).equalTo(name).addValueEventListener(\u003cspan\u003enew \u003c/span\u003eValueEventListener() {\u003cbr\u003e        \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonDataChange\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eDataSnapshot dataSnapshot) {\u003cbr\u003e            \u003cspan\u003eif\u003c/span\u003e(dataSnapshot.exists()) {\u003cbr\u003e                Toast.\u003cspan\u003emakeText\u003c/span\u003e(getContext()\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Currently Selected Restaurant already exists\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eToast.\u003cspan\u003eLENGTH_LONG\u003c/span\u003e).show()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                return;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e} \u003cspan\u003eelse\u003c/span\u003e{\u003cbr\u003e                DatabaseReference pushRef = \u003cspan\u003erestaurantRef\u003c/span\u003e.push()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eString pushId = pushRef.getKey()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003emRestaurant\u003c/span\u003e.setPushId(pushId)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003epushRef.setValue(\u003cspan\u003emRestaurant\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                \u003c/span\u003eToast.\u003cspan\u003emakeText\u003c/span\u003e(getContext()\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e\"Saved\"\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eToast.\u003cspan\u003eLENGTH_SHORT\u003c/span\u003e).show()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e}\u003cbr\u003e        }\u003c/pre\u003e\r\n\u003cp\u003eSo if we ran the application and try to save the same restaurant twice, you should receive a toast informing you that the restaurant already exists in your saved restaurant list, otherwise the restaurant will be saved. Good Work.\u003c/p\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003cstrong\u003eExample Github Repo for MyRestaurants (Data Duplication Prevention)\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/27_Using_the_Camera_and_Saving_Images_to_Firebase\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants (Camear and Saving Images to Firebase)\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eBase64\u003c/strong\u003e: A format of binary-to-text encoding. Essentially, this just means that the very binary of the object being encoded is turned into a really long string.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/camera/photobasics.html\" target=\"_blank\"\u003ePhoto Basics\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle.\u003c/li\u003e\r\n\u003cli\u003eDocumentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/java/io/ByteArrayOutputStream.html\" target=\"_blank\"\u003eByteArrayOutPutStream Objects\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eAndroid documentation on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/training/basics/intents/result.html\" target=\"_blank\"\u003eGetting a Result from an Activity\u003c/a\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-user-input","title":"Pre-course work: User Input","type":"WikiPage","content":"\u003cp\u003eOur restaurants app looks great so far, but let’s add an additional feature which will allow users to enter an address or zip code for their desired location. This won't do much at the moment, but we will later implement the user's input as a parameter in our API request.\u003c/p\u003e\r\n\u003ch2\u003eAdding EditText View\u003c/h2\u003e\r\n\u003cp\u003eLet's add a form field, known as an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e, to our welcome page where users can enter a zip code. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis specific type of text field that Allows the user to interact with text in your application; usually by typing text, but cutting, copying and pasting are also supported. Drag and drop a\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePlain Text\u003c/em\u003eEditText from the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eText Fields\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earea in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePalette\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that it rests centered directly above the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003e. (You can use the \u003cspan style=\"background-color: #999999;\"\u003eandroid:layout_* \u003cspan style=\"background-color: #ffffff;\"\u003e properties from the views below to position your views).\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003eThere are a variety of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einputTypes\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esuch as ‘Plain Text’ or ‘Phone’. Much like in HTML, these input types restrict the input to specified characters. Specifying an input type also automatically displays the appropriate input keyboard. For example, if we specify a form field as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003einputType\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e‘phone’, our device will bring up the on-screen numbers keyboard.\u003c/p\u003e\r\n\u003cp\u003eGive the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ean id, a background color so that it is visible, padding, and a bottom margin. Let's also give it a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ehint\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue to inform users what to enter in the field:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.MainActivity\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#000000\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/imageView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/background\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"35dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"40sp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eEditText\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationEditText\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_above\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"5dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:hint\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Enter Zip Code\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elooks great, but we don't actually do anything with whatever text the user places inside it. Let’s fix that!\u003c/p\u003e\r\n\u003ch2\u003eGathering Data from EditText\u003c/h2\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elet’s initialize and set a new member variable for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e. Then, inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we'll grab the user input and log it to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogcat\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere is the resulting code in our MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.util.Log;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Button;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.EditText;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = MainActivity.class.getSimpleName();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Log.d(TAG, location);\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s talk about what this new code is doing. We use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to grab the inputted value of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand save it into a new String variable. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod returns an editable data type so we have to convert it to a String using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app, fill out the form, and then check the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elogcat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto make sure it is logging the text we inputted. \u003c/p\u003e\r\n\u003cp\u003eTo have another visual confirmation of the parsing of the user input, you can use a \u003cem\u003e\u003cstrong\u003etoast\u003c/strong\u003e\u003c/em\u003e to display what the user has keys in. You can comment out or remove the \u003cspan style=\"background-color: #999999;\"\u003estartActivity(intent); \u003cspan style=\"background-color: #ffffff;\"\u003e to prevent navigation to the next activity. The code snippet for this could resemble something like this:\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"background-color: #999999;\"\u003e\u003cspan style=\"background-color: #ffffff;\"\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003cbr\u003estartActivity(intent);\u003cbr\u003eString location = mLocationEditText.getText().toString();\u003cbr\u003eToast.makeText(MainActivity.this, location, Toast.LENGTH_LONG).show();\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/1_intents\"\u003e Example GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-registering-accounts-in-firebase","title":"Tuesday: Registering Accounts in Firebase","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eRegistering Accounts in Firebase\u003c/h1\u003e\r\n\u003cdiv class=\"alert alert-danger\"\u003e\r\n\u003cp\u003eDo\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecopy and paste the Sign In and Sign Up display code into your own personal project. Recreate the functionality shown here with your own design and layout.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eNow that we've created the necessary components, we're ready to add functionality allowing users to register for accounts. In this lesson we'll learn how to create Firebase user accounts within an Android application. In subsequent lessons we'll walk through updating user profile information, logging users in and out, and adding additional features and personalization to improve user experience.\u003c/p\u003e\r\n\u003ch2\u003eRegistration Form\u003c/h2\u003e\r\n\u003cp\u003eAfter following along with the previous lesson, we should be greeted by the LoginActivity when the application launches. But what if a user doesn't have an account yet? Below the login form is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat reads\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Don't have an account? Sign up here!\"\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/07sjhb6f0zdz15t/login-screen%203.png?raw=1\" alt=\"link-to-registration-from-login-activity\"\u003e\u003c/p\u003e\r\n\u003cp\u003eClicking this does not currently do anything. Let's make sure this link navigates to the CreateAccountActivity we created previously. We'll bind this view with ButterKnife, implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface in the LoginActivity, and set a click listener and corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efunction:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eLoginActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eLoginActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.registerTextView) TextView mRegisterTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRegisterTextView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mRegisterTextView) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(LoginActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, CreateAccountActivity.class);\r\n            startActivity(intent);\r\n            finish();\r\n        }\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter an account is successfully authenticated, we no longer need the LoginActivity. In the code above, notice we include\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eafter creating our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e. This will destroy the LoginActivity as we depart for the CreateAccountActivity, saving us valuable resources. Check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Activity.html#finish()\"\u003eAndroid Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand other methods to halt unused or unnecessary activities.\u003c/p\u003e\r\n\u003cp\u003eNow we can launch our app, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Don't have an account? Sign up here!\"\u003c/em\u003e, and see our registration form:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/vrsowwk81x2j49r/sign-up-screen.png?raw=1\" alt=\"user-registration-form-myrestaurants\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eAccount Registration\u003c/h2\u003e\r\n\u003cp\u003eNow that our registration page is easily accessible, let's allow users to create their own accounts using our registration form.\u003c/p\u003e\r\n\u003ch3\u003eBasic Setup\u003c/h3\u003e\r\n\u003cp\u003eFirst we'll implement click listeners, declare member variables, and bind elements from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_create_account.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout using ButterKnife. This should be review:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.createUserButton) Button mCreateUserButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.nameEditText) EditText mNameEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.emailEditText) EditText mEmailEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.passwordEditText) EditText mPasswordEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.confirmPasswordEditText) EditText mConfirmPasswordEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.loginTextView) TextView mLoginTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_create_account);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mLoginTextView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mCreateUserButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View view)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mLoginTextView) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, LoginActivity.class);\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n            startActivity(intent);\r\n            finish();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (view == mCreateUserButton) {\r\n            createNewUser();\r\n        }\r\n\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we bind all elements of our registration form and add a click listener that will call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which we will write momentarily) when the form is submitted. We also create a link back to the LoginActivity and add something called intent flags to manage our back stack of tasks.\u003c/p\u003e\r\n\u003ch2\u003eManaging Stacks with Flags\u003c/h2\u003e\r\n\u003cp\u003eAndroid manages tasks by placing activities started in succession in something called a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003estack\u003c/strong\u003e. The last activity started is the first activity on the stack. When the system back button is selected, Android navigates to the last activity in the stack by default.\u003c/p\u003e\r\n\u003cp\u003eHowever, we don't actually want users navigating\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto CreateAccountActivity after they've already created an account. They should no longer have any use for this form if they already have an account. To prevent this, we can explicitly remove these activities from our back stack altogether by setting flags on our intent.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eIntent flags\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare essentially just extra pieces of information optionally added to an intent that determine how the specific intent is handled by Android. In the code above, we use the following flags:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFLAG_ACTIVITY_CLEAR_TASK will cause any existing task that\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewould\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe associated with the activity to be cleared before the activity is started. This prevents the CreateAccountActivity from being unnecessarily accessed via the system back button.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFLAG_ACTIVITY_NEW_TASK will make the activity we are navigating to the start of a brand new task on this history stack.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFor more information on tasks and the back stack, check out the Android Developer's guides article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/tasks-and-back-stack.html\"\u003eTasks and Back Stack\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch3\u003eCreating New Users\u003c/h3\u003e\r\n\u003cp\u003eNow that we can successfully submit the registration form, let's write the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = CreateAccountActivity.class.getSimpleName();\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth mAuth;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        ...\r\n    }\r\n\r\n    ...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String name = mNameEditText.getText().toString().trim();\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String email = mEmailEditText.getText().toString().trim();\r\n        String password = mPasswordEditText.getText().toString().trim();\r\n        String confirmPassword = mConfirmPasswordEditText.getText().toString().trim();\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                         \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                            Toast.makeText(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                                    Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirst, we add a member variable to get the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. This object is required in order to access the tools provided in the Firebase Authentication SDK. We then simply fetch the contents of our registration form (\u003ccode\u003emNameEditText\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEmailEditText\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPasswordEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emConfirmPasswordEditText\u003c/code\u003e) and transform each value into a string.\u003c/p\u003e\r\n\u003cp\u003eThen, we call the built-in Firebase method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateUserWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create a new user account in Firebase, passing in the user's email and password. If the account can be created successfully, we log a success message to the logcat; otherwise we display a toast notifying the user something went wrong.\u003c/p\u003e\r\n\u003ch2\u003eTesting Account Registration\u003c/h2\u003e\r\n\u003cp\u003eWe should now be able to launch the application, navigate to the CreateAccountActivity, and submit our registration form.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFirebase Auth requires passwords be at least 6 characters long. Additionally, the email address must contain an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@something.com\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edomain, otherwise it will not be recognized as a valid email address. Make sure to use a long enough password and correctly-formatted email address or you may encounter errors:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/c79j16hv34wr53y/registration-form-filled.png?raw=1\" alt=\"registering-new-firebase-account\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eThe app won't navigate anywhere after submitting this form (yet!)\u003c/strong\u003e, but if we visit the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAuth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etab in our Firebase dashboard and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e, we can see a new Firebase user has been created:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/xifb1nbb59fxa0x/registered-user-firebase.png?raw=1\" alt=\"user-listed-in-firebase\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eListening for User Authentication\u003c/h2\u003e\r\n\u003cp\u003eNext, we need to inform our application when the user's account is successfully authenticated. To do this, we'll add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto respond to the change in the user's authentication state.\u003c/p\u003e\r\n\u003cp\u003eAn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply listens for an account being successfully authenticated, or un-authenticated through Firebase. Firebase can also automatically authenticate user accounts upon registration. Therefore, our users can submit the registration form and if their account is created successfully they will be logged in automatically, and this listener will be triggered.\u003c/p\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride, we will send the user to our MainActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth.AuthStateListener mAuthListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        createAuthStateListener();\r\n    }\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateAuthStateListener\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseUser user = firebaseAuth.getCurrentUser();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (user != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, MainActivity.class);\r\n                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n                    startActivity(intent);\r\n                    finish();\r\n                }\r\n            }\r\n\r\n        };\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable, setting it in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod by calling a new method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthStateListener()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eInside of the new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthStateListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we create our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby setting our member variable to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth.AuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface. This interface listens to changes in the current\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthState\u003c/code\u003e. When there is a change (ie. a user becomes authenticated or signs out), this interface triggers the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata. Using this data, we can create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCurrentUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. We double-check that this user is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003enull before traveling to the MainActivity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eonStop and onStart Overrides\u003c/h2\u003e\r\n\u003cp\u003eBefore we can test that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis working, we need to add it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. We'll associate the two by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddAuthStateListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle method.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, we will also\u003cspan\u003e \u003c/span\u003e\u003cem\u003eremove\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe listener before the activity is destroyed by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremoveAuthStateListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elifecycle method:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStart\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStart();\r\n    mAuth.addAuthStateListener(mAuthListener);\r\n}\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStop\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStop();\r\n    \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mAuthListener != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n        mAuth.removeAuthStateListener(mAuthListener);\r\n    }\r\n}\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe system calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod every time your activity becomes visible (whether it's being restarted or created for the first time).\u003c/p\u003e\r\n\u003cp\u003eConversely, Android calls\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen an activity is no longer visible. Once the activity is stopped, the system might destroy the instance if it needs to recover system memory. In extreme cases, the system might simply kill your app process without calling the activity's final\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback. This is why it is important to use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto release resources that might leak memory.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf we forget to add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewill not work\u003c/strong\u003e!\u003c/p\u003e\r\n\u003cp\u003eNow, let's run our app to see our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein action. If everything was configured properly, our app should bring the user to the MainActivity once their account is created\u003c/p\u003e\r\n\u003cp\u003eIf we restart the app and navigate to CreateAccountActivity, you will notice that our app immediately brings us back to the MainActivity! When the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis added in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, it checks to see if a user has\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebeen authenticated. Because the user we created moments ago was logged in automatically, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebrings them to the MainActivity.\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll learn how to log the current user out so we can continue to build our CreateAccountActivity, and see our new features in action.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/17_user_authentication\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eStack\u003c/strong\u003e: A collection of activities users interact with when performing a certain action with an application. The activities are arranged in a stack, ordered by when they were opened.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eIntent flags:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAdditional information that can be optionally included with an intent that control how the specific intent is handled.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAuthStateListener:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePart of an interface that listens to changes in the current\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthState\u003c/code\u003e. When there is a change (ie. a user becomes authenticated or signs out), this interface triggers the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonAuthStateChanged()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod automatically.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid calls the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod every time an activity becomes visible (whether being restarted or created for the first time). When an activity receives a call to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, it's no longer visible and should release almost all resources that aren't necessary while the activity is not in use.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/17_user_authentication\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCheck out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Activity.html#finish()\"\u003eAndroid Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand other methods to halt activities.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on tasks and the back stack, check out the Android Developer's guides article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/components/tasks-and-back-stack.html\"\u003eTasks and Back Stack\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor a list of all available intent flags, check out the documentaiton for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetFlags()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/content/Intent.html#setFlags(int)\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-intents","title":"Pre-course work: Intents","type":"WikiPage","content":"\u003cp\u003eNow that we have a functioning\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003es, let’s work towards making it navigate to a new Activity where we will display information about the restaurants.\u003c/p\u003e\r\n\u003ch2\u003eCreating New Activities\u003c/h2\u003e\r\n\u003cp\u003eRight click on the package name and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Activity \u0026gt; Empty Activity\u003c/em\u003e. Let’s name this Activity,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e, and make sure that the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGenerate Layout File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebox is checked, so that a corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.xml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout file for this activity is automatically created.\u003c/p\u003e\r\n\u003ch2\u003eNavigating Between Activities\u003c/h2\u003e\r\n\u003cp\u003eWith our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecreated, let’s change the code inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod for our\u003cspan\u003e \u003c/span\u003e\u003cem\u003emFindRestaurantsButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that it navigates to this new activity when clicked, instead of displaying a Toast.\u003c/p\u003e\r\n\u003cp\u003eWe can accomplish this by using an intent. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eintent\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erepresents something our app “intends to do” by describing a simple action you'd like the app to perform. Most often, an intent is used to start another activity or to hand something over to another app.\u003c/p\u003e\r\n\u003cp\u003eErase the toast in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and replace it with the two lines of code detailed below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.content.Intent;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Button;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we are constructing a new instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass with the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent intent = new Intent(MainActivity.this, RestaurantsActivity.class);\u003c/code\u003e. As you can see this takes two parameters: The current context, and the Activity class we want to start.\u003c/p\u003e\r\n\u003cp\u003eThe current context is the environment in which our code is running. Then, we are calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod which takes an intent as a parameter. So, when we click the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ea new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntent\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat takes the user from the MainActivity to the RestaurantsActivity will be created and immediately started.\u003c/p\u003e\r\n\u003cp\u003eLet’s run our app again. We should now be able to navigate to our new activity by clicking on our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003e!\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan style=\"background-color: #999999;\"\u003e\u003cspan style=\"background-color: #ffffff;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e","frontPage":false},{"exportId":"thursday-answering-behavioural-interview-questions","title":"Thursday: Answering Behavioural Interview Questions","type":"WikiPage","content":"\u003ch2 style=\"text-align: left;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eBehavioural Interview Questions\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBehavioural interview questions are based on the fact that\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003elooking at a candidate’s past behaviour is the best way to predict their future performance.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe golden rule when you’re answering behavioural interview questions is to adhere to what’s called the CAR principle: Context, Action, Result.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eContext\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eis about describing a situation and setting the scene for a relevant example. The key here is to choose your example well, one that clearly demonstrates the quality or skill the employer is asking about.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eAction\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eis about explaining what action you took. Be really specific rather than making vague statements and outline your steps and rationale.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\n\u003cstrong\u003eResult\u003c/strong\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eis about detailing the outcome of your action. Offer specific facts relating to the result. For instance, quote figures and statistics that back up your declaration\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003c/span\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“What has been the most stressful situation you have ever found yourself in? How did you handle it?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe best way to answer this question is to give an example of how you have handled stress in a most recent situation. That way, the interviewer can get a clear picture of how well you work in stressful situations. Tailor your answer to be related to either programming or coding.\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eAvoid mentioning a time when you put yourself in a needlessly stressful situation. For example, do not share a story about a time when you were stressed because you procrastinated and had to finish a project quickly. Focus on a time when you were given a difficult task or multiple assignments, and you rose to the occasion.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003ePressure is very important to me. Good pressure, such as having a lot of assignments to work on, or an upcoming deadline, helps me to stay motivated and productive. Of course, there are times when too much pressure can lead to stress. Through my experience, I have learned how to balance multiple projects and meeting deadlines, which prevents me from feeling stressed often. For example, I once had three large projects due in the same week, which was a lot of pressure. However, because I created a schedule that detailed how I would break down each project into small assignments, I completed all three projects ahead of time and avoided unnecessary stress.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Give me an example of the project or initiative that you started on your own. It can be a non-business project. What prompted you to get started?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy asking this question, the interviewer wants to find out whether you are capable of coming up with new ideas and thinking creatively in order to solve problems. You can take your example from your work experience, a group project or a skills related extracurricular activity.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIt is important to remember that in this case you are essentially telling a story and your answer needs to have a well considered structure. Make sure to cover the following when answering this prompt:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhere you were at the time\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat the issue or problem was\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow this issue/problem had a negative impact on the business,employees, customers etc\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhat you suggested/implemented as a solution to the problem\u003c/span\u003e\u003c/li\u003e\r\n\u003cli style=\"font-weight: 400;\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eHow this had a positive impact on the business, people, etc\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIn a college technical festival, there was a problem with the Learn network of the college where the server was not functioning well. This network was going to be used to host various gaming events in the college fest. I took an initiative and got a few of my friends with me and replaced the complete connection network with another server. We successfully managed to shift to a new server in less than an hour and the events were conducted successfully.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Describe the project or situation that best demonstrates your analytical skills. What was your role?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe trick to this question is to not just talk about your overall experience and training that led to your having strong analytical abilities, but to give an example of a specific situation where your analytical abilities came into application. The strongest examples are those that describe a situation related to the work done in the company you have applied to, since your answer to this question shows that you can solve the problems that they are facing.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eIf you are asked this question, it is because analytical ability is valued highly in the company you are applying to. Once you have decided which situation to answer with, don’t just state it. Give an idea of the significance of the situation and don’t miss important details. When the situation has been fully described.  Whatever you did will have a full context. After explaining the actions you took, then you can move on to the consequences, and why you think you got the result you did.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eDuring my University Programming course, we were assigned a group project to do marketing research for a local tech companies. After we collected all of the data, we had to analyze the data in a meaningful way for the business and report the results. It turned out that I had the strongest analytical abilities in the group, so I led the rest of the group in analyzing the data. Because of my analytical skills, we found that a local tech company had been targeting the wrong market all along. We set up a meeting with the CEO of the tech company and were able to show the owner our findings and  the market segment that the business should be targeting.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about a time you had to work on several projects at once. How did you handle the projects?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy asking this question the interviewer\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewants to see that you are going to be able to cope with working on multiple projects at the same time. There's only one correct answer to this question and it's a resounding 'Yes'!. Then go on and backup your 'Yes' with some evidence, preferably an example.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eYes.  I've had plenty of experience handling a very full workload and dealing with numerous different projects simultaneously.  When starting out in my current job at Craft Silicon, I came in to a situation where the team was behind schedule on a number of projects and also had several new projects which needed to be started. I certainly had my hands very full indeed; it was quite a juggling act! I persuaded the CTO to allocate sufficient resources so we could complete the overdue projects without suffering further financial penalties and I simultaneously got us going on the new range of projects as quickly as possible so as to not disappoint the clients. I understand the importance of adhering to deadlines, so if I saw that I absolutely could not accomplish the task in time, I would ask for an extension.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample 2\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAt Moringa School we usually had a lot of projects to work on weekly and at the same time finish up class work by the end of the week.\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eEven if my tasks at times seemed unachievable, I would buckle down and figure out the best approach to completing the tasks. I would start by organizing the tasks from most important to least, and then I would begin working on the most important task. I would maintain a positive outlook and utilize my organizational skills to develop a plan of action.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about a situation in which you have had to adjust to changes over which you had no control. How did you handle it?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe interviewer is interested in knowing how you are able to perform in a workplace where you are not the one who is ‘making the calls’. The typical workplace environment involves a tiered structure where there are those who make the decisions and those who perform the work. An entry level position most often assumes the role of the latter.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI am a performer of tasks. As a new employee, I understand that many of my duties will be directed by those above me. These will undoubtedly involve changes, and as long as I understand how the changes are related to the betterment of the company I am fully ‘on board’.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI once worked for a corporation where one of my duties was to prepare the annual report. As a result of input from the overseeing board and members, the format for that report was changed significantly. Although this meant that I had to relearn the report-writing process, with my understanding that this change would mean that the report was more accessible and easy to read, I had no problem with the demands of that change.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample 2\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI am a performer of tasks. As a new employee, I understand that many of my duties will be directed by those above me. These will undoubtedly involve changes, and as long as I understand how the changes are related to the betterment of the company I am fully ‘on board’. At Moringa School we worked on a group project during the project period. We were to present this project as a group every Friday of the week for one month. During the group presentation we would talk about the project and what we had worked on so far, feedback was given by our instructors and we had to make a lot of changes and add a lot of things before the next presentation which was in just a week's time. This meant that we had to make a lot of changes with every feedback session but at the end of the one month we had the best projects to present on career day to potential employers.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Have you ever worked in a team? If yes, give an example of a situation where you had to compromise on decision making.”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eBy asking this question the interviewer wants to know if you're a team player and capable of resolving minor issues that may arise. Workplace conflicts may happen every now and then and that's okay. The key is handling them correctly and showing the interviewer you can move forward\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003e.\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnswer this question in a way that show  you can overcome small conflicts without involving your boss or interrupting the flow of the workplace. Your answer should reflect your professionalism and your ability to maintain your temper.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLast year I attended a coding bootcamp and one of the requirements for graduation was to build a group project. We had to decide on what to build and the my fellow group members chose to build something simple. I on the other hand wanted to build something complex so that our group will have something unique and better than the other groups. My idea of building something complex was not welcomed by the rest of the group member either way we had to decide on one project. I requested that we sit and discuss each project idea, its advantages and disadvantages in terms of time taken to build the project and the project functionality. We finally agreed on building a simple application rather than a complex one that would take up a lot of time and resources since at the end of the day our goal was to have a completed and functional application in order to graduate.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about when you had to deal with conflict within your team. How was the conflict solved? How would you deal with it now?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eConflict questions are common because everybody wants to hire a good team player therefore the interviewer wants to\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003ca href=\"http://biginterview.com/blog/2012/01/what-employers-want-job-interview.html\"\u003e\u003cspan style=\"font-weight: 400;\"\u003eget a sense of how you will respond\u003c/span\u003e\u003c/a\u003e\u003cspan style=\"font-weight: 400;\"\u003e\u003cspan\u003e \u003c/span\u003eto conflict.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAnswer this question by briefly describing the context in which the conflict but do not get too caught up in unnecessary details.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eLastly talk about the key actions that you took. In the case of a conflict story, the focus should be on how you resolved the disagreement in a professional and productive way.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI was managing the creation of an application in school and we were on a very tight deadline because the presentation day was a day away. I was in charge of delivering on time and I had to manage all team members. The developer who was building the front end part of the application was very talented but unfortunately missed a deadline that I had assigned. When I approached him about it, he blew up at me. I was taken aback by his response, but I remained calm. I acknowledged that the deadline was hours away and explained again the reasoning and the importance of ready in time for the presentation. He relaxed a little when he saw that I wasn’t attacking him. He told me about all of his other class projects and how overwhelmed he was. I asked him if there was any way that I could help him come up with a solution. Eventually, we agreed that it would help if I would him in completing the front end part since I was conversant with that area also. This helped take some of the pressure off of him.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Think about a situation when you had to make the most difficult decision you’ve ever had to make at work. How did you arrive at your decision? What was the result?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen an interviewer asks this question, she or he\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003ewants to know how you’d handle challenging and stressful situations and how strong your critical thinking skills.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eApproach this question by describing how you effectively approached the challenge, how you weighed the options and how you reached your decision.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhatever example you use, make sure it highlights a strength you would bring to the role.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003en my previous position, I was in charge of selecting vendors to print our promotional materials. We have a long time vendor we have been working with for over a decade. However, for one of our biggest print jobs of the year, another vendor came in with a lower bid.”\u003cspan\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eI did not want to take the work away from a vendor with whom we did so much business with, but I couldn’t justify picking them out of loyalty if someone else was doing the same job for less money. So I told the old vendor frankly about the other bid to hear what they had to say, and I also solicited references from the new vendor to see if their work matched that of what we had been getting.”\u003c/span\u003e\u003cspan style=\"font-weight: 400;\"\u003eOur long-time vendor was able to bring down their bid. They actually did the job for less than the new vendor would have, so we ended up saving some money.”\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan style=\"font-weight: 400;\"\u003e“Tell me about the most difficult situation you have had when leading a team. What happened and how did you handle it? Were you successful? What was the most important thing you did?”\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThis question helps the interviewer to find out if you have true leadership potential. Briefly describe the project or situation giving just enough history and/or background to provide context. Talk about the key actions that you took. When telling a leadership story, make sure that you convey specifically how you stepped up as a leader. What actions did you take and why? How did your actions demonstrate leadership? Finally, Wrap up your example by describing the positive outcome(s) of your action.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch4\u003e\u003cspan style=\"font-weight: 400;\"\u003eExample\u003c/span\u003e\u003c/h4\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eWhen I was a student at Moringa School we had to go through a period whereby we built projects in groups for presentation during career day. We were a team of five and two of our team members laptop's got stolen on their way home from school therefore they did not attend school for two days. The team of three that remained had to absorb the duties of the two were absent. As a result, people were overworked and morale suffered.  At the same time, more mistakes were being made because attention was so scattered.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eAs the team leader, it was my job to get performance back on track. I scheduled a meeting of the full team to discuss strategies. I communicated my appreciation for all of their hard work during a challenging time for the company and asked for their assistance in identifying ways for us all to be more efficient –including me! I then made it clear that this was a brainstorming meeting to come up with options that no idea was stupid and that it was a safe environment for making suggestions. We spent an hour capturing ideas on a white board, then voted on the five with the most potential.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eI then assigned each person to do more research on how we might implement one of the ideas. First of all, the team responded very positively to this approach. They loved the idea of being empowered to help find a solution. Instead of complaining, they channeled their energy in a more productive way once they knew that they would be heard. Right off the bat, we came up with two ideas that could be implemented quickly and save us a lot of time. One idea was to eliminate daily group meetings to weekly stand ups. This freed up 6 hours each week spent on discussing issues to do with the project.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"font-weight: 400;\"\u003eThe other idea was to set time aside and work together after school in the evening for an hour or two. We also decided to incorporate brainstorming and idea evaluation into our weekly standups. We became more efficient and the morale increased.\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-android-web-services-objectives","title":"Monday: Android Web Services Objectives","type":"WikiPage","content":"\u003ch2\u003eDaily Objectives\u003c/h2\u003e\r\n\u003cp\u003eEveryone learns at a different pace.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eUnderstanding is the most important goal every day.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you feel like you will not be able to complete all of the lessons on a given day, talk to a TM about ways to ensure that you are covering the day's objectives. Always focus on understanding the concepts at hand, not finishing the work as quickly as possible.\u003c/p\u003e\r\n\u003ch2\u003ePlan\u003c/h2\u003e\r\n\u003cp\u003eIn this section, We will be looking into how to consume a RESTFUL API and utilize the data in our Android devices. Still, we will practice more on the User Interface. Also in this section, we will be looking at how to use parcelables and adapters in our application. Later in the week, we will look at how to use implicit intents to activate other apps on the phone. For example in activating the camera. Then we will train on how to handle interview questions in Android.\u003c/p\u003e\r\n\u003ch2\u003eIndependent Project Objectives\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eAt the end of this section, you will complete an independent project. Your instructor will review this project for the following objectives:\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eUtilize an API of your choice\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse a parcelable\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eInvoke an Implicit Intent\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse at least one custom fragment\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003cspan\u003e\u003cspan\u003eAdd a README to the GitHub repository that includes:\u003c/span\u003e\u003c/span\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAuthor name\u003c/li\u003e\r\n\u003cli\u003eProject or program name\u003c/li\u003e\r\n\u003cli\u003eDescription of program\u003c/li\u003e\r\n\u003cli\u003eProgram setup instructions\u003c/li\u003e\r\n\u003cli\u003eLink to live version of the site \u003c/li\u003e\r\n\u003cli\u003eCopyright and license information\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"tuesday-the-android-manifest","title":"Tuesday: The Android Manifest","type":"WikiPage","content":"\u003cp\u003eEvery app must have an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroidManifest.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. This file contains essential information about your app. The Android system must have this information before it can run the app's code correctly.\u003c/p\u003e\r\n\u003ch3\u003eManifest Responsibilities\u003c/h3\u003e\r\n\u003cp\u003eAmong other things, the manifest is responsible for the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eNaming the Java package for the application.\u003c/li\u003e\r\n\u003cli\u003eDescribing what components are present in the application, and under what conditions they may be launched.\u003c/li\u003e\r\n\u003cli\u003eDeclaring which permissions the application requires from the phone and its user to interact with other applications and gather information.\u003c/li\u003e\r\n\u003cli\u003eDeclaring permissions that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eothers\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eare required to have in order to interact with the application (For instance, an application that cannot function without access to the internet will declare in its manifest that it requires permission to access the internet.)\u003c/li\u003e\r\n\u003cli\u003eDeclaring the minimum level of Android API the app requires.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn our MyRestaurants project, the Android Manifest currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    package=\"io.github.vinge1718.restaurant\"\u0026gt;\u003cbr\u003e\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;manifest\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;application\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003exml tags are required in all Android manifests.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach activity also contains an entry in the manifest.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;action android:name=\"android.intent.action.MAIN\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edenotes which activity will start by default when the app is launched. As we can see in our manifest above, the MainActivity is set to begin automatically when the app launches.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;category android:name=\"android.intent.category.LAUNCHER\" /\u0026gt;\u003c/code\u003edenotes that this activity is the initial activity of a task, and is listed in the device's application launcher.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;intent-filter\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag denotes the types of intents an activity may receive. We can see that the lines\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;action android:name=\"android.intent.action.MAIN\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;category android:name=\"android.intent.category.LAUNCHER\" /\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eare in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;intent-filter\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof the MainActivity. This is because the act of a device opening our application is actually an Intent from the Android system, and we therefore need to instruct our app to accept these intents. (We'll learn more about intent filters later on when we cover Implicit Intents!)\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003eFor additional details, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003eApp Manifest Guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Android Developers documentation.\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eAndroid Manifest\u003c/strong\u003e: A required XML file in any Android application that defines the name of the Java package, what components are present and how they may be launched, what permissions the app requires, and the minimum level Android API required.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003eIn our MyRestaurants project, the Android Manifest currently looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    package=\"io.github.vinge1718.restaurant\u003cspan class=\"hljs-value\"\u003e\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:allowBackup\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@mipmap/ic_launcher\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:label\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@string/app_name\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:supportsRtl\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:theme\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@style/AppTheme\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eaction\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.action.MAIN\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n                \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003ecategory\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.intent.category.LAUNCHER\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eintent-filter\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".RestaurantsActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eactivity\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eapplication\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emanifest\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003eApp Manifest Guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein the Android Developers documentation.\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"wednesday-working-with-constraint-layouts","title":"Wednesday:Working with Constraint Layouts","type":"WikiPage","content":"\u003cp\u003eEarlier in the course we discussed the constraint layouts that Android Studio 2.2+ creates by default for new activities. We also addressed how to turn them back into Relative layouts, so we could practice standard layouts too. But now that we're growing more and more comfortable with layouts and XML in general, let's explore the newer constraint layout options too.\u003c/p\u003e\r\n\u003ch2\u003eIntroduction to Constraint Layouts\u003c/h2\u003e\r\n\u003cp\u003eFirst, a little context: The constraint layout library was released with Android Studio 2.2\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://tools.android.com/recent/constraintlayout10isnowavailable\"\u003ein February 2017\u003c/a\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eConstraintLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003egets its name from the constraints it uses to position items. In terms of Android layouts, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econstraint\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a rule for a view within a layout. It declares\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe element should be positioned on the screen; including its relative alignment to other layout elements.\u003c/p\u003e\r\n\u003cp\u003eBy declaring constraints for view elements, developers can more readily create large, complex layouts with a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eflat view hierarchy\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(this means layout elements are not nested within one another, as they are in a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e).\u003c/p\u003e\r\n\u003cp\u003eReducing the number of elements nested within one another reduces load time, as explained in this in-depth article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/topic/performance/rendering/optimizing-view-hierarchies.html\"\u003ePerformance and View Hierarchies\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAndroid Studio versions 2.2 and above also include a special layout editor to assist in the creation of these constraint layouts (we'll see what this editor looks like in the videos below).\u003c/p\u003e\r\n\u003ch3\u003eConstraint Versus Relative Layouts\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eBut what's the difference between the new \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eConstraintLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e and the \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eRelativeLayout\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e we've discussed in \u003c/span\u003e\u003ca href=\"pages/pre-course-work-creating-a-basic-layout?module_item_id=i39097043baea41b6d7a6f8b8c204f330\"\u003eprevious lessons\u003c/a\u003e?\u003c/p\u003e\r\n\u003ch4\u003eFlat Versus Deep View Hierarchies\u003c/h4\u003e\r\n\u003cp\u003eAs we just touched on, a constraint layout is a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eflat view hierarchy\u003c/strong\u003e, meaning elements are not nested deeply within one another. Whereas relative layouts are often referred to as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edeep view hierarchies\u003c/strong\u003e, because elements can be nested deeply within one another.\u003c/p\u003e\r\n\u003cp\u003eFlat view hierarchies, like constraint layouts, load slightly faster than deep view hierarchies, like relative layouts. Their XML code is also a little easier to manage.\u003c/p\u003e\r\n\u003ch4\u003eBias Values\u003c/h4\u003e\r\n\u003cp\u003eUnlike relative layouts, constraint layouts include a\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003ebias\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evalue. This is a percentage between 1% and 100% used to position a view's horizontal and vertical offset in relation to other elements. This allows easy, seamless positioning no matter what the user's screen size may be.\u003c/p\u003e\r\n\u003ch4\u003eLayout Editor\u003c/h4\u003e\r\n\u003cp\u003eIt's also a little easier to use Android Studio's new layout editor (a feature available in versions 2.2.2 and above) with constraint layouts. The editor allows developers to drag and drop elements, and Android Studio generates the corresponding XML automatically. (We'll learn more about this process in the videos below.)\u003c/p\u003e\r\n\u003ch2\u003eWorking with Constraint Layouts\u003c/h2\u003e\r\n\u003cp\u003eYou may want to experiment with integrating constraint layouts into your own projects. Again,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ethis is completely optional\u003c/strong\u003e. But, for those that would like to try them out, the videos below will walk through creating this new type of layout, including how to use the new layout editor tool.\u003c/p\u003e\r\n\u003ch3\u003eBuilding a Constraint Layout with the Android Studio Layout Editor\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca class=\"hoverZoomLink\" href=\"https://www.youtube.com/watch?v=z53Ed0ddxgM\"\u003eAndroid Studio 2.2 Constraint Layouts for Beginners\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(29 mins) video is an excellent introduction to both constraint layouts, and Android Studio's new Layout Editor. It walks through the process of constructing a new layouts from scratch.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eIts sequel, \u003c/span\u003e\u003ca class=\"hoverZoomLink\" href=\"https://www.youtube.com/watch?v=CTYf1qwrXuw\"\u003eAndroid Studio 2.2 Constraints Layout Part 2\u003c/a\u003e\u003cspan\u003e (13 mins), continues where the first video left off, exploring more complex features and capabilities.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eMore Recommended Resources\u003c/h2\u003e\r\n\u003cp\u003eInterested in learning even more about constraint layouts? Or practicing creating and designing them? We recommend the following resources:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://codelabs.developers.google.com/codelabs/constraint-layout/index.html?index=..%2F..%2Findex#0\"\u003eUsing ConstraintLayout to Design your Views\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e- A tutorial from Google, complete with sample code to follow along with and practice.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/reference/android/support/constraint/ConstraintLayout.html\"\u003eAndroid Developer Guide Article on Constraint Layouts\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/training/constraint-layout/index.html\"\u003eBuild a Responsive UI with Constraint Layout\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJoe Birch's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/exploring-android/exploring-the-new-android-constraintlayout-eed37fe8d8f1\"\u003eExploring the new Android ConstraintLayout\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/studio/write/layout-editor.html\"\u003eAndroid Studio Guide to Building a UI with the Layout Editor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eprovides more detail and instruction for using the built-in Layout Editor seen in the videos above.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://github.com/googlesamples/android-ConstraintLayoutExamples\"\u003eConstraint Layout Examples on GitHub\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Documentation for the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/support/constraint/ConstraintLayout.html\"\u003eConstraintLayout Class\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-local-business-app","title":"Thursday: Local Business App","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal for today is to practice using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es to display lists of data in addition to using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface to manage your click listeners.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between the ‘system back button’ and the ‘up’ button?\u003c/li\u003e\r\n\u003cli\u003eWhat is a hierarchical parent? Where do we denote an activity's parent? What does creating this relationship allow us to do?\u003c/li\u003e\r\n\u003cli\u003eWhat is the Android Manifest? What is placed in here?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eLocal Business App\u003c/h3\u003e\r\n\u003cp\u003eCreate an app for a business of your choosing. Make sure to style your app to reflect the business using its logo and branded colors. Research how to change the launcher icon and change it to the company's logo. Use ListViews and ArrayAdapters to display information somewhere in your app. Implement tests throughout the course of development.\u003c/p\u003e\r\n\u003ch4\u003eFurther Exploration\u003c/h4\u003e\r\n\u003cp\u003eWhen adding photos, make sure to scale them down as much as possible. If you experience any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eoutOfMemory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eerrors, try implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ePicasso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elibrary to resize images at runtime.\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://square.github.io/picasso/\"\u003eClick here\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto install Picasso and then follow along with\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/Displaying-Images-with-the-Picasso-Library\"\u003ethis guide\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto learn the best ways to employ Picasso.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the application include tests? Do they pass?\u003c/li\u003e\r\n\u003cli\u003eAre\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003es being utilized correctly?\u003c/li\u003e\r\n\u003cli\u003eHave\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es been integrated into the project?\u003c/li\u003e\r\n\u003cli\u003eAre click listeners managed correctly?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003cli\u003eIs the code indented correctly throughout?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"wednesday-instant-messaging-application","title":"Wednesday: Instant Messaging Application","type":"WikiPage","content":"\u003ch1\u003eInstant Messaging Application (Two-day project)\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eLearn about the user authentication process by following along with the homework to add user accounts into your MyRestaurants application. Then, get extra practice with both user auth and event listeners by crafting an instant messaging application, paying special attention to the manner listeners instantaneously update a user's app with new messages as they're received.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is an intent filter? What does it do or prevent you from doing?\u003c/li\u003e\r\n\u003cli\u003eHow does a SearchView work? How is it different from other views?\u003c/li\u003e\r\n\u003cli\u003eWhat other Firebase methods can you name? What do they do, and when would you use them?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants\u003c/h3\u003e\r\n\u003ch4\u003eWednesday\u003c/h4\u003e\r\n\u003cp\u003eFollow along with lessons listed under Wednesday (today), in order to begin implementing user authentication into your MyRestaurants application. This includes account registration, saving user information to our database, and logging users in and out.\u003c/p\u003e\r\n\u003ch4\u003eThursday\u003c/h4\u003e\r\n\u003cp\u003eContinue to follow along with the user authentication lessons listed under Thursday to implement dialogs, validating user credentials, and displaying errors.\u003c/p\u003e\r\n\u003ch3\u003eChat Application\u003c/h3\u003e\r\n\u003cp\u003eAnother very common type of Android application (or feature within larger apps) is instant messaging/chatting. Apps like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.whatsapp\u0026amp;hl=en\"\u003eWhatsApp\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.facebook.orca\u0026amp;hl=en\"\u003eFacebook Messenger\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/dev?id=5700313618786177705\u0026amp;hl=en\"\u003eGoogle Hangouts\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eare all great examples of this. Create an instant messaging application--whether based off of a pre-existing app, or something of your own creation--with the following features:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAllow users to register with their own, unique account.\u003c/li\u003e\r\n\u003cli\u003eAllow users to securely log into their own account using Firebase authentication.\u003c/li\u003e\r\n\u003cli\u003eInclude a User model and save user information to your Firebase database.\u003c/li\u003e\r\n\u003cli\u003eAllow users to send messages to one another.\u003c/li\u003e\r\n\u003cli\u003eImplement\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#weekend-two.html\" target=\"_blank\"\u003eFirebase listeners\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethat will instantly update a user's app with new messages as they're received.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eMuch like the discussion forum, this is an incredibly common type of application and/or feature in large applications. Therefore, take the time to ensure you have the beginnings of a great portfolio project that displays your capability of creating the most popular types of mobile apps!\u003c/p\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner complete the features detailed above, explore some additional approaches to authenticating users! Many apps now provide users options to sign in via Facebook, Google, and/or Twitter. Using the resources below, research and experiment with implementing social authentication into your chat application:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.firebase.com/docs/web/guide/user-auth.html#section-providers\" target=\"_blank\"\u003eSetup an Authentication Provider\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.facebook.com/docs/facebook-login/android\" target=\"_blank\"\u003eFacebook Login for Android\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://dev.twitter.com/twitter-kit/android/twittercore\" target=\"_blank\"\u003eTwitterCore Android Login\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.google.com/identity/sign-in/android/start-integrating\" target=\"_blank\"\u003eGoogle sign-in for Android\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCan users successfully sign in and out of the application using Firebase?\u003c/li\u003e\r\n\u003cli\u003eCan users also sign in and out using a social media account?\u003c/li\u003e\r\n\u003cli\u003eAre the new features well-implemented? Is the code well-refactored and easy-to-follow?\u003c/li\u003e\r\n\u003cli\u003eWhat about this application would you do differently? What might you like to integrate in your own application?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-searchview-widget","title":"Monday:SearchView Widget","type":"WikiPage","content":"\u003ch1\u003e SearchView Widget\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eOur MyRestaurants application can now successfully save user-provided zip codes and entire restaurant objects to Firebase. It can even dynamically update the user interface when our database changes. However, we're still prompting users to enter a zip code\u003cspan\u003e \u003c/span\u003e\u003cem\u003eevery time\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethey open the app, even though we already have their latest-searched location saved. And we're\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eallowing them to execute new searches from the MainActivity. This isn't very user-friendly.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll add a search widget to our app bar. This will prevent users from having to enter a zip code each time they launch the app. Instead, we'll automatically display restaurants from their last-searched location when they select \"Find Restaurants\". Entering a zip code will only be required if and when users would like to search a\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ezip code.\u003c/p\u003e\r\n\u003cp\u003eAs outlined in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/search/search-dialog.html\" target=\"_blank\"\u003eAndroid Developers Guides\u003c/a\u003e, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esearch widget\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ebehaves similarly to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efields we've already used, but offers additional configuration including handling input events, offering search suggestions, and creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntents\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the user executes a query.\u003c/p\u003e\r\n\u003ch2\u003eDownloading Icons\u003c/h2\u003e\r\n\u003cp\u003eFirst, let’s download the white magnifying glass search icon from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/#ic_search\" target=\"_blank\"\u003eGoogle Material Icons site\u003c/a\u003e. This icon will be used to denote that a search feature is available. We'll drag and drop the icon into the project in the same manner described in a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eprevious lessons\u003c/strong\u003e. The resulting file structure should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/jyb2ujgnct5day6/icon-organization.png\" alt=\"icons-organized-in-project\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eCreating a Menu\u003c/h2\u003e\r\n\u003cp\u003eNext, let's create a menu for our search widget. Right-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAndroid resource directory\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/xw7cdnjla7b5nog/create-menu-step-1.png\" alt=\"create-menu-resource-directory-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the resource type dropdown, and name the new directory\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/o6q7scbexerdoe9/create-menu-step-2.png\" alt=\"create-menu-resource-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNext, we'll create a new menu resource file within this new directory and call it\u003cspan\u003e \u003c/span\u003e\u003cem\u003emenu_search.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/jax7gxctlcsvx6z/create-menu-step-3.png\" alt=\"create-new-menu-resource-file1\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/plsmm2zgzfvtos5/create-menu-step-4.png\" alt=\"create-new-menu-resource-file2\"\u003e\u003c/p\u003e\r\n\u003cp\u003eInside this file, we'll place the following layout code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eres/menu/menu_search.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/action_search\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:icon\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_search_white_24dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:showAsAction\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"always\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eapp:actionViewClass\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"android.support.v7.widget.SearchView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:title\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Search\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eitem\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003emenu\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we set\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eshowAsAction\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealways\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto ensure the search icon (our magnifying glass) is always visible.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eactionViewClass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis where we determine which Android component to use as the action view. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eaction view\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an action that provides functionality within the app bar. In this case we're setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp:actionViewClass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.support.v7.widget.SearchView\u003c/code\u003e, which points to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003cp\u003eRemember when we said that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebehaves similarly to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e, but with additional configuration like handling input events, offering search suggestions, and creating\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eIntents\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhen the user executes a query? Setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eapp:actionViewClass\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass is what makes area of our layout a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, thereby giving it this extra functionality.\u003c/p\u003e\r\n\u003ch2\u003eAdding Search Functionality\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s inflate the menu, gather the user's search query from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, and send it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to request and display information about restaurants in the zip code provided by the user.\u003c/p\u003e\r\n\u003cp\u003eAlso, now that we're done experimenting with writing data to Firebase, let's switch back to saving the user's zip code to shared preferences, like we did\u003cspan\u003e \u003c/span\u003e\u003ca href=\"modules/items/ie33f4437c66dcfb5917b0ac65a520b19\" target=\"_blank\"\u003epreviously\u003c/a\u003e. (As described in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/weekend-work-data-persistence?module_item_id=i9856e656f1e2982ad01d4703256f8b45\" target=\"_blank\"\u003ethis lesson\u003c/a\u003e, saving zip codes in Firebase was only temporary, to allow us to practice saving small pieces of data before saving entire Java objects).\u003c/p\u003e\r\n\u003ch3\u003eStashing and Retrieving Data from SharedPreferences\u003c/h3\u003e\r\n\u003cp\u003eWe'll save a new zip code to shared preferences\u003cspan\u003e \u003c/span\u003e\u003cem\u003eif\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user enters one, or we'll pull their most recently searched location from shared preferences if they do not.\u003c/p\u003e\r\n\u003cp\u003eFirst, uncomment any code relating to SharedPreferences in RestaurantListActivity. We'll also need to declare the SharedPreferences\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject as a member variable at the top of our file. Now that users will be able to search a new zip code here in our RestaurantListActivity, we'll need access to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditor\u003c/code\u003eto stash this new zip code in SharedPreferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAdditionally, we'll need to include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod from our MainActivity here in RestaurantListActivity. This method will be responsible for writing data to Shared Preferences:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, below the existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we'll override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe inflate and bind our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e, define our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSharedPreferences \u003c/code\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEditor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variables. Also to retrieve a user’s search from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, we must grab the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaction_search\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emenu item from our new layout, and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMenuItemCompat.getActionView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply contains the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn super.onOptionsItemSelected(item);\u003c/code\u003e. This ensures that all functionality from the parent class (referred to here as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper\u003c/code\u003e) will still apply despite us manually overriding portions of the menu's functionality.\u003c/p\u003e\r\n\u003ch2\u003eSearchView Listeners\u003c/h2\u003e\r\n\u003cp\u003eNow that we've located our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, we can attach a special listener to it.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects have their own dedicated listeners called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnQueryTextListener\u003c/code\u003e, that listen for changes in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetOnQueryTextListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand pass in a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView.OnQueryTextListener\u003c/code\u003e. It has two methods we will need to override:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextSubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextChange()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n        });\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you may have anticipated,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnQueryTextSubmit()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis run automatically when the user submits a query into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextChange()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis run whenever any changes to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSearchView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtents occur.\u003c/p\u003e\r\n\u003cp\u003eBecause we only want to gather the input\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe user has submitted something (and not every time they type a single character into the field), we'll place our logic in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextSubmit()\u003c/code\u003e, leaving\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonQueryTextChange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efairly empty. We call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto save the zip code the user searches, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto begin executing a request to the Yelp API to return restaurants in that area.\u003c/p\u003e\r\n\u003cp\u003eAfter these changes, the completed RestaurantListActivity file should appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu)\u003c/span\u003e \u003c/span\u003e{\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                RestaurantListActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getApplicationContext(), mRestaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(RestaurantListActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRefactoring MainActivity\u003c/h2\u003e\r\n\u003cp\u003eWe can now remove both the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand any code for adding its contents to shared preferences\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eFirebase from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e, since we are now saving zip codes to shared preferences in RestaurantListActivity.\u003c/p\u003e\r\n\u003cp\u003eOur refactored\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.savedRestaurantsButton) Button mSavedRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mSavedRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(v == mFindRestaurantsButton) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (v == mSavedRestaurantsButton) {\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, SavedRestaurantListActivity.class);\r\n            startActivity(intent);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eshould appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u0026lt;?xml version=\u003cspan class=\"hljs-string\"\u003e\"1.0\"\u003c/span\u003e encoding=\u003cspan class=\"hljs-string\"\u003e\"utf-8\"\u003c/span\u003e?\u0026gt;\r\n\u0026lt;RelativeLayout xmlns:android=\u003cspan class=\"hljs-string\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    xmlns:tools=\u003cspan class=\"hljs-string\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n    android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n    tools:context=\u003cspan class=\"hljs-string\"\u003e\".ui.MainActivity\"\u003c/span\u003e\r\n    android:background=\u003cspan class=\"hljs-string\"\u003e\"#000000\"\u003c/span\u003e\u0026gt;\r\n\r\n    \u0026lt;ImageView\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/imageView\"\u003c/span\u003e\r\n        android:src=\u003cspan class=\"hljs-string\"\u003e\"@drawable/background\"\u003c/span\u003e\r\n        android:scaleType=\u003cspan class=\"hljs-string\"\u003e\"centerCrop\"\u003c/span\u003e /\u0026gt;\r\n\r\n    \u0026lt;TextView\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:text=\u003cspan class=\"hljs-string\"\u003e\"MyRestaurants\"\u003c/span\u003e\r\n        android:layout_alignParentTop=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_centerHorizontal=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_marginTop=\u003cspan class=\"hljs-string\"\u003e\"35dp\"\u003c/span\u003e\r\n        android:textColor=\u003cspan class=\"hljs-string\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        android:textSize=\u003cspan class=\"hljs-string\"\u003e\"60sp\"\u003c/span\u003e\r\n        android:textStyle=\u003cspan class=\"hljs-string\"\u003e\"bold\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/appNameTextView\"\u003c/span\u003e/\u0026gt;\r\n\r\n    \u0026lt;Button\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:text=\u003cspan class=\"hljs-string\"\u003e\"Find Restaurants\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/findRestaurantsButton\"\u003c/span\u003e\r\n        android:background=\u003cspan class=\"hljs-string\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        android:textColor=\u003cspan class=\"hljs-string\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        android:visibility=\u003cspan class=\"hljs-string\"\u003e\"visible\"\u003c/span\u003e\r\n        android:layout_above=\u003cspan class=\"hljs-string\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        android:layout_alignParentLeft=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_alignParentStart=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_marginBottom=\u003cspan class=\"hljs-string\"\u003e\"10dp\"\u003c/span\u003e /\u0026gt;\r\n\r\n    \u0026lt;Button\r\n        android:layout_width=\u003cspan class=\"hljs-string\"\u003e\"match_parent\"\u003c/span\u003e\r\n        android:layout_height=\u003cspan class=\"hljs-string\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        android:text=\u003cspan class=\"hljs-string\"\u003e\"My Saved Restaurants\"\u003c/span\u003e\r\n        android:id=\u003cspan class=\"hljs-string\"\u003e\"@+id/savedRestaurantsButton\"\u003c/span\u003e\r\n        android:background=\u003cspan class=\"hljs-string\"\u003e\"@color/colorAccent\"\u003c/span\u003e\r\n        android:textColor=\u003cspan class=\"hljs-string\"\u003e\"@color/colorTextIcons\"\u003c/span\u003e\r\n        android:visibility=\u003cspan class=\"hljs-string\"\u003e\"visible\"\u003c/span\u003e\r\n        android:layout_alignParentBottom=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_alignParentLeft=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e\r\n        android:layout_alignParentStart=\u003cspan class=\"hljs-string\"\u003e\"true\"\u003c/span\u003e/\u0026gt;\r\n\r\n\u0026lt;/RelativeLayout\u0026gt;\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, users will be greeted with two buttons when they launch our application:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/0q5iejnmp5al8bh/two-buttons-main-activity.png\" alt=\"main-activity-without-edit-text\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\"Find Restaurants\" will continue to take users to a list of restaurants in the area they last searched. If the user has\u003cspan\u003e \u003c/span\u003e\u003cem\u003enever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esearched for a zip code, they'll be able to use our new search widget at the top of the page in RestaurantListActivity to execute a new search:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/r5ms441s2lxlhdv/searchview-widget.png\" alt=\"search-view-icon\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/5q6gc4tzps5p0bb/searchview-widget-2.png\" alt=\"search-view-in-action\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/16_search_widget\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSearch widget\u003c/strong\u003e: Behaves similarly to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efields, but offers additional configuration including handling input events, offering search suggestions, and creating intents when the user executes a search.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAction view\u003c/strong\u003e: An object (or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e) that provides functionality within the app bar.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Developers Guide entry on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/search/search-dialog.html\" target=\"_blank\"\u003eSearch Dialogs\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid Developers Guide entry on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/training/appbar/action-views.html\" target=\"_blank\"\u003eAction Views and Action Providers\u003c/a\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"thursday-technical-interview-questions","title":"Thursday: Technical Interview Questions","type":"WikiPage","content":"\u003ch2\u003e\u003cspan\u003eTechnical Interview Questions\u003c/span\u003e\u003c/h2\u003e\r\n\u003cp\u003e\u003cspan\u003eA good technical interview should be a conversation. It should not be a test of knowledge. A technical interview is best used when it evaluates how a candidate thinks and works, not what they know. The candidate’s resume and the non-whiteboard part of the interview should be sufficient to determine if they have experience with the required languages, frameworks, and concepts. As an interviewee, if you’re asked to whiteboard, that’s great news – the interviewer knows you have the skills to work through a difficult question, and wants to see how you do so.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eDuring the technical mock interview session you will be asked to\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eSolve coding and pseudo-coding problems in front of the Technical Mentor and the Professional Development Mentor.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eAnswer a technical question out loud\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhiteboard a solution to a coding problem - that is, sketching out a visual or pseudo-code solution to a problem, and talking out loud about your thought process as you go.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003ch3\u003e\u003cspan\u003eWhiteboarding\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eSome interviews will involve answering technical questions out loud, or \"whiteboarding\" a solution to a coding problem. This means that you will be sketching out a visual and/or pseudo-code solution to a problem, and talking out loud about your thought process as you go. This is one of the most common interview formats, and where you should spend a good amount of extra time preparing.\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eWhen answering these types of questions, make sure that you:\u003c/span\u003e\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eAsk clarifying questions. Often, your interviewer will intentionally be vague about something or leave out information. Don't be shy about asking for clarification or more information.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eTalk out loud. Even when you have no idea where to go, do not just stand there silently. The interviewer wants to hear your thought process, even if it is just you coming up with ideas and then saying why they will not work or are wrong. You should strive to talk constantly.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eAdmit when you do not know something. If you try to talk your way through a question that you actually do not have an answer to, you will most likely still not get the answer. Just say \"I do not know.\" However, if you can, keep going: \"I do not know, but here is how I might figure it out.\" Then, go forward with the interviewer. How would you go about finding out? What terms would you search for? Where have you seen similar behavior? Keep communicating and showing how you think.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eUse the programming language you're most familiar with. It doesn't matter if the interviewer is unfamiliar with that language. They can probably figure it out. They can consult colleagues after with any questions.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\u003cspan\u003eSo, what are some good practices for \u003cstrong\u003ewhiteboarding\u003c/strong\u003e?\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirst, have the interviewer repeat the question. Listen carefully and write down a list of specs on the whiteboard.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAgain, you’re showing how you work. Working from a list of specs demonstrates your habits as a good, professional developer. Once the specs are listed, read them back and start looking for keywords and easy requirements that will help you answer the question.\u003c/span\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eAre you writing a function? Get the word function and some curly braces up on the board.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eDoes the function accept any kind of argument? Put any arguments in the function's parentheses.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eDoes the function return a value? Put a return statement at the end of the function.\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cspan\u003eThe purpose of all this setup is to give ourselves a familiar work space. It also gets some information on the board, and can get you thinking.\u003c/span\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eAre you stuck, or do you need to test your algorithm? One approach is to draw a box on the whiteboard and list your variables with their initial values. This box represents machine memory during the process. Next, pass some test values into your function and talk through the behavior with the interviewer while changing the values within the box. This live testing is another way to get you thinking and unstuck.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003e\u003cspan\u003eOpen-Ended Technical Questions\u003c/span\u003e\u003c/h3\u003e\r\n\u003cp\u003e\u003cspan\u003eTechnical questions that may not require you to code at all are often open-ended discussion questions, which are designed to give you a chance to showcase your knowledge. It is important to take advantage of these opportunities, as you have the freedom to highlight your strongest area of knowledge.\u003c/span\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eHere are some sample interview questions:\u003c/span\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is the difference between POST request and a GET request?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is Git and why would you use it?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat happens when a user logs into a website?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is a class?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is an object?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is unit testing?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat happens when a user types in a URL?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is a foreign key?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is REST?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eShow me some code you wrote that you're especially proud of.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eTalk about a time that you solved a difficult coding problem.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is an array?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eExplain MVC.\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is a join table in SQL?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat is floating in CSS?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat are media queries and how do you use them?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eYou've been working on a site for a couple months here at our company. You come in one day and the site is down. What do you do?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-custom-adapters-with-recyclerview","title":"Weekend: Custom Adapters with RecyclerView","type":"WikiPage","content":"\u003cdiv class=\"alert alert-danger\"\u003e\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e In some cases, adding the RecyclerView dependency library can lead to version incompatibility errors. This is a known issue. If you experience errors after adding the RecyclerView library, see the \u003c/span\u003e\u003cem\u003eAddressing Version Incompatibility\u003c/em\u003e\u003cspan\u003e section at the end of this lesson.\u003c/span\u003e\n\u003c/div\u003e\r\n\u003cp\u003eSo far, we only used Android's built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapters\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display lists of information in an activity. We've altered those ArrayAdapters to be able to pass additional data, and we have made a simple custom adapter to work with a simple layout. Often though, we'll want to display more than just a single string, and we'll want to use our own layout. Because the objects we are passing around and parsing into custom layouts are about to get more complex, we will spend some time learning about a powerful new tool to process information into a repeating layout: A RecyclerView.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBegin by reading CodePath's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-the-RecyclerView\"\u003eUsing the Recycler View\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eRecyclerView\u003c/h2\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a newer Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject meant to render any adapter-based\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e. It's similar to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e, but with many updated features, including the ability to implement both horizontal and vertical lists. (This will come in handy later, when we add functionality to display content horizontally\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003evertically depending on the device orientation).\u003c/p\u003e\r\n\u003ch3\u003eRecyclerView Requirements\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewidget, you must also include its corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for positioning individual item views inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. The LayoutManager knows the size of the layout, and can compute how much space needs to be reserved to show the optimum amount of entries.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eThere are three built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoptions: *\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayoutManager\u003c/code\u003e: Displays items in a vertical or horizontal scrolling list. *\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGridLayoutManager\u003c/code\u003e: Displays items in a grid. *\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eStaggeredGridLayoutManager\u003c/code\u003e: Displays items in a more staggered grid. * Every\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emust also be backed by a model - this means that it can parse or lay out a specific\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eRecyclerView.Adapter\u003c/h2\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e, much like the built-in Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e, will populate the data into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. It also converts a Java object into an individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be inserted and displayed to the user.\u003c/p\u003e\r\n\u003cp\u003eLet's look at this image one more time, as we are about to build something very similar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/vgzhim65pwne6mm/app_object_overview.png\" alt=\"app_object_overview\"\u003e\u003c/p\u003e\r\n\u003cp\u003eTo be able to bring the above sketch to life, we'll need the following code pieces.\u003c/p\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequires a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an object that stores multiple\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside the tag field of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso they can be immediately loaded, and you don't have to find them by id repeatedly. This also improves application performance.\u003c/li\u003e\r\n\u003cli\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas three primary methods:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateViewHolder()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemCount()\u003c/code\u003e.\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreateViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einflates an XML layout and returns a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the various information in the list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. This is the moment when the data from our model gets associated, aka \"bound\" to our view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003egetItemCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply returns the number of items the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be responsible for listing, so that it knows how many list item views it will need to recycle.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eConsider this visual depictions of how the RecyclerView works:\u003cimg src=\"https://dl.dropboxusercontent.com/s/33dq0242i027mlh/06-recyclerviewer-adapter.png\" alt=\"06-recyclerviewer-adapter.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eand\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/r53ul5s62zlmfrm/04-view-recycling.png\" alt=\"04-view-recycling.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eEnough theory. Let's get coding.\u003c/p\u003e\r\n\u003ch2\u003eAdding RecyclerView to MyRestaurants\u003c/h2\u003e\r\n\u003cp\u003eFirst, we'll add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esupport library:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n   ...\r\n    implementation \u003cspan class=\"hljs-string\"\u003e'com.android.support:recyclerview-v7:+'\u003c/span\u003e\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll then add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewidget to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"16dp\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v7.widget.RecyclerView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/recyclerView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext we'll create a layout to define the appearance of each restaurant list item. Create a new layout resource file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand add the following code to create our list item placeholder:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#ffffff\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe wrap the ratingTextView in a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRelativeLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside of it's containing vertical\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso that it will display nicely on the bottom right corner of the list item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo do this, we must specify that the relative layout's height and width match the remaining space allotted after the restaurant and cuisine type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ematch_parent\u003c/em\u003e\u003cspan\u003e \u003c/span\u003evalue.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eFeel free to use any placeholder image you want. Here, we are using an image in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDrawable\u003c/code\u003efolder called \"food_dish\".\u003c/p\u003e\r\n\u003ch2\u003eCreating Custom Adapters\u003c/h2\u003e\r\n\u003cp\u003eNext, we'll create our custom adapter. Create a new package called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e. Inside it, make a new Java class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantListAdapter\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eOur custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will need to extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003eclass. We'll also include a constructor:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe will need\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto create our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto calculate the item count, which informs the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehow many individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit will need to recycle.\u003c/p\u003e\r\n\u003ch3\u003eRecyclerView View Holders\u003c/h3\u003e\r\n\u003cp\u003eWe also know our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadapter will require a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. We can create this as an inner-class here within our RestaurantListAdapter class. An\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einner-class\u003c/strong\u003e, also sometimes referred to as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enested class\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis simply a class that resides\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanother class. They have all functionality of a non-nested class, but with limited scope. They also have full access to the class in which they are nested.\u003c/p\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003einner class will extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.ViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, use ButterKnife to bind all views in the layout, and include a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ebindRestaurant()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will set the contents of the layout's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the attributes of a specific restaurant:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mRestaurantImageView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.categoryTextView) TextView mCategoryTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingTextView;\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n            mContext = itemView.getContext();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n            mNameTextView.setText(restaurant.getName());\r\n            mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow that we have the necessary ViewHolder, we can add the remaining three methods required by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateViewHolder()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemCount()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e RestaurantListAdapter.\u003cspan class=\"hljs-function\"\u003eRestaurantViewHolder \u003cspan class=\"hljs-title\"\u003eonCreateViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ViewGroup parent, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e viewType)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.restaurant_list_item, parent, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        RestaurantViewHolder viewHolder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantViewHolder(view);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e viewHolder;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RestaurantListAdapter.RestaurantViewHolder holder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        holder.bindRestaurant(mRestaurants.get(position));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetItemCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.size();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mRestaurantImageView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.categoryTextView) TextView mCategoryTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingTextView;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n            mContext = itemView.getContext();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n            mNameTextView.setText(restaurant.getName());\r\n            mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.onCreateViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod inflates the layout, and creates the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject required from the adapter. We will revisit this momentarily.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e.onBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eupdates the contents of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto reflect the restaurant in the given position.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e.getItemCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the number of items the adapter will display.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we set up our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. We find the views and set their values for the item in the list.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eUsing Custom Adapters with RecyclerView\u003c/h2\u003e\r\n\u003cp\u003eNow, we are ready to use our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our RestaurantsActivity. Similar to the way we previously used\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein conjunction with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapters\u003c/code\u003e, we'll call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.setAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto set\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas its new adapter.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, we'll need to create and set an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003erequires. We'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayoutManager\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003eFirst, we'll replace these two lines of code near the top of the file:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"lit\"\u003e@Bind\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eR\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eid\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003elocationTextView\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eTextView\u003c/span\u003e\u003cspan class=\"pln\"\u003e mLocationTextView\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"lit\"\u003e@Bind\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eR\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eid\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003elistView\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eListView\u003c/span\u003e\u003cspan class=\"pln\"\u003e mListView\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003e..with these two lines:\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"lit\"\u003e@Bind\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"pln\"\u003eR\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eid\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003erecyclerView\u003c/span\u003e\u003cspan class=\"pun\"\u003e)\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eRecyclerView\u003c/span\u003e\u003cspan class=\"pln\"\u003e mRecyclerView\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n    \u003c/span\u003e\u003cspan class=\"kwd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"pln\"\u003e mAdapter\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBecause we're now depending on our RecyclerView and corresponding adapter to display information in our UI, instead of our old LocationText and List views.\u003c/p\u003e\r\n\u003cp\u003eWe can also remove the following line completely:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n        mLocationTextView\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003esetText\u003c/span\u003e\u003cspan class=\"pun\"\u003e(\u003c/span\u003e\u003cspan class=\"str\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e+\u003c/span\u003e\u003cspan class=\"pln\"\u003e location\u003c/span\u003e\u003cspan class=\"pun\"\u003e);\u003c/span\u003e\u003cspan class=\"pln\"\u003e\r\n\u003c/span\u003e\u003cspan class=\"pun\"\u003e...\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBecause we're not longer using the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003emLocationTextView\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eit refers to.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll add code to instantiate the adapter, associate it with our RecyclerVIew, and assign a layout manager to our overriden\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003erun\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003emethod in the\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback of\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"pln\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"pun\"\u003e()\u003c/span\u003e\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                restaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getApplicationContext(), restaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \r\n                                \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eNote on RecyclerView Performance\u003c/h2\u003e\r\n\u003cp\u003eThe line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecyclerView.setHasFixedSize(true);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einforms\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat its width and height should always remain the same. Otherwise, as individual list item views are continually recycled, it may attempt to reset its own size to best fit the content.\u003c/p\u003e\r\n\u003cp\u003eIf each list item was a different size, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emight need to resize as we scrolled to best fit content, but\u003cspan\u003e \u003c/span\u003e\u003cem\u003eour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elist items are pretty uniform. So, we can avoid wasting precious processing power by setting a fixed size.\u003c/p\u003e\r\n\u003cp\u003eWe now have a customized list of restaurants using a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. Nice work!\u003c/p\u003e\r\n\u003cp\u003eIf you run across an error building your program with an error header like: \u003c/p\u003e\r\n\u003cpre\u003eAndroid resource linking failed...\u003c/pre\u003e\r\n\u003cp\u003eDowngrade your gradle version to 3.1.4 i.e\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003ebuild.gradle(Project:restaurant)\u003c/span\u003e\u003c/p\u003e\r\n\u003cpre\u003eclasspath 'com.android.tools.build:gradle:3.1.4'\u003c/pre\u003e\r\n\u003cp\u003eThe sync.\u003c/p\u003e\r\n\u003cp\u003eYou could also change the compileSdkVersion, targetSdkVersion and the sdk as follows :\u003c/p\u003e\r\n\u003cp\u003ebuild.gradle(Project:app):\u003c/p\u003e\r\n\u003cpre\u003ecompileSdkVersion 28\u003cbr\u003etargetSdkVersion 28\u003cbr\u003e....\u003cbr\u003edependencies {\u003cbr\u003e...\u003cbr\u003eimplementation 'com.android.support:preference-v7:28.0.0'\u003cbr\u003e....\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cp\u003eBut this may affect the running of your tests given robolectric doesn't support SdkVersion 28  yet... So for robolectric tests (If they won't have rolled out support for the 28th API yet) revert back to ;\u003c/p\u003e\r\n\u003cpre\u003ecompileSdkVersion 27\u003cbr\u003etargetSdkVersion 27\u003cbr\u003e....\u003cbr\u003edependencies {\u003cbr\u003e...\u003cbr\u003eimplementation 'com.android.support:appcompat-v7:27.1.1'\u003cbr\u003e...\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cpre class=\"default prettyprint prettyprinted\"\u003e\u003ccode\u003e\u003cspan class=\"pln\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eVideo Version of this Lesson\u003c/h2\u003e\r\n\u003cp\u003eHere is the slightly outdated, optional video for this lesson if you would like to review it for reference.\u003c/p\u003e\r\n\u003cdiv class=\"video\"\u003e\u003ciframe src=\"https://player.vimeo.com/video/158270113\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/9_Custom_Adapters_RecyclerView\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRecyclerView`\u003c/strong\u003e: A newer Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewGroup\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject meant to render any adapter-based\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e. It's similar to a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e, but with many updated features, including the ability to implement both horizontal and vertical lists.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003c/strong\u003e: Responsible for positioning individual item views inside the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. There are three built-in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayoutManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoptions:\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eLinearLayoutManager\u003c/code\u003e: Displays items in a vertical or horizontal scrolling list.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eGridLayoutManager\u003c/code\u003e: Displays items in a grid.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eStaggeredGridLayoutManager\u003c/code\u003e: Displays items in a more staggered grid.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e\u003c/strong\u003e: Similar to the built-in Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e. It will populate the data into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. It also converts a Java object into an individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto be inserted and displayed to the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003c/strong\u003e: An object that stores multiple\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside the tag field of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eso they can be immediately loaded, and you don't have to find them by id repeatedly. A\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis required by the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInner-class\u003c/strong\u003e: Also sometimes referred to as a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003enested class\u003c/strong\u003e. A class that resides\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithin\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanother class. They have all functionality of a non-nested class, but with limited scope. They also have full access to the class in which they are nested.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003eCreating a custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u0026gt; \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context context, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        mContext = context;\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e RestaurantListAdapter.\u003cspan class=\"hljs-function\"\u003eRestaurantViewHolder \u003cspan class=\"hljs-title\"\u003eonCreateViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ViewGroup parent, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e viewType)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.restaurant_list_item, parent, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        RestaurantViewHolder viewHolder = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantViewHolder(view);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e viewHolder;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RestaurantListAdapter.RestaurantViewHolder holder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        holder.bindRestaurant(mRestaurants.get(position));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetItemCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.size();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mRestaurantImageView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.categoryTextView) TextView mCategoryTextView;\r\n        \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingTextView;\r\n        \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n            ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, itemView);\r\n            mContext = itemView.getContext();\r\n        }\r\n\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n            mNameTextView.setText(restaurant.getName());\r\n            mCategoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n            mRatingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInstantiating and setting\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView.Adapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantsActivity.class.getSimpleName();\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n\r\n        getRestaurants(location);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                restaurants = yelpService.processResults(response);\r\n\r\n                RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getApplicationContext(), restaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \r\n                                \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/9_Custom_Adapters_RecyclerView\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-welcome-to-android","title":"Pre-course work: Welcome to Android","type":"WikiPage","content":"\u003cp\u003eWelcome to the exciting world of Android development!\u003c/p\u003e\r\n\u003cp\u003eIn this course, we'll learn how to build Android apps, including how to create user interfaces, communicate with a backend server, and take advantage of device features.\u003c/p\u003e\r\n\u003cp\u003eIn the first week, we'll focus on the basics of Android user interfaces. We'll start by exploring how to create a new project, use standard Android development tools, customize how things look, provide navigation through an app, and display information. Just like learning any new toolset, there is an awful lot of information and context required to get up and running. Expect to spend more time than previous courses on Android homework.\u003c/p\u003e\r\n\u003ch2\u003ePre-Work\u003c/h2\u003e\r\n\u003cp\u003eThe goal for this weekend's pre-work homework is learning how to:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate a new Android app;\u003c/li\u003e\r\n\u003cli\u003eBuild a simple user interface;\u003c/li\u003e\r\n\u003cli\u003eCustomize user interface elements;\u003c/li\u003e\r\n\u003cli\u003eAllow users to navigate to different parts of the app;\u003c/li\u003e\r\n\u003cli\u003eGather user input; and\u003c/li\u003e\r\n\u003cli\u003ePass data to another activity.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eOngoing Project from Curriculum\u003c/h2\u003e\r\n\u003cp\u003eAndroid applications are complex. There are many moving pieces, and a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto keep track of. In order to teach the concepts we cover in the most context possible, many of the lessons and homework in this course will build upon an ongoing project called MyRestaurants.\u003c/p\u003e\r\n\u003cp\u003eWhen a new concept is introduced the curriculum will also walk through the process of implementing this concept or feature into MyRestaurants. When the homework adds new content to MyRestaurants, you will usually begin class the next day by following along with the homework to integrate this content into\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003eMyRestaurants application, too.\u003c/p\u003e\r\n\u003cp\u003eThis allows us to focus on learning\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003econcepts instead of each lesson spending time establishing the individual circumstances of its own example; and provides an extra opportunity for guided hands-on practice. It also ensures you're on the same page with the curriculum, since you'll already be familiar with the application used in the examples! Additionally, you'll be able to maintain a repo of your own that continually reflects the curriculum, and can easily be used as a reference.\u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants Examples\u003c/h3\u003e\r\n\u003cp\u003eBecause many of the lessons throughout the curriculum use MyRestaurants as an example, it's important to ensure your own project is always carefully updated to include the most recent additions. For this reason, example MyRestaurants repos are linked at the bottom of every lesson that makes any changes to this ongoing project. These links look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eEach lesson's link will take you to a MyRestaurants repo that reflects the project's current state in development\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe features described in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethat\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elesson have been implemented.\u003c/p\u003e\r\n\u003ch2\u003eIndependent Projects\u003c/h2\u003e\r\n\u003cp\u003eUnlike other courses, Independent Projects for this course will be an ongoing personal project of your choosing. Each Friday you’ll continue to build upon your independent project from the previous week. Begin brainstorming ideas for an ongoing project now; you'll need to propose a project idea to your instructor by the first Thursday of the course. \u003cspan\u003eThis means that you must keep your project’s codebase in good shape at all times; thoughtful comments, and appropriate workflow practices (branch-work-merge in small batches) will help achieve this goal.\u003c/span\u003e\u003c/p\u003e\r\n\u003ch3\u003eCategory Options\u003c/h3\u003e\r\n\u003cp\u003eYou and your classmates will not be required to create the exact same application either. Instead, you will be provided several categories to choose from. By selecting from a pre-defined category you’ll ensure your application's scope is not too large to reasonably complete in four Fridays, nor too small to accurately demonstrate each week’s concepts and objectives.\u003c/p\u003e\r\n\u003ch3\u003eAPI Requirement\u003c/h3\u003e\r\n\u003cp\u003eIn the second week we’ll also learn how to integrate web service backends (also known as APIs) into applications. You will be required to research, select, and implement an API of your choosing into your project on the second Friday of the course. Take this into consideration when selecting a project category, and/or the theme or focus of your application. (More information on selecting APIs can be found in this lesson \u003ca href=\"pages/pre-course-work-android-weekly-independent-projects?module_item_id=i8bea7f867c3c744e1d8d3f01e57aff7d\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/pre-course-work-android-weekly-independent-projects\" data-api-returntype=\"Page\"\u003ehere\u003c/a\u003e).\u003c/p\u003e\r\n\u003ch1\u003eInstallation\u003c/h1\u003e\r\n\u003cp\u003eFor this course, we will be using Android Studio - the official IDE (Integrated Development Environment) for Android application development. Android Studio provides us with all of the tools we need to write, test, and build apps and even interact with our apps using a built-in emulator.\u003c/p\u003e\r\n\u003ch2\u003eJDK\u003c/h2\u003e\r\n\u003cp\u003eBefore downloading and installing Android Studio, make sure your computer is equipped with JDK 6 or higher. To check which version of the JDK is currently on your computer, type the following into the terminal:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-shell\"\u003e$ javac -version\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf the output does not read 1.6.0 or higher, go back to the Java setup instructions: Installing Java: OSX or Installing Java: Windows\u003c/p\u003e\r\n\u003ch2\u003eAndroid Studio\u003c/h2\u003e\r\n\u003cp\u003eAndroid Studio can be downloaded from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/index.html\" target=\"_blank\"\u003eAndroid Studio Website\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, make sure to check out and bookmark the Android Studio documentation\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/intro/index.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"thursday-working-with-simple-fragments-dialogfragment","title":"Thursday: Working with Simple Fragments - DialogFragment","type":"WikiPage","content":"\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the difference between the ‘system back button’ and the ‘up’ button?\u003c/li\u003e\r\n\u003cli\u003eWhat is a hierarchical parent? Where do we denote an activity's parent? What does creating this relationship allow us to do?\u003c/li\u003e\r\n\u003cli\u003eWhat is the Android Manifest? What is placed in here?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eComparing web apps to mobile apps\u003c/h3\u003e\r\n\u003cp\u003eBy now we should be feeling fairly comfortable working with Activities in Android, even if we are still needing a lot of time to accomplish simple things - you are learning a lot of new content this week and that can be overwhelming!\u003c/p\u003e\r\n\u003cp\u003eSometimes it can be useful to zoom out and put things into a little perspective to make the bigger picture easier to comprehend.\u003c/p\u003e\r\n\u003cp\u003eLet's take a minute to do that before we move on.\u003c/p\u003e\r\n\u003cp\u003eIn our apps, as well as in any kind of web application (and the overwhelming majority of other kinds of apps as well), we are trying to respond to one specific kind of circumstance:\u003c/p\u003e\r\n\u003cp\u003eA user uses our app or website to achieve some kind of goal, such as seeing a list of products, tracking her todo’s, sending a message to a friend, or playing a game.\u003c/p\u003e\r\n\u003cp\u003eIf we consider what we develop from this perspective, the central problems we have to solve are always the same:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWe need to capture our users' intent correctly.\u003c/li\u003e\r\n\u003cli\u003eWe need to process that intent in some way, in accordance with our own processing code that allows us to store a to-do, save a score to a high score, or send a message.\u003c/li\u003e\r\n\u003cli\u003eWe need to then update our app dependent on the outcome of that intent, updating our user interface, so that our user can make a decision based on this updated set of circumstances.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eConclusion:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eThese overarching principles are the same regardless of what type of app we are trying to create, and also which platform we are trying to create that app on. Consider this for a moment: you’d be hard pressed to find an application we build at Moringa School that does not fulfill the lowest common denominator outlined above.\u003c/p\u003e\r\n\u003cp\u003eBecause this underlying principle always holds, our apps, whether they be in PHP or Ruby, Android, or vanilla JS, all have overarching commonalities.\u003c/p\u003e\r\n\u003cp\u003eConsider the following chart:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/bckh3czqec6um4o/web-vs-android-chart.png\" alt=\"web-vs-android-chart\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eIntroducing Fragments\u003c/h3\u003e\r\n\u003cp\u003eWith that in mind, let's discuss a concept: fragments. The good news is that you are already familiar with fragments, at least conceptually!\u003c/p\u003e\r\n\u003cp\u003eFragments are the components of the Android world. They are the equivalent of breaking down code into re-usable pieces. Imagine having to write all of your code into your Activities - it would quickly get overwhelming and the code would not be modular. Fragments are comprised of both layout code layer, written in XML, and functional code layer, written in Java. They are really very similar to Activities in this sense, just smaller and more modular. The reasons behind breaking the code down into fragments are the same as for any JavaScript framework, or MVC components in another language or framework, for example, Angular JS components. And the complications that arise, such as communicating with fragments, and retrieving information from fragments, are the same as with components in any other framework. But don’t worry, we will go through this step by step!\u003c/p\u003e\r\n\u003cp\u003eLater on, we will work extensively with completely custom fragments, but for now, let’s get familiarized with the intricacies of fragments by working with some stock fragments that are defined in the Android package. We’ll build a simple UI where we utilize one of the most common fragments, a.\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003e This will be useful practice for crafting your UIs for your independent and capstone projects. Making UIs can be time-consuming in Android - do not underestimate the amount of time it can take to build even a simple interface!\u003c/p\u003e\r\n\u003cp\u003eLet's get coding.\u003c/p\u003e\r\n\u003ch3\u003eAdding a DialogFragment to our App\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003eCreate a new project with the settings we have been working with so far.\u003c/li\u003e\r\n\u003cli\u003eName your project and your package whatever you like, and keep the first activity called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eNow, define a new class inside of your main package. Name it\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoodDialogFragment\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eSimilarly to how we have already practiced extending adapters and customizing them, make\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMoodDialogFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eextend\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eImplement the following Override in \u003ccode\u003eMoodDialogFragment\u003c/code\u003e:\u003c/p\u003e\r\n\u003cp\u003eMoodDialogFragment.java\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View rootView = inflater.inflate(R.layout.fragment_mood_dialog, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        getDialog().setTitle(\u003cspan class=\"hljs-string\"\u003e\"Simple Dialog\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rootView;\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAfter you import the necessary packages, the only thing that Android Studio isn’t happy with is\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_mood_dialog\u003c/em\u003e, which makes sense: We haven’t defined this XML file yet. Let’s do that now.\u003c/p\u003e\r\n\u003cp\u003eCreate a new\u003cspan\u003e \u003c/span\u003e\u003cem\u003eXML/Layout XML File\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_mood_dialog\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdd in the following XML:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_mood_dialog.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003exmlns:app\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res-auto\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:weightSum\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/baseLayout\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"How are you feeling today?\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/MoodLabel\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimaryDark\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:typeface\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"monospace\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"normal|bold\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:textAlignment\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n       \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"50dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n       \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioGroup\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/moodRadioGroup\"\u003c/span\u003e\r\n           \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Great\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton1\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Good\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton2\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Okay\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:checked\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton3\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Meh\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton4\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n           \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRadioButton\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Sad\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/radioButton5\"\u003c/span\u003e\r\n               \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n       \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRadioGroup\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n   \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe’re introducing a few new concepts here, but they shouldn’t be entirely unfamiliar.\u003c/p\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRadioGroup\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas to exist inside a,\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eLinearLayout\u003c/code\u003e and it's a layout container that allows you to add radio buttons, and can ensure that no two are checked at the same time! Pretty neat. Also, you can see we used several nested\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLinearLayout\u003c/code\u003es to keep our layout organized.\u003c/p\u003e\r\n\u003cp\u003eIf we ran the app now, it should build and run, but we would only see the textview defined in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e. Why? We may have defined our Fragment and its layout, but we actually need to construct a fragment object somewhere in our executable code. What is our executable code? Well our activity, of course!\u003c/p\u003e\r\n\u003ch3\u003eShowing our fragment\u003c/h3\u003e\r\n\u003cp\u003eJump back to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eFragmentManager fm = getFragmentManager();\r\nMoodDialogFragment moodDialogFragment = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MoodDialogFragment ();\r\nmoodDialogFragment.show(fm, \u003cspan class=\"hljs-string\"\u003e\"Sample Fragment\"\u003c/span\u003e);\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFragmentManager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for adding, replacing, removing fragments dynamically, it needs to be invoked anytime we are completing any of those actions (which is most of the time.)\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/r5vkm2stit5ti48/dialogfragment-with-radiobuttons.png\" alt=\"dialogfragment-with-radiobuttons.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we run our app, we see two things. A.) the dialog is opened as soon as the activity’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003emethod runs, which might be appropriate in some circumstances, but isn’t something we want most of the time, and B.) We have no buttons to either submit the form or close the Dialog. We can still close the dialog by clicking outside of the highlighted dialog window, but this is not ideal. Let’s fix the first thing first.\u003c/p\u003e\r\n\u003ch3\u003eAdding buttons and opening our dialog as a click event\u003c/h3\u003e\r\n\u003cp\u003eTry and work through the following steps without checking out the result. Consult the\u003cspan\u003e \u003c/span\u003e\u003ca title=\"\" href=\"https://moringacore-android.herokuapp.com/#droid-cheat-sheet.html\"\u003echeat\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esheet if you get stuck.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eIn your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e, create a new button, and call it moodButton.\u003c/li\u003e\r\n\u003cli\u003eAdd\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecompile 'com.jakewharton:butterknife:7.0.1'\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto your build.gradle dependencies.\u003c/li\u003e\r\n\u003cli\u003eBind your views with ButterKnife. (Don’t forget\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButterKnife.bind(this)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e.\u003c/li\u003e\r\n\u003cli\u003eSet an onClickListener onto your moodButton. Move the code that opens the dialog into that click event.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eCan’t make it work?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSee the \u003ca title=\"\" href=\"https://moringacore-android.herokuapp.com/#droid-cheat-sheet.html\"\u003echeat\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esheet for the full code.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eSecret tip\u003c/strong\u003e: Are you tired of having your button texts show up in uppercase? Change the textAppearance to “AppCompat” or set android:textAllCaps=\"false\" in your XML. As of January, 2017, a Google search for “android lowercase button” yields about 416,000 results...)\u003c/p\u003e\r\n\u003cp\u003eAlright, if you run your app, we should now have a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat opens on button click. Yay!\u003c/p\u003e\r\n\u003cp\u003eLet’s take the next step to add some buttons to our Dialog so we can interact with them. Let’s switch over to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efragment_mood_dialog.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003eAdd:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_mood_dialog.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e...\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Submit\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/submitButton\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eButton\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"cancel\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/cancelButton\"\u003c/span\u003e\r\n   \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore you close the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;/RadioGroup\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etag. Run your app, and you should see your buttons at the bottom of your dialog. Great! Now they need some functionality.\u003c/p\u003e\r\n\u003ch3\u003eAdding functionality to our cancel button and closing our dialog\u003c/h3\u003e\r\n\u003cp\u003eLet’s tackle closing the dialog button first.\u003c/p\u003e\r\n\u003cp\u003eBecause we need to respond to the click on the cancel button inside of the dialog, we need to find a way to connect with that view. Recently, we’ve started using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButterKnife\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto help us simplify binding our views, and that works great when we are inside an activity. But when we are trying to bind views inside a fragment, ButterKnife can’t help us - we need to do this the old fashioned way. Here’s how.\u003c/p\u003e\r\n\u003cp\u003eFirst, let’s declare some member variables to hold our cancel and submit buttons in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nButton cancelButton = (Button) rootView.findViewById(R.id.cancelButton);\r\nButton submitButton = (Button) rootView.findViewById(R.id.submitButton);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eSee that here we are accessing our views through through the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erootView\u003c/code\u003e, as we are not inside an activity, but looking for views currently on top of an activity. The name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erootView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just another variable name: What’s important here is that this variable holds the inflated layout and therefore has access to the Views we need to retrieve. Cool!\u003c/p\u003e\r\n\u003cp\u003eNow we have those buttons, we can begin setting click listeners:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\ncancelButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n       dismiss();\r\n   }\r\n});\r\n...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003edismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a static method we can simple call anytime we want to close the dialog. Try it out, we should now be able to close the dialog by clicking cancel. Here’s the full code for reference so far.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMoodDialogFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDialogFragment\u003c/span\u003e\u003c/span\u003e{\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n       View rootView = inflater.inflate(R.layout.fragment_mood_dialog, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n       Button cancelButton = (Button) rootView.findViewById(R.id.cancelButton);\r\n       Button submitButton = (Button) rootView.findViewById(R.id.submitButton);\r\n       cancelButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n           \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n           \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n               dismiss();\r\n           }\r\n       });\r\n       \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e rootView;\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eGreat! Now, the logical next step is to be able to retrieve the information from the form. Let’s tackle that next.\u003c/p\u003e\r\n\u003ch3\u003eReturning values from our form\u003c/h3\u003e\r\n\u003cp\u003eThis part is a bit trickier. We can’t just pull the selected radio button directly, instead we need a multi-step process.\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eFirst, we need to pull the entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRadioGroup\u003c/code\u003e,\u003c/li\u003e\r\n\u003cli\u003eThen, we can can use that to retrieve the selected radio button’s id.\u003c/li\u003e\r\n\u003cli\u003eNext, we can use that to retrieve the “value” of that selected radio button, and log it out.\u003c/li\u003e\r\n\u003cli\u003eThen, we'll want to close our dialog, just like we did when the cancel button received a click. Phew.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eOK, let’s get cracking.\u003c/p\u003e\r\n\u003cp\u003eImplement the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nRadioGroup surveyRadioGroup = (RadioGroup) rootView.findViewById(R.id.moodRadioGroup); \u003cspan class=\"hljs-comment\"\u003e//pull group\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e selectedId = surveyRadioGroup.getCheckedRadioButtonId(); \u003cspan class=\"hljs-comment\"\u003e//get selected ID\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e RadioButton selectedRadioButton = (RadioButton) rootView.findViewById(selectedId); \u003cspan class=\"hljs-comment\"\u003e//get r button val via ID\u003c/span\u003e\r\n\r\n...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAnd now for the click event:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMoodDialogFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nsubmitButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n       Log.d(\u003cspan class=\"hljs-string\"\u003e\"testing\"\u003c/span\u003e, selectedRadioButton.getText().toString());\r\n       dismiss();\r\n   }\r\n});\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTry and get to this point on your own using those code snippets and putting them in the right places. If you get stuck, consult the\u003cspan\u003e \u003c/span\u003e\u003ca title=\"\" href=\"https://moringacore-android.herokuapp.com/#droid-cheat-sheet.html\"\u003echeat\u003c/a\u003e\u003cspan\u003e \u003c/span\u003esheet.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/kvbs3eax1ykucuv/dialog-fragment-working.png\" alt=\"dialog-fragment-working.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter we select a mood and click the submit button, we should see it logged in the console and have the dialog window close. Cool!\u003c/p\u003e\r\n\u003ch3\u003eFinishing Up and More on Dialogs\u003c/h3\u003e\r\n\u003cp\u003eNow you have a blueprint on how to implement one of Android’s most widely used Fragments in your app, as well as getting a handle on some of the most fundamental topics on fragments. This should put you in a great mood.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIf you are interested in learning how to create\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDialogFragment\u003c/code\u003es that do not require a unique layout, there is a great way to make this process quicker and more flexible. See this further exploration lesson if you are interested in learning more about this topic.\u003c/p\u003e\r\n\u003cp\u003eAlso, note we strongly warn against using random code samples off StackOverflow or internet blogs prior to ~2015, especially where any kind of fragment is concerned. The way dialogs and timepickers are now implemented are fundamentally different and earlier approaches are deprecated. Being aware of the age of sources is especially important when researching and implementing code for any kind of fragment, such as \u003ccode\u003eDialogFragment\u003c/code\u003e, \u003ccode\u003eDatePickerFragment\u003c/code\u003e, \u003ccode\u003eTimePickerFragment\u003c/code\u003e, and others. Proceed with caution!\u003c/p\u003e","frontPage":false},{"exportId":"monday-debugging-android-log","title":"Monday: Debugging: Android Log","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eNow that you're in your level 3 Moringa course, you've probably come to realize how much trial-and-error goes into coding. Sometimes code doesn't work on the first try. Sometimes code that once worked perfectly no longer functions after implementing new code. Bugs occur all the time, and that's simply a normal part of development.\u003c/p\u003e\r\n\u003cp\u003eIn the next two lessons we'll explore two Android-specific approaches to debugging. First, we'll learn how to record helpful information into an area of Android Studio known as the logcat. Then, in the next lesson we'll learn how to add breakpoints to strategically pause our code and narrow down where bugs and errors are occurring. Let's get started!\u003c/p\u003e\r\n\u003ch2\u003eThe Android Log\u003c/h2\u003e\r\n\u003cp\u003eWhen writing JavaScript in your Intro to Programming and JavaScript courses, you probably encountered\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e. It’s a method that allows us to write to the JavaScript console in the browser. This allows us to see what certain variables are defined as, or check whether methods are being called.\u003c/p\u003e\r\n\u003cp\u003eAndroid Studio has the capability to write log messages in a very similar manner. We can add log methods that will write data to Android Studio's logcat. The\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elogcat\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays system messages, and messages/information you manually record with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods. It both displays messages in real time and also keeps a history so you may view older messages.\u003c/p\u003e\r\n\u003cp\u003eAfter placing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods we can run our app and view the logcat to see what data or information has been recorded.\u003c/p\u003e\r\n\u003ch2\u003eLog Methods\u003c/h2\u003e\r\n\u003cp\u003eHowever, unlike JavaScript's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e, there are\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany different\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods from Android's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/util/Log.html\" target=\"_blank\"\u003e\u003ccode\u003eLog\u003c/code\u003eclass\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ewe can use to log information. Let's briefly cover what these different methods are, and when to use each:\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ee\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eerror\u003c/strong\u003e. Use this when you\u003cspan\u003e \u003c/span\u003e\u003cem\u003eknow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean error has occurred, and you're logging details about that error. Developers will commonly use this in a block of code meant to catch an error. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessage can then print details about the error.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.w()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ew\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.w()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ewarning\u003c/strong\u003e. Use this when you suspect an issue may be occurring, but haven't yet received full-on error messages. Developers usually use this to proactively investigate unusual or unexpected behavior in an application.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.i()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ei\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einformation\u003c/strong\u003e. Use this to post useful information. For instance, maybe you want to double-check a method is being called successfully, you could print an informational message to the log reading something like\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"X method called!\"\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ed\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edebug\u003c/strong\u003e. As you might imagine, you'll use this one for debugging purposes. You'll probably use this one most frequently out of all available\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ev\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003everbose\u003c/strong\u003e. Use this when you're implementing many, many different log statements as a debugging approach.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eLog.wtf()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003e(No, we're\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/util/Log.html#wtf(java.lang.String,%20java.lang.String,%20java.lang.Throwable)\" target=\"_blank\"\u003enot making this up\u003c/a\u003e).\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ewtf\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.wtf()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis said to stand for\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"What a terrible failure\"\u003c/em\u003e. It's meant to record particularly awful issues that should never, ever happen, but are\u003cspan\u003e \u003c/span\u003e\u003cem\u003esomehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoccurring anyway. It's not used as commonly as the other\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages.\u003c/p\u003e\r\n\u003ch3\u003eBenefits of Different Log Message Types\u003c/h3\u003e\r\n\u003cp\u003eBut why are there 6 different methods to log information anyway? Well, the logcat can contain a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof data. By classifying the importance of the information you're logging using the methods depicted above, we can easily filter messages by their level of importance.\u003c/p\u003e\r\n\u003ch3\u003eLog Statement Importance Level\u003c/h3\u003e\r\n\u003cp\u003eThe list of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods above is ordered by level of importance, also known as \"log level\".\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis considered to be the highest importance and priority, because it logs information about errors that are currently occurring, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis considered the lowest importance and priority because it's meant for logging as much data as possible. (\u003ccode\u003eLog.wtf()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis actually a bit of an outlier, and isn’t used very often.)\u003c/p\u003e\r\n\u003cp\u003eSo, if you filter to view\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages, you'll see both messages recorded with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003emethod\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethose recorded with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.w()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods, because they are of the same importance level\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor higher\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, if we filtered by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e, we would see any messages printed on the logcat from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.i()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.w()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause they are all of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e's level of importance\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor higher\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eSimilarly, if we were to filter by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e, we would see\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eother other\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod messages, since\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the lowest importance level, and each of the other methods is of a higher importance.\u003c/p\u003e\r\n\u003ch2\u003eHow to Log Information\u003c/h2\u003e\r\n\u003cp\u003eLet's walk through the process of logging and viewing data in Android Studio. We'll add several\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog \u003c/code\u003emessages to our MyRestaurants application together.\u003c/p\u003e\r\n\u003ch3\u003eAccessing the Logcat\u003c/h3\u003e\r\n\u003cp\u003eFirst, let's locate the logcat in Android Studio, so we'll know where to look for our logged messages. In previous lessons you learned how to access the Terminal in Android Studio. In the same pane near the bottom of the window, select\u003cspan\u003e\u003cem\u003e \u003c/em\u003elogcat\u003c/span\u003e\u003cspan\u003e \u003c/span\u003efrom the lower options bar.\u003c/p\u003e\r\n\u003cp\u003e\u003ca class=\"instructure_file_link instructure_image_thumbnail\" title=\"logcat.png\" href=\"viewer/files/logcat.png?canvas_download=1\u0026amp;canvas_qs_wrap=1\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/6796\" data-api-returntype=\"File\"\u003e\u003cimg src=\"viewer/files/logcat.png\" alt=\"logcat.png\" width=\"653\" height=\"367\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/files/6796\" data-api-returntype=\"File\"\u003e\u003c/a\u003e\u003c/p\u003e\r\n\u003ch3\u003ePlacing a Log Statement\u003c/h3\u003e\r\n\u003cp\u003eNext, just like the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod used in JavaScript, we can place a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod wherever we'd like. Information will be logged when that area of code runs.\u003c/p\u003e\r\n\u003cp\u003eWe'll use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods in two separate spots. First, we'll use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. As you begin typing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v(...\u003c/code\u003e, you'll see Android Studio will offer two suggestions in its auto-complete pop-up:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/66ul6cu7wnnmtgr/log-autocomplete.png?raw=1\" alt=\"log-message-autocomplete\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAs you can see, this method takes either 2 or 3 arguments:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etag\u003c/code\u003e. In terms of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages, a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etag\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a quick string that provides context regarding where the log message is coming from: Generally the name of the activity from which information is being logged.\u003c/li\u003e\r\n\u003cli\u003eA second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emsg\u003c/code\u003e. This is the main content of the log message.\u003c/li\u003e\r\n\u003cli\u003eA third argument, of the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eThrowable\u003c/code\u003e, which represents an exception or error being thrown. If you're attempting to log information about an exception or error, you'd provide this exception or argument as a third argument here.\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eOur MyRestaurants application shouldn't be throwing any exceptions or errors in its current state, so let's begin by only providing two arguments:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n                Log.v(\u003cspan class=\"hljs-string\"\u003e\"RestaurantsActivity\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"In the onItemClickListener!\"\u003c/span\u003e);\r\n            }\r\n        });\r\n      ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHere, we've included a tag reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"RestaurantsActivity\"\u003c/code\u003e, because we're logging this information from within our RestaurantsActivity.\u003c/li\u003e\r\n\u003cli\u003eAs a second argument, we've included a message reading\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"In the onItemClickListener!\"\u003c/code\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eSo, when this code is triggered (ie: a restaurant from our list is clicked), the message\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"In the onItemClickListener!\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eshould appear in our logcat. Putting a log message in this location is great to test and confirm whether a click listener is being triggered successfully.\u003c/p\u003e\r\n\u003cp\u003eIn order to experiment filtering different types of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emessages, let's include a second\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of a different importance level. This time, we'll use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust below our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                Log.v(\u003cspan class=\"hljs-string\"\u003e\"RestaurantsActivity\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"In the onItemClickListener!\"\u003c/span\u003e);\r\n            }\r\n        });\r\n        ...\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"RestaurantsActivity\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"In the onCreate method!\"\u003c/span\u003e);\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAgain, we include two arguments. The first is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the location from which we're logging. The second is the message we'd like to print to the logcat.\u003c/p\u003e\r\n\u003ch3\u003eRunning the Log Statement\u003c/h3\u003e\r\n\u003cp\u003eNext, let's launch our application in the emulator. Because we placed our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods of our RestaurantsActivity, we'll need to trigger those methods in order for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods to record data in our logcat.\u003c/p\u003e\r\n\u003cp\u003eWe'll navigate to our RestaurantsActivity. As soon as we do this, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will be triggered. Therefore, we should see our first message appear in the logcat:\u003c/p\u003e\r\n\u003cp\u003eTo ease the location of the custom log-messages being logged on the logcat, search (in the search query box) for the string parameter you have used as the \u003cem\u003e\u003cstrong\u003eTAG \u003c/strong\u003e\u003c/em\u003eparameter.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/aum59gdi88ignj4/first-message-in-logcat.png?raw=1\" alt=\"first-message-in-logcat\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, we can trigger our second log message by clicking any of the restaurants in our list:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/wlyuj4ce5riaxni/two-messages-in-logcat.png?raw=1\" alt=\"two-messages-in-logcat\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSince the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.v()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is located in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, notice that it is triggered\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhenever\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean item is clicked, instead of just once. For instance, if we clicked a restaurant many times in a row, we would see:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/k47x0f6rj9wutcd/tons-of-click-listener-logcat-messages.png?raw=1\" alt=\"many-click-listener-messages\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eFiltering Messages in the Logcat\u003c/h2\u003e\r\n\u003cp\u003eThis should be fairly reminiscent of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econsole.log()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein JavaScript. However, as you can see, there's\u003cspan\u003e \u003c/span\u003ea lot of information in that logcat! Thankfully, we can quickly filter this breadth of information.\u003c/p\u003e\r\n\u003cp\u003eIn the top bar of the logcat panel, there are multiple options to filter logcat contents. Let's explore these options now.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/rrq50wduafma4z4/numbered-ways-to-filter-logcat.png?raw=1\" alt=\"logcat-filtering-options\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e1. Source\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/0i6b33d4bw4m9n3/filter-by-source.png?raw=1\" alt=\"filter-by-source\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis dropdown allows you to select which device's log messages to view. This should be the device you're currently running your application on. This will be the emulator, unless you're running your application on an standalone Android device.\u003c/p\u003e\r\n\u003ch3\u003e2. Application\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/s71yjl7bxww3deg/filter-by-application.png?raw=1\" alt=\"filter-by-application\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis dropdown allows you to select which application's log messages to view. This should always be the application you're currently debugging, or attempting to view log messages for.\u003c/p\u003e\r\n\u003ch3\u003e3. Log Level\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/djt2vefa1i9qlcx/filtering-by-log-message-method.png?raw=1\" alt=\"filter-by-log-level\"\u003e\u003c/p\u003e\r\n\u003cp\u003eHere, you can filter by the log level. As we discussed previously, each of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods listed above is of a different priority level. When you filter by a specific log level, you'll only see messages of that priority level\u003cspan\u003e \u003c/span\u003e\u003cem\u003eor higher\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eFor instance, if we filter by verbose, we can see both of our log statements are visible:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/9c50y1fg6mpg251/filter-logcat-by-verbose.png?raw=1\" alt=\"filter-by-verbose\"\u003e\u003c/p\u003e\r\n\u003cp\u003eYet, if we filter instead by debug, we can see that only our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog.d()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003estatement is visible, because we're viewing only log statements of the \"Debug\" priority or\u003cspan\u003e \u003c/span\u003e\u003cem\u003ehigher\u003c/em\u003e. Because verbose (\u003ccode\u003eLog.v()\u003c/code\u003e) is of a priority\u003cspan\u003e \u003c/span\u003e\u003cem\u003elower\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethan debug (\u003ccode\u003eLog.d()\u003c/code\u003e), we no longer see it in the logcat:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/7b667bo21trpsxh/filter-logcat-by-debug.png?raw=1\" alt=\"filter-by-debug\"\u003e\u003c/p\u003e\r\n\u003ch3\u003e4. Search Field\u003c/h3\u003e\r\n\u003cp\u003eAs the name implies, the search field allows us to search for particular words, statement, or other content in a log message. For instance, if you logged a certain piece of data with our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"RestaurantsActivity\"\u003c/code\u003etag, but couldn't locate the log message, you could search\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\"RestaurantsActivity\"\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto confirm whether or not the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod ever ran and recorded data in the logcat.\u003c/p\u003e\r\n\u003ch3\u003e5. Application Filters\u003c/h3\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/u53yw73acbmzrcd/filter-options.png?raw=1\" alt=\"app-filter\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis dropdown allows us to choose whether we'd like to see log messages from only the selected application (the application chosen in #2), or from\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecurrently-running applications and processes on the device.\u003c/p\u003e\r\n\u003ch2\u003eDefining Tag Constants\u003c/h2\u003e\r\n\u003cp\u003eAdditionally, it's common practice for Android Developers to add a special\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://moringacore-java.herokuapp.com/#weekend.html\" target=\"_blank\"\u003econstant\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTAG\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat contains the name of the activity to each class. This constant is then used as the first argument in any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003emethods.\u003c/p\u003e\r\n\u003cp\u003eDefining a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTAG\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstant for use in an activity's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods looks like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = YourActivityName.class.getSimpleName();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBy defining the constant as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYourActivityName.class.getSimpleName();\u003c/code\u003e, instead of a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtaining the activity name, Android Studio's built-in refactoring tools will automatically change the value of this constant if you ever re-name your activity. This is considered best practice.\u003c/p\u003e\r\n\u003cp\u003eLet's add a similar constant to our RestaurantActivity, and use it in both our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n  \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String TAG = RestaurantActivity.class.getSimpleName();\r\n  ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                ...\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n                Log.v(TAG, \u003cspan class=\"hljs-string\"\u003e\"In the onItemClickListener!\"\u003c/span\u003e);\r\n            }\r\n        });\r\n        ...\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n        Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"In the onCreate method!\"\u003c/span\u003e);\r\n   ...\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eLogging Other Data\u003c/h2\u003e\r\n\u003cp\u003eAs you saw earlier,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods take 2-3 arguments. Most of the time, you'll only ever need to use 2: A tag containing information about the context the log message is coming from, and the contents of the message. Both of these arguments must be\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype.\u003c/p\u003e\r\n\u003cp\u003eThis means, you can only log\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einformation. At first this may sound limiting, but note that you can simply use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.toString()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to turn non-\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edata into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eformat for the purposes of logging.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on debugging in general, checkout the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/debug/index.html#systemLog\" target=\"_blank\"\u003eDebug Your App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eportion of the Android Studio User Guide.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Android Studio's logcat, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/studio/command-line/logcat.html\" target=\"_blank\"\u003elogcat Command-line Tool\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earticle.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eLogcat\u003c/strong\u003e: An area of Android Studio that displays system messages, and messages/information you manually record with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods. It displays messages in real time and also keeps a history so you may view older messages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eTag\u003c/strong\u003e: A string that provides context regarding where the log message is coming from: Generally the name of the activity from which information is being logged.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003ch3\u003eAndroid Log Methods\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.d()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eDebug\u003c/strong\u003e. You'll use this one for debugging purposes. You'll probably use this one most frequently out of all available\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eLog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.e()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eError\u003c/strong\u003e. Use this when you\u003cspan\u003e \u003c/span\u003e\u003cem\u003eknow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ean error has occurred, and you're logging details about that error.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.i()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eInformation\u003c/strong\u003e. Use this to post useful information. For instance, maybe you want to double-check a method is being called successfully, you could print an informational message to the log reading something like\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"X method called!\"\u003c/em\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.v()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eVerbose\u003c/strong\u003e. Use this when you're implementing many, many different log statements as a debugging approach.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.w()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eWarning\u003c/strong\u003e. Use this when you suspect an issue may be occurring, but haven't yet received full-on error messages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eLog.wtf()\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003cem\u003e\"What a terrible failure\"\u003c/em\u003e\u003c/strong\u003e. Meant to record particularly awful issues that should never, ever happen, but are\u003cspan\u003e \u003c/span\u003e\u003cem\u003esomehow\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoccurring anyway.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://developer.android.com/studio/debug/index.html#systemLog\" target=\"_blank\"\u003eDebug Your App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom the Android Studio User Guide.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-butterknife","title":"Monday: ButterKnife","type":"WikiPage","content":"\u003cp\u003eYou might be getting tired of declaring variables for all of your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es at the top of your activity classes and then manually locating them by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eid\u003c/code\u003e's to set variables. Thankfully, there's a tool that can assist us with this! ButterKnife, after a little setup, will cut down on redundant code.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eButterKnife\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis an injection library that allows for field and method binding for Android views.\u003c/p\u003e\r\n\u003ch2\u003eButterKnife Overview\u003c/h2\u003e\r\n\u003cp\u003eCurrently, whenever our back-end (or \"business logic\"; remember that term from Intro?) needs to interact with a portion of our user interface, we need to declare individual element of the user interface, then define them by manually locating them by id in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eUsing ButterKnife, we could instead simply include the ID of each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eat the top of the file, where we previously declared member variables, and rely on ButterKnife to locate the views instead of manually finding them in `onCreate():\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWith only three\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es in our MainActivity, this may not look like a large reduction in code, but in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of the ButterKnife version, we only need to call the single line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eButterKnife.bind(this);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstead of calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon every single element manually. As our application continues to grow in size and complexity, this will save us a\u003cspan\u003e \u003c/span\u003e\u003cem\u003elot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof code.\u003c/p\u003e\r\n\u003ch3\u003eJava Annotations\u003c/h3\u003e\r\n\u003cp\u003eTo use ButterKnife, we'll add special\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eannotations\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003especific to the ButterKnife library to our code. Java annotations are simply metadata that can be added to Java code to include additional information about a program. They're preceded by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@\u003c/code\u003e. This symbol informs the compiler that what immediately follows it is an annotation. (The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Override\u003c/code\u003es we see in our existing code are annotations, too!)\u003c/p\u003e\r\n\u003cp\u003eWhen our project compiles, ButterKnife looks for the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@BindView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation seen above. When it finds one, it uses the additional information provided with it (the ID attribute, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR.id.findRestaurantsButton\u003c/code\u003e) to find the corresponding view\u003cspan\u003e \u003c/span\u003e\u003cem\u003efor us\u003c/em\u003e, so we don't have to explicitly do so in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eImplementing ButterKnife\u003c/h2\u003e\r\n\u003cp\u003eTo integrate ButterKnife into our project, we'll first need to add the library to our app's dependencies. We'll place the following line into our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle(Module: app)\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs bash\"\u003edependencies {\r\n    ...\u003cbr\u003e    implementation 'com.jakewharton:butterknife:8.8.1'\u003cbr\u003e    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'\u003cbr\u003e}\u003c/code\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode class=\"groovy hljs bash\"\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, visit\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\"\u003eButterKnife's documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto read more about how it works.\u003c/p\u003e\r\n\u003ch2\u003eRefactoring MainActivity\u003c/h2\u003e\r\n\u003cp\u003eNow, let's use this powerful tool to refactor our MainActivity. We should be able to take our code from this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mAppNameTextView = (TextView) findViewById(R.id.appNameTextView);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.appNameTextView) TextView mAppNameTextView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        Typeface ostrichFont = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/ostrich-regular.ttf\"\u003c/span\u003e);\r\n        mAppNameTextView.setTypeface(ostrichFont);\r\n\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                String location = mLocationEditText.getText().toString();\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, RestaurantsActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e, location);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRefactoring RestaurantsActivity\u003c/h2\u003e\r\n\u003cp\u003eWe'll implement ButterKnife into our RestaurantsActivity, too! We should be able to take our code from this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n      ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTo this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationTextView) TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.listView) ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n  ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFrom this point forward, we will use ButterKnife to easily bind our views, and keep our code brief and well-refactored.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Java annotations in general, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/annotations/basics.html\" target=\"_blank\"\u003eAnnotations Basics Tutorial\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom Oracle.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eLuis G. Valle's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/@lgvalle/how-butterknife-actually-works-85be0afbc5ab#.rontyed2h\" target=\"_blank\"\u003eHow ButterKnife actually works?\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers an optional deeper dive on the code behind ButterKnife, for those that are curious.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAnnotations\u003c/strong\u003e: A form of metadata that can be added to Java code to include information about a program that's\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epart of the program itself. For ButterKnife specifically, we'll use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Bind\u003c/code\u003eannotation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eButterKnife\u003c/strong\u003e: An injection library that allows for field and method binding for Android views. View documentation\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003ch3\u003eWithout ButterKnife\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mLocationEditText = (EditText) findViewById(R.id.locationEditText);\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eWith ButterKnife:\u003c/h3\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.findRestaurantsButton) Button mFindRestaurantsButton;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.locationEditText) EditText mLocationEditText;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/butterknife\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eLuis G. Valle's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/@lgvalle/how-butterknife-actually-works-85be0afbc5ab#.rontyed2h\" target=\"_blank\"\u003eHow ButterKnife actually works?\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers an optional deeper dive on the code behind ButterKnife, for those that are curious.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFor more information on Java annotations in general, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.oracle.com/javase/tutorial/java/annotations/basics.html\" target=\"_blank\"\u003eAnnotations Basics Tutorial\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efrom Oracle.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"monday-independent-capstone-project-week-overview","title":"Monday: Independent Capstone Project Week Overview","type":"WikiPage","content":"\u003ch1\u003eIndependent Capstone Project Week Overview\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eCongratulations! You've made it to the final week of your final coding course at Moringa School!\u003c/p\u003e\r\n\u003ch2\u003eOverview of Week\u003c/h2\u003e\r\n\u003cp\u003eYou will spend this week working independently on a cumulative capstone project of your choosing. On Friday you’ll present the project in class. \u003c/p\u003e\r\n\u003cp\u003eThis lesson will outline the requirements and expectations for this week.\u003c/p\u003e\r\n\u003ch3\u003eRequirements\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAttendance policy still applies.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou are still expected to attend Moringa School during normal class hours.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eYour project must be completed independently.\u003c/strong\u003e\u003cspan\u003e In addition to the variety of impressive projects you have created throughout Moringa School in collaboration with others, it's great to have something in your portfolio that lets you showcase your personal skills.\u003c/span\u003e While you may discuss, brainstorm, beta test, and advise one another,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eall code\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe written by\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou\u003c/em\u003e, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyou alone\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003ePresentation\u003c/h3\u003e\r\n\u003cp\u003eSimilar to the final week in previous courses, you’ll present your project on the last day of the week. Take advantage of this opportunity to practice your presentation skills, and receive feedback on your product.\u003c/p\u003e\r\n\u003cp\u003ePlan to spend several minutes addressing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProject Name and Objective\u003c/strong\u003e: Why did you choose this project? What purpose does it fulfill?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eDemonstration\u003c/strong\u003e: Show and describe the features of your work. Use technical terms and try hard to make this a serious, professional presentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProcess\u003c/strong\u003e: Describe the development process of your project. What was your MVP? What additional features did you add after fulfilling the requirements of your MVP? What features do you still hope to include?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eChallenges\u003c/strong\u003e: Share the biggest challenges you faced, and how you tackled them.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAdditionally, allow time for any questions your audience may have.\u003c/p\u003e\r\n\u003ch2\u003eSubmission\u003c/h2\u003e\r\n\u003cp\u003eSubmit the link to your project's GitHub repository before the end of the day Friday.\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-registering-accounts-additional-features","title":"Tuesday:Registering Accounts: Additional Features","type":"WikiPage","content":"\u003ch1\u003eRegistering Accounts: Additional Features\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eUsers can now create accounts and logout from the MainActivity. However, there are still several ways we could improve user experience. In this lesson, we'll explore creating dialogs to communicate when our app is loading, validation methods to prevent errors before they occur, and personalized welcome messages to greet returning users.\u003c/p\u003e\r\n\u003ch2\u003eValidating Registration Credentials\u003c/h2\u003e\r\n\u003cp\u003eWhat if a user attempts to register with an invalid email address? Or a really terrible single-character password? Let's add validation methods to ensure our users' credentials are valid and reasonably secure, and error handling if they are\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe'll add the following to CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisValidEmail\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String email)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e isGoodEmail =\r\n                (email != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches());\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!isGoodEmail) {\r\n            mEmailEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please enter a valid email address\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e isGoodEmail;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisValidName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (name.equals(\u003cspan class=\"hljs-string\"\u003e\"\"\u003c/span\u003e)) {\r\n            mNameEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please enter your name\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisValidPassword\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String password, String confirmPassword)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (password.length() \u0026lt; \u003cspan class=\"hljs-number\"\u003e6\u003c/span\u003e) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Please create a password containing at least 6 characters\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!password.equals(confirmPassword)) {\r\n            mPasswordEditText.setError(\u003cspan class=\"hljs-string\"\u003e\"Passwords do not match\"\u003c/span\u003e);\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we've defined three methods to validate three different pieces of user-provided data:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eisValidEmail()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euses an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"http://developer.android.com/reference/android/util/Patterns.html\"\u003eAndroid Pattern\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(essentially a regular expression built directly into Android) to confirm that the user's email is a valid email address. It does this by checking that the address is in the correct format. If it is not, it displays an error in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEmailEditText\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eisValidName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003everifies that the name field of our registration form has not been left blank. If it has, it displays an error in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emNameEditText\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eisValidPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econfirms that the user's password is at least 6 characters long, and that the password and password confirmation fields match. If not, it displays an error in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emPasswordEditText\u003c/code\u003e. Even though Firebase\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003erequires passwords be at least 6 characters long, we include our own validation method to confirm the password length, so that we can display an error message to our user if necessary.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe'll call these methods in our existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This will ensure user credentials are accurate\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebefore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewe create an account with Firebase:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String name = mNameEditText.getText().toString().trim();\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String email = mEmailEditText.getText().toString().trim();\r\n        String password = mPasswordEditText.getText().toString().trim();\r\n        String confirmPassword = mConfirmPasswordEditText.getText().toString().trim();\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validEmail = isValidEmail(email);\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validName = isValidName(name);\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validPassword = isValidPassword(password, confirmPassword);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!validEmail || !validName || !validPassword) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password).addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                    Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                    Toast.makeText(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                            Toast.LENGTH_SHORT).show();\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf all information is valid, we create a new user in Firebase. If it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eif (!validEmail || !validName || !validPassword) return;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill halt our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, and the validation method(s) will display errors.\u003c/p\u003e\r\n\u003ch2\u003eProgress Dialogs\u003c/h2\u003e\r\n\u003cp\u003eAs technology becomes faster and faster, we expect increasingly speedy responses from our apps and devices. When they don't\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimmediately\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edo what we expect, we can't help but wonder\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"is it broken?\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eMany apps now display small loading animations to reassure users that their application isn't frozen; it's just still loading!\u003c/p\u003e\r\n\u003cp\u003eYou've already had some experience with Dialogs earlier in Android. ProgressDialogs are a different flavour of Dialog.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ca href=\"http://developer.android.com/reference/android/app/ProgressDialog.html\"\u003eProgressDialog\u003c/a\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003edisplays an animated progress indicator along with a customizable message. Let's add a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to our CreateAccountActivity that informs the user when our app is in the process of authenticating their account.\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by adding the following code to CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ProgressDialog mAuthProgressDialog;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        createAuthProgressDialog();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateAuthProgressDialog\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mAuthProgressDialog = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ProgressDialog(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        mAuthProgressDialog.setTitle(\u003cspan class=\"hljs-string\"\u003e\"Loading...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setMessage(\u003cspan class=\"hljs-string\"\u003e\"Authenticating with Firebase...\"\u003c/span\u003e);\r\n        mAuthProgressDialog.setCancelable(\u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n   ...\r\n     \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (!validEmail || !validName || !validPassword) \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e;\r\n\r\n        mAuthProgressDialog.show();\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n                        mAuthProgressDialog.dismiss();\r\n\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                            Toast.makeText(CreateAccountActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Authentication failed.\"\u003c/span\u003e,\r\n                                    Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n     ...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet's walk through what functionality this code handles:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFirst, we add a new member variable for our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eInside of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, we call a new method\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthProgressDialog()\u003c/code\u003e, which is defined below\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateAuthProgressDialog()\u003c/code\u003e, we set the title and message values of the dialog box, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetCancelable()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto false so that users cannot close the dialog manually. (We want this dialog box to remain in sight until the account is either successfully authenticated, or we have errors to display to the user).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we show the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eProgressDialog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateNewUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod with the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAuthProgressDialog.show();\u003c/code\u003e. Notice that this line is only called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eafter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe form validation methods have returned true.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhen the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateUserWithEmailAndPassword()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is complete (no matter what the outcome is), we dismiss the dialog entirely with the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emAuthProgressDialog.dismiss();\u003c/code\u003eso that the user may either continue using the app, or view any error messages.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, if we launch our application and create a new account, we should see a progress dialog appear while Firebase creates and authenticates our account. Pretty cool!\u003c/p\u003e\r\n\u003ch2\u003eGreet User by Name\u003c/h2\u003e\r\n\u003cp\u003eMany apps and websites include personal touches when users log in. The most common is simply greeting the user by name. How welcoming! Let's do the same in MyRestaurants.\u003c/p\u003e\r\n\u003ch3\u003eGathering and Setting Names\u003c/h3\u003e\r\n\u003cp\u003eTo do this we'll need to save the name value from the user's registration form to their Firebase account. We'll start by saving it as a member variable, so we can access it throughout CreateAccountActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eCreateAccountActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mName;\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        mName = mNameEditText.getText().toString().trim();\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e validName = isValidName(mName);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFirebase does not collect user names by default, but as described in their\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/manage-users\"\u003eManaging Users\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation, they do offer methods to easily add extra data (including display names) to a user's account via a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject.\u003c/p\u003e\r\n\u003cp\u003eWe'll create a new method that will set the user's name:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateFirebaseUserProfile\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseUser user)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        UserProfileChangeRequest addProfileName = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e UserProfileChangeRequest.Builder()\r\n                .setDisplayName(mName)\r\n                .build();\r\n\r\n        user.updateProfile(addProfileName)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;Void\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;Void\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, user.getDisplayName());\r\n                        }\r\n                    }\r\n\r\n                });\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo set the name, we first need to build a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUserProfileChangeRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject. This is a Firebase object used to request updates to user profile information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetDisplayName()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to attach the user-entered name to the user's profile.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then pass this\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eUserProfileChangeRequest\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eupdateProfile()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod and attach an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnCompleteListener\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnCompleteListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill trigger the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonComplete()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod when the request is finished processing. If the request was successful, we log the name to the logcat.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe then need to call this method once our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas successfully been created:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eCreateAccountActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ecreateNewUser\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OnCompleteListener\u0026lt;AuthResult\u0026gt;() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonComplete\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull Task\u0026lt;AuthResult\u0026gt; task)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n                        mAuthProgressDialog.dismiss();\r\n\r\n                        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (task.isSuccessful()) {\r\n                            Log.d(TAG, \u003cspan class=\"hljs-string\"\u003e\"Authentication successful\"\u003c/span\u003e);\r\n                            createFirebaseUserProfile(task.getResult().getUser());\r\n                        } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                            ...\r\n                        }\r\n                    }\r\n                });\r\n         ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eTo pass the user object to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecreateFirebaseUserProfile()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we can grab the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresult\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTask\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject returned in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonComplete()\u003c/code\u003e. We may then retrieve the specific user by calling Firebase's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetUser()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eDisplaying Saved Names\u003c/h3\u003e\r\n\u003cp\u003eFinally, let's update the MainActivity so that the user sees a welcome message in the AppBar when they have successfully logged in. We'll start by creating an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ejust like we did in our CreateAccountActivity, remembering to add it to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseAuth\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth mAuth;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseAuth.AuthStateListener mAuthListener;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                 \u003cspan class=\"hljs-comment\"\u003e//display welcome message\u003c/span\u003e\r\n            }\r\n        };\r\n        ...\r\n    }\r\n\r\n  \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStart\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStart();\r\n        mAuth.addAuthStateListener(mAuthListener);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStop\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onStop();\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mAuthListener != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            mAuth.removeAuthStateListener(mAuthListener);\r\n        }\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we just need to display the welcome message:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\nmAuth = FirebaseAuth.getInstance();\r\n        mAuthListener = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseAuth.AuthStateListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonAuthStateChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(@NonNull FirebaseAuth firebaseAuth)\u003c/span\u003e \u003c/span\u003e{\r\n                FirebaseUser user = firebaseAuth.getCurrentUser();\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (user != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n                    getSupportActionBar().setTitle(\u003cspan class=\"hljs-string\"\u003e\"Welcome, \"\u003c/span\u003e + user.getDisplayName() + \u003cspan class=\"hljs-string\"\u003e\"!\"\u003c/span\u003e);\r\n                } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n\r\n                }\r\n            }\r\n        };\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe can use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetSupportActionBar()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to access our activity's action bar and then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetTitle()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to update the text with our welcome message.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCompleted()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAuthStateListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ebecause we need to have access to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseUser\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto grab the display name.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eClearing Old Accounts\u003c/h3\u003e\r\n\u003cp\u003eBefore we run our app, let's navigate to our Firebase app's\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAuth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epage and manually delete each user. We previously created users\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eattaching a display name. So, let's remove those old users to ensure that all users have a name to display. Otherwise, we might instead see\u003cspan\u003e \u003c/span\u003e\u003cem\u003enull\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewhere a user's name should populate in our App Bar.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/mgsu7rafsu2cp9p/firebase-user-overflow-menu.png?raw=1\" alt=\"firebase-panel-auth\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/oa8oa1bqj6e2qhr/delete-account-firebase-user.png?raw=1\" alt=\"firebase-panel-auth\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's run our app (making sure to log out any currently-authenticated users), navigate to CreateAccountActivity, and create a brand new user. After creating this new account, our app should navigate to MainActivity, and we should see this user's name in the AppBar:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/a4mf7bh1kft77q6/username_displayed_in_app_bar.png?raw=1\" alt=\"username-displayed-appbar\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNote: If your welcome message has a \u003cstrong\u003e\u003cem\u003enull\u003c/em\u003e\u003c/strong\u003e object in place of the User Object, don't sweat - latency issue in Firebase cause this misalignment of expectation. Once we implement logout and login features all will be well.\u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eProgress Dialog\u003c/strong\u003e: An animated progress indicator that is displayed along with a message. Often used to indicate that the application is still loading; and not frozen.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAndroid Patterns\u003c/strong\u003e: Commonly-used regular expressions built right into Android.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/19_user_details_validation\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFIrebase article on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://firebase.google.com/docs/auth/android/manage-users\"\u003eManaging Users\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"http://developer.android.com/reference/android/app/ProgressDialog.html\"\u003eProgressDialog\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAndroid\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/util/Patterns.html\"\u003ePatterns\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edocumentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-gestures-and-animations-continuation","title":"Monday:Gestures \u0026 Animations: Continuation","type":"WikiPage","content":"\u003ch1\u003eGestures \u0026amp; Animations: Continuation\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal today is to explore touch events, gestures, and property animations in Android. Begin by exploring how to gestures with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e, then branch and explore what other gestures and animations are available!\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch1\u003eUpdating Data After Gesture Interactions\u003c/h1\u003e\r\n\u003cp\u003eThere’s just one final step before our drag-and-drop and swipe-to-delete features are fully complete. Currently, Firebase will not actually delete a restaurant from a user's list of \"Saved Restaurants\" if we dismiss it from the screen, nor will it automatically save the order of our Saved Restaurants. If we leave the SavedRestaurantListActivity, the order of restaurants will return to its original state. Unless we instruct it otherwise, Firebase returns our data in alphabetical order of node key names.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we will add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eattribute to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass that will allow us to save an individual restaurant's location in our \"Saved Restaurant\" list, and code to handle actually removing restaurants from a user's list of \"Saved Restaurants\" in the database if they choose to delete one through the UI.\u003c/p\u003e\r\n\u003ch2\u003eAccessing Firebase after Gesture Interactions\u003c/h2\u003e\r\n\u003cp\u003eFirst, let's tell our adapter what to do when an item is moved or deleted. We can do this by adding code to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter \u003c/code\u003einterface the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis implementing:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e fromPosition, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e toPosition)\u003c/span\u003e \u003c/span\u003e{\r\n        notifyItemMoved(fromPosition, toPosition);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemDismiss\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        getRef(position).removeValue();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enotifyItemMoved()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to notify our adapter that the underlying data has changed.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo delete the dismissed item from Firebase, we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRef()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing in an item's position and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill return the DatabaseReference for the given object. We can then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremoveValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to delete that object from Firebase. Once deleted, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill automatically update the view.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow if we run our app and drag an item, the adjacent items will move to make room. And if we swipe to delete an item, it is removed from the Firebase database!\u003c/p\u003e\r\n\u003ch2\u003eStoring Index Values\u003c/h2\u003e\r\n\u003cp\u003eYou probably noticed that if we navigate away from the SavedRestaurantsListActivity and come back to it, the items that we previously dragged and dropped are returned to their original order. Let's fix this.\u003c/p\u003e\r\n\u003cp\u003eWe'll start by creating a new property for our Restaurant object called \"index\". We will eventually use this new index property to order the items pulled from Firebase:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    String index;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.index = \u003cspan class=\"hljs-string\"\u003e\"not_specified\"\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetIndex\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e index;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetIndex\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String index)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.index = index;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInstead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eint\u003c/code\u003e, we give each restaurant a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estring\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eindex so that we may set the initial value to a string key in our object constructor. Alphabetically, numbers come before letters. So anytime we add a brand new restaurant to our list, it will receive the default string index value. Then, when we re-order our restaurants with our new drag-and-drop feature, we will overwrite this string index with a numerical index. So, any ordered restaurants will come in their numerical order, and new restaurants we add will automatically be added to the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eend\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof the list.\u003c/p\u003e\r\n\u003cp\u003eNext, let's add a new string to our Constants class so that we can reference the \"index\" key of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects when we go to sort them in our Query:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String FIREBASE_QUERY_INDEX = \u003cspan class=\"hljs-string\"\u003e\"index\"\u003c/span\u003e;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eOrdering By Index\u003c/h3\u003e\r\n\u003cp\u003eNext, we will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eorderByChild()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to instruct the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects by index rather than by the order in which they appear in the database. To do this, we will need to create a Query object using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseDatabase\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(the FirebaseArrayAdapter accepts either a DatabaseReference or a Query). We will then pass this query into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor in place of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantsListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e DatabaseReference mRestaurantReference;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseRestaurantListAdapter mFirebaseAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ItemTouchHelper mItemTouchHelper;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        setContentView(R.layout.activity_restaurants);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        setUpFirebaseAdapter();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUpFirebaseAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        Query query = FirebaseDatabase.getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid)\r\n                .orderByChild(Constants.FIREBASE_QUERY_INDEX);\u003cbr\u003e\u003cbr\u003e        FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                new FirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(query, Restaurant.class)\u003cbr\u003e                        .build();\r\n\r\n        mFirebaseAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e FirebaseRestaurantListAdapter(options,\r\n                query, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eTracking Restaurant Indexes\u003c/h3\u003e\r\n\u003cp\u003eHow can we tell our database to update the index of each restaurant child every time a user drags and drops an item? Instead of trying to save each item’s index every time a user moves an item, let’s wait until a user is done with the SavedRestaurantListActivity and navigates away.\u003c/p\u003e\r\n\u003cp\u003eEach time a user leaves an activity, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is automatically called. We'll override this method, and tell our app to trigger our adapter's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estopListening()\u003c/code\u003emethod. Then, we will override\u003cspan\u003e \u003ccode\u003estopListening \u003c/code\u003e\u003c/span\u003eand include code to save the current order to Firebase.\u003c/p\u003e\r\n\u003cp\u003eWe already added the code to call\u003cspan\u003e \u003ccode\u003estopListening\u003c/code\u003e\u003c/span\u003e\u003ccode\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein our SavedRestaurantListActivity, but make sure to trigger this method in all future projects:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity,java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mFirebaseAdapter.\u003ccode\u003estopListening\u003c/code\u003e(); } } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBefore we can properly store the index of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitems in our adapter's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ecleanup()\u003c/code\u003emethod, we will first need to have access to the ArrayList of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects at the given reference. Let's start by adding a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eChildEventListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto grab out the Restaurants and save them to an ArrayList in our Adapter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ChildEventListener mChildEventListener;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter(FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options, Query ref, OnStartDragListener onStartDragListener, Context context){\u003cbr\u003e        super(options);\u003c/span\u003e\u003c/span\u003e\r\n        mRef = ref.getRef();\r\n        mOnStartDragListener = onStartDragListener;\r\n        mContext = context;\r\n\r\n        mChildEventListener = mRef.addChildEventListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ChildEventListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildAdded\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot, String s)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants.add(dataSnapshot.getValue(Restaurant.class));\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot, String s)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildRemoved\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonChildMoved\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DataSnapshot dataSnapshot, String s)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCancelled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(DatabaseError databaseError)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n            }\r\n        });\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eEach time the adapter is constructed, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonChildAdded()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be triggered for each item in the given reference.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe will use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadd()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to add each returned item to the mRestaurants ArrayList so that we can access the list of restaurants throughout our adapter.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eTo make sure that our mRestaurants ArrayList reflects the changes in the underlying data being tracked within\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e, we need to update its' contents in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverrides:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e fromPosition, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e toPosition)\u003c/span\u003e \u003c/span\u003e{\r\n        Collections.swap(mRestaurants, fromPosition, toPosition);\r\n        notifyItemMoved(fromPosition, toPosition);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemDismiss\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        mRestaurants.remove(position);\r\n        getRef(position).removeValue();\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe use\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCollections.swap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto update the order of our mRestaurants ArrayList items passing in the ArrayList of items and the starting and ending positions.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our ArrayList of items in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto remove the item from mRestaurants at the given position.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eOur mRestuarants ArrayList and the underlying data in the FirebaseRecyclerAdapter should now always be in sync.\u003c/p\u003e\r\n\u003cp\u003eNext, let's write a new method that we will eventually trigger in our adapter's\u003cspan\u003e \u003ccode\u003estopListening\u003c/code\u003e\u003c/span\u003e\u003ccode\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This new method will be in charge of re-assigning the \"index\" property for each restaurant object in our array list and then save it to Firebase:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetIndexInFirebase\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e (Restaurant restaurant : mRestaurants) {\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e index = mRestaurants.indexOf(restaurant);\r\n            DatabaseReference ref = getRef(index);\r\n            restaurant.setIndex(Integer.toString(index));\r\n            ref.setValue(restaurant);\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe can grab the index of each restaurant in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eArrayList by calling the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList.indexOf()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing in the object which we would like to know the index. We will use this index as the index in Firebase.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe grab the reference of each item using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRef()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, passing in the position of the item in the ArrayList.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe then use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetIndex()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod we added to our Restaurant model to update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eindex \u003c/code\u003eproperty for each item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe can finally use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetValue()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod passing the Restaurant object whose index property we just updated.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFinally, let's override that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estopListening()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in our adapter in order to remove the event listener. We will then call our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetIndexInFirebase()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to update the index property for each Restaurant in the \u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e() method in order to enable a concurrent live update of the Restaurants list on the Firebase Databse. If you have the \u003cem\u003e\u003cstrong\u003eData\u003c/strong\u003e\u003c/em\u003e tab from your firebase Dashboard open, you'll see the restaurant list objects being updated live as you drag and drop the restaurant viewholder from your device or emulator.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n\u003cbr\u003e    @Override\u003cbr\u003e    public boolean onItemMove(int fromPosition, int toPosition){\u003cbr\u003e        Collections.swap(mRestaurants, fromPosition, toPosition);\u003cbr\u003e        notifyItemMoved(fromPosition, toPosition);\u003cbr\u003e        setIndexInForebase();\u003cbr\u003e        return false;\u003cbr\u003e    }\u003cbr\u003e\u003cbr\u003e\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003ccode\u003estopListening\u003c/code\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{ \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.\u003ccode\u003estopListening\u003c/code\u003e(); mRef.removeEventListener(mChildEventListener); } } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run our app, drag and drop items, navigate away and the return to the SavedRestaurantListActivity you will see that the order of the items now persists. However, if we click an item to go to the DetailActivity, the app will bring us to the wrong page. This is because our click listener is inside of the view holder, but the view holder doesn't have access to the array list of restaurants in our adapter. Let's remove the click listener in our ViewHolder...\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_WIDTH = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e MAX_HEIGHT = \u003cspan class=\"hljs-number\"\u003e200\u003c/span\u003e;\r\n\r\n    View mView;\r\n    Context mContext;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ImageView mRestaurantImageView;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(itemView);\r\n        mView = itemView;\r\n        mContext = itemView.getContext();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        mRestaurantImageView = (ImageView) mView.findViewById(R.id.restaurantImageView);\r\n        TextView nameTextView = (TextView) mView.findViewById(R.id.restaurantNameTextView);\r\n        TextView categoryTextView = (TextView) mView.findViewById(R.id.categoryTextView);\r\n        TextView ratingTextView = (TextView) mView.findViewById(R.id.ratingTextView);\r\n\r\n        Picasso.get().load(restaurant.getImageUrl()).into(mRestaurantImageView);\r\n\r\n        nameTextView.setText(restaurant.getName());\r\n        categoryTextView.setText(restaurant.getCategories().get(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e));\r\n        ratingTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Rating: \"\u003c/span\u003e + restaurant.getRating() + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e..and instead, add a click listener to our adapter in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        viewHolder.bindRestaurant(model);\r\n\r\n        viewHolder.mRestaurantImageView.setOnTouchListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnTouchListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            public boolean onTouch(View v, MotionEvent event) {\u003cbr\u003e                if (event.getActionMasked() == MotionEvent.ACTION_DOWN){\u003cbr\u003e                    mOnStartDragListener.onStartDrag(viewHolder);\u003cbr\u003e                }\u003cbr\u003e                return false;\r\n            }\r\n\r\n        });\r\n\r\n        viewHolder.itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, viewHolder.getAdapterPosition());\r\n                intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e, Parcels.wrap(mRestaurants));\r\n                mContext.startActivity(intent);\r\n            }\r\n        });\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo get the current position of the click item, we can call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetAdapterPosition()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the ViewHolder passed into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like we did previously in the ViewHolder, we create an intent, pass in the position and the ArrayList of Restaurants and then call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartActivity()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod using the context passed in to our constructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNotice that the position information we're including with our intent when we say\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eintent.putExtra(\"position\", viewHolder.getAdapterPosition());\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis an integer. Make sure the RestaurantDetailActivity is prepared to gather a position of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003einteger\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata type when it receives this intent:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e startingPosition = getIntent().getIntExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n       ...\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, if we launch our application we should be able to drag and drop items, navigate away from \"Saved Restaurants\" and see it maintains the order we've left it in! Additionally, if we delete a restaurant from our list, it should actually be removed from that user's list of \"Saved Restaurants\" in Firebase. Perfect!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/21_persisting_interaction\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-animations","title":"Monday:Animations","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eAnimations\u003c/h1\u003e\r\n\u003cp\u003eNow that our list of saved restaurants is responding correctly to drag and drop and swipe events, let's add some additional finishing touches. In this lesson we will explore adding subtle animations that appear when a user interacts with a component using gestures. This will make our application feel more interactive, providing a more engaging experience for users. As Google's\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://material.google.com/motion/choreography.html\"\u003eMaterial Design Specifications\u003c/a\u003e\u003cspan\u003e \u003c/span\u003estate,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Motion design can effectively guide the user's attention in ways that both inform and delight...\"\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eThere are two primary ways to create animations: With Java code, and with XML. This lesson will walk through implementing the\u003cspan\u003e \u003c/span\u003e\u003cem\u003esame\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eanimations in each of these two ways. Afterwards, we'll discuss the pros and cons of each approach.\u003c/p\u003e\r\n\u003cp\u003eAdditionally, note that this lesson contains\u003cspan\u003e \u003c/span\u003e\u003cem\u003etwo\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eexample MyRestaurants repositories. One with programmatic animations, and another with XML animations.\u003c/p\u003e\r\n\u003ch2\u003eAnimation Setup\u003c/h2\u003e\r\n\u003cp\u003eBoth methods to create animations require the same general setup:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface to define methods that will be called when an item is selected for a drag-and-drop gesture.\u003c/li\u003e\r\n\u003cli\u003eThis interface needs to be implemented in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantViewHolder\u003c/code\u003e, where we will override its methods.\u003c/li\u003e\r\n\u003cli\u003eWe'll need to create a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass. This will listen for users selecting items, and inform the view holder when a gesture requiring animation is being performed.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eItemTouchHelperViewHolder\u003c/h3\u003e\r\n\u003cp\u003eFirst, let's create the required\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package and define its methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eItemTouchHelperViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill handle updating the appearance of a selected item while the user is dragging-and-dropping it.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemClear()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill remove the 'selected' state (and therefore the corresponding changes in appearance) from an item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe'll implement this interface in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantViewHolder\u003c/code\u003e, and override its two methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n  ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"Animation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"onItemSelected\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-comment\"\u003e// we will add animations here\u003c/span\u003e\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        Log.d(\u003cspan class=\"hljs-string\"\u003e\"Animation\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"onItemClear\"\u003c/span\u003e);\r\n        \u003cspan class=\"hljs-comment\"\u003e// we will add animations here\u003c/span\u003e\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eFor now, each method will only contain log statements. After we complete the next step and update the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe'll use these logcat statements to confirm our methods are being triggered correctly. When they are, we'll replace them with code to create animations in our user interface.\u003c/p\u003e\r\n\u003ch3\u003eUpdating SimpleItemTouchHelperCallback to Handle Animating\u003c/h3\u003e\r\n\u003cp\u003eNext, we must update our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto handle the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemCleared()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etriggers. We'll add the following methods. The embedded comments below contain an explanation of each:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSimpleItemTouchHelperCallback.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSimpleItemTouchHelperCallback\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelper\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eCallback\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e//   The method below triggers the callback in ItemTouchHelperViewHolder which is then sent to our\u003c/span\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e//  RestaurantListViewHolder where we will later add animations.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSelectedChanged\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e actionState)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n          \u003cspan class=\"hljs-comment\"\u003e//  This conditional ensures we only change appearance of active items:\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (actionState != ItemTouchHelper.ACTION_STATE_IDLE) {\r\n            \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (viewHolder \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e ItemTouchHelperViewHolder) {\r\n\r\n                \u003cspan class=\"hljs-comment\"\u003e//  This tells the viewHolder that an item is being moved or dragged:\u003c/span\u003e\r\n\r\n                ItemTouchHelperViewHolder itemViewHolder = (ItemTouchHelperViewHolder) viewHolder;\r\n                itemViewHolder.onItemSelected();\r\n            }\r\n        }\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onSelectedChanged(viewHolder, actionState);\r\n    }\r\n\r\n      \u003cspan class=\"hljs-comment\"\u003e//  This triggers the callback in the ItemTouchHelperViewHolder which will be sent to our RestaurantListViewHolder.\u003c/span\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e//  Then, in the clearView override in RestaurantListViewHolder, we will remove the animations attached\u003c/span\u003e\r\n      \u003cspan class=\"hljs-comment\"\u003e//   to 'selected' items, since this item will no longer be actively selected.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eclearView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.clearView(recyclerView, viewHolder);\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (viewHolder \u003cspan class=\"hljs-keyword\"\u003einstanceof\u003c/span\u003e ItemTouchHelperViewHolder) {\r\n\r\n            \u003cspan class=\"hljs-comment\"\u003e//  Tells the view holder to return the item back to its normal appearance:\u003c/span\u003e\r\n\r\n            ItemTouchHelperViewHolder itemViewHolder = (ItemTouchHelperViewHolder) viewHolder;\r\n            itemViewHolder.onItemClear();\r\n        }\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow we should now be able to run our app, and drag-and-drop list items from the \"Saved Restaurants\" area to ensure our log statements are being triggered correctly. If so, we're ready to add either Programmatic or XML animations.\u003c/p\u003e\r\n\u003ch2\u003eProgrammatic Animations\u003c/h2\u003e\r\n\u003cp\u003eFirst, we'll walk through the process of adding animations programmatically.\u003c/p\u003e\r\n\u003ch3\u003eRequired Reading\u003c/h3\u003e\r\n\u003cp\u003eAndroid provides a variety of APIs for applying animation to the user interface. The Properties Animation API is one such tool that allows us to easily alter properties of view elements over a given duration.\u003c/p\u003e\r\n\u003cp\u003eBefore we begin, read more about\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\"\u003eproperty animation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon the Android Developers Site and in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://android-developers.blogspot.com/2011/05/introducing-viewpropertyanimator.html\" target=\"_blank\"\u003ethis blog post\u003c/a\u003eregarding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPropertyAnimator\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eSavedRestaurantListActivity Animations\u003c/h3\u003e\r\n\u003cp\u003eLet’s utilize property animations on the restaurant list items users are able to drag and drop in their \"Saved Restaurants\" list. We'll add the following code to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperViewHolder\u003c/span\u003e \u003c/span\u003e{\r\n  ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        itemView.animate()\r\n                .alpha(\u003cspan class=\"hljs-number\"\u003e0.7f\u003c/span\u003e)\r\n                .scaleX(\u003cspan class=\"hljs-number\"\u003e0.9f\u003c/span\u003e)\r\n                .scaleY(\u003cspan class=\"hljs-number\"\u003e0.9f\u003c/span\u003e)\r\n                .setDuration(\u003cspan class=\"hljs-number\"\u003e500\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        itemView.animate()\r\n                .alpha(\u003cspan class=\"hljs-number\"\u003e1f\u003c/span\u003e)\r\n                .scaleX(\u003cspan class=\"hljs-number\"\u003e1f\u003c/span\u003e)\r\n                .scaleY(\u003cspan class=\"hljs-number\"\u003e1f\u003c/span\u003e);\r\n    }\r\n\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.animate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemView\u003c/code\u003e, and chain the following methods to create our custom animation:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.scaleX()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the horizontal scale of the item. It takes a float value as an argument.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.scaleY()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esets the vertical scale of the item. It also takes a float value as an argument\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.alpha()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealters the alpha level of an object (its transparency and/or opaqueness, essentially).\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e.setDuration()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edetermines how long this animation will last. It takes a millisecond value as an argument.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNow, if we launch the application in our emulator we should see that the process of dragging-and-dropping items in our \"Saved Restaurants\" list is now animated!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.2_java_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with Programmatic Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eXML Property Animations\u003c/h2\u003e\r\n\u003cp\u003eNext, let's walk through the process of creating the same animations using XML.\u003c/p\u003e\r\n\u003ch3\u003eRequired Reading\u003c/h3\u003e\r\n\u003cp\u003eBefore we begin exploring this, read the Android Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/guide/topics/graphics/prop-animation.html#declaring-xml\" target=\"_blank\"\u003eDeclaring Animations in XML\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch3\u003eAnimator Resource Directory\u003c/h3\u003e\r\n\u003cp\u003eXML animations need to reside in a special directory called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e. Right-click on your existing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003edirectory, and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Android resource directory\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. In the resulting window name the new directory\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand set the 'resource type' option to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/1oborxzu3iapaxe/creating-animator-directory.png\" alt=\"creating-animator-directory\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eXML Animation Resources\u003c/h3\u003e\r\n\u003cp\u003eWithin this directory we'll create two new XML files:\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_on.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_off.xml\u003c/em\u003e. The first will define the visual appearance of an element when it's currently being dragged by a user, and the latter will define its appearance when it's no longer being dragged. As users perform gestures to interact with the individual restaurant list items, the drag_scale_on, or drag_scale_off appearances will be toggled.\u003c/p\u003e\r\n\u003cp\u003eFirst, let's create\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_on.xml\u003c/em\u003e. Create this file by right-clicking on our new\u003cspan\u003e \u003c/span\u003e\u003cem\u003eanimator\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eresource directory, and selecting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Animator resource file\u003c/em\u003e. We'll populate this layout with the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eanimator/drag_scale_on.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleX\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.9f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleY\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.9f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alpha\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.7f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, you may notice some familiar terms:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escaleX\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003escaleY\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ealpha\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eduration\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eall refer to the same values as they did in the programmatic approach; here we're simply setting these values with XML instead. Additionally, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;set\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags refer to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimatorSet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass, which is responsible for playing animations.\u003c/p\u003e\r\n\u003cp\u003eNext, let's make sure we include XML for when the animation is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eoff\u003c/em\u003e. Create another XML file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_off.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand populate it with the following:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eanimator/drag_scale_off.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleX\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"scaleY\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eobjectAnimator\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:propertyName\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"alpha\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:valueTo\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1f\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:duration\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"500\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eset\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs you can see, it contains all the same elements and XML selectors as\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag_scale_on.xml\u003c/em\u003e, but with different values. This defines the appearance of the item when it is\u003cspan\u003e \u003c/span\u003e\u003cem\u003eno longer\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebeing selected.\u003c/p\u003e\r\n\u003ch3\u003eInflating XML Animations\u003c/h3\u003e\r\n\u003cp\u003eNow that we've created our XML animations, we'll need to inflate them in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. This is similar to the manner we inflate other types of XML layouts, but we'll use a special\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimatorSet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject responsible for handling the corresonding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;set\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in our XML animations.\u003c/p\u003e\r\n\u003cp\u003eNotice that these are the same methods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface defined in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eSetup\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection at the beginning of this lesson, and the same methods we used in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eProgrammatic Animations\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eMake sure any code leftover from the programmatic approach has been commented out or removed from these methods before continuing.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(mContext,\r\n                R.animator.drag_scale_on);\r\n        set.setTarget(itemView);\r\n        set.start();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClear\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(mContext,\r\n                R.animator.drag_scale_off);\r\n        set.setTarget(itemView);\r\n        set.start();\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimatorSet\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject to inflate and load the animations we defined in our corresponding\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\u0026lt;set\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etags in our XML. Then, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetTarget()\u003c/code\u003e, passing in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eitemView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument to instruct which element these animations should be applied to. Then, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.start()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto begin the specified animations.\u003c/p\u003e\r\n\u003cp\u003eNow, if we launch our application again, we should see the same animations when we drag-and-drop individual restaurant list items in the \"Saved Restaurants\" area of our application.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.1_xml_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with XML Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eProgrammatic vs. XML\u003c/h2\u003e\r\n\u003cp\u003eAs you can see, these are two slightly different approaches that accomplish the same thing. How do you know which to use in a given project? Let's briefly review the pros and cons of each approach:\u003c/p\u003e\r\n\u003ch3\u003eXML\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003ePros\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMore easily re-usable, since you can simply inflate the XML file in multiple places throughout the application.\u003c/li\u003e\r\n\u003cli\u003eEasier to read; especially when multiple sets of animations are involved.\u003c/li\u003e\r\n\u003cli\u003eProvides clearer separation between an object and its behavior/appearance.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eCons\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eMore verbose; ends up being more lines than adding animations programmatically.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eProgrammatic\u003c/h3\u003e\r\n\u003cp\u003e\u003cstrong\u003ePros\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eLess code overall than creating animations in XML.\u003c/li\u003e\r\n\u003cli\u003eFewer overall files in a project.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eCons\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCan be more difficult to decipher, especially with multiple concurrent animations, or many properties.\u003c/li\u003e\r\n\u003cli\u003eCannot be re-used as easily throughout an application.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAgain, either of these two approaches are acceptable. When adding animations to an application, consider the pros and cons listed above, and decide which method works best for your specific animation.\u003c/p\u003e\r\n\u003cp\u003eMoving forward, be aware that the MyRestaurants example repository will include the XML animations. You are welcome to use either approach in your own MyRestaurants app.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.2_java_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with Programmatic Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/22.1_xml_animations\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants with XML Animations\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"http://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\"\u003eProperty Animation Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://android-developers.blogspot.com/2011/05/introducing-viewpropertyanimator.html\" target=\"_blank\"\u003eBlog post on ViewPropertyAnimator\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003eGoogle Material Specification for\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://material.google.com/motion/choreography.html\" target=\"_blank\"\u003eChoreography\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(ie: Moving transitions and animations)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-creating-a-new-project","title":"Pre-course work: Creating a New Project","type":"WikiPage","content":"\u003cp\u003eNow that we have Android Studio installed, let’s get started by creating a basic app. We are going to create a restaurant app that will display a list of restaurants by location. We will continue to build on this app throughout the course, adding additional features as we learn the tools we need to implement them.\u003c/p\u003e\r\n\u003ch2\u003eCreating a New Project\u003c/h2\u003e\r\n\u003cp\u003eWith Android Studio open, click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eStart a new Android Studio project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto create a new project.\u003c/p\u003e\r\n\u003cp\u003eWe’ll fill out the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApplication Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efield with the name of the app,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurants\u003c/em\u003e, exactly how we want it to appear on the device and in the Google Play Store.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNote: Application names can only contain letters, numbers, spaces or underscores.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCompany Domain\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecan be anything. You are welcome to use your personal website as you will see throughout these lessons. If you choose to use a different domain, please note that your package name will be different as well. The package name will be used to differentiate our app from others in the Play Store.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNote: The package name should never contain capital letters.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/nfcgscrm26yuiof/new-project1.png?raw=1\" alt=\"Configure your new project\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eSelecting Android Versions\u003c/h2\u003e\r\n\u003cp\u003eOn the next screen, we need to select the version of Android our app will run on. We will be writing this app to run on a phone, so let’s leave the first box checked. In the adjacent drop down, we need to select the minimum\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSDK (Software Development Kit)\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ethat we would like our app to be able to run on.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAPI and SDK versions are often used interchangeably. All SDKs have a corresponding API version.\u003c/p\u003e\r\n\u003cp\u003eClick on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eHelp me choose\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebutton to figure out which version to select.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/gqin9gftn8iffq3/new-project2.png?raw=1\" alt=\"API Version Distribution\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThis graph shows us the distribution of Android versions currently used in the world. Looking at the cumulative distribution, we can see that 94.8% of devices are currently running on Android 4.0 (API 15) or above. By choosing API 15 (Android 4.0 - Ice Cream Sandwich) we can be confident that our app will run smoothly on 94.8% of devices. The API level only really matters when we are using features that have either lost support in newer versions, or when accessing features that are only available in a brand new release. For the purposes of this basic app, we do not need to worry about this.\u003c/p\u003e\r\n\u003ch2\u003eAdding Pre-Built Activities\u003c/h2\u003e\r\n\u003cp\u003eOn the next screen, we can choose from a variety of pre-built activities. Think of these like templates included in Microsoft Word. When starting a new project, we generally want to start with blank files so let’s select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEmpty Activity\u003c/em\u003e.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNote: Do not select \u003c/em\u003eBlank Activity\u003cem\u003e as a \u003c/em\u003eBlank Activity\u003cem\u003e includes a few additional code snippets that will be a bit confusing at first.\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003eSo what is an activity anyway?\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eActivities\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ecan be thought of as the different screens that make up an app. On the next page, we will choose a name for our first activity. Similar to using the name\u003cem\u003eindex.html\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efor a website's main page, it is common practice in Android to name our primary activity\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e. Let’s keep the activity name\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e. We are finished creating a new project. Click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFinish\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand wait while Android Studio builds our project.\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-creating-a-gridview-with-a-custom-layout","title":"Wednesday: Creating a GridView with a Custom Layout ","type":"WikiPage","content":"\u003ch1\u003eWarm Up\u003c/h1\u003e\r\n\u003cdiv\u003e\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDescribe how the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eworks to generate items in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e.\u003c/li\u003e\r\n\u003cli\u003eWhy is ButterKnife worth implementing in your projects? What does it do?\u003c/li\u003e\r\n\u003cli\u003eWhat is an annotation in Java?\u003c/li\u003e\r\n\u003cli\u003eIn terms of testing, what is a 'shadow'? When and why are they used?\u003c/li\u003e\r\n\u003cli\u003eHow do we interact with data in an adapter?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePractice\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eBy now, the concept of an adapter should start feeling familiar: When we have a collection of data, we need some way to bind single instances of that data to a layout. Even though we previously customized our ArrayAdapter, and changed the way data is displayed through\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString.format()\u003c/code\u003e, we still used a standard resource that is part of the Android package, namely\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esimple_list_item_1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display our data, which works fine for\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etypes, but doesn’t cut the mustard for more complex data types.\u003c/p\u003e\r\n\u003cp\u003eIf we have an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOrange[]\u003c/code\u003e, then we need to have something that can visually represent an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOrange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand all the properties we define an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOrange\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas having. In order to represent more complex data, we’ll need to create a custom adapter and a custom layout file - things can get complicated quickly, and we’ll tackle this in full next week.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/vgzhim65pwne6mm/app_object_overview.png\" alt=\"app_object_overview\"\u003e\u003c/p\u003e\r\n\u003cp\u003eSo, let’s start simple - let’s create a gridview, fill it with some data, and style that data with a custom typeface to get our feet wet. This exercise is simple, but will teach you work with custom layouts, custom adapters, and passing information to a custom adapter.\u003c/p\u003e\r\n\u003ch3\u003eIntroduction to GridView\u003c/h3\u003e\r\n\u003cp\u003eA\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGridView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis just that - it is a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat represents data in a two-dimensional scrolling grid. The items in the grid come from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eassociated with this View. Because a GridView gets its data from a ListAdapter, the only data loaded in memory will be the one displayed on screen. GridViews, much like ListViews reuse and recycle their views for better performance.\u003c/p\u003e\r\n\u003cp\u003eGridLayouts are like LinearLayouts or RelativeLayouts - they organize data on the screen in a grid format. But what they do not do is allow for scrolling, and they do not perform memory management tasks for us. Please don’t try and show images in a GridView or GridLayout until you have a better handle on memory management for Images (see our topics on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#weekend-one.html\" target=\"_blank\"\u003ePicasso\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ethis coming weekend), otherwise you will almost certainly have an app that crashes consistently with an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOut Of Memory\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eerror, or performs very sluggishly.\u003c/p\u003e\r\n\u003cp\u003eIn this example, we’re going to simply display an alphabet on the screen in a grid, as we might do if we were making an app for kids to learn the alphabet.\u003c/p\u003e\r\n\u003cp\u003eWe’ll style different views with different fonts to differentiate our views.\u003c/p\u003e\r\n\u003cp\u003eLet’s get started!\u003c/p\u003e\r\n\u003ch3\u003eSetup\u003c/h3\u003e\r\n\u003cp\u003eFirst, let’s make a new project in Android Studio using all the standard settings, and choosing “Empty Activity” as our first activity. Name your app and package name whatever you like, but let’s keep the main activity called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto keep things consistent.\u003c/p\u003e\r\n\u003cp\u003eWhen you’re done, jump over to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivity.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. Let’s write out our alphabet first. Let’s use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString[]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas we did before to hold our letters.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n      \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n         GridView gridView;\r\n         String[] letters = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\r\n                 \u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"B\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"C\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"D\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"E\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"F\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"G\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"H\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"I\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"J\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"K\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"L\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"M\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"N\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"O\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"P\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Q\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"R\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"S\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"T\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"U\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"V\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"W\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"X\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Y\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Z\"\u003c/span\u003e};\r\n         \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n         \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n             \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n             setContentView(R.layout.activity_main);\r\n         }\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eCool. That was easy!\u003c/p\u003e\r\n\u003ch3\u003eMaking our Custom Layout\u003c/h3\u003e\r\n\u003cp\u003eTime to make a simple layout that can handle our alphabet display. Our layout will be comprised of two files:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe container, a RelativeLayout that holds our GridView (this will live in the XML for our MainActivity)\u003c/li\u003e\r\n\u003cli\u003eThe individual grid \"item\" - the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat get repeated as many times as necessary inside our GridView. (this will live in a separate file.)\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eJump over to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_main.xml\u003c/em\u003e. In here, you should see nothing but a simple TextView, stating “Hello World!” Let’s make the following adjustments:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity\\_main.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\r\n      \u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/activity_main\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_vertical_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_horizontal_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_horizontal_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:paddingTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@dimen/activity_vertical_margin\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myapplication.MainActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Learn the Alphabet\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/headerTextView\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_centerHorizontal\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eGridView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:columnWidth\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"50sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:numColumns\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"auto_fit\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:stretchMode\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"spacingWidthUniform\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/baseGridView\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0dp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"left\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:scrollingCache\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"false\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_marginTop\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"40sp\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you switch to design view, you should see some placeholder text (don't worry about that for now!) displayed in a grid. That’ll be all we need to do with our GridView for now.\u003c/p\u003e\r\n\u003ch3\u003eStyling our Grid Item\u003c/h3\u003e\r\n\u003cp\u003eNow we need to make the layout that will handle our individual alphabet items. We’ll connect the two in a second step shortly, telling the GridView to load the XML for the GridItem for each alphabet letter.\u003c/p\u003e\r\n\u003cp\u003eLet’s right click on the res folder and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Layout Resource File\u003c/em\u003e. Leaving the layout type as LinearLayout is fine.\u003c/p\u003e\r\n\u003cp\u003eThis is the XML you want to end up with:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote: While you can, of course, tweak the layout, you’ll definitely want to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAVOID\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ehaving your letters require scrolling. If they do, the variable\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eposition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(more on that soon) will not correctly retrieve values from your arrays. I am working on a solution for this, but for now, please format your letters that they fit all on one screen.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ealphabet_grid_item.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n         \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"15sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/grid_item_label\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"0.8\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Letter\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n         \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"60sp\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/grid_item_letter\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_weight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"1\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"center_horizontal\"\u003c/span\u003e\r\n             \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"A\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n      \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe’ll populate this with dynamic data soon. Just a few more steps, then we can test our app!\u003c/p\u003e\r\n\u003ch3\u003eMaking our Custom Adapter\u003c/h3\u003e\r\n\u003cp\u003eNow let’s get a start on making our custom adapter. Create a new class in your main package, name it\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlphabetAdapter\u003c/em\u003e. Make AlphabetAdapter extend BaseAdapter. We’ve done this before, so if you’re unsure, go back and review how to do this from the Customizing ArrayAdapters\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-arrayadapters-customization?module_item_id=iadd2d63a9971a01d0bb6dd95ea9de1dd\"\u003elesson\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eSimilarly to our customized ArrayAdapter, AlphabetAdapter needs to have some member variables. We’ll definitely need a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere, as well as our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString[]\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat we are passing in from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eWe’ll also need a constructor.\u003c/p\u003e\r\n\u003cp\u003eThis’ll work:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e      \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBaseAdapter\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mLetters;\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-params\"\u003e(Context context, String[] letters)\u003c/span\u003e\u003c/span\u003e{\r\n             \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = context;\r\n             \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLetters = letters;\r\n         }\r\n      }    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eBut then we see:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/g2p2gs9f9tz121l/adapter-constructor-no-overrides.png\" alt=\"adapter-constructor-no-overrides.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow we still have a angry, red squiggly line - if we hover over it, we might see that we need to implement a method called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e. This should be familiar from customizing our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e. Remember: Any time we extend a class, we agree that we will implement that class' required methods - Android Studio will stay angry at us until we deliver on our responsibilities.\u003c/p\u003e\r\n\u003cp\u003eLet’s let the IDE do some busywork for us. Right click inside the class, select generate, then choose\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOverride Methods…\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand select all 4 methods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.widget.Adapter package\u003c/code\u003e:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemId()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetView()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eSome boilerplate code appears, and red squiggly lines (should) disappear. Boilerplate code is a term you'll hear frequently, so be sure to know what it refers to. Boilerplate is no frills, bare minimum code that is either a.) supplied to you, the developer, via a website, template file or some other form of documentation, or auto-generated by an application such as a Command Line Interface (CLI) or IDE (Integrated Development Environment - memorize these). It's represents a starting point for us, but almost always needs to be edited extensively so that it provides relevant functionality to our app.\u003c/p\u003e\r\n\u003cp\u003eAs you may now expect, so far all the boilerplate code returns\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e. Not super interesting or useful.\u003c/p\u003e\r\n\u003cp\u003eLet’s make some changes.\u003c/p\u003e\r\n\u003cp\u003eWe’ll leave\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItemId()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ealone for now - we need to implement them, but don’t need to customize them at the moment. First, let’s change\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e. We’ll want to return the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.length\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emLetters\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray, so make\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturn that instead of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis necessary so that our app knows how many times the GridView should repeat the Grid Item.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003egetView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis where we’ll want to connect our layout with our grid items. Let’s do that now.\u003c/p\u003e\r\n\u003cp\u003eHere’s where we should arrive.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e      \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eBaseAdapter\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n         \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mLetters;\r\n         \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-params\"\u003e(Context context, String[] letters)\u003c/span\u003e\u003c/span\u003e{\r\n              \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = context;\r\n              \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLetters = letters;\r\n          }\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLetters.length;\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e;\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetItemId\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n         \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e;\r\n      }\r\n      \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n      \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003egetView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position, View convertView, ViewGroup parent)\u003c/span\u003e \u003c/span\u003e{\r\n         LayoutInflater inflater = (LayoutInflater) mContext\r\n                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\r\n         View gridView;\r\n         \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (convertView == \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n             \u003cspan class=\"hljs-comment\"\u003e// get layout from xml file\u003c/span\u003e\r\n             gridView = inflater.inflate(R.layout.alphabet_grid_item, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n                 \u003cspan class=\"hljs-comment\"\u003e// pull views\u003c/span\u003e\r\n                 TextView letterView = (TextView) gridView\r\n                         .findViewById(R.id.grid_item_letter);\r\n                 \u003cspan class=\"hljs-comment\"\u003e// set values into views\u003c/span\u003e\r\n                 letterView.setText(\u003cspan class=\"hljs-string\"\u003e\"A\"\u003c/span\u003e);  \u003cspan class=\"hljs-comment\"\u003e// using dummy data for now\u003c/span\u003e\r\n             } \u003cspan class=\"hljs-keyword\"\u003eelse\u003c/span\u003e {\r\n                 gridView = (View) convertView;\r\n             }\r\n             \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e gridView;\r\n         }\r\n      }    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTake the time to go through this and try and understand what we are doing here, step by step.\u003c/p\u003e\r\n\u003cp\u003eOur\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod contains some code and arguments we haven’t seen before:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eConvertView\u003c/strong\u003e: If a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eConvertView\u003c/code\u003e, it is actually a View that can be converted to a new View, which means new content can get written into the fields contained in said View. What? Why would this be necessary? Well - let’s say you have a list of 150 things to display, but only 10 fit on the screen at any given time. We’re going to start our list at the very top, with the 0th item. As we scroll down, the view that was in the 0th place is now off the screen, and can now be removed from the app’s memory storage, until we start to scroll back up again. When we start our list, the convertView is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e, and therefore we need to start building our list from our layout. If it’s not\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enull\u003c/code\u003e, then the layout already got built, as some scrolling happened. Makes sense! ConvertView is important for your app’s performance.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eLayoutInflater, Viewgroups\u003c/strong\u003e: We’ll get more into this a little later, but for now it’s enough to know that the Views belong to a Viewgroup. This is how we know which views belong to the unit that gets repeated inside of the layout, and this Viewgroup gets\u003cspan\u003e \u003c/span\u003e\u003cem\u003einflated\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewith data. Inflating is the process of sorting out which data goes where. Imagine a truck of groceries arriving at a supermarket. Each item in the truck belongs somewhere in the store. Someone has to determine what goes where, someone who knows what the aisles and departments look like, where the store ends, and how big it is. That person needs to issue instructions to the store’s workers, ensuring they know how to place the goods in the correct locations. Part of this process is the LayoutInflater’s job when it aids in correctly matching data to layout.\u003c/p\u003e\r\n\u003ch3\u003eInvoking our Custom Adapter in MainActivity\u003c/h3\u003e\r\n\u003cp\u003eNow all we need to do is invoke our adapter inside of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e, and we can test our app. Place this code in your\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetContentView(R.layout.activity_main);\u003c/code\u003e\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n      gridView = (GridView) findViewById(R.id.baseGridView);\r\n      gridView.setAdapter(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AlphabetAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, letters));\r\n...    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we are writing the whole GridView into one variable - including the views that will end up getting nested inside it. Then we need to a.) make a local copy and b.) connect that with the GridView, feeding it the correct arguments so the constructor can run boot up an object.\u003c/p\u003e\r\n\u003cp\u003eRun your app - and congrats! You should see the a GridView on the screen - repeating the letter A over and over again. Now you can tweak your layout if you’d like to make any changes.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/5advbkikfnj0ua8/gridview-dummydata.png\" alt=\"gridview-dummydata\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eMaking our Data Dynamic\u003c/h3\u003e\r\n\u003cp\u003eOnce our dummy data is up and running, we can use position variable to retrieve\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003es from the letters array - just like we did in the customized\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eHead back over to your adapter, and try and see if you can implement that logic now.\u003c/p\u003e\r\n\u003cp\u003eWhen you are done, you should see something like this when your app runs:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/l3co78ojbjua89e/gridview-dynamic-data-no-typeface.png\" alt=\"gridview-dynamic-data-no-typeface\"\u003e\u003c/p\u003e\r\n\u003cp\u003eGood stuff!\u003c/p\u003e\r\n\u003cp\u003eSo far so good, we have a custom adapter and a custom layout. Now, let’s add the finishing touches and learn how to apply a different TypeFace to a View that is not directly referenced in an activity’s XML file, but instead nested inside of a view.\u003c/p\u003e\r\n\u003cp\u003eIf you take a look back at the first Custom Fonts\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#01.html\"\u003elesson\u003c/a\u003e, you’ll see that we were able to run get\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCreateFromAssets()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, retrieve the typeface, then apply it to a view inside of our activity’s\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003cp\u003eBut the view that we are looking to style is not accessible in the same way here - we cannot directly reference it in the MainActivity, as the Views are part of the GridView’s custom layout. Oh no!\u003c/p\u003e\r\n\u003cp\u003eAnd if we try and apply a font to the whole\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eGridView\u003c/code\u003e, or call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCreateFromAssets()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the adapter, we’ll see that this won’t work either, as this method only runs inside of an Activity, not an Adapter. Dang.\u003c/p\u003e\r\n\u003cp\u003eBut there is a solution. Since we wrote the our adapter ourselves, including a new constructor - there is no reason why we can’t pass the Typeface we want to use to the Adapter as an argument to the constructor, and then apply it inside the adapter when the views are bound! This is great! We can pass all kinds of information around through constructors. This will be super useful later on.\u003c/p\u003e\r\n\u003cp\u003eHere’s how:\u003c/p\u003e\r\n\u003cp\u003eFirst, let’s download a font (.ttf please!) we like from FontSquirrel or\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://www.dafont.com/\"\u003eDaFont.com\u003c/a\u003e, and place it in the assets/fonts folder as we have done previously. Refer back to the earlier lesson if you are unsure how to do this correctly.\u003c/p\u003e\r\n\u003cp\u003eOnce that is completed, return back to your adapter and create a new member variable, called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emTypeface\u003c/code\u003e.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mLetters;\r\n      \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Typeface mTypeface; \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eEdit your constructor and your parameter list accordingly.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAlphabetAdapter\u003c/span\u003e \u003cspan class=\"hljs-params\"\u003e(Context context, String[] letters, Typeface typeface)\u003c/span\u003e\u003c/span\u003e{\r\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = context;\r\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLetters = letters;\r\n          \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mTypeface = typeface;\r\n      }    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s move down to where the text for the view is set, and we can now apply our new typeface.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eAlphabetAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-comment\"\u003e// set values into views\u003c/span\u003e\r\n      letterView.setText(mLetters[position]);\r\n      letterView.setTypeface(mTypeface);\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, let’s return back to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity\u003c/code\u003e, where we can now pull in our Typeface from our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eassets/fonts\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efolder and pass it to our adapter as an argument to the constructor.\u003c/p\u003e\r\n\u003cp\u003eIn our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, let’s declare and initialize a new variable of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTypeface\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etype that can hold our typeface.\u003c/p\u003e\r\n\u003cp\u003eNow, all we need to do is to pass this typeface to our adapter through our constructor. Run your app and see your typeface show up in your super custom layout.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n         \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n             \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n             setContentView(R.layout.activity_main);\r\n             Typeface typeface = Typeface.createFromAsset(getAssets(), \u003cspan class=\"hljs-string\"\u003e\"fonts/musicnet.ttf\"\u003c/span\u003e); \u003cspan class=\"hljs-comment\"\u003e//change\u003c/span\u003e\r\n             gridView = (GridView) findViewById(R.id.baseGridView);\r\n             gridView.setAdapter(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AlphabetAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, letters, typeface));\r\n         }\r\n      }\r\n    \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/sxnksguo0nzdq4v/gridview-final-dynamic-typeface.png\" alt=\"gridview-final-dynamic-typeface\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAwesome! While the final result may not seem all that spectacular, you successfully learned to further enhance your apps with custom adapters, custom layouts, and to pass important data to your nested views via adapters and their constructors. Nice job!\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"weekend-refactor-subpackages","title":"Weekend: Refactor: Subpackages","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003e\u003cspan style=\"font-family: LatoWeb, 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 1.8em;\"\u003eRefactor: Subpackages\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eOur main package is starting to look a little messy. We have Java classes for our Restaurant model mixed up with Java classes for our user interface. Let’s create a few sub-packages to organize our project better.\u003c/p\u003e\r\n\u003cp\u003eTo create a new sub-package, right click on the main package name and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Package\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg src=\"https://www.dropbox.com/s/k92vjsgkdfx06c4/creating-new-subpackage.png?raw=1\" alt=\"creating-a-subpackage-in-android-studio\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eWe will create the following three subpackages to better organize our project:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cem\u003emodels\u003c/em\u003e, containing our Restaurant model and any future models.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e, containing all of our activities.\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003eservices\u003c/em\u003e, containing our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eYelpService\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eDrag and drop each Java class into their corresponding packages and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRefactor\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the dialog that appears:\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg src=\"https://www.dropbox.com/s/ln4juhm1crsnvkl/refactoring-with-subpackages-dialog-box.png?raw=1\" alt=\"refactor-dialog-box-with-subpackages\"\u003e\u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\r\n\u003cp\u003eOnce complete, our file tree in Android Studio should look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cbr\u003e\u003cimg src=\"https://www.dropbox.com/s/pmwn1hnf1t50voi/refactoring-with-subpackages-filetree.png?raw=1\" alt=\"refactored-file-tree-with-subpackages-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","frontPage":false},{"exportId":"tuesday-flexible-uis-fragments","title":"Tuesday:Flexible UIs: Fragments","type":"WikiPage","content":"\u003ch1\u003eFlexible UIs: Fragments\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWhen developing good user experiences for Android apps, it is important to not only account for a variety of screen sizes but also screen orientations.\u003c/p\u003e\r\n\u003cp\u003eAt the moment our app looks fantastic in portrait, but not\u003cspan\u003e \u003c/span\u003e\u003cem\u003equite\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas nice when we change the orientation of the screen from portrait to landscape. However, to utilize our logic in multiple potential layouts (such as both portrait\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elandscape layouts) we'll need to refactor several of our activities into fragments.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we will refactor activities into more flexible and reusable fragments. Then, in upcoming lessons we will take advantage of this newfound flexibility by integrating separate layouts that will automatically display when users tilt their phone into landscape mode. After that, we'll include code that will allow our new fragments to communicate seamlessly.\u003c/p\u003e\r\n\u003cp\u003eThe end result will look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/qqbgpk89xm5l3qw/landscape-detail-layout.png\" alt=\"landscape-view\"\u003e\u003c/p\u003e\r\n\u003cp\u003eLet's get started!\u003c/p\u003e\r\n\u003ch2\u003eCreating Fragments\u003c/h2\u003e\r\n\u003cp\u003eFirst, let's create two fragments to house the functionality from SavedRestaurantListActivity and RestaurantListActivity. Since these areas of our app will eventually have special landscape-orientation-specific layouts, refactoring these into fragments will allow us to insert it into both landscape\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eportrait-orientation layouts without creating unnecessarily redundant code.\u003c/p\u003e\r\n\u003ch3\u003eRestaurantListFragment\u003c/h3\u003e\r\n\u003cp\u003eLet’s start by creating a blank fragment called RestaurantListFragment. Right-click on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eui\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Fragment \u0026gt; Fragment (Blank)\u003c/em\u003e. Make sure to check the box labeled\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCreate layout XML?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto generate the corresponding layout file, which we will use at the end of this lesson. Boxes for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude fragment factory methods?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003einclude interface callbacks?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emay be un-checked, as we will not use the boilerplate code they produce.\u003c/p\u003e\r\n\u003cp\u003eThis will create a new XML layout file, and a java file with the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Required empty public constructor\u003c/span\u003e\r\n    }\r\n\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Inflate the layout for this fragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eRefactoring Activities into Fragments\u003c/h2\u003e\r\n\u003cp\u003eNow, we'll need to move the majority of code from RestaurantListActivity to our new RestaurantListFragment. We'll do this in several pieces, pausing to explain changes each time.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll declare our necessary member variables:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll override the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Required empty public constructor\u003c/span\u003e\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// Instructs fragment to include menu options:\u003c/span\u003e\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Inflate the layout for this fragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're defining our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emSharedPreferences\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emEditor\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variables, and instructing the fragment to include and display the menu options inherited from its parent activity. This will allow us to eventually display search menu options within RestaurantListFragment.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll move our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod from RestaurantListActivity to RestaurantListFragment. Because the method will reside in a new location (and therefore a new context), slight changes will be necessary. These are indicated by comments in the code below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n              \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                getActivity().runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n                    \u003cspan class=\"hljs-comment\"\u003e// Line above states 'getActivity()' instead of previous 'RestaurantListActivity.this'\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-comment\"\u003e// because fragments do not have own context, and must inherit from corresponding activity.\u003c/span\u003e\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getActivity(), mRestaurants);\r\n                        \u003cspan class=\"hljs-comment\"\u003e// Line above states `getActivity()` instead of previous\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// 'getApplicationContext()' because fragments do not have own context,\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// must instead inherit it from corresponding activity.\u003c/span\u003e\r\n\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity());\r\n                        \u003cspan class=\"hljs-comment\"\u003e// Line above states 'new LinearLayoutManager(getActivity());' instead of previous\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// 'new LinearLayoutManager(RestaurantListActivity.this);' when method resided\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// in RestaurantListActivity because Fragments do not have context\u003c/span\u003e\r\n                        \u003cspan class=\"hljs-comment\"\u003e// and must instead inherit from corresponding activity.\u003c/span\u003e\r\n\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can no longer call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantListActivity.this\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewithin this method, simply because it is no longer located within RestaurantListActivity. Remember, fragments do not have their own context and must instead inherit it from their parent activity. We may instead access the parent context by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll add code to the existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhile activities instantiate their views directly in \u003ccode\u003eonCreate()\u003c/code\u003e, fragments require multiple steps to do this:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill only create the fragment itself. It is called before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand offers an opportunity to assign variables, get Intent extras, and anything else that doesn't involve the view hierarchy.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, and is used to assign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables, and handle any graphical initializations. It must be called to render the fragment's views, as detailed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eLifecycle of Android Fragments\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eIn the code above, we simply inflate and bind the corresponding layout, fetch the user's last-searched zip code (\u003ccode\u003emRecentAddress\u003c/code\u003e) from shared preferences, and, if it exists, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRestaurants()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return restaurants in that area.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll need to move the existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateOptionsMenu()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonOptionsItemSelected()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods from RestaurantListActivity into our new RestaurantListFragment. These methods will require several changes to operate from their new location, as detailed below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.widget.SearchView;\r\n...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e// Method is now void, menu inflater is now passed in as argument:\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu, MenuInflater inflater)\u003c/span\u003e \u003c/span\u003e{\r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e// Call super to inherit method from parent:\u003c/span\u003e\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu, inflater);\r\n\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n    }\r\n\r\n   \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also need to move the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eaddToSharedPreferences()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod in RestaurantListActivity to RestaurantListFragment:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe completed RestaurantListFragment should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantListAdapter mAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences mSharedPreferences;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e SharedPreferences.Editor mEditor;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String mRecentAddress;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n\r\n        mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\r\n        mEditor = mSharedPreferences.edit();\r\n\r\n        setHasOptionsMenu(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n        mRecentAddress = mSharedPreferences.getString(Constants.PREFERENCES_LOCATION_KEY, \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e);\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (mRecentAddress != \u003cspan class=\"hljs-keyword\"\u003enull\u003c/span\u003e) {\r\n            getRestaurants(mRecentAddress);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreateOptionsMenu\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Menu menu, MenuInflater inflater)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreateOptionsMenu(menu, inflater);\r\n        inflater.inflate(R.menu.menu_search, menu);\r\n\r\n        MenuItem menuItem = menu.findItem(R.id.action_search);\r\n        SearchView searchView = (SearchView) MenuItemCompat.getActionView(menuItem);\r\n\r\n        searchView.setOnQueryTextListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SearchView.OnQueryTextListener() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextSubmit\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String query)\u003c/span\u003e \u003c/span\u003e{\r\n                addToSharedPreferences(query);\r\n                getRestaurants(query);\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonQueryTextChange\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String newText)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonOptionsItemSelected\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(MenuItem item)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onOptionsItemSelected(item);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRestaurants\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e YelpService yelpService = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e YelpService();\r\n\r\n        yelpService.findRestaurants(location, \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Callback() {\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonFailure\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, IOException e)\u003c/span\u003e \u003c/span\u003e{\r\n                e.printStackTrace();\r\n            }\r\n\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Call call, Response response)\u003c/span\u003e \u003c/span\u003e{\r\n                mRestaurants = yelpService.processResults(response);\r\n\r\n                getActivity().runOnUiThread(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Runnable() {\r\n\r\n                    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n                    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erun\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n                        mAdapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantListAdapter(getActivity(), mRestaurants);\r\n                        mRecyclerView.setAdapter(mAdapter);\r\n                        RecyclerView.LayoutManager layoutManager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity());\r\n                        mRecyclerView.setLayoutManager(layoutManager);\r\n                        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eaddToSharedPreferences\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String location)\u003c/span\u003e \u003c/span\u003e{\r\n        mEditor.putString(Constants.PREFERENCES_LOCATION_KEY, location).apply();\r\n    }\r\n\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eRefactoring RestaurantListActivity\u003c/h3\u003e\r\n\u003cp\u003eIf you haven't done so already, we can remove all of the methods we've just placed in our new fragment from RestaurantListActivity. After doing so, it should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou won't be able to launch the application and see anything in our newly-refactored \"Find Restaurants\" area quite yet; we still need to create and update necessary layouts, which we'll do at the end of this lesson.\u003c/p\u003e\r\n\u003ch3\u003eSavedRestaurantListFragment\u003c/h3\u003e\r\n\u003cp\u003eNext we’ll create the fragment to house functionality currently residing in SavedRestaurantListActivity. We'll call this new fragment SavedRestaurantListFragment\u003c/p\u003e\r\n\u003cp\u003eAgain, make sure to select the option to create the corresponding XML layout. We'll use this layout at the end of the lesson. Boxes for\u003cspan\u003e \u003c/span\u003e\u003cem\u003eInclude fragment factory methods?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003einclude interface callbacks?\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emay be un-checked, as we will not use the boilerplate code they produce.\u003c/p\u003e\r\n\u003cp\u003eFirst, we'll move all declarations and bindings from SavedRestaurantListActivity to our new SavedRestaurantListFragment, and implement\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseRestaurantListAdapter mFirebaseAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ItemTouchHelper mItemTouchHelper;\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll add code to the fragment's existing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n...\r\n\r\n \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_saved_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n        setUpFirebaseAdapter();\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis the fragment lifecycle method in which the fragment's view is instantiated. Therefore, we'll call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetupFirebaseAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere in order to act as the bridge between our back-end data and our front-end view.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll simply move the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetUpFirebaseAdapter()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003emethods from SavedRestaurantListActivity to SavedRestaurantListFragment. We only need to make three small changes to account for moving this method, as described in the comments below:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e FirebaseRestaurantListAdapter mFirebaseAdapter;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ItemTouchHelper mItemTouchHelper;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Bind\u003c/span\u003e(R.id.recyclerView) RecyclerView mRecyclerView;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListFragment\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-comment\"\u003e// Required empty public constructor\u003c/span\u003e\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_saved_restaurant_list, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n        setUpFirebaseAdapter();\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUpFirebaseAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = user.getUid();\r\n\r\n        Query query = FirebaseDatabase.getInstance()\r\n                .getReference(Constants.FIREBASE_CHILD_RESTAURANTS)\r\n                .child(uid)\r\n                .orderByChild(Constants.FIREBASE_QUERY_INDEX);\u003cbr\u003e\u003cbr\u003e        FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                new FirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(query, Restaurant.class)\u003cbr\u003e                        .build();\u003cbr\u003e\r\n        //  In line below, we change 4th parameter 'this' to 'getActivity()'\u003cbr\u003e        //  because fragments do not have own context:\u003cbr\u003e        mFirebaseAdapter = new FirebaseRestaurantListAdapter(options, query, this, getActivity());\r\n\r\n        \r\n\r\n        \u003cspan class=\"hljs-comment\"\u003e//In line below, we change 'this' to 'getActivity()' because fragments do not have own context:\u003c/span\u003e\r\n        mRecyclerView.setLayoutManager(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity()));\r\n        mRecyclerView.setAdapter(mFirebaseAdapter);\r\n        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\u003cbr\u003e\r\n        ItemTouchHelper.Callback callback = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e SimpleItemTouchHelperCallback(mFirebaseAdapter);\r\n        mItemTouchHelper = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ItemTouchHelper(callback);\r\n        mItemTouchHelper.attachToRecyclerView(mRecyclerView);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStartDrag\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder)\u003c/span\u003e \u003c/span\u003e{\r\n        mItemTouchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//method is now public\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonDestroy\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onDestroy();\r\n        mFirebaseAdapter.cleanup();\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eRefactoring SavedRestaurantListActivity\u003c/h3\u003e\r\n\u003cp\u003eNow that we've moved these methods into our new fragment, we may remove them from SavedRestaurantListActivity. After doing so, this file should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n  \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou won't be able to launch the application and see anything in our newly-refactored \"Find Restaurants\" area quite yet; we still need to create and update necessary layouts, which we'll do next.\u003c/p\u003e\r\n\u003ch2\u003eCreating \u0026amp; Refactoring Layouts\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s remove the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom our list activity layouts and add them to the corresponding fragment layouts:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_saved_restaurant_list.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v7.widget.RecyclerView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/recyclerView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003efragment_restaurant_list.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n              \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eandroid.support.v7.widget.RecyclerView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/recyclerView\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow, we may add the fragments to our list activity layout. The updated\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elayout should appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentRestaurantList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.RestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe’ll also need to create a new layout for our SavedRestaurantListActivity that specifically uses our new SavedRestaurantListFragment. We'll also add its corresponding SavedRestaurantListFragment to its layout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_saved_restaurant_list.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003exmlns:tools\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/tools\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003etools:context\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\".ui.RestaurantListActivity\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003efragment\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/fragmentRestaurantList\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:name\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"com.moringaschool.myrestaurants.ui.SavedRestaurantListFragment\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003etools:layout\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@layout/fragment_restaurant_list\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, we'll need to inflate this new layout in SavedRestaurantListActivity instead of the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants \u003c/em\u003elayout:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_saved_restaurant_list);\r\n        ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eObservers\u003c/h2\u003e\r\n\u003cp\u003eCurrently, we should be able to launch our application and everything should work fairly similarly. However, if we select \"Saved Restaurants\" you'll notice our restaurants aren't immediately loading! Yet, if we go back, and\u003cspan\u003e \u003c/span\u003e\u003cem\u003ere-\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eenter the \"Saved Restaurants\" area of our application, they suddenly show up! Thankfully, we can easily address this issue with something called an observer.\u003c/p\u003e\r\n\u003cp\u003eRecyclerViews have a dedicated observer called\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.AdapterDataObserver.html#onChanged()\"\u003eAdapterDataObserver\u003c/a\u003e. These observers watch for changes, and notify our adapter when they occur. We can easily implement one with just a few lines of code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetUpFirebaseAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mFirebaseAdapter = new FirebaseRestaurantListAdapter(options, query, this, getActivity());\u003cbr\u003e\r\n        mRecyclerView.setHasFixedSize(\u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e);\r\n        mRecyclerView.setLayoutManager(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e LinearLayoutManager(getActivity()));\r\n        mRecyclerView.setAdapter(mFirebaseAdapter);\r\n\r\n        mFirebaseAdapter.registerAdapterDataObserver(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RecyclerView.AdapterDataObserver() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemRangeInserted\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e positionStart, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemCount)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onItemRangeInserted(positionStart, itemCount);\r\n                mFirebaseAdapter.notifyDataSetChanged();\r\n            }\r\n        });\r\n        ...\r\n    }\r\n...\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eregisterAdapterDataObserver()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFirebaseAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto begin the process of associating an observer. Then, we construct a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAdapterDataObserver\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject, and override its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemRangeInserted()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, which is automatically called whenever a new item is added to the adapter's range of data. We include the required line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper.onItemRangeInserted(positionStart, itemCount);\u003c/code\u003e, referring to any\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemRangeInserted()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethods of a parent class. Then, we can call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFirebaseAdapter.notifyDataSetChanged();\u003c/code\u003e, which will trigger our observer to notify our adapter of any new changes.\u003c/p\u003e\r\n\u003cp\u003eIf we run our app, everything should not only appear the same as it did before we made these changes, but our \"Saved Restaurants\" should load on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etry instead of having to exit and re-enter! These changes have laid the groundwork to implement multiple layouts based on device orientation, as we'll do in tomorrow's lessons. Great work!\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/23_flexibleUI_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFragments do not have their own context and must instead inherit it from their parent activity. We may instead access the parent context by calling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetActivity()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWhile activities instantiate their views directly in\u003ccode\u003eonCreate()\u003c/code\u003e, fragments require multiple steps to do this:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill only create the fragment itself. It is called before\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand offers an opportunity to assign variables, get Intent extras, and anything else that doesn't involve the view hierarchy.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonCreateView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, and is used to assign\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariables, and handle any graphical initializations. It must be called to render the fragment's views. ,\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/23_flexibleUI_fragments\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"http://developer.android.com/reference/android/app/Fragment.html#Lifecycle\"\u003eLifecycle of Android Fragments\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-weather-api","title":"Tuesday: Weather API","type":"WikiPage","content":"\u003ch1\u003eMyRestaurants and Weather App\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ePractice making requests to a backend web service using OkHttp, Signpost (if needed), and displaying information in a custom list item layout using a RecyclerView.\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is the 'main/ui thread' and why shouldn't we run long tasks such as a request on this thread?\u003c/li\u003e\r\n\u003cli\u003eWhy is a RecyclerView preferable to a ListView?\u003c/li\u003e\r\n\u003cli\u003eWhat are the necessary components of an OkHttp request to an API? What series of events occur in a successful request?\u003c/li\u003e\r\n\u003cli\u003eWhat is OAuth protocol and why would we use it?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eBefore beginning the weather project, follow along with the weekend videos/lessons and integrate these new concepts into your own MyRestaurants application. This includes adding OkHttp and Signpost to retrieve information from the Yelp API and parsing the JSON response data. Then, after confirming your app can successfully retrieve and log data from the Yelp API, add the RecyclerView and adapter to display customized restaurant list items.\u003c/p\u003e\r\n\u003ch3\u003eWeather API (Two-Day Project)\u003c/h3\u003e\r\n\u003cp\u003eBuild a weather app using the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://openweathermap.org/\" target=\"_blank\"\u003eOpen Weather Map API\u003c/a\u003e. Allow users to enter a location and receive current weather data for that region. Include a new activity with a RecyclerView that displays the 7-day forecast for the user entered location using a custom list item layout.\u003c/p\u003e\r\n\u003cp\u003eUnlike the MyRestaurants example, Open Weather Map does not utilize OAuth protocol to validate requests. Therefore make sure to add your API key when building out your request url. Here is an example:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eOkHttpClient client = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e OkHttpClient.Builder()\r\n        .build();\r\n\r\nHttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.API_BASE_URL).newBuilder();\r\nurlBuilder.addQueryParameter(Constants.YOUR_QUERY_PARAMETER, \u0026lt;your string parameter here\u0026gt;);\r\nurlBuilder.addQueryParameter(Constants.API_KEY_QUERY_PARAMETER, Constants.API_KEY);\r\nString url = urlBuilder.build().toString();\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String API_KEY = BuildConfig.API_KEY;\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String API_BASE_URL = \u003cspan class=\"hljs-string\"\u003e\"www.\u0026lt;api url\u0026gt;.com\"\u003c/span\u003e;\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String YOUR_QUERY_PARAMETER = \u003cspan class=\"hljs-string\"\u003e\"\u0026lt;your query parameter string\u0026gt;\"\u003c/span\u003e; \u003cspan class=\"hljs-comment\"\u003e//Example: \"location\"\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String API_KEY_QUERY_PARAMETER = \u003cspan class=\"hljs-string\"\u003e\"appid\"\u003c/span\u003e; \r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003ePeer Code Review \u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCan the application request data from an API?\u003c/li\u003e\r\n\u003cli\u003eDoes the application parse this response data appropriately?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"pre-course-work-buttons-and-toasts","title":"Pre-course work: Buttons and Toasts","type":"WikiPage","content":"\u003cp\u003eNow that we have our welcome page in place, or rather our MainActivity layout, let’s add some code so that our button does something when we click on it.\u003c/p\u003e\r\n\u003cp\u003eNavigate to\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejava \u0026gt; com.moringaschool.myrestaurants \u0026gt; MainActivity.java\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch2\u003eThe onCreate Method\u003c/h2\u003e\r\n\u003cp\u003eInside of this file, we will see that there is already some code that Android Studio added when we initially created this project. For now, we only want to concern ourselves with the code inside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod is called every time a user visits this activity. Any code that goes inside of it will be run immediately once the activity loads.\u003c/p\u003e\r\n\u003cp\u003eLet's take a closer look at the contents of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003esuper.onCreate(savedInstanceState);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecauses Android to run all of the default behaviors for an activity. It's very rare that you would change this line.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003esetContentView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells the activity which layout to use for the device screen. In this case, we are using\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eactivity_main.xml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich we just styled.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eR.layout.activity_main\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells Android to use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emain_activity.xml\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout for this activity.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e- which is short for Resources - gives us a way to access all of our files in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eres\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edirectory.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, let's add a member variable to hold our\u003cspan\u003e \u003c/span\u003e\u003cem\u003efindRestaurantsButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eso that we can access it inside all of our methods. Add the following to the top of the class to declare our Button view variable:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\u003cbr\u003e...\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eImporting Classes\u003c/h2\u003e\r\n\u003cp\u003eNotice that\u003cspan\u003e \u003c/span\u003e\u003cem\u003eButton\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ewill turn red and underlined. This means we need to import it. In Android Studio, we can easily import elements by clicking on them and then typing\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption + Enter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e(on our windows keyboards, try\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlt + Enter\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e) and then clicking\u003cspan\u003e \u003c/span\u003e\u003cem\u003eimport class\u003c/em\u003e.\u003c/p\u003e\r\n\u003ch2\u003eAdding Custom Code on onCreate\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s set our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003evariable. Add the following code inside the\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n    }\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWhat did we just do?\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003efindViewById\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes the ID of the Button in our layout and returns the view.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eR.id.findRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the view of our button.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003e(Button)\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etypecasts our view as Button.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill return a generic type View, but our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emFindRestaurantsButton\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas declared as the specific View type of Button, so we need to cast it as such. (In recent updates casting already declared view(s) is deemed redundant by the editor but it's always been good practice as beginners to accustom yourself to such).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCreating Click Listeners\u003c/h2\u003e\r\n\u003cp\u003eNow that our button is set, let’s make it do something! Let’s add a click listener which will be triggered when our button is touched:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-comment\"\u003e//do something\u003c/span\u003e\r\n            }\r\n        });\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetOnClickListener()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod takes a new onClickListener as a parameter. Let’s use\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab Autocompletion\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto write this out. If we starting typing\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enew View\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then press\u003cspan\u003e \u003c/span\u003e\u003cem\u003eTab\u003c/em\u003e, the rest of the code will be filled in for us.\u003c/p\u003e\r\n\u003ch2\u003eToasts\u003c/h2\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, let’s add a toast. A\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003etoast\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a simple pop up message that automatically fades in and out of the screen when triggered.\u003c/p\u003e\r\n\u003cp\u003eA toast takes three parameters; a context, a message, and a duration. The context for our toast is\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMainActivity.this\u003c/code\u003e. We will talk in further detail about\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003econtext\u003c/strong\u003e, but for now message and duration should be pretty self-explanatory.\u003c/p\u003e\r\n\u003cp\u003eThe resulting code should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Button mFindRestaurantsButton;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        mFindRestaurantsButton = (Button) findViewById(R.id.findRestaurantsButton);\r\n        mFindRestaurantsButton.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n                Toast.makeText(MainActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hello World!\"\u003c/span\u003e, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow let’s run our app again and we should see that our toast message appears when we click on our findRestaurantsButton:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/ef76cqf2ajzfmzx/toast-on-main-activity.png\" alt=\"toast-on-main-activity\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cspan style=\"text-decoration: underline;\"\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant\"\u003eExample Github Example for Myrestaurant\u003c/a\u003e\u003c/strong\u003e\u003c/span\u003e\u003c/p\u003e","frontPage":false},{"exportId":"monday-implementing-a-listview-and-arrayadapter","title":"Monday: Implementing a ListView and ArrayAdapter","type":"WikiPage","content":"\u003cp\u003eSee this video for a walkthrough of the text in this lesson. However, the text of this lesson contains additional information on testing not seen in the video. Check it out!\u003c/p\u003e\r\n\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/158245550\" width=\"300\" height=\"150\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" data-mce-fragment=\"1\"\u003e\u003c/iframe\u003e\u003c/p\u003e\r\n\u003cp\u003eSo far, everything we have done with our MyRestaurants app has been in our MainActivity. Let’s work on building out our RestaurantsActivity and its layout. We will eventually display content gathered from an API, but for now let's simply display a list of restaurants we like.\u003c/p\u003e\r\n\u003cp\u003eTo start, let's create a string array of 15-20 restaurant names inside of RestaurantsActivity. These can be any restaurants of your choosing!\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e, \r\n        \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are going to display these restaurant names dynamically using a\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eListView\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eArrayAdapter\u003c/strong\u003e, as we learned about in the previous lesson.\u003c/p\u003e\r\n\u003ch2\u003eImplementing a ListView\u003c/h2\u003e\r\n\u003ch3\u003eCreating a ListView\u003c/h3\u003e\r\n\u003cp\u003eAdd a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactivity_restaurants.xml\u003c/em\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eListView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/listView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentEnd\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eInitializing a ListView\u003c/h3\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivity.java\u003c/em\u003e, initialize the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.findViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eImplementing an ArrayAdapter\u003c/h2\u003e\r\n\u003cp\u003eThen, we'll create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eadapter to the new adapter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ArrayAdapter;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAdding a Toast\u003c/h2\u003e\r\n\u003cp\u003eLet's also add an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnItemClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat will display a toast containing the restaurant name when a list item is clicked:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Toast;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.AdapterView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                String restaurant = ((TextView)view).getText().toString();\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eRun the app and navigate to the RestaurantsActivity. We see a scrollable list of the restaurants from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString[]\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eTesting ListView and ArrayAdapters\u003c/h2\u003e\r\n\u003ch3\u003eLocal Tests\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create a quick local test to make sure our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis displaying information correctly. Create a new test class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivityTest\u003c/em\u003e, and complete the following configuration:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003epackage io.github.vinge1718.restaurant;\u003cbr\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\nimport org.robolectric.RobolectricTestRunner;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll also add a rule to begin the RestaurantsActivity and define the mRestaurantListView before each test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Build;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Before;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.Robolectric;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.RobolectricGradleTestRunner;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.annotation.Config;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantsActivity activity;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mRestaurantListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Before\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetup\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        activity = Robolectric.setupActivity(RestaurantsActivity.class);\r\n        mRestaurantListView = (ListView) activity.findViewById(R.id.listView);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNext, let's create a quick local test to make sure that our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epopulates with the number of restaurants we passed into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray, importing all necessary static methods used in the test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Build;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Before;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.Robolectric;\r\nimport org.robolectric.RobolectricTestRunner;\u003cbr\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertEquals;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertNotNull;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantsActivity activity;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mRestaurantListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Before\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetup\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        activity = Robolectric.setupActivity(RestaurantsActivity.class);\r\n        mRestaurantListView = (ListView) activity.findViewById(R.id.listView);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erestaurantListViewPopulates\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        assertNotNull(mRestaurantListView.getAdapter());\r\n        assertEquals(mRestaurantListView.getAdapter().getCount(), \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're simply checking that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantListView.getAdapter();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns anything\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebut \u003c/em\u003e\u003ccode\u003enull\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(which implies the adapter is correctly associated with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e), and that\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantListView.getAdapter().getCount();\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns the correct number of restaurants from our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for displaying. If this passes, it means the adapter is correctly passing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray content to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich is displaying it properly.\u003c/p\u003e\r\n\u003cp\u003eNote that you may need to change the number 15 in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etest to accurately reflect the number of restaurants in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/2_robolectrics\" target=\"_blank\"\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch3\u003eInstrumentation Tests\u003c/h3\u003e\r\n\u003cp\u003eWe should also test that our toast displays the correct restaurant name. Create a new instrumentation test class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivityInstrumentationTest\u003c/em\u003e. We'll also create a rule to begin the RestaurantsActivity before each test:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(androidTest)/RestaurantsActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;RestaurantsActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(RestaurantsActivity.class);\r\n}\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThen, we'll write the following test, importing all necessary classes and static methods:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(androidTest)/RestaurantsActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onData;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.action.ViewActions.click;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.assertion.ViewAssertions.matches;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.RootMatchers.withDecorView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withId;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withText;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.CoreMatchers.anything;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.core.IsNot.not;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;RestaurantsActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(RestaurantsActivity.class);\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elistItemClickDisplaysToastWithCorrectRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        View activityDecorView = activityTestRule.getActivity().getWindow().getDecorView();\r\n        String restaurantName = \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e;\r\n        onData(anything())\r\n                .inAdapterView(withId(R.id.listView))\r\n                .atPosition(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\r\n                .perform(click());\r\n        onView(withText(restaurantName)).inRoot(withDecorView(not(activityDecorView)))\r\n                .check(matches(withText(restaurantName)));\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're instructing Espresso to check that clicking on the\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eitem (\u003ccode\u003e.atPosition(0)\u003c/code\u003e) in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eresults in a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat displays \"Mi Mero Mole\" (note that you may need to change \"Mi Mero Mole\" to whatever the first restaurant in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eyour\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earray is) when clicked.\u003c/p\u003e\r\n\u003cp\u003eTo interact with the data in an adapter we must use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonData()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod rather than\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonView()\u003c/code\u003e. We can then grab a particular piece of data and use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod to test that our Toast displays the correct text.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eListView\u003c/strong\u003e: A container that shows a vertical list of scrollable items.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eArrayAdapter\u003c/strong\u003e: An adapter that converts objects in an ArrayList to View items in a ListView.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIn instrumentation tests, to interact with the data in an adapter we must use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonData()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod rather than\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonView()\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003ch3\u003eCreating a ListView\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eactivity_restaurants.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n    ...\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eListView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/listView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/locationTextView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentEnd\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e /\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eInitializing a ListView\u003c/h3\u003e\r\n\u003cp\u003eInitialize the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand set it using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.findViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eImplementing an ArrayAdapter\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ArrayAdapter;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eAdding a Toast\u003c/h3\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.Toast;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.AdapterView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e TextView mLocationTextView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mother's Bistro\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Life of Pie\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Screen Door\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Luc Lac\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sweet Basil\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Equinox\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Miss Delta's\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Andina\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Lardo\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Portland City Grill\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fat Head's Brewery\"\u003c/span\u003e,\r\n            \u003cspan class=\"hljs-string\"\u003e\"Chipotle\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Subway\"\u003c/span\u003e};\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurants);\r\n\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        mLocationTextView = (TextView) findViewById(R.id.locationTextView);\r\n\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n\r\n        mListView.setOnItemClickListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e AdapterView.OnItemClickListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(AdapterView\u0026lt;?\u0026gt; adapterView, View view, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i, \u003cspan class=\"hljs-keyword\"\u003elong\u003c/span\u003e l)\u003c/span\u003e \u003c/span\u003e{\r\n                String restaurant = ((TextView)view).getText().toString();\r\n                Toast.makeText(RestaurantsActivity.\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, restaurant, Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n\r\n        Intent intent = getIntent();\r\n        String location = intent.getStringExtra(\u003cspan class=\"hljs-string\"\u003e\"location\"\u003c/span\u003e);\r\n        mLocationTextView.setText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eTests\u003c/h3\u003e\r\n\u003ch4\u003eLocal\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(test)/RestaurantsActivityTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Build;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ListView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Before;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.runner.RunWith;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.Robolectric;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.RobolectricGradleTestRunner;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.robolectric.annotation.Config;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertEquals;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e junit.framework.Assert.assertNotNull;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Config\u003c/span\u003e(constants = BuildConfig.class, sdk = Build.VERSION_CODES.LOLLIPOP)\r\n\u003cspan class=\"hljs-annotation\"\u003e@RunWith\u003c/span\u003e(RobolectricGradleTestRunner.class)\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityTest\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantsActivity activity;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mRestaurantListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Before\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003esetup\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        activity = Robolectric.setupActivity(RestaurantsActivity.class);\r\n        mRestaurantListView = (ListView) activity.findViewById(R.id.listView);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003erestaurantListViewPopulates\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        assertNotNull(mRestaurantListView.getAdapter());\r\n        assertEquals(mRestaurantListView.getAdapter().getCount(), \u003cspan class=\"hljs-number\"\u003e15\u003c/span\u003e);\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003eInstrumentation\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003ecom.moringaschool.myrestaurants(androidTest)/RestaurantsActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onData;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.action.ViewActions.click;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.assertion.ViewAssertions.matches;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.RootMatchers.withDecorView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withId;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withText;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.CoreMatchers.anything;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e org.hamcrest.core.IsNot.not;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;RestaurantsActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(RestaurantsActivity.class);\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elistItemClickDisplaysToastWithCorrectRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        View activityDecorView = activityTestRule.getActivity().getWindow().getDecorView();\r\n        String restaurantName = \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e;\r\n        onData(anything())\r\n                .inAdapterView(withId(R.id.listView))\r\n                .atPosition(\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e)\r\n                .perform(click());\r\n        onView(withText(restaurantName)).inRoot(withDecorView(not(activityDecorView)))\r\n                .check(matches(withText(restaurantName)));\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\" target=\"_blank\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","frontPage":false},{"exportId":"wednesday-weather-app-continued","title":"Wednesday:Weather App Continued","type":"WikiPage","content":"\u003ch1\u003eWeather App Continued\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal today is to practice implementing fragments into an Android app. This includes integrating Parceler, using a PagerAdapter, and creating new instances of click listeners in the ViewHolder.\u003c/p\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat is a fragment and why would we use one?\u003c/li\u003e\r\n\u003cli\u003eWhat is the difference between a fragment and an activity?\u003c/li\u003e\r\n\u003cli\u003eWhat is a Parcelable? What benefits does it offer? What additional setup does it require?\u003c/li\u003e\r\n\u003cli\u003eWhat does\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcels.wrap():\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edo, and when is it used?\u003c/li\u003e\r\n\u003cli\u003eWhat about\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcels.unwrap();\u003c/code\u003e? How do the two work in conjunction?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003cp\u003eBefore continuing work on your Weather app, follow along with the homework from last night and set up fragments to display the restaurant detail view into your MyRestaurants application.\u003c/p\u003e\r\n\u003ch3\u003eWeather API (Day 2)\u003c/h3\u003e\r\n\u003cp\u003eContinue working on the Weather app you and your partner started yesterday. Add fragments to your app to allow users to see a detail view when they click one of the days in the 7-day forecast list. Display icons that reflect the forecasted weather for each day.\u003c/p\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAre fragments implemented successfully? Where?\u003c/li\u003e\r\n\u003cli\u003eDo the ViewPager and PagerAdapter successfully display information in the application?\u003c/li\u003e\r\n\u003cli\u003eIs Parceler set up correctly? Does it pass information between components?\u003c/li\u003e\r\n\u003cli\u003eIs the code well-refactored and easy to follow?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-arrayadapters-and-listviews","title":"Monday: ArrayAdapters and ListViews","type":"WikiPage","content":"\u003cp\u003eAs we discussed when learning about Android XML Layouts, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a layout that contains a list of scrollable items. However, in order to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eget\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethose items into that scrollable list, we need to use something called an adapter. In Android, an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eadapter\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis essentially a bridge between the components of your user interface, and the data that your user interface should display.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDon't worry about implementing the code seen in this lesson into MyRestaurants yet; we'll walk through that process together in the next lesson.\u003c/p\u003e\r\n\u003ch2\u003eArrayAdapter\u003c/h2\u003e\r\n\u003cp\u003eOne of the most common adapters in Android is the\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003c/strong\u003e. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis responsible for taking a Java\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof objects from our business logic and converting them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects that may be displayed in our user interface. Each item in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis converted to an individual list item\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout.\u003c/p\u003e\r\n\u003ch3\u003eImplementing an Array Adapter\u003c/h3\u003e\r\n\u003cp\u003eTo use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e, we need to initialize it and attach it to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhose list items it will be responsible for. To create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe must provide its constructor at least three things: The current context (represented by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e), a layout for the list it will create, and the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003eof items it will be responsible for adapting into the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e. This looks something like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we declare our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable, define it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby locating the specific\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby its ID with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. Then, we create a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003eproviding three arguments:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e, which represents the current context,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.R.layout.simple_list_item_1\u003c/code\u003e, which is a layout built into Android that provides standard appearance for text in a list, and an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(not seen here). Then, the line\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emListView.setAdapter(adapter);\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einstructs the application that the adapter we've just created is responsible for taking the individual items in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e, and displaying them in the current context's layout (using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esimple_list_item_1\u003c/code\u003e\u003cspan\u003e \u003c/span\u003elayout).\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eDon't worry about implementing this into our ongoing MyRestaurants project yet; we'll walk through that process together in the next lesson!\u003c/p\u003e\r\n\u003ch2\u003eRecycling\u003c/h2\u003e\r\n\u003cp\u003eBeyond allowing us to create a clean and aesthetically-pleasing user interface, using adapters and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein this fashion offers additional functionality as well! As you're probably already aware, developing Android applications differs from developing web applications in many ways. One of these ways is working around the limited memory and resources mobile devices have compared to desktop or laptop computers.\u003c/p\u003e\r\n\u003cp\u003eWhen we display a list of many items using a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e, it populates with individual\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects for each list item containing data provided by its corresponding adapter. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eonly instantiates enough individual list items to fill its entire height. After that,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eno additional list items are created in memory\u003c/em\u003e. Instead, as the user scrolls down through the list, items that leave the screen are kept in memory. (These are called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eScrapViews\u003c/strong\u003e.) Then, every new row that appears in the screen as the user scrolls actually\u003cspan\u003e \u003c/span\u003e\u003cem\u003ere-uses\u003c/em\u003ea ScrapView, but with updated data from the adapter. This process is aptly known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003erecycling\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eTherefore, if we had a list of\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethousands\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eof items, but only 5 items were visible at the time as the user scrolls, only 5\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003es are ever held in memory. Pretty cool, huh?\u003c/p\u003e\r\n\u003cp\u003eIn the next lesson we'll walk through creating a hard-coded\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof restaurants in our application, and instantiating a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto display each restaurant in a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e. In future lessons we'll replace this hard-coded list with data from the Yelp API.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe Android Developers\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/ArrayAdapter.html\" target=\"_blank\"\u003edocumentation entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es.\u003c/li\u003e\r\n\u003cli\u003eThe CodePath Android Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView\" target=\"_blank\"\u003eUsing an ArrayAdapter with ListView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(This contains some excellent visual representations of the recycling process!)\u003c/li\u003e\r\n\u003cli\u003eLucas Rocha's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/\" target=\"_blank\"\u003ePerformance Tips for Androids's ListView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eoffers an optional deeper dive into this process, for those who are interested.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eAdapter\u003c/strong\u003e: Essentially a bridge between the components of your user interface, and the data that your user interface should display.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eArrayAdapter`\u003c/strong\u003e: Responsible for taking an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof objects from our business logic and converting them into\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects to be displayed in our User Interface.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRecycling\u003c/strong\u003e: The act of an adapter re-using the individual\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViews\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas the user scrolls through a list. After the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas created enough individual list items to fit the full height of the screen, it simply re-uses existing list items to display the\u003cspan\u003e \u003c/span\u003e\u003cem\u003enew\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elist items instead of creating more.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eScrapViews\u003c/strong\u003e: During the process of recycling, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat leaves the screen, but is kept in memory to be re-used.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantsActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ListView mListView;\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        ...\r\n        mListView = (ListView) findViewById(R.id.listView);\r\n        ArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants);\r\n        mListView.setAdapter(adapter);\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe code above...\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDeclares an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable\u003c/li\u003e\r\n\u003cli\u003eDefines it in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby locating the specific\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby its ID with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efindViewById()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/li\u003e\r\n\u003cli\u003eCreates a new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand provides three arguments:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(the current context),\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eandroid.R.layout.simple_list_item_1\u003c/code\u003e, (a layout built into Android that provides standard appearance for text in a list), and an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecalled\u003cspan\u003e \u003c/span\u003e\u003ccode\u003erestaurants\u003c/code\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eThe Android Developers\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/widget/ArrayAdapter.html\" target=\"_blank\"\u003edocumentation entry\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003es.\u003c/li\u003e\r\n\u003cli\u003eThe CodePath Android Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView\" target=\"_blank\"\u003eUsing an ArrayAdapter with ListView\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eLucas Rocha's blog post\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://lucasr.org/2012/04/05/performance-tips-for-androids-listview/\" target=\"_blank\"\u003ePerformance Tips for Androids's ListView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003e(an optional, deeper dive into this process).\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"weekend-managing-api-keys","title":"Weekend: Managing API Keys","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eNow that we have a decent handle on the basics of User Interfaces in Android applications, let's get more complex! This week we'll begin pulling data from third-party APIs to display in our applications.\u003c/p\u003e\r\n\u003cp\u003eContinuing to develop our MyRestaurants app, we will use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/overview\"\u003eYelp API\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto gather restaurants in the zip code provided by the user and display them in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantsActivity\u003c/code\u003e. This will allow us to return restaurants in\u003cspan\u003e \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ezip code Yelp has data in, instead of simply hard-coding a list of several Portland restaurants. That's exponentially more powerful!\u003c/p\u003e\r\n\u003ch2\u003eYelp Fusion API\u003c/h2\u003e\r\n\u003cp\u003eFirst things first, take a glance at the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3\"\u003eYelp API Documentation\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ebefore we begin. We're going to use the latest version of the API, also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eYelp Fusion\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eYelp API v3\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(note that these are two different names for the same exact API). So, make sure any resources or documentation you reference during this course are specifically meant for v3/Fusion. Previous versions of Yelp's API work differently, so resources meant for v1 and 2 aren't guaranteed to be transferrable.\u003c/p\u003e\r\n\u003ch3\u003eAPI Endpoints\u003c/h3\u003e\r\n\u003cp\u003eAs depicted in the documentation linked above, the API contains many different endpoints. For instance, there's an endpoint to retrieve\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/business_reviews\"\u003ereviews about a business\u003c/a\u003e, an endpoint to locate\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/event_search\"\u003eevents in specific areas\u003c/a\u003e, and even an endpoint to return a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/business_search_phone\"\u003ebusiness' phone number\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003eOur MyRestaurants application will specifically use the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v3/business_search\"\u003esearch endpoint\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto locate restaurants and their pertinent details in the zip code provided by the user. Take a look at the parameters and response for this endpoint now.\u003c/p\u003e\r\n\u003ch2\u003eAccessing the Yelp Fusion API\u003c/h2\u003e\r\n\u003cp\u003eHowever, like many other APIs, we'll need to send credentials along with our request to successfully retrieve information from this endpoint. As you learned\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.learnhowtoprogram.com/javascript/asynchrony-and-apis-in-javascript/testing-api-calls-with-postman\"\u003ein JavaScript\u003c/a\u003e, API keys (sometimes also called \"tokens\" or \"credentials\") give us permission to request data. Among other things, this helps API owners ensure people and applications aren't bogging down their API with an unnecessarily large number of requests. Let's walk through how to obtain our own unique credentials.\u003c/p\u003e\r\n\u003cp\u003ePrevious APIs we've used, like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://home.openweathermap.org/users/sign_up\"\u003eOpenWeather\u003c/a\u003e, and\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.betterdoctor.com/\"\u003eBetterDoctor\u003c/a\u003e\u003cspan\u003e \u003c/span\u003erequire we make an account on their website. Yelp does too, but we need to complete a few\u003cspan\u003e \u003c/span\u003e\u003cem\u003eextra\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esteps too. Let's walk through these now:\u003c/p\u003e\r\n\u003ch3\u003e1. Create Yelp Account\u003c/h3\u003e\r\n\u003cp\u003eFirst things first, we'll need a Yelp account. This is the same as the standard account all their users have. So, if you've used Yelp previously, you can use your existing account. Otherwise, you'll need to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/signup\"\u003esign up here\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003eAt this point some attempts to sign up for a YELP account could prompt such and error in the process.\u003c/p\u003e\r\n\u003cpre\u003eOops, Yelp is overworked right now.\u003c/pre\u003e\r\n\u003cp\u003eThis is because if you are signing up from Kenya (Or any other country where Yelp services are not offered), Kenya is not included in \u003cspan\u003ethe list of countries that supports (or is supported) by the Yelp system, so you will have to use a VPN or a proxy site to sign up. The \u003c/span\u003eVPN abbreviation stands for Virtual Private Network. VPN-connection will create the encrypted communication with which you can mask your sign up location to resemble that of a place that is supported by YELP. Alternatively you can use a\u003cspan\u003e US-based proxy site (for example \u003c/span\u003e\u003ca href=\"http://us-webproxy.com\"\u003ehttp://us-webproxy.com\u003c/a\u003e) where you can just paste the \u003ca href=\"https://www.yelp.com/signup\"\u003eyelp signup url\u003c/a\u003e and proceed to sign up. After the sign up process is successful you can proceed to log-in and use your yelp account without the use of a VPN or a proxy site. \u003c/p\u003e\r\n\u003ch3\u003e2. Create New API App\u003c/h3\u003e\r\n\u003cp\u003eNext, we'll need to login to our new or existing account and visit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.yelp.com/developers/v3/manage_app\"\u003eCreate New App\u003c/a\u003e\u003cspan\u003e \u003c/span\u003earea of the Developer's section of Yelp. You'll be prompted to fill out a form with multiple fields.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApp Name\u003c/em\u003e\u003cspan\u003e \u003c/span\u003elist\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurants\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eDon't worry about including an\u003cspan\u003e \u003c/span\u003e\u003cem\u003eApp Website\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eUnder\u003cspan\u003e \u003c/span\u003e\u003cem\u003eIndustry\u003c/em\u003e, select either\u003cspan\u003e \u003c/span\u003e\u003cem\u003eFood \u0026amp; Drink\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEducation\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eYou can list\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMoringa\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eas the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCompany\u003c/em\u003e.\u003c/li\u003e\r\n\u003cli\u003eIn\u003cspan\u003e \u003c/span\u003e\u003cem\u003eDescription\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeel free to write a brief sentence about your application and/or about how this is a school project.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAfter submitting the form we should be taken to a page with a green success message, and details about our new API Credentials. You should have a\u003cspan\u003e \u003c/span\u003e\u003cem\u003eClient ID\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand an\u003cem\u003e API Key\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. You should also notice an API rate limit of 5,000 requests per day. Awesome! \u003c/p\u003e\r\n\u003cp\u003eWe'll use the API key to request information from the Yelp Fusion API. But as you know, API keys, tokens, and credentials should not be stored directly in source code pushed to GitHub. This simply isn't secure; especially if the API has a rate limit, charges for use, or provides access to sensitive information. We don't want others obtaining our credentials!\u003c/p\u003e\r\n\u003cp\u003eThankfully we can easily conceal our API keys, similar to what we did in JavaScript. The process is a tad different in Android, but we think you'll get the hang of it quickly. In this lesson we'll discuss how to obfuscate API credentials in Android apps, as we walk through integrating our Yelp access token into MyRestuarants. Once our API key is safely integrated we'll begin constructing our first API call in upcoming lessons.\u003c/p\u003e\r\n\u003cp\u003e\u003cspan\u003e\u003c/span\u003eHiding API Keys\u003c/p\u003e\r\n\u003ch4\u003e1. Add credentials to gradle.properies\u003c/h4\u003e\r\n\u003cp\u003eFirst, we’ll add the actual credentials to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile which is located in the root directory.\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://docs.gradle.org/current/userguide/build_environment.html\"\u003egradle.properties\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eis simply a file where we may place properties and configuration settings for any project built with gradle. Add your Consumer token/api key as follows.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003egradle.properties\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003e\u003c/span\u003e\u003c/code\u003e\n\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eYelpToken\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"str\"\u003e\"Bearer YOUR-UNIQUE-API-KEY-HERE\"\u003c/span\u003e\u003c/code\u003e\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003e\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\u003cbr\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cspan\u003eWe \u003c/span\u003e\u003cstrong\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einclude a space between\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the access token itself. And the term\u003cspan\u003e \u003c/span\u003e\u003ccode class=\"prettyprint prettyprinted\"\u003e\u003cspan class=\"typ\"\u003eBearer\u003c/span\u003e\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003emust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ebe capitalized.\u003c/strong\u003e\u003cspan\u003e This format looks a little funny compared to API credentials you've likely seen in the past, but it's simply what this particular API requires. If we don't follow this exact format, we won't be able to successfully retrieve data.\u003c/span\u003e\u003ccode class=\"hljs ini\"\u003e\u003c/code\u003e\u003c/p\u003e\r\n\u003ch4\u003e2. Add gradle.properties to .gitignore\u003c/h4\u003e\r\n\u003cp\u003eNext, let’s hide our gradle.properties file from GitHub by adding it to our .gitignore file so that the credentials we just listed will not be pushed to Github:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e*.iml\r\n...\r\n/gradle.properties\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf you don't see a .gitignore file in your project's directory, you may have to switch from Android view to Project view in Android Studio. The Android view displays only the key source files of an Android project, whereas Project displays all files, including build files.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/0k4kbygank4ac0l/switching-to-project-view-in-android-studio.png?raw=1\" alt=\"switching-from-android-to-project-view-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you've already committed your\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to your Git repository, you'll have to retroactively remove it in order to properly ignore it moving forward. To remove any files listed in your\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile from your local Git repository, run the command\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e$ git rm -cached -r\u003c/code\u003e. For more details, check out the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRemoving Ignored Files from a Project\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esection in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#gitignorefiles.html\" target=\"_blank\"\u003ethis Java lesson\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch4\u003e3. Initialize string constants\u003c/h4\u003e\r\n\u003cp\u003eNext we’ll create a class to contain references to our Yelp credentials. Right click on the main package and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eNew \u0026gt; Java Class\u003c/em\u003e. Name this new class\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/yondw6nzk38r52o/creating-new-class-in-main-package-android-studio.png?raw=1\" alt=\"creating-new-class-in-android-studio\"\u003e\u003cbr\u003e\u003cbr\u003eWithin this file, we'll include the following code to reference the Yelp credentials in our gradle.properties file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-java prettyprinted\"\u003e\u003cspan class=\"kwd\"\u003e    public\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003estatic\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"kwd\"\u003efinal\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eString\u003c/span\u003e\u003cspan class=\"pln\"\u003e YELP_TOKEN \u003c/span\u003e\u003cspan class=\"pun\"\u003e=\u003c/span\u003e\u003cspan class=\"pln\"\u003e \u003c/span\u003e\u003cspan class=\"typ\"\u003eBuildConfig\u003c/span\u003e\u003cspan class=\"pun\"\u003e.\u003c/span\u003e\u003cspan class=\"pln\"\u003eYELP_TOKEN\u003c/span\u003e\u003cspan class=\"pun\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e} \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're instructing the application that the values for these constants can be found in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBuildConfig\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efile.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eBuildConfig.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eis a file that is generated automatically when gradle builds our project.\u003c/p\u003e\r\n\u003ch4\u003e4. Connect credentials when the project builds\u003c/h4\u003e\r\n\u003cp\u003eNext, let's instruct our application to include our credentials in the BuildConfig file when it is created. We'll add the following to our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eapply\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eplugin\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-string\"\u003e'com.android.application'\u003c/span\u003e\r\n\r\nandroid {\r\n\r\n   ...\r\n\r\n    buildTypes.each {\r\n        it.buildConfigField \u003cspan class=\"hljs-string\"\u003e'String'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\u003cbr\u003e     }\r\n\r\n}\r\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we're instructing our application to include the values we placed in\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ein the BuildConfig file when it is built. The key in our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eConstants.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclass will now refer to the string added to\u003cspan\u003e \u003c/span\u003e\u003cem\u003egradle.properties\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eat runtime. And none of our credentials will be visible on GitHub!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003ch4\u003e1. Add credentials to gradle.properties\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003egradle.properties\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003eYelpToken = \u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003cspan\u003eBearer \u003c/span\u003e\u003ccode class=\"hljs ini\"\u003e\u003cspan class=\"hljs-setting\"\u003e\u003cspan class=\"hljs-value\"\u003e\u003cspan class=\"hljs-string\"\u003e\u0026lt;your yelp token here\u0026gt;\"\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003e2. Add gradle.properties to .gitignore\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs\"\u003e*.iml\r\n...\r\n/gradle.properties\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003e3. Initialize string constants\u003c/h4\u003e\r\n\u003cp\u003eCreate a class to contain references to our Yelp credentials:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eConstants.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eConstants\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e String YELP_TOKEN = BuildConfig.YELP_TOKEN;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch4\u003e4. Connect credentials when the project builds\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle(Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eapply\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eplugin\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-string\"\u003e'com.android.application'\u003c/span\u003e\r\n\r\nandroid {\r\n\r\n   ...\r\n\r\n    buildTypes.each {\r\n        it.buildConfigField \u003cspan class=\"hljs-string\"\u003e'String'\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e'YELP_TOKEN'\u003c/span\u003e, YelpToken\r\n    }\r\n\r\n}\r\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/product\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-parcelables-and-pageradapters","title":"Tuesday: Parcelables and PagerAdapters","type":"WikiPage","content":"\u003ch1\u003eParcelables and PagerAdapters\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eWe've just created a RestaurantDetailFragment and corresponding layout to display details of each individual restaurant. Additionally, we've integrated a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto continually recycle these fragments for optimal performance. However, the pieces of information displayed in our fragments are just placeholders. That's not very exciting. Let's change it.\u003c/p\u003e\r\n\u003cp\u003eIn this lesson we'll learn how to communicate between Android components, specifically providing data to fragments using something called parcelables. To do this, we'll learn a little more about serialization, implement a tool called Parceler into our project, and create a special PagerAdapter to act as a bridge between our data and fragment.\u003c/p\u003e\r\n\u003ch2\u003eOverview\u003c/h2\u003e\r\n\u003cp\u003eTo pass information between different components of an Android application, the information must be serialized.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eSerialization\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the conversion of an object into bytes, so the object can be easily saved somewhere, or efficiently passed to another area of an application. Conversely,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edeserialization\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis the act of using those bytes to re-create that object or data.\u003c/p\u003e\r\n\u003cp\u003eWhat?\u003c/p\u003e\r\n\u003cp\u003eOK, let's unpack this a little more. Imagine passing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\"A herd of cats\" from one activity to another. No big deal - a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis not a very complex datatype. It has an easily calculable length, and a fairly limited amount of methods. As a result, it's fairly\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003elightweight\u003c/strong\u003e, and it's pretty easy for our app to know how much memory and CPU time might be necessary to make that transaction.\u003c/p\u003e\r\n\u003cp\u003eBut what if we are not transferring a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e, a giant ArrayList of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCat\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobjects from one spot to another instead?. An\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis mutable in regards to size, so we'll have to compute that first. And a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCat\u003c/code\u003eobject could hold a lot of properties - name, food, age, and so on. Hmm. This is getting bulky. And what if I was actually moving an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003etypes around? Each\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eobject could, in turn, contain subarraylists of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eCat\u003c/code\u003es but also\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003es and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eBat\u003c/code\u003es...each with their own many properties and\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003es... you get the idea. This could get very large, very quickly. Understanding how much memory to reserve and pulling CPU power from the main UI thread to complete this transaction...that could really slow things down. But if we serialize our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003edown into one long\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof data on the outset, boom - we're back to knowing exactly how many bytes of data we need, and don't have to calculate that on the fly. Serialization also allows us to\u003cspan\u003e \u003c/span\u003e\u003cem\u003esnapshot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edata at a specific moment and time and store it, instead of needing to rebuild individual objects later. This is great!\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/b5ze4x7a9871gdb/serialization_sm.png\" alt=\"serialization_sm.png\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAndroid contains an interface called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eParcelable\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto manage the process of serialization. We\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecould \u003c/em\u003eimplement this interface and override its methods manually, but it's widely considered easier to use a library called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eParceler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eto manage this process for us.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eParceler\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eis a third-party library that generates all the boilerplate source code for the Android\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface, thereby helping us manage the process of serializing data, and passing it to our fragments to make passing things around smooth and efficient. Make sure you can tell an interviewer the difference between Serializable and Parcelable.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading: Parceler Library and Configuration\u003c/h2\u003e\r\n\u003cp\u003eWe're almost ready to allow our individual components to begin communicating with one another. To do this, we'll add the Parceler library in our MyRestaurants application. Parceler will handle implementing the functionality of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eAndroid interface for us.\u003c/p\u003e\r\n\u003cp\u003eBefore we begin, Follow along with this tutorial to configure MyRestaurants to use Parceler:\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-Parceler\" target=\"_blank\"\u003eUsing Parceler\u003c/a\u003e.\u003c/p\u003e\r\n\u003ch2\u003eImplementing Parceler\u003c/h2\u003e\r\n\u003cp\u003eDo not move forward until you've followed along with the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eUsing Parceler\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etutorial linked above. You will need to update both your project and app\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild.gradle\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles and add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Parcel\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eannotation to our Restaurant class. You will also need to add an empty default\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurant\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor.\u003c/p\u003e\r\n\u003ch3\u003e￼￼￼Adding Annotations\u003c/h3\u003e\r\n\u003cp\u003eOnce complete, your\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurant.java\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eclass file should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurant.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant.models\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.parceler.Parcel;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\r\n\r\n\u003cspan class=\"hljs-annotation\"\u003e@Parcel\u003c/span\u003e\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e \u003c/span\u003e{\r\n    String mName;\r\n    String mPhone;\r\n    String mWebsite;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mRating;\r\n    String mImageUrl;\r\n    ArrayList\u0026lt;String\u0026gt; mAddress = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLatitude;\r\n    \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e mLongitude;\r\n    ArrayList\u0026lt;String\u0026gt; mCategories = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{}\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(String name, String phone, String website,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e rating, String imageUrl, ArrayList\u0026lt;String\u0026gt; address,\r\n                      \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e latitude, \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e longitude, ArrayList\u0026lt;String\u0026gt; categories)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mName = name;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mPhone = phone;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mWebsite = website;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRating = rating;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mImageUrl = imageUrl;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mAddress = address;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLatitude = latitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mLongitude = longitude;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCategories = categories;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetName\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mName;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetPhone\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mPhone;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetWebsite\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e  mWebsite;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetRating\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRating;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e String \u003cspan class=\"hljs-title\"\u003egetImageUrl\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e\u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mImageUrl;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetAddress\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mAddress;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLatitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLatitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003edouble\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetLongitude\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mLongitude;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ArrayList\u0026lt;String\u0026gt; \u003cspan class=\"hljs-title\"\u003egetCategories\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mCategories;\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eBundling Information with Parceler\u003c/h3\u003e\r\n\u003cp\u003eAfter setting up Parceler, we can move our focus to the RestaurantDetailFragment. Add the following code to RestaurantDetailFragment. Afterwards we will walk through what each method does:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailFragment.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants.ui;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.Fragment;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.LayoutInflater;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.View;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.view.ViewGroup;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.ImageView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.widget.TextView;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.R;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.models.Restaurant;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.squareup.picasso.Picasso;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.parceler.Parcels;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailFragment\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragment\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantImageView) ImageView mImageLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.restaurantNameTextView) TextView mNameLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.cuisineTextView) TextView mCategoriesLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.ratingTextView) TextView mRatingLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.websiteTextView) TextView mWebsiteLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.phoneTextView) TextView mPhoneLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.addressTextView) TextView mAddressLabel;\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.saveRestaurantButton) TextView mSaveRestaurantButton;\r\n\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Restaurant mRestaurant;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e RestaurantDetailFragment \u003cspan class=\"hljs-title\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        RestaurantDetailFragment restaurantDetailFragment = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantDetailFragment();\r\n        Bundle args = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Bundle();\r\n        args.putParcelable(\u003cspan class=\"hljs-string\"\u003e\"restaurant\"\u003c/span\u003e, Parcels.wrap(restaurant));\r\n        restaurantDetailFragment.setArguments(args);\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e restaurantDetailFragment;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        mRestaurant = Parcels.unwrap(getArguments().getParcelable(\u003cspan class=\"hljs-string\"\u003e\"restaurant\"\u003c/span\u003e));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e View \u003cspan class=\"hljs-title\"\u003eonCreateView\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        View view = inflater.inflate(R.layout.fragment_restaurant_detail, container, \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, view);\r\n\r\n        Picasso.get().load(mRestaurant.getImageUrl()).into(mImageLabel);\r\n\r\n        mNameLabel.setText(mRestaurant.getName());\r\n        mCategoriesLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getCategories()));\r\n        mRatingLabel.setText(Double.toString(mRestaurant.getRating()) + \u003cspan class=\"hljs-string\"\u003e\"/5\"\u003c/span\u003e);\r\n        mPhoneLabel.setText(mRestaurant.getPhone());\r\n        mAddressLabel.setText(android.text.TextUtils.join(\u003cspan class=\"hljs-string\"\u003e\", \"\u003c/span\u003e, mRestaurant.getAddress()));\r\n\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e view;\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe first method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e, is used instead of a constructor and returns a new instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e. We use the Parceler library to add our restaurant object to our bundle and set the bundle as the argument for our new RestaurantDetailFragment. This allows us to access necessary data when a new instance of our fragment is created.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe next method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, is called when the fragment is created. Here, we unwrap our restaurant object from the arguments we added in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreateView()\u003c/code\u003e, this restaurant object is then used to set our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTextViews\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eFor now, we are not going to set the text for the website. Instead, we will use the website string URL when we learn more about implicit intents in an upcoming lesson.\u003c/p\u003e\r\n\u003ch2\u003ePagerAdapter\u003c/h2\u003e\r\n\u003cp\u003eNow let’s create the adapter which will connect our data to the fragment view. Inside of our\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, create a new class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantPagerAdapter\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/RestaurantPagerAdapter\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage io.github.vinge1718.restaurant.adapters\u003c/span\u003e;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.Fragment;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.FragmentManager;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.app.FragmentPagerAdapter;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.models.Restaurant;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.ui.RestaurantDetailFragment;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFragmentPagerAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantPagerAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(FragmentManager fm, ArrayList\u0026lt;Restaurant\u0026gt; restaurants)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(fm);\r\n        mRestaurants = restaurants;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Fragment \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e RestaurantDetailFragment.newInstance(mRestaurants.get(position));\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.size();\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e CharSequence \u003cspan class=\"hljs-title\"\u003egetPageTitle\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.get(position).getName();\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eLet’s review what each of these methods does.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eRestaurantPagerAdapter()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a constructor where we set the required\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFragmentManager\u003c/code\u003eand array list of restaurants we will be swiping through.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe next method,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetItem()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereturns an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantDetailFragment\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efor the restaurant in the position provided as an argument.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003egetCount()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003esimply determines how many restaurants are in our Array List. This lets our adapter know how many fragments it must create.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003egetPageTitle()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eupdates the title that appears in the scrolling tabs at the top of the screen.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eViewHolder ClickListener\u003c/h2\u003e\r\n\u003cp\u003eNow that our fragment is set up, we want to be able to click on a restaurant in our RecyclerView and navigate to that individual restaurant's detail page, which should be populated with information about that specific restaurant. To achieve this, let’s revisit our RestaurantListAdapter and add a click listener using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"hljs java\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n       ...\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View itemView)\u003c/span\u003e \u003c/span\u003e{\r\n            ...\r\n            itemView.setOnClickListener(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n        }\r\n\r\n        \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n        \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonClick\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e itemPosition = getLayoutPosition();\r\n            Intent intent = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e Intent(mContext, RestaurantDetailActivity.class);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, itemPosition);\r\n            intent.putExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e, Parcels.wrap(mRestaurants));\r\n            mContext.startActivity(intent);\r\n        }\r\n    ...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we instruct the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass to implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003einterface. Then, we set our listener in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRestaurantViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor.\u003c/p\u003e\r\n\u003cp\u003eWhen the ItemView is clicked, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonClick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod will execute. It uses\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetLayoutPosition()\u003c/code\u003eto retrieve the position of the specific list item clicked. Then, it creates an intent to navigate to our RestaurantDetailActivity, with the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eitemPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the ArrayList of restaurants included as intent extras.\u003c/p\u003e\r\n\u003cp\u003eTo include an entire\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an intent extra, we use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcels.wrap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod. This handles the process of serializing the data using Android's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface.\u003c/p\u003e\r\n\u003ch2\u003eSet PagerAdapter\u003c/h2\u003e\r\n\u003cp\u003eNow we can add our new RestaurantPagerAdapter to our RestaurantDetailActivity:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantDetailActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants.ui;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.os.Bundle;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v4.view.ViewPager;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.v7.app.AppCompatActivity;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.morngaschool.myrestaurants.R;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.adapters.RestaurantPagerAdapter;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e com.moringaschool.myrestaurants.models.Restaurant;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.parceler.Parcels;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e java.util.ArrayList;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.Bind;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e butterknife.ButterKnife;\r\n\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRestaurantDetailActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-annotation\"\u003e@BindView\u003c/span\u003e(R.id.viewPager) ViewPager mViewPager;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e RestaurantPagerAdapter adapterViewPager;\r\n    ArrayList\u0026lt;Restaurant\u0026gt; mRestaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ArrayList\u0026lt;\u0026gt;();\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Bundle savedInstanceState)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_restaurant_detail);\r\n        ButterKnife.bind(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e);\r\n\r\n        mRestaurants = Parcels.unwrap(getIntent().getParcelableExtra(\u003cspan class=\"hljs-string\"\u003e\"restaurants\"\u003c/span\u003e));\r\n        \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e startingPosition = getIntent().getIntExtra(\u003cspan class=\"hljs-string\"\u003e\"position\"\u003c/span\u003e, \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e);\r\n\r\n        adapterViewPager = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e RestaurantPagerAdapter(getSupportFragmentManager(), mRestaurants);\r\n        mViewPager.setAdapter(adapterViewPager);\r\n        mViewPager.setCurrentItem(startingPosition);\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eInside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod, we pull out our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u0026lt;Restaurant\u0026gt;\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eParcelable using the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eunwrap()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on our \"restaurants\" intent extra. We also retrieve the position int included as an intent extra.\u003c/p\u003e\r\n\u003cp\u003eWe create a new pager adapter called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eadapterViewPager\u003c/code\u003e, providing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurants\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument. Then, we instruct our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewPager\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto use this new adapter. We also set the current item to the position of the item that was just clicked on.\u003c/p\u003e\r\n\u003cp\u003eAnd voilà, now we have a functioning fragment pager adapter!\u003c/p\u003e\r\n\u003ch2\u003eFurther Exploration: Parcelables\u003c/h2\u003e\r\n\u003cp\u003eIf you'd like to explore the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface more in-depth, check out Code Path's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/using-parcelable\" target=\"_blank\"\u003eUsing Parcelable\u003c/a\u003e.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/12_parceler\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eSerialization\u003c/strong\u003e: The conversion of an object into bytes, so the object can be easily saved somewhere, or efficiently passed to another area of an application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eParcelable\u003c/strong\u003e: An Android object used to pass data between different components of an application. It does this by serializing Java Objects between contexts.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eParceler\u003c/strong\u003e: A commonly-used Android library to manage the process of Parcelables.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ca href=\"http://parceler.org/\" target=\"_blank\"\u003eParceler Website\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eincludes a great overview and detailed documentation.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe Code Path tutorial\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Using-Parceler\" target=\"_blank\"\u003eUsing Parceler\u003c/a\u003e\u003cspan\u003e \u003c/span\u003edetails setting up Parceler in an Android application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf you'd like to explore the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eParcelable\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface more in-depth, check out Code Path's article\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://guides.codepath.com/android/using-parcelable\" target=\"_blank\"\u003eUsing Parcelable\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"weekend-android-activity-lifecycle","title":"Weekend: Android Activity Lifecycle","type":"WikiPage","content":"\u003cdiv id=\"content\"\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003cdiv\u003e\u003c/div\u003e\r\n\u003ch1\u003eManaging Activities\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs you know, Android applications are made up of a series of activities. When an app is running, Android manages these multiple activities using something called an\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eactivity stack\u003c/strong\u003e.\u003c/p\u003e\r\n\u003cp\u003eWhen a the user navigates from one activity to another, a new activity is started. When that activity takes the foreground on the device screen, it becomes the current or “running” activity, and is placed on the top of the activity stack.\u003c/p\u003e\r\n\u003cp\u003eIn addition to running, there are three other states an activity can be in: Stopped, restarted, and paused. Other activities (from both the same application and others) are then paused or stopped, and take lower precedence in the activity stack.\u003c/p\u003e\r\n\u003cp\u003eFor instance, if a user is interacting with an activity, a second activity is partially visible, and two activities are stopped in the background, your activity stack would look like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/ozigopkhmt0vabb/activity%20stack.png?raw=1\" alt=\"android-activity-stack\"\u003e\u003c/p\u003e\r\n\u003ch2\u003eActivity States\u003c/h2\u003e\r\n\u003cp\u003eBut why do we care what state our activity is in? Well, Android manages Activities based on their state. This helps Android identify activities that are no longer in use, allowing the OS to reclaim necessary memory and resources.\u003c/p\u003e\r\n\u003cp\u003eFor instance, let's say the activity stack on your device looks as depicted in the diagram above. Then, suddenly, you received a phone call. The Android system would likely need to free up some memory in order for you to interact with this call. Your phone application that manages ingoing and outgoing calls would also become the top activity on the stack, and the other application would enter a stopped state. Android may also need to kill stopped activities to free up memory to handle the phone call.\u003c/p\u003e\r\n\u003cp\u003eYour activity stack would likely be updated to look something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/svdfwj4ttkyhqcr/activity%20stack%202.png?raw=1\" alt=\"updated-android-activity-stack\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThese states can be broken into 4 main groups as follows:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eActive or Running\u003c/strong\u003e: Activities are considered active or running if they are visible to the user. This also means they’re at the top of the activity stack. This is considered the highest priority activity in Android.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ePaused\u003c/strong\u003e: When the device goes to sleep, or an activity is partially hidden, the activity is considered paused. Paused activities are alive and maintain all state and member information. This is the second highest priority activity in Android.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eStopped/Backgrounded\u003c/strong\u003e: Activities completely hidden by other activities are considered stopped or “in the background”. They still try to retain their state and member information as long as possible. They are also are considered the lowest priority state. Therefore, Android will kill activities in this state if higher priority activities require more memory and resources to operate.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRestarted\u003c/strong\u003e: It is possible for an activity that is anywhere from paused to stopped in the lifecycle to be removed from memory by Android. If the user navigates\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto the activity it must then be restarted, restored to its previously saved state, and displayed to the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eLifecycle Methods\u003c/h2\u003e\r\n\u003cp\u003eThere are seven built-in methods that manage the lifecycle of an Android Application, and assist in moving activities between the states detailed above. We can override any of these methods to help making managing states a lot easier.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the activity is first created. This method contains all normal static setup, such as creating views, initializing variables, binding data, etc. This method is\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efollowed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e. We’ve already used this method to assist in setting up our activities.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eThis method is called when the activity becomes visible to the user (and therefore active). It is\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealways \u003c/em\u003efollowed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if the activity becomes hidden, as detailed in the “stopped/backgrounded” state above) or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResume()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e(if it remains in the foreground).\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonResume()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the activity begins interacting with the user.\u003cspan\u003e \u003c/span\u003e\u003cem\u003eAlways\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efollowed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonPause()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonRestart()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when a stopped activity is being started again. Always followed by\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonPause()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the system is about to start resuming a previous activity. There are two possible lifecycle methods that will be called after\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnPause()\u003c/code\u003e:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eOnResume()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called if the Activity is to be returned to the foreground.\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003eOnStop()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called if the Activity is being placed in the background.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled when the activity is no longer visible to the user. Either because another Activity has resumed, and is covering this one, an existing activity is coming to the foreground, or the activity is about to be destroyed. It is always followed by either\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonRestart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e\u003c/h3\u003e\r\n\u003cp\u003eCalled directly before the activity is destroyed. Either because the activity is finishing (ie:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efinish()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewas called upon it), or because the system is temporarily destroying this instance of the activity to save space.\u003c/p\u003e\r\n\u003ch2\u003eLifecycle Loops\u003c/h2\u003e\r\n\u003cp\u003eThere are three loops Android developers are most interested in monitoring within an activity. Consider the following excerpt and diagram from the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\"\u003eActivity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eentry in the Android Developer Guides:\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/vz4y92i31wic00w/android-guides-lifecycle-diagram.png?raw=1\" alt=\"android-developer-guide-diagram\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eentire lifetime\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof an activity occurs between the first call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate() \u003c/code\u003ethrough to a single final call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e. An activity will do all setup of \"global\" state in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e, and release all remaining resources in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e. For example, if it has a thread running in the background to download data from the network, it may create that thread in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand then stop the thread in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003evisible lifetime\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof an activity happens between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e. During this time the user can see the activity on-screen, though it may not be in the foreground and interacting with the user. Between these two methods you can maintain resources that are needed to show the activity to the user. ...\u003c/p\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eforeground lifetime\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eof an activity happens between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResume()\u003c/code\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonPause()\u003c/code\u003e. During this time the activity is in front of all other activities and interacting with the user. An activity can frequently go between the resumed and paused states -- for example when the device goes to sleep, when an activity result is delivered, when a new intent is delivered -- so the code in these methods should be fairly lightweight.\u003c/p\u003e\r\n\u003c/blockquote\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cp\u003eFor more information, check out the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\"\u003eActivity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eentry from the Android Developers Guide. And the Xamarin\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/\"\u003eAndroid Activity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003etutorial.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eActivity Stack\u003c/strong\u003e: Multiple activities in different states, being managed by Android. The top of the stack is always the currently-running activity. Paused activities are next, and stopped activities below that. The stack's order may change as users interact with different activities.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eActivity States\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eActive\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eRunning\u003c/strong\u003e: Activities are considered active or running if they are visible to the user. This also means they’re at the top of the activity stack.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003ePaused\u003c/strong\u003e: When the device goes to sleep, or an activity is partially hidden, the activity is considered paused. Paused activities are alive and maintain all state and member information.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eStopped\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eBackgrounded\u003c/strong\u003e: Activities completely hidden by other activities are considered stopped or “in the background”. They are considered lowest priority, and Android will kill them if additional resources and/or memory is required by the running activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eRestarted\u003c/strong\u003e: An activity that was killed by Android, but restarted by the user and returned to its previous state.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eLifecycle Methods\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonCreate()\u003c/code\u003e: Called when the activity is first created. This method contains all normal static setup.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonStart()\u003c/code\u003e: Called when the activity becomes visible to the user (and therefore active).\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonResume()\u003c/code\u003e: Called when the activity begins interacting with the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonRestart()\u003c/code\u003e: Called when a stopped activity is being started again.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonPause()\u003c/code\u003e: Called when the system is about to start resuming a previous activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonStop()\u003c/code\u003e: Called when the activity is no longer visible to the user.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e: Called directly before the activity is destroyed.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eLifecycle Loops\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eEntire Lifetime\u003c/strong\u003e: The entire lifetime of an activity includes every method that takes place between the first call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonCreate()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethrough the final call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonDestroy()\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eVisible Lifetime\u003c/strong\u003e: Referring to the time in which the activity is visible to the user, between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStart()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStop()\u003c/code\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eForeground Lifetime\u003c/strong\u003e: Referring to the time in which the activity is in front of all other activities, and interacting with the user. Between a call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonResume()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003euntil a corresponding call to\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonPause()\u003c/code\u003e\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Information\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ca href=\"https://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle\"\u003eActivity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eentry from the Android Developers Guide.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eXamarin\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.xamarin.com/guides/android/application_fundamentals/activity_lifecycle/\"\u003eAndroid Activity Lifecycle\u003c/a\u003e\u003cspan\u003e \u003c/span\u003etutorial.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-arrayadapters-customization","title":"Tuesday: ArrayAdapters - Customization","type":"WikiPage","content":"\u003cul\u003e\u003c/ul\u003e\r\n\u003cp\u003eNow we know how to work with the standard\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat is part of the Android package. Great! However, the standard\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ereally can’t do very much - it can pull items, usually of type\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eout of an array, and draw a line underneath each one, but that’s about it.\u003c/p\u003e\r\n\u003cp\u003eFurther along in the course, we will learn about more powerful (and complex!) ways to efficiently show data that is part of a collection, especially data that is more structured such as an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e. But for now, let’s ease into this topic by learning about how we can customize an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e. Work through this slowly, as many of these concepts will be used extensively later on.\u003c/p\u003e\r\n\u003ch3\u003eCreate the Custom Adapter\u003c/h3\u003e\r\n\u003cp\u003eFirst, create a new Java class in the main package called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMyRestaurantsArrayAdapter\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eOur custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMyRestaurantsArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass will need to extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMyRestaurantsArrayAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eArrayAdapter\u003c/span\u003e \u003c/span\u003e{\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe are already showing the name of the restaurant in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e. Let’s add some more information, such as a cuisine type. We'll store this information in a parallel array to keep things simple. (We could use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eHashMap\u003c/code\u003e, but we'll stick with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArray\u003c/code\u003es for now.) We’ll need to pass these two bits of information (restaurants and cuisines) to our constructor, so we can use them when we output the data back to the UI. But we also need to pass in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e, and a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eresource\u003c/code\u003e. Make sure the cuisines and the restaurants can be reached via the same index (i.e they match up)\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] restaurants = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Sweet Hereafter\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cricket\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Hawthorne Fish House\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Viking Soul Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Red Square\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Horse Brass\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Dick's Kitchen\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Taco Bell\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Me Kha Noodle Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"La Bonita Taqueria\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Smokehouse Tavern\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Pembiche\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Kay's Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Gnarly Grey\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Slappy Cakes\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mi Mero Mole\"\u003c/span\u003e };\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] cuisines = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e String[] {\u003cspan class=\"hljs-string\"\u003e\"Vegan Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Breakfast\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fishs Dishs\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Scandinavian\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Coffee\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"English Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Burgers\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Fast Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Noodle Soups\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mexican\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"BBQ\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Cuban\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Bar Food\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Sports Bar\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Breakfast\"\u003c/span\u003e, \u003cspan class=\"hljs-string\"\u003e\"Mexican\"\u003c/span\u003e };\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOur constructor for our adapter now looks like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMyRestaurantsArrayAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eArrayAdapter\u003c/span\u003e \u003c/span\u003e{\r\n   \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n   \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mRestaurants;\r\n   \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mCuisines;\r\n\r\n   \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context mContext, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e resource, String[] mRestaurants, String[] mCuisines)\u003c/span\u003e \u003c/span\u003e{\r\n       \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(mContext, resource);\r\n       \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = mContext;\r\n       \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRestaurants = mRestaurants;\r\n       \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCuisines = mCuisines;\r\n   }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003ccode\u003eContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Android is a term that comes up a lot, and is frequently required for many methods to run, such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eToast\u003c/code\u003es. Context, simply put, is the current state of the application or object. We need it to get information regarding our app, or other parts of our app. Depending on where you are located in your app, such as an activity class, you can access Context via different methods such as\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetApplicationContext()\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetBaseContext()\u003c/code\u003e,\u003ccode\u003egetContext()\u003c/code\u003e, or simply falling back on\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eContext\u003c/code\u003e is just another\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObject\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein Android, so don’t let it scare you! You can also pass\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003earound like any other variable, including into a constructor, like we are doing here.\u003c/p\u003e\r\n\u003cp\u003eThe resource here refers to the XML file we are using in order to display our data. We are not changing this at this time. Remember, adapters need three pieces of information, minimum:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInformation about where they are being invoked (\u003ccode\u003eContext\u003c/code\u003e),\u003c/li\u003e\r\n\u003cli\u003eInformation about which layout file they are utilizing (resource, in this case\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esimple_list_item_1\u003c/code\u003e)\u003c/li\u003e\r\n\u003cli\u003eSome form of data storage (an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArray\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eof\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eString\u003c/code\u003e's or\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eObjects\u003c/code\u003e, most likely).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eSo far so good. Our custom adapter is taking shape.\u003c/p\u003e\r\n\u003cp\u003eBecause\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMyRestaurantsArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einherits from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e, we need to Override some of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e’s methods and replace them with our own custom versions. This is where we can format out output string! Getting closer.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMyRestaurantsArrayAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eArrayAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e Context mContext;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mRestaurants;\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e String[] mCuisines;\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMyRestaurantsArrayAdapter\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Context mContext, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e resource, String[] mRestaurants, String[] mCuisines)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003esuper\u003c/span\u003e(mContext, resource);\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mContext = mContext;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mRestaurants = mRestaurants;\r\n        \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.mCuisines = mCuisines;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e Object \u003cspan class=\"hljs-title\"\u003egetItem\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        String restaurant = mRestaurants[position];\r\n        String cuisine = mCuisines[position];\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e String.format(\u003cspan class=\"hljs-string\"\u003e\"%s \\nServes great: %s\"\u003c/span\u003e, restaurant, cuisine);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetCount\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e mRestaurants.length;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eOK, so let’s take a look at this weird line:\u003c/p\u003e\r\n\u003cp\u003e\u003ccode\u003eString formattedString = String.format(\"%s \\nServes great: %s\", restaurant, cuisine);\u003c/code\u003e\u003c/p\u003e\r\n\u003cp\u003eis what every list item will look like. We could concatenate with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e+\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehere, but this is a good opportunity to practice String interpolation. The %s represent each value after the closing “, separated by commas. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e\\n\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis how we can create a new line in Java, to make our formatting even nicer. String interpolation is a little more sophisticated than concatenating, so make sure you use it!\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eWhat else?\u003c/strong\u003e\u003c/p\u003e\r\n\u003cp\u003eCalling\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esuper()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003efrom a subclass allows you to reference a method that was overridden. It also allows you to call\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe original and the overridden method from a subclass, or call the method from the superclass from within the overriding method from the subclass. If you remove this line, you'll see that Android Studio will get unhappy. But why? We need this here as we are inheriting from a class that doesn't provide a default, parameterless constructor. In these cases, you'll need to explicitly call super() from the constructor of your subclass, passing in parameters the base constructor needs.\u003c/p\u003e\r\n\u003cp\u003eWe don’t need to worry about where the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eint position\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis coming from, ArrayAdapter takes care of that under the hood.\u003c/p\u003e\r\n\u003cp\u003eSimilarly, as mentioned in the comment, we do not explicitly call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetCount()\u003c/code\u003e, but we need this to be here nonetheless.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eListView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequires it, so it knows how many items to draw into the UI.\u003c/p\u003e\r\n\u003cp\u003eAlright, we are nearly done with our adapter - now we just need to change how our adapter is called.\u003c/p\u003e\r\n\u003cp\u003eJump back over to\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRestaurantsActivity.java\u003c/em\u003e.\u003c/p\u003e\r\n\u003cp\u003eHere, we need to change how from invoking boring\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto invoking our cool custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eMyRestaurantsArrayAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eRestaurantsActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003eMyRestaurantsArrayAdapter adapter = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e MyRestaurantsArrayAdapter(\u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e, android.R.layout.simple_list_item_1, restaurants, cuisines); \u003cspan class=\"hljs-comment\"\u003e// must match constructor!\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eTake it for a spin, you should see something that looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/ee2un6tqi6nw43k/custom_arrayadapter_complete.png\" alt=\"custom_arrayadapter_complete\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca class=\"external\" href=\"https://github.com/Vinge1718/Restaurant/tree/6_customArrayAdapters\" target=\"_blank\"\u003e\u003cspan\u003e Example GitHub Repo for MyRestaurants\u003cspan class=\"screenreader-only\"\u003e \u003c/span\u003e\u003c/span\u003e\u003cspan class=\"ui-icon ui-icon-extlink ui-icon-inline\" title=\"Links to an external site.\"\u003e\u003c/span\u003e\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","frontPage":false},{"exportId":"pre-course-work-github-integration","title":"Pre-course work: GitHub Integration","type":"WikiPage","content":"\u003cp\u003eIn this lesson we'll address how to integrate Git and GitHub into Android studio, to continue using them as the version control system for your Android projects. As usual, setup will differ slightly depending on whether you're working independently, or working with a partner.\u003c/p\u003e\r\n\u003ch2\u003eWorking Independently\u003c/h2\u003e\r\n\u003cp\u003eConveniently, Android Studio makes it easy to sync a project to GitHub by using a series of options built directly into their GUI (graphical user interface). This section will walk through using those options to create a Git repo, add and commit changes, create a remote repository on GitHub, and push your project to the remote repo.\u003c/p\u003e\r\n\u003ch3\u003eGradle Sync\u003c/h3\u003e\r\n\u003cp\u003eFirst, before adding anything to Git, we'll want to sync our project with Gradle. This will ensure our module files are included in the project. When you\u003cspan\u003e \u003c/span\u003e\u003cem\u003efirst\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ecreate a project, these files have likely not yet been created. So, we'll manually tell Android Studio to sync our project with Gradle.\u003c/p\u003e\r\n\u003cp\u003eYou can do this by selecting the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\"Sync Project Files with Gradle\"\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eicon in the menu. This icon looks like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/80rfwzmz77zwf4p/gradle-sync-icon-in-menu.png?raw=1\" alt=\"gradle-sync-icon-emphasis\"\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/mtsws8eljode806/gradle-sync-icon-hover.png?raw=1\" alt=\"gradle-sync-icon-hover-description\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf we click this button, our project will sync with Gradle.\u003c/p\u003e\r\n\u003ch3\u003eEnable Version Control\u003c/h3\u003e\r\n\u003cp\u003eNext, we need to tell Android Studio to enable version control for this project. We can do this by visiting the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eVCS\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eoption in the top menu, and selecting\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnable Version Control Integration\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/7hl813zmlttzefs/enable-vcs-integration-menu-option.png?raw=1\" alt=\"enable-version-control-integration-menu-option\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eSet Git as VCS\u003c/h3\u003e\r\n\u003cp\u003eSelecting this option will result in a pop-up that allows us to select which VCS our project should use. We'll select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eGit\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom the drop-down menu:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/ag0mryusrdk8b7m/select-version-control-system.png?raw=1\" alt=\"selecting-git-as-vcs-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...and click\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOK\u003c/em\u003e. This will create a local Git repository in the project folder.\u003c/p\u003e\r\n\u003ch4\u003eAutomatic\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e.gitignore\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eFiles\u003c/h4\u003e\r\n\u003cp\u003eAs you learned in your Java course, we don't need to add every single file to our Git repository. For instance, we don't need to track our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebuild\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efiles because their contents are simply compiled from our source code. When someone clones down our project, they'll re-compile their own build files on their own machine using the source code. So, we can use a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile to exclude this content from our Git repository.\u003c/p\u003e\r\n\u003cp\u003eHowever, as soon as we set our VCS to Git, you'll find that Android Studio will make us a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile by default.\u003c/p\u003e\r\n\u003cp\u003eIf you're currently in the \"Android\" view, you may not yet see this\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile. However, if you switch to \"Project\" view, you should see it in the file tree on the left-hand side. You can switch between view types by simply clicking the drop-down menu directly above the file tree:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/o7ea9smza9qon9g/switch-to-project-view.png?raw=1\" alt=\"switching-view-modes-in-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eOnce you're in \"Project\" view, you should notice a\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.gitignore\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile in the top-level of your project directory:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/te7pnzttyan56sf/project-view-file-tree.png?raw=1\" alt=\"project-view-file-tree\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIf you open it, you'll see that all file types we need to ignore are already present, including the\u003cspan\u003e \u003c/span\u003e\u003cem\u003e/build \u003c/em\u003edirectory:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003e.gitignore\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"prettyprint lang-text\"\u003e*.iml\r\n.gradle\r\n/local.properties\r\n/.idea/workspace.xml\r\n/.idea/libraries\r\n.DS_Store\r\n/build\r\n/captures\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eIn Android Studio \"Project\" view simply displays all files in a project directory, whereas \"Android\" view only displays the files you'll edit most while developing an Android project. You're welcome to switch between the two freely at any point.\u003c/em\u003e\u003c/p\u003e\r\n\u003ch3\u003eCommit as Usual in Terminal\u003c/h3\u003e\r\n\u003cp\u003eOnce Git is set up, you should be able to add and commit changes as usual using the Terminal located within Android Studio.\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/6kxo66e1x2lj3t3/terminal-in-android-studio.png?raw=1\" alt=\"android-studio-terminal-option\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eShare on Github\u003c/h3\u003e\r\n\u003cp\u003eOnce you're ready to share your project on GitHub, you may use options built directly into the Android Studio GUI to do so. Once again, select the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eVCS\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emenu option, then\u003cspan\u003e \u003c/span\u003e\u003cem\u003eImport into Version Control\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShare Project on Github\u003c/em\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/iue4e42wqt0ak1p/share-project-on-github.png?raw=1\" alt=\"share-project-on-github-from-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eAfter selecting this option, you should be prompted to provide your GitHub login information:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/89o4efjz3lrpv1e/github-login-info.png?raw=1\" alt=\"github-login-android-studio\"\u003e\u003c/p\u003e\r\n\u003cp\u003eThen, after logging in, you should be provided another popup window. Here, you can choose your GitHub repository's name and description, as well as the name of the remote URL:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/7u0psoloqbe950z/github-repo-name-and-description.png?raw=1\" alt=\"github-remote-repo-info\"\u003e\u003c/p\u003e\r\n\u003cp\u003eWhenever you're ready, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eShare\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto push the project to GitHub.\u003c/p\u003e\r\n\u003ch3\u003eTerminal Option\u003c/h3\u003e\r\n\u003cp\u003eDo note that you may\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003euse the Terminal in Android Studio to use the same Git commands you've been executing in the command line to track projects for previous courses. (ie:\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit config\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit remote add\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egit push\u003c/code\u003e, etc.)\u003c/p\u003e\r\n\u003cp\u003eYou are not required to use the Android GUI options to create, configure, and push to a GitHub repository, as described above. This is simply another option provided by Android Studio.\u003c/p\u003e\r\n\u003ch2\u003eWorking in Pairs\u003c/h2\u003e\r\n\u003cp\u003eWhile at Moringa we will continue to use pivotal-git-scripts to give both partners credit for their commits. In order to do this, locate the \"Terminal\" option in the lower-left corner of Android Studio. Select this option to reveal a command line terminal right inside Android Studio:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://www.dropbox.com/s/6kxo66e1x2lj3t3/terminal-in-android-studio.png?raw=1\" alt=\"android-studio-terminal-option\"\u003e\u003c/p\u003e\r\n\u003cp\u003eIn this terminal, we may include and configure our\u003cspan\u003e \u003c/span\u003e\u003cem\u003e.pairs\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efile, and run commands to commit as a pair.\u003c/p\u003e","frontPage":false},{"exportId":"weekend-work-gestures-animations-and-flexible-uis-objectives","title":"Weekend Work:Gestures, Animations, \u0026 Flexible UIs Objectives","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003ch1\u003eGestures, Animations, \u0026amp; Flexible UIs Objectives\u003c/h1\u003e\r\n\u003cp\u003eNow that we've covered an ample amount of the Android basics, we can start getting to the fun stuff. This week we'll begin exploring some of the phone-specific features that make Android development that much more exciting!\u003c/p\u003e\r\n\u003cp\u003eWe'll begin by learning about Android's ItemTouchHelper utility and the gesture support it offers; specifically focusing on drag-and-drop, and swiping gestures. Then, we'll walk through updating our databases with information provided from users via touchscreen interactions.\u003c/p\u003e\r\n\u003cp\u003eThen, we'll add animations to components in order to make them appear differently when users are actively interacting with them via the touchscreen. Not only will this make our apps look more professional, but it'll provide a sense of interactivity to users.\u003c/p\u003e\r\n\u003cp\u003eNext, we'll explore flexible UIs that will allow our app to switch orientation from portrait, to landscape, and back again depending on the angle of the phone. This will require us to learn more about Fragments and how they communicate.\u003c/p\u003e\r\n\u003cp\u003eFinally, we'll learn how to publish completed applications to the Google Play store!\u003c/p\u003e\r\n\u003cp\u003eAlong the way we'll build more features into our ongoing MyRestaurants application, create several new applications of choice, and continue independent projects.\u003c/p\u003e\r\n\u003ch3\u003eIndependent Project Objectives\u003c/h3\u003e\r\n\u003cp\u003eAt the end of the week, your ongoing independent project will be reviewed for the following objectives\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIncludes at least two gesture listeners\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOR\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etwo animations,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOR\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eutilize the camera within your application.\u003c/li\u003e\r\n\u003cli\u003eImplements at least one alternate resource.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices, especially indenting properly, making logically separate Git commits, including a README, and removing commented-out code and logging statements before committing.\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject is in a presentable, portfolio-quality state.\u003c/li\u003e\r\n\u003cli\u003eOptional: Is published to Google Play.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eItemTouchHelper Setup\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAndroid apps aren't\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejust\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eregular programs, applications, or websites designed to work especially well with Android systems; their touchscreens also offer a whole realm of user interaction other devices simply can't. We can\u003cspan\u003e \u003c/span\u003e\u003cem\u003eswipe\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto reveal a delete button,\u003cspan\u003e \u003c/span\u003e\u003cem\u003elong-press\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto open an edit functionality, or\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrag-and-drop\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto re-organize a folder. Let's explore the mechanics of some of these custom, touchscreen-specific interactions (also known as\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003egestures\u003c/strong\u003e), and begin integrating them into our projects.\u003c/p\u003e\r\n\u003cp\u003eWe will add features that allow users to drag and drop restaurants to re-order their \"Saved Restaurants\" list, and swipe to delete an individual restaurant from their list. To do this, we will use a tool called\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eItemTouchHelper\u003c/strong\u003e. ItemTouchHelper is an Android utility class that adds support for touchscreen gestures to the RecyclerView.\u003c/p\u003e\r\n\u003ch2\u003eRequired Reading\u003c/h2\u003e\r\n\u003cp\u003eBefore we begin, check out the tutorial\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf#.ko4sa38yb\"\u003eDrag and Swipe with RecyclerView\u003c/a\u003e. The included animation is a great visual example of the drag-and-drop and swipe-to-delete functionality we will implement.\u003c/p\u003e\r\n\u003ch2\u003eSetup\u003c/h2\u003e\r\n\u003cp\u003eIn the next few lessons we'll add the functionality described in the article above by adding the necessary interfaces, and creating an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto listen for gestures. Next, we will construct a new list item layout to indicate to users that list items are drag-enabled. Finally, we will create a custom adapter that both inherits functionality from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand acts as the adapter for our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch3\u003eItemTouchHelper Interfaces\u003c/h3\u003e\r\n\u003cp\u003eWe will need to create 2 interfaces to implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e. These interfaces will provide a list of methods that will eventually tie into callback methods in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass we will create next.\u003c/p\u003e\r\n\u003cp\u003eCreate a new\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/weekend-refactor-subpackages?module_item_id=ifdece44c5a08483aad357a771ee15fe1\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/weekend-refactor-subpackages\" data-api-returntype=\"Page\"\u003esub-package\u003c/a\u003e\u003cspan\u003e \u003c/span\u003enamed\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e. In the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package, create new Java class files with the following interface:\u003c/p\u003e\r\n\u003ch4\u003eItemTouchHelperAdapter\u003c/h4\u003e\r\n\u003cdiv class=\"filename\"\u003eItemTouchHelperAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e fromPosition, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e toPosition)\u003c/span\u003e\u003c/span\u003e;\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonItemDismiss\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eAs addressed in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-view-dot-onclicklistener-interface?module_item_id=i2c16514ec77d6c2df77b5e3d158da96f\" target=\"_blank\" data-api-endpoint=\"https://moringaschool.instructure.com/api/v1/courses/8/pages/tuesday-view-dot-onclicklistener-interface\" data-api-returntype=\"Page\"\u003eprevious lessons\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einterfaces\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare groups of methods other classes may implement. When we define an interface, we're listing out the methods. Each class that implements the interface will be required to override each of these methods.\u003c/p\u003e\r\n\u003cp\u003eIn the code above, we've defined an interface called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith the following two methods to override:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called each time the user moves an item by dragging it across the touch screen. The argument\u003cspan\u003e \u003c/span\u003e\u003ccode\u003efromPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the location the item originally resided at.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003etoPosition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the location the user moved the item to.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis called when an item has been dismissed with a swipe motion. The parameter\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eposition\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the location of the dismissed item.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe will eventually implement this interface and override its methods in our custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto tell our adapter what to do when an item is moved or dismissed via the touchscreen. It will eventually pass event callbacks from our custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass back up the chain.\u003c/p\u003e\r\n\u003ch4\u003eOnStartDragListener\u003c/h4\u003e\r\n\u003cp\u003eNext, we'll create another interface in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esubpackage, and populate it with the following code:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eOnStartDragListener.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003einterface\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eOnStartDragListener\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonStartDrag\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder)\u003c/span\u003e\u003c/span\u003e;\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be called when the user begins a 'drag-and-drop' interaction with the touchscreen.\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eviewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erepresents the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eholder corresponding to the object being dragged.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eWe will implement this interface in our SavedRestaurantsListActivity to attach the event listener to our custom\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhich will eventually be attached to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e. This interface will pass events\u003cspan\u003e \u003c/span\u003e\u003cem\u003eback\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eto our adapter allowing us to attach the touch listener to an item in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e.\u003c/p\u003e\r\n\u003ch2\u003eEnabling Gestures in the RecyclerView\u003c/h2\u003e\r\n\u003cp\u003eNow, we need to ensure our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehas the capability to receive and process gestures from the touchscreen. To listen for\u003cspan\u003e \u003c/span\u003e\u003cem\u003emove\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003eswipe\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eevents we need to create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e. This class will define\u003cspan\u003e \u003c/span\u003e\u003cem\u003ewhich\u003c/em\u003e\u003cspan\u003e \u003c/span\u003egestures to enable or disable. It will also receive callbacks when the user performs enabled touchscreen actions.\u003c/p\u003e\r\n\u003cp\u003eCreate another new class called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eutil\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package. The nested comments in the code below describe what each method does:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSimpleItemTouchHelperCallback.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSimpleItemTouchHelperCallback\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelper\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eCallback\u003c/span\u003e \u003c/span\u003e{\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e ItemTouchHelperAdapter mAdapter;\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  This constructor takes an ItemTouchHelperAdapter parameter. When implemented in\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  FirebaseRestaurantListAdapter, the ItemTouchHelperAdapter instance will pass the gesture event back to the\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  Firebase adapter where we will define what occurs when an item is moved or dismissed.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSimpleItemTouchHelperCallback\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(ItemTouchHelperAdapter adapter)\u003c/span\u003e \u003c/span\u003e{\r\n        mAdapter = adapter;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  The method below informs the ItemTouchHelperAdapter that drag gestures are enabled.\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  We could also disable drag gestures by returning 'false'.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisLongPressDragEnabled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n     \u003cspan class=\"hljs-comment\"\u003e//  The method below informs the ItemTouchHelperAdapter that swipe gestures are enabled.\u003c/span\u003e\r\n     \u003cspan class=\"hljs-comment\"\u003e//  We could also disable them by returning 'false'.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eisItemViewSwipeEnabled\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  getMovementFlags informs the ItemTouchHelper which movement directions are supported.\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e// For example, when a user drags a list item, they press 'Down' to begin the drag and lift their finger, 'Up',  to end the drag.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003egetMovementFlags\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)\u003c/span\u003e \u003c/span\u003e{\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;\r\n            \u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e makeMovementFlags(dragFlags, swipeFlags);\r\n    }\r\n\r\n    \u003cspan class=\"hljs-comment\"\u003e//  The method below notifies the adapter that an item has moved.\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  This triggers the onItemMove override in our Firebase adapter,\u003c/span\u003e\r\n    \u003cspan class=\"hljs-comment\"\u003e//  which will eventually handle updating the restaurants ArrayList to reflect the item's new position.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonMove\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView recyclerView, RecyclerView.ViewHolder source,\r\n            RecyclerView.ViewHolder target)\u003c/span\u003e \u003c/span\u003e{\r\n        \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (source.getItemViewType() != target.getItemViewType()) {\r\n            \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n        }\r\n        mAdapter.onItemMove(source.getAdapterPosition(), target.getAdapterPosition());\r\n        \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003etrue\u003c/span\u003e;\r\n    }\r\n\r\n   \u003cspan class=\"hljs-comment\"\u003e//  The method below notifies the adapter that an item was dismissed.\u003c/span\u003e\r\n   \u003cspan class=\"hljs-comment\"\u003e//  This triggers the onItemDismiss override in our Firebase adapter\u003c/span\u003e\r\n   \u003cspan class=\"hljs-comment\"\u003e//  which will eventually handle deleting this item from the user's \"Saved Restaurants\" in Firebase.\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonSwiped\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(RecyclerView.ViewHolder viewHolder, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e i)\u003c/span\u003e \u003c/span\u003e{\r\n        mAdapter.onItemDismiss(viewHolder.getAdapterPosition());\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eUser Interface\u003c/h2\u003e\r\n\u003ch3\u003eDownloading Icons\u003c/h3\u003e\r\n\u003cp\u003eAs stated in the tutorial at the beginning of this lesson, Google’s Material Design Guidelines recommend using the \"Reorder\" icon to indicate that list items have drag-and-drop capabilities.\u003c/p\u003e\r\n\u003cp\u003eLet’s download the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://design.google.com/icons/#ic_reorder\"\u003eMaterial Icons | Reorder\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ePNG icon and add it to our drawable folder. As we've done previously, place each varying size PNG file in the corresponding sub-directory within\u003cspan\u003e \u003c/span\u003e\u003cem\u003edrawable\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. Once complete, you should have a file structure of icons that looks something like this:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/9kyha3snv0nr73f/icon-file-structure.png\" alt=\"icon-file-structure-in-finder\"\u003e\u003c/p\u003e\r\n\u003ch3\u003eCreating Layouts\u003c/h3\u003e\r\n\u003cp\u003eWe're currently using the same layout for individual restaurant items in both the \"Saved Restaurants\" and \"Find Restaurants\" areas of our application. Because \"Saved Restaurants\" will now allow users to reorder their list, let's create a dedicated layout for list items in\u003cspan\u003e \u003c/span\u003e\u003cem\u003ethis\u003c/em\u003e\u003cspan\u003e \u003c/span\u003earea. This layout will look the same as\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item\u003c/em\u003e, except it will include the 'reorder' icon in the bottom-left corner of the restaurant\u003ccode\u003eImageView\u003c/code\u003e.\u003c/p\u003e\r\n\u003cp\u003eCreate a new list item layout file called\u003cspan\u003e \u003c/span\u003e\u003cem\u003erestaurant_list_item_drag\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e. We will use a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRelativeLayout\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand align the icon\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the bottom left of the restaurant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003erestaurant_list_item_drag.xml\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"xml hljs\"\u003e\u003cspan class=\"hljs-pi\"\u003e\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e \u003cspan class=\"hljs-attribute\"\u003exmlns:android\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"http://schemas.android.com/apk/res/android\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"horizontal\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n    \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"130dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"100dp\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantImageView\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/waffles\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:scaleType\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"centerCrop\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eImageView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/dragIcon\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"30dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@id/restaurantImageView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:gravity\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bottom|left\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:src\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@drawable/ic_reorder_white_24dp\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:orientation\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"vertical\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:background\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"#ffffff\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n        \u003cspan class=\"hljs-attribute\"\u003eandroid:padding\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"10dp\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textSize\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"20dp\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"bold\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Restaurant Name\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorPrimary\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"One Cuisine Type\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/categoryTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_below\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/restaurantNameTextView\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentLeft\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentStart\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:textStyle\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"italic\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\r\n            \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"match_parent\"\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\r\n            \u003cspan class=\"hljs-tag\"\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eTextView\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_width\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_height\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"wrap_content\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:text\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"Rating\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:id\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@+id/ratingTextView\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentBottom\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:layout_alignParentRight\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"true\"\u003c/span\u003e\r\n                \u003cspan class=\"hljs-attribute\"\u003eandroid:textColor\u003c/span\u003e=\u003cspan class=\"hljs-value\"\u003e\"@color/colorAccent\"\u003c/span\u003e/\u0026gt;\u003c/span\u003e\r\n        \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eRelativeLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n    \u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003cspan class=\"hljs-tag\"\u003e\u0026lt;/\u003cspan class=\"hljs-title\"\u003eLinearLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe'll inflate this layout in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor within SavedRestaurantListActivity. We'll simply replace the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR.layout.restaurant_list_item\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe're currently inflating with\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eR.layout.restaurant_list_item_drag\u003c/code\u003e:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eSavedRestaurantListActivity\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAppCompatActivity\u003c/span\u003e \u003c/span\u003e{\r\n    ...\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003emFirebaseAdapter \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt;(options) {\u003cbr\u003e   \u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    @Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic \u003c/span\u003eFirebaseRestaurantViewHolder \u003cspan\u003eonCreateViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eViewGroup parent\u003cspan\u003e, int \u003c/span\u003eviewType) {\u003cbr\u003e        View view = LayoutInflater.\u003cspan\u003efrom\u003c/span\u003e(parent.getContext()).inflate(R.layout.\u003cspan\u003erestaurant_list_item_drag\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eparent\u003cspan\u003e, false\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        return new \u003c/span\u003eFirebaseRestaurantViewHolder(view)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e... } \u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIf we run our app and navigate to SavedRestaurantsListActivity, we should see that our icons appear over the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageViews\u003c/code\u003e, but we aren't yet able to drag and drop the list items:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/b663iqncpznmhyq/reorder-icon-in-layout.png\" alt=\"reorder-icon-present-in-saved-restaurants-list\"\u003e\u003c/p\u003e\r\n\u003cp\u003eNow that we have all necessary components in place, we will enable this functionality in the next lesson.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInterfaces\u003c/strong\u003e: Groups of methods other classes may implement, as described in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#02.html\"\u003eprevious lessons\u003c/a\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eGestures:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTouchscreen-specific interactions, such as drag-and-drop, long-press or swipe.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eItemTouchHelper:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAn Android utility class that adds support for touchscreen gestures to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExamples\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf#.ko4sa38yb\"\u003eDrag and Swipe with RecyclerView\u003c/a\u003e.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eImplementing Gestures with ItemTouchHelper\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eNow that our interfaces,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e, and new list item layout are in place, let's implement the drag-and-drop feature. We will start by creating a new adapter class and then updating our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand SavedRestaurantListActivity.\u003c/p\u003e\r\n\u003ch2\u003eClass Inheritance\u003c/h2\u003e\r\n\u003cp\u003eLast week we created an instance of the FirebaseUI's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto listen and respond to changes in a specified node. However, in order to implement our new listener interfaces we will need to create\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecustom\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eadapter that inherits all functionality of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealso\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eimplements the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e. Before we do this, let's briefly learn about inheritance, and how it works.\u003c/p\u003e\r\n\u003cp\u003eIn Java (and\u003cspan\u003e \u003c/span\u003e\u003cem\u003emany\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eother languages)\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einheritance\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003erefers to a relationship between two classes in which one (child) class has all of methods and properties of the other (parent) class, while also containing unique methods and properties of its own.\u003c/p\u003e\r\n\u003cp\u003eFor example, a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass might inherit from an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003eclass. The\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass would have all of the methods and properties of an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebut also\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe unique methods and properties of a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e. To inherit from a class, we use the keyword\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextend\u003c/strong\u003e, like so:\u003c/p\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eDog\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eAnimal\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eIn the example above, the class\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDog\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis able to call all methods and content from\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eAnimal\u003c/code\u003e, since it has inherited it.\u003c/p\u003e\r\n\u003ch2\u003eCustom Adapters with Class Inheritance\u003c/h2\u003e\r\n\u003cp\u003eAs mentioned, let's make a custom adapter that inherits all functionality of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e,\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand also\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eincludes its own code implementing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e. This will allow us to handle\u003cspan\u003e \u003c/span\u003e\u003cem\u003eboth\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eFirebaseRecyclerAdapter\u003cspan\u003e \u003c/span\u003e\u003cem\u003eand\u003c/em\u003e\u003cspan\u003e \u003c/span\u003edrag-and-drop functionalities in the same adapter.\u003c/p\u003e\r\n\u003cp\u003eWe'll start by creating the new class in the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eadapters\u003c/em\u003e\u003cspan\u003e \u003c/span\u003esub-package called\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e. We will extend the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003einherit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eits functionality. We will also implement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003einterface, and create a constructor:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/FirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eFirebaseRestaurantListAdapter \u003cspan\u003eextends \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt; \u003cspan\u003eimplements \u003c/span\u003eItemTouchHelperAdapter {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRef\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eOnStartDragListener \u003cspan\u003emOnStartDragListener\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eContext \u003cspan\u003emContext\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public \u003c/span\u003e\u003cspan\u003eFirebaseRestaurantListAdapter\u003c/span\u003e(FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eDatabaseReference ref\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eOnStartDragListener onStartDragListener\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eContext context){\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e(options)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRef \u003c/span\u003e= ref.getRef()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emOnStartDragListener \u003c/span\u003e= onStartDragListener\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emContext \u003c/span\u003e= context\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    }\u003cbr\u003e}\u003c/span\u003e\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eJust like we saw in SavedRestaurantsActivity, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erequires the class of the data that will populate the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView (Contained in the FirebaseRecyclerOptions in the SavedRestaurantListActivity)\u003c/code\u003e, and the database reference or query.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe also add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003econtext\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto the constructor. The context will be needed when we eventually create an intent to navigate to the detail activity.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn order to set our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRef\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emember variable to the correct datatype, we call\u003cspan\u003e \u003c/span\u003e\u003ccode\u003egetRef()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon an instance of\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eQuery\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto return the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eDatabaseReference\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe will eventually set a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the restaurant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand use the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto trigger the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecallback.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eNext, let's override methods from the interfaces being implemented:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eadapters/FirebaseRestaurantListAdapter.java\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003e\u003c/span\u003e\u003c/code\u003e\n\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eFirebaseRestaurantListAdapter \u003cspan\u003eextends \u003c/span\u003eFirebaseRecyclerAdapter\u0026lt;Restaurant\u003cspan\u003e, \u003c/span\u003eFirebaseRestaurantViewHolder\u0026gt; \u003cspan\u003eimplements \u003c/span\u003eItemTouchHelperAdapter {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRef\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eOnStartDragListener \u003cspan\u003emOnStartDragListener\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eContext \u003cspan\u003emContext\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    public \u003c/span\u003e\u003cspan\u003eFirebaseRestaurantListAdapter\u003c/span\u003e(FirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eDatabaseReference ref\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eOnStartDragListener onStartDragListener\u003cspan\u003e,\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e                                         \u003c/span\u003eContext context){\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e(options)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRef \u003c/span\u003e= ref.getRef()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emOnStartDragListener \u003c/span\u003e= onStartDragListener\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emContext \u003c/span\u003e= context\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eFirebaseRestaurantViewHolder firebaseRestaurantViewHolder\u003cspan\u003e, int \u003c/span\u003eposition\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003e@NonNull \u003c/span\u003eRestaurant restaurant) {\u003cbr\u003e        firebaseRestaurantViewHolder.bindRestaurant(restaurant)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@NonNull\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    @Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic \u003c/span\u003eFirebaseRestaurantViewHolder \u003cspan\u003eonCreateViewHolder\u003c/span\u003e(\u003cspan\u003e@NonNull \u003c/span\u003eViewGroup parent\u003cspan\u003e, int \u003c/span\u003eviewType) {\u003cbr\u003e        View view = LayoutInflater.\u003cspan\u003efrom\u003c/span\u003e(parent.getContext()).inflate(R.layout.\u003cspan\u003erestaurant_list_item_drag\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eparent\u003cspan\u003e, false\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        return new \u003c/span\u003eFirebaseRestaurantViewHolder(view)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic boolean \u003c/span\u003e\u003cspan\u003eonItemMove\u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003efromPosition\u003cspan\u003e, int \u003c/span\u003etoPosition){\u003cbr\u003e        \u003cspan\u003ereturn false;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonItemDismiss\u003c/span\u003e(\u003cspan\u003eint \u003c/span\u003eposition){\u003cbr\u003e\u003cbr\u003e    }\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003eonItemMove()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonItemDismiss()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride methods from the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelperAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003ccode\u003e\u003cspan\u003eonBindViewHolder\u003c/span\u003e()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ecomes from an interface included as part of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eclass.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eImplement OnStartDragListener and Attach ItemTouchHelper.Callback\u003c/h3\u003e\r\n\u003cp\u003eWe now need to make several changes so our SavedRestaurantListActivity:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eUse our new\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein SavedRestaurantListActivity\u003cspan\u003e \u003c/span\u003e\u003cem\u003ein place of\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eour\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eImplement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface In order to pass the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener \u003c/code\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eCreate an instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein order to attach the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eMove the construction of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003emRestaurantReference\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003esetUpFirebaseAdapter()\u003c/code\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eAfter these changes our SavedRestaurantListActivity should look like this:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eSavedRestaurantsListActivity.java\u003c/div\u003e\r\n\u003cpre\u003e\u003cspan\u003epublic class \u003c/span\u003eSavedRestaurantListActivity \u003cspan\u003eextends \u003c/span\u003eAppCompatActivity \u003cspan\u003eimplements \u003c/span\u003eOnStartDragListener {\u003cbr\u003e    \u003cspan\u003eprivate \u003c/span\u003eDatabaseReference \u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eFirebaseRestaurantListAdapter \u003cspan\u003emFirebaseAdapter\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    private \u003c/span\u003eItemTouchHelper \u003cspan\u003emItemTouchHelper\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@BindView\u003c/span\u003e(R.id.\u003cspan\u003erecyclerView\u003c/span\u003e) RecyclerView \u003cspan\u003emRecyclerView\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonCreate\u003c/span\u003e(Bundle savedInstanceState) {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onCreate(savedInstanceState)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetContentView(R.layout.\u003cspan\u003eactivity_restaurants\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eButterKnife.\u003cspan\u003ebind\u003c/span\u003e(\u003cspan\u003ethis\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003esetUpFirebaseAdapter()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003eprivate void \u003c/span\u003e\u003cspan\u003esetUpFirebaseAdapter\u003c/span\u003e(){\u003cbr\u003e        FirebaseUser user = FirebaseAuth.\u003cspan\u003egetInstance\u003c/span\u003e().getCurrentUser()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eString uid = user.getUid()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRestaurantReference \u003c/span\u003e= FirebaseDatabase.\u003cspan\u003egetInstance\u003c/span\u003e().getReference(Constants.\u003cspan\u003eFIREBASE_CHILD_RESTAURANTS\u003c/span\u003e).child(uid)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eFirebaseRecyclerOptions\u0026lt;Restaurant\u0026gt; options =\u003cbr\u003e                \u003cspan\u003enew \u003c/span\u003eFirebaseRecyclerOptions.Builder\u0026lt;Restaurant\u0026gt;()\u003cbr\u003e                        .setQuery(\u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003eRestaurant.\u003cspan\u003eclass\u003c/span\u003e)\u003cbr\u003e                        .build()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eFirebaseRestaurantListAdapter(options\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003emRestaurantReference\u003c/span\u003e\u003cspan\u003e, this, this\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setLayoutManager(\u003cspan\u003enew \u003c/span\u003eLinearLayoutManager(\u003cspan\u003ethis\u003c/span\u003e))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setAdapter(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emRecyclerView\u003c/span\u003e.setHasFixedSize(\u003cspan\u003etrue\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003eItemTouchHelper.Callback callback = \u003cspan\u003enew \u003c/span\u003eSimpleItemTouchHelperCallback(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emItemTouchHelper \u003c/span\u003e= \u003cspan\u003enew \u003c/span\u003eItemTouchHelper(callback)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emItemTouchHelper\u003c/span\u003e.attachToRecyclerView(\u003cspan\u003emRecyclerView\u003c/span\u003e)\u003cspan\u003e; \u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStart\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStart()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003emFirebaseAdapter\u003c/span\u003e.startListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e\u003cbr\u003e    \u003cspan\u003e@Override\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprotected void \u003c/span\u003e\u003cspan\u003eonStop\u003c/span\u003e() {\u003cbr\u003e        \u003cspan\u003esuper\u003c/span\u003e.onStop()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        if\u003c/span\u003e(\u003cspan\u003emFirebaseAdapter\u003c/span\u003e!= \u003cspan\u003enull\u003c/span\u003e) {\u003cbr\u003e            \u003cspan\u003emFirebaseAdapter\u003c/span\u003e.stopListening()\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e}\u003cbr\u003e    }\u003cbr\u003e    \u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003eonStartDrag\u003c/span\u003e(RecyclerView.ViewHolder viewHolder){\u003cbr\u003e        \u003cspan\u003emItemTouchHelper\u003c/span\u003e.startDrag(viewHolder)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e}\u003c/pre\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eWe add the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas a member variable so that we can use it in the OnStartDragListener's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econstructor,\u003cspan\u003e \u003c/span\u003e\u003ccode\u003ethis\u003c/code\u003e\u003cspan\u003e \u003c/span\u003erefers to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eContext\u003c/code\u003e. Both are necessary to construct an instance of a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes an adapter as a parameter so we pass it the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRestaurantListAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewe just created.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eThe\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etakes a\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper.Callback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eas an argument so we can pass it the instance of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ethat we just created using our adapter.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eTo enable the interfaces to communicate with the necessary callbacks, we must attach the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eusing the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eattachToRecyclerView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eFinally, we call the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003estartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod on the instance of our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eItemTouchHelper\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einside of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonStartDrag()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eoverride which will eventually send our touch events back to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eSimpleItemTouchHelperCallback\u003c/code\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eAttach OnStartDragListener\u003c/h3\u003e\r\n\u003cp\u003eNext, let's create an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewhere we will attach our drag listener to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e. Only the Restaurant\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewill be drag-enabled.\u003c/p\u003e\r\n\u003cp\u003eConsidering our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003econtains each of the views in a given item view, it may make sense to do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eitself. However, the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnStartDragListener \u003c/code\u003epassed in to our adapter\u003cspan\u003e \u003c/span\u003e\u003cem\u003ecannot be sent to our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ewith a constructor\u003c/em\u003e, since the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eFirebaseRecyclerAdapter\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ehandles the construction of the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einternally.\u003c/p\u003e\r\n\u003cp\u003eInstead, we need to grant our adapter access to the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eby declaring it as a public member variable, and then set its\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003ein the adapter. We'll begin this process by tweaking code in our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eto make the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003epublic:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantViewHolder.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eRecyclerView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eViewHolder\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eView\u003c/span\u003e.\u003cspan class=\"hljs-title\"\u003eOnClickListener\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ImageView mRestaurantImageView;\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003ebindRestaurant\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(Restaurant restaurant)\u003c/span\u003e \u003c/span\u003e{\r\n        mRestaurantImageView = (ImageView) mView.findViewById(R.id.restaurantImageView);\r\n        ...\r\n\r\n        Picasso.get().load(restaurant.getImageUrl()).into(mRestaurantImageView);\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eWe can now set an\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eOnTouchListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eon the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eViewHolder\u003c/code\u003e's\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eImageView\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eand instruct our listeners to listen for a drag events when the user touches a restaurant's image. We will do this in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eonBindViewHolder()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod of our adapter:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eFirebaseRestaurantListAdapter.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantListAdapter\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eextends\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eFirebaseRecyclerAdapter\u003c/span\u003e\u0026lt;\u003cspan class=\"hljs-title\"\u003eRestaurant\u003c/span\u003e, \u003cspan class=\"hljs-title\"\u003eFirebaseRestaurantViewHolder\u003c/span\u003e\u0026gt;  \u003cspan class=\"hljs-keyword\"\u003eimplements\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eItemTouchHelperAdapter\u003c/span\u003e \u003c/span\u003e{\r\n    ...\r\n    \u003cspan class=\"hljs-keyword\"\u003eprivate\u003c/span\u003e OnStartDragListener mOnStartDragListener;\r\n\r\n    ...\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003eprotected\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonBindViewHolder\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(\u003cspan class=\"hljs-keyword\"\u003efinal\u003c/span\u003e FirebaseRestaurantViewHolder viewHolder, Restaurant model, \u003cspan class=\"hljs-keyword\"\u003eint\u003c/span\u003e position)\u003c/span\u003e \u003c/span\u003e{\r\n        viewHolder.bindRestaurant(model);\r\n        viewHolder.mRestaurantImageView.setOnTouchListener(\u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e View.OnTouchListener() {\r\n            \u003cspan class=\"hljs-annotation\"\u003e@Override\u003c/span\u003e\r\n            \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eboolean\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eonTouch\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e(View v, MotionEvent event)\u003c/span\u003e \u003c/span\u003e{\r\n                \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e (event.getActionMasked() == MotionEvent.ACTION_DOWN) {\r\n                    mOnStartDragListener.onStartDrag(viewHolder);\r\n                }\r\n                \u003cspan class=\"hljs-keyword\"\u003ereturn\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efalse\u003c/span\u003e;\r\n            }\r\n        });\r\n    }\r\n\r\n    ...\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eNow if we run our app we can click the image of a list item in \"Saved Restaurants\" and drag it. In the next lesson we'll address altering our data based on user interactions; such as deleting a restaurant when the user swipes it off the screen, or re-ordering the appearance of restaurants in the \"Saved Restaurants\" list even after the activity is quit and re-visted.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003cstrong\u003eClass inheritance\u003c/strong\u003e: In Java (and many other programming languages) one class can acquire the methods and content of another class (in addition to its\u003cspan\u003e \u003c/span\u003e\u003cem\u003eown\u003c/em\u003e\u003cspan\u003e \u003c/span\u003emethods and content) if it\u003cspan\u003e \u003c/span\u003e\u003cem\u003einherits\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efrom it. To inherit from a class, we use the keyword\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eextend\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e(ie\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclass Lion extends Feline { ...\u003c/code\u003e).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eExample\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/20_Gestures_Animations\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eThe Minimum Viable Product\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eIn your final\u003cspan\u003e \u003c/span\u003eCapstone Project Brainstorming, you will craft a cumulative independent capstone project in week 5 of this course. You will be required to submit a project proposal to your instructor before you begin. This proposal will outline your minimum viable product (MVP), and the developmental roadmap you’ll follow to create it.\u003c/p\u003e\r\n\u003cp\u003eBefore we begin proposals, let’s learn more about minimum viable products and the benefits they offer. This will help ensure you approach your capstone project in the most efficient manner, and have a functioning application to demonstrate at the end of this course.\u003c/p\u003e\r\n\u003ch2\u003eMinimum Viable Product (MVP)\u003c/h2\u003e\r\n\u003cp\u003eIn web development,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eMVP\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003estands for\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eminimum viable product.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAs the name implies, this is the\u003cspan\u003e \u003c/span\u003e\u003cem\u003eminimum\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003cem\u003emost basic\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eiteration or version of an application that fulfills the sole purpose it is meant to achieve. That is, the problem the application is meant to solve, or the service it is supposed to offer to the user.\u003c/p\u003e\r\n\u003ch3\u003eMVP Example\u003c/h3\u003e\r\n\u003cp\u003eLet’s look at an example of an MVP. Consider the following quote from Gerry Clap’s response to\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://www.quora.com/What-is-a-minimum-viable-product\" target=\"_blank\"\u003ethe question\u003cspan\u003e \u003c/span\u003e\u003cem\u003e”What is a minimum viable product?”\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon Quora\u003c/a\u003e:\u003c/p\u003e\r\n\u003cblockquote\u003e\r\n\u003cp\u003eLet's pretend you're building a startup with the goal of creating the best donut ever.\u003c/p\u003e\r\n\u003cp\u003eThe product team starts off by building a plain donut. At this point it's considered an MVP.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eThe product works, but it's probably not quite the best donut product out there\u003c/strong\u003e. Now the team can ask their customers questions about the donut, like:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhat do like the most about the donut?\u003c/li\u003e\r\n\u003cli\u003eIf you could choose any topping, what topping would you add?\u003c/li\u003e\r\n\u003cli\u003eWould you prefer a donut in a different shape?\u003c/li\u003e\r\n\u003cli\u003eAnd, so on.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eUsing this newfound validated learning from their customers, the team can create a better donut. But, depending on the context of the customers that provided feedback, the team can have wildly varying results:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIn this particular case, it's to add candy sprinkles.\u003c/li\u003e\r\n\u003cli\u003eIn a different market, with different customers, those customers may of wanted a chocolate donut.\u003c/li\u003e\r\n\u003cli\u003eIf the team spoke to customers in another country, they may of wanted a strawberry donut._\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/blockquote\u003e\r\n\u003ch3\u003eMVP Benefits\u003c/h3\u003e\r\n\u003cp\u003eBy following this MVP process to create our product, we reap two distinct benefits:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eWe have a functioning product completed sooner.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eWhile it may not have\u003cspan\u003e \u003c/span\u003e\u003cem\u003eall\u003c/em\u003e\u003cspan\u003e \u003c/span\u003ethe fancy features we envision, it’s better to prioritize building functioning prototype with fewer features than to attempt adding\u003cspan\u003e \u003c/span\u003e\u003cem\u003etoo many\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeatures at once, and fail to provide a functioning project by the deadline. You can always add those extra features after your basic MVP is finished.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eWe can also gather user feedback before adding extra features.\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eAfter creating your MVP sample users can beta test it and provide feedback. This allows you to determine what additional features users\u003cspan\u003e \u003c/span\u003e\u003cem\u003eactually want\u003c/em\u003e.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eThe MVP Process in Your Capstone Project\u003c/h2\u003e\r\n\u003cp\u003eYou will submit a project proposal to your instructor, then work toward developing your MVP before integrating additional features. Let’s walk through what this workflow will look like:\u003c/p\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIn your proposal you will identify the primary goal or purpose of the application. What problem is this project meant to solve? What service is it meant to offer the user?\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eYou will also determine the\u003cspan\u003e \u003c/span\u003e\u003cem\u003ebare minimum\u003c/em\u003e\u003cspan\u003e \u003c/span\u003efeatures and functionalities your application requires to\u003cspan\u003e \u003c/span\u003e\u003cem\u003emeet\u003c/em\u003ethat goal or purpose.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eIf necessary, your instructor will provide feedback on your project idea and scope before week 5.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eAs you begin developing your project, focus\u003cspan\u003e \u003c/span\u003e\u003cem\u003eonly\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eon the MVP features you identified in your proposal.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eOnce that functionality is present,\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003ecommit\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003epush to master\u003c/strong\u003e. The development process isn’t over, but you can rest-assured that you’ll have a functioning version ready to go. As you know, additional features should be developed\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003cstrong\u003eon their own branches\u003c/strong\u003e\u003c/em\u003e, and only pushed to master when you confirm they’re 100% functional and pass all tests.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eGather feedback. Ask potential users what features they would like to see. If you complete your MVP before the end of week 5, ask your peers or instructor for feedback. If you complete it just before Friday, use the trade show as an opportunity to gather feedback.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003eContinue adding features to improve your project’s functionality and user experience. Take user feedback into account when deciding which extra features to implement before presenting your project to potential employers at Demo Day.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003eAre you ready? Continue on to the next lesson to see the proposal template, and begin constructing your own MVP.\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003ch1\u003eIndependent Capstone Project Proposal\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003eAs you know, you will spend week 5 of this course working on a cumulative capstone project.\u003cspan\u003e \u003c/span\u003eLast week\u003cspan\u003e \u003c/span\u003ewe began brainstorming project ideas. This week we’ll finalize, sign up, and submit proposals for our capstone projects.\u003c/p\u003e\r\n\u003ch3\u003eProject Proposal\u003c/h3\u003e\r\n\u003cp\u003eComplete the following proposal template and email to your instructor\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eno later than Wednesday of week 4\u003c/strong\u003e(early proposals are welcome and encouraged). Make sure to review the homework on Minimum Viable Products before drafting your proposal. Knowledge of MVPs will be required to complete the questions below.\u003c/p\u003e\r\n\u003cp\u003eDouble-check your work for spelling, typos and punctuation, and use professional language and technical terms as you would in a project proposal completed for a supervisor or manager.\u003c/p\u003e\r\n\u003cp\u003ePlease also include\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003e\u003cem\u003eCapstone Project Proposal: Your First and Last Name\u003c/em\u003e\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003ein the subject line.\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eName of Student\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eName of Project\u003c/strong\u003e:\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eProject’s Purpose or Goal\u003c/strong\u003e:\u003cspan\u003e \u003c/span\u003e\u003cem\u003e(What will it do for users?)\u003c/em\u003e\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eList the absolute minimum features the project requires to meet this purpose or goal:\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eWhat tools, frameworks, libraries, APIs, Drupal modules and/or other resources will you use to create this MVP? List them all here. Be specific.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eIf you finish developing the minimum viable product (MVP) with time to spare, what will you work on next? Describe these features here: Be specific.\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eWhat additional tools, frameworks, libraries, APIs, or other resources will these additional features require?\u003c/strong\u003e\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003cli\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003eIs there anything else you’d like your instructor to know?\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"monday-practice-myrestaurants","title":"Monday: Practice: MyRestaurants","type":"WikiPage","content":"\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYour goal today is to get comfortable using Android Studio. Practice creating a simple Android application using a basic layout, buttons, toasts, intents and user input.\u003c/p\u003e\r\n\u003ch2\u003eWarm up\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHow does XML differ from HTML? How are they alike?\u003c/li\u003e\r\n\u003cli\u003eWhat's the difference between\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003esp\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eand\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003edp\u003c/strong\u003e? How do you decide which to use?\u003c/li\u003e\r\n\u003cli\u003eWhen would you use a toast?\u003c/li\u003e\r\n\u003cli\u003eHow are intents used in an Android application?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003ch3\u003eMyRestaurants\u003c/h3\u003e\r\n\u003cp\u003eFollow along with the weekend videos/lessons and build out the foundation for the MyRestaurants app which we will continue to work on over the next four weeks.\u003c/p\u003e\r\n\u003ch3\u003eAdditional Resources\u003c/h3\u003e\r\n\u003cp\u003eTry creating your own themes to style activities differently. Check out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Styles-and-Themes\" target=\"_blank\"\u003ethis article\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor some tips and tricks\u003c/p\u003e\r\n\u003cp\u003eHere are some additional resources that might come in handy:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Defining-Views-and-their-Attributes\" target=\"_blank\"\u003eViews and their attributes\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://github.com/codepath/android_guides/wiki/Material-Design-Primer\" target=\"_blank\"\u003eMaterial Design Primer\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDoes the app gather user input and pass it to another activity?\u003c/li\u003e\r\n\u003cli\u003eAre the git commits clear and descriptive?\u003c/li\u003e\r\n\u003cli\u003eIs the README detailed and descriptive, with all necessary elements?\u003c/li\u003e\r\n\u003cli\u003eIs the code properly indented? Do naming conventions make sense?\u003c/li\u003e\r\n\u003c/ul\u003e","frontPage":false},{"exportId":"thursday-behavioural-interview-questions","title":"Thursday: Behavioural Interview Questions","type":"WikiPage","content":"\u003ch3\u003e\u003cspan\u003eExample Behavioural Questions\u003c/span\u003e\u003c/h3\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eGive me an example of the project or initiative that you started on your own. It does not have to be business-oriented.\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat prompted you to get started?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eTell me about a time you had to work on several projects at once. How did you handle the projects?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eCan you give an example of a time when you didn’t agree with other programmers.\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHow did you resolve that conflict?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eTell me about when you had to deal with conflict within your team?\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHow was the conflict solved?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eHow would you deal with it now?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat was the most difficult decision you’ve ever had to make at work?\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eHow did you arrive at your decision?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat was the result?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cli\u003e\u003cspan\u003eTell me about the most difficult situation you have had when leading a team. What happened and how did you handle it?\u003c/span\u003e\u003c/li\u003e\r\n\u003col\u003e\r\n\u003cli\u003e\u003cspan\u003eWere you successful? What was the most important thing you did?\u003c/span\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003cspan\u003eWhat did you learn?\u003c/span\u003e\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003c/ol\u003e","frontPage":false},{"exportId":"pre-course-work-unit-testing-basics-with-espresso","title":"Pre-course work: Unit Testing Basics with Espresso","type":"WikiPage","content":"\u003cdiv\u003e\r\n\u003cp\u003eNext, let’s learn the basics of instrumentation testing in Android. We will use\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eEspresso\u003c/strong\u003e, a UI test framework that creates automated tests that run on an actual device or emulator.\u003cspan\u003e \u003c/span\u003e\u003cstrong\u003eInstrumentation tests\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eare meant to simulate the actions of a user and allow us to test the app through the stages of the android activity lifecycle.\u003c/p\u003e\r\n\u003ch2\u003eConfiguring Espresso\u003c/h2\u003e\r\n\u003cp\u003eFirst, we’ll add the necessary configurations and dependencies to our build.gradle file:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003ebuild.gradle (Module: app)\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-tag\"\u003eapply\u003c/span\u003e \u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-attribute\"\u003eplugin\u003c/span\u003e:\u003cspan class=\"hljs-value\"\u003e \u003cspan class=\"hljs-string\"\u003e'com.android.application'\u003c/span\u003e\r\n\r\nandroid {\r\n    ...\r\n\r\n    defaultConfig {\r\n        ...\r\n        testInstrumentationRunner \u003cspan class=\"hljs-string\"\u003e\"android.support.test.runner.AndroidJUnitRunner\"\u003c/span\u003e\r\n    }\r\n    ...\r\n}\r\n\r\ndependencies {\r\n    ...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003cpre\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test:runner:1.0.2'\u003cbr\u003e\u003c/span\u003eandroidTestImplementation \u003cspan\u003e'com.android.support.test.espresso:espresso-core:3.0.2'\u003c/span\u003e\u003cbr\u003e\u003cbr\u003e\u003c/pre\u003e\r\n\u003cpre\u003eandroidTestImplementation \u003cspan\u003e\"com.android.support.test:rules:1.0.2\"\u003c/span\u003e\u003c/pre\u003e\r\n\u003cpre\u003e\u003ccode class=\"groovy hljs css\"\u003e\u003cspan class=\"hljs-rule\"\u003e\u003cspan class=\"hljs-value\"\u003e} \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eCreating Test Classes and Rules\u003c/h2\u003e\r\n\u003cp\u003eNext, let’s create a new test class called\u003cspan\u003e \u003c/span\u003e\u003cem\u003eMainActivityInstrumentationTest\u003c/em\u003e\u003cspan\u003e \u003c/span\u003einside our\u003cspan\u003e \u003c/span\u003e\u003cem\u003ejava/com.moringaschool.myrestaurants (androidTest)\u003c/em\u003e\u003cspan\u003e \u003c/span\u003epackage. We'll place the following annotation within this file, and import all necessary classes.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003epackage io.github.vinge1718.restaurant;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;MainActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(MainActivity.class);\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eThe code in\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Rule\u003c/code\u003e\u003cspan\u003e \u003c/span\u003etells our device which activity to launch before each test. Here, we're instructing the instrumentation tests to launch the MainActivity before each test.\u003c/p\u003e\r\n\u003ch2\u003eWriting Instrumentation Tests with Espresso\u003c/h2\u003e\r\n\u003cp\u003eNow we are ready to write our first test. Include the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003e@Test\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eblock detailed below. Multiple methods will appear red. This is normal, continue reading the next section to address importing these methods appropriately.\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    ...\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evalidateEditText\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        onView(withId(R.id.locationEditText)).perform(typeText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e))\r\n                .check(matches(withText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e)));\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch3\u003eImporting Static Methods\u003c/h3\u003e\r\n\u003cp\u003eYou will notice that multiple methods included in this block of code will be red. Each of these are static methods from Espresso that need to be imported, similar to the manner in which we import classes. Click on each, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eOption\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e+\u003cspan\u003e \u003c/span\u003e\u003cem\u003eEnter\u003c/em\u003e, and select \"import static method...\" from the resulting menu.\u003c/p\u003e\r\n\u003cp\u003eOnce complete, your file should have these imports and annotations:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e\u003cspan class=\"hljs-keyword\"\u003epackage\u003c/span\u003e com.moringaschool.myrestaurants;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e android.support.test.rule.ActivityTestRule;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Rule;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e org.junit.Test;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.Espresso.onView;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.action.ViewActions.typeText;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.assertion.ViewAssertions.matches;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withId;\r\n\u003cspan class=\"hljs-keyword\"\u003eimport\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003estatic\u003c/span\u003e android.support.test.espresso.matcher.ViewMatchers.withText;\r\n\r\n\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-class\"\u003e\u003cspan class=\"hljs-keyword\"\u003eclass\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003eMainActivityInstrumentationTest\u003c/span\u003e \u003c/span\u003e{\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Rule\u003c/span\u003e\r\n    \u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e ActivityTestRule\u0026lt;MainActivity\u0026gt; activityTestRule =\r\n            \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e ActivityTestRule\u0026lt;\u0026gt;(MainActivity.class);\r\n\r\n    \u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003evalidateEditText\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        onView(withId(R.id.locationEditText)).perform(typeText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e))\r\n                .check(matches(withText(\u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e)));\r\n    }\r\n\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003ch2\u003eAnatomy of an Espresso Instrumentation Test\u003c/h2\u003e\r\n\u003cp\u003eNow that everything is imported correctly, let's look at this test a little closer. This test verifies that the instrumentation test can type the text \"Portland\" into our\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationEditText\u003c/code\u003e, and the text \"Portland\" will be visible in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eEditText\u003c/code\u003e.\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\n\u003ccode\u003eonView()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003especifies that we want to interact with a view\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ewithId()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a ViewMatcher method that allows us to find specific views by ID\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003etypeText()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a ViewAction method that allows us to type the specified text into our EditText\u003c/li\u003e\r\n\u003cli\u003e\n\u003ccode\u003ematches()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003eis a ViewAssertion method that validates the specific properties of the given view\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eCheck out\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/\"\u003ethis handy cheat sheet\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto see the available Matchers, ViewActions and ViewAssertions.\u003c/p\u003e\r\n\u003ch2\u003eRunning Instrumentation Tests\u003c/h2\u003e\r\n\u003cp\u003eLet’s run our test and make sure it passes. Right click on the class name and select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eRun ‘MainActivityInstrume…’\u003c/em\u003e. Because this is an instrumentation test, the emulator will open, the “Portland” text will appear in the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003elocationEditText\u003c/code\u003e, and the progress indicator will notify us that our test passed. Hooray!\u003c/p\u003e\r\n\u003ch2\u003eOther Instrumentation Tests\u003c/h2\u003e\r\n\u003cp\u003eLet’s add one more test to check if the location entered into our form is successfully being passed to our RestaurantsActivity with the intent extra we just recently created.\u003c/p\u003e\r\n\u003cp\u003eThe code for this test will appear as follows:\u003c/p\u003e\r\n\u003cdiv class=\"filename\"\u003eMainActivityInstrumentationTest.java\u003c/div\u003e\r\n\u003cpre\u003e\u003ccode class=\"java hljs\"\u003e...\r\n\u003cspan class=\"hljs-annotation\"\u003e@Test\u003c/span\u003e\r\n    \u003cspan class=\"hljs-function\"\u003e\u003cspan class=\"hljs-keyword\"\u003epublic\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003evoid\u003c/span\u003e \u003cspan class=\"hljs-title\"\u003elocationIsSentToRestaurantsActivity\u003c/span\u003e\u003cspan class=\"hljs-params\"\u003e()\u003c/span\u003e \u003c/span\u003e{\r\n        String location = \u003cspan class=\"hljs-string\"\u003e\"Portland\"\u003c/span\u003e;\r\n        onView(withId(R.id.locationEditText)).perform(typeText(location));\r\n        onView(withId(R.id.findRestaurantsButton)).perform(click());\r\n        onView(withId(R.id.locationTextView)).check(matches\r\n            (withText(\u003cspan class=\"hljs-string\"\u003e\"Here are all the restaurants near: \"\u003c/span\u003e + location)));\r\n    }\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\r\n\u003cp\u003eHere, we will need to follow the same process detailed above to import the static\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eclick()\u003c/code\u003e\u003cspan\u003e \u003c/span\u003emethod for use.\u003c/p\u003e\r\n\u003cp\u003eFor this test, the app will navigate to the RestaurantsActivity where it will display the same location string that was entered in the locationEditText.\u003c/p\u003e\r\n\u003cp\u003eIf you run the MainActivityInstrumentationTest now, you will notice that the test we just wrote fails. Why is this? Instrumentation tests are designed to simulate how a user interacts with an app. When using an app, a user can only click on a view such as the findRestaurantsButton if it is visible and unobstructed by other views or widgets. Our test is failing because the soft input keyboard is covering the findRestaurantsButton when our test was instructed to click on it. To combat this, let's disable the soft input keyboard on our emulator:\u003c/p\u003e\r\n\u003cp\u003eNavigate to your emulator's\u003cspan\u003e \u003c/span\u003e\u003cem\u003esettings\u003c/em\u003e, select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eLanguage \u0026amp; input\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/z5dajc9x4ralk2k/settings.png\" alt=\"language_and_input\"\u003e\u003c/p\u003e\r\n\u003cp\u003e... select\u003cspan\u003e \u003c/span\u003e\u003cem\u003eCurrent Keyboard\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e...\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/dwy5uoxmdot91a2/lang_and_input.png\" alt=\"language_and_input\"\u003e\u003c/p\u003e\r\n\u003cp\u003e...and finally, toggle to disable the keyboard:\u003c/p\u003e\r\n\u003cp\u003e\u003cimg src=\"https://dl.dropboxusercontent.com/s/8n4t2xtlvke4k4n/disable-keyboard.png\" alt=\"language_and_input\"\u003e\u003c/p\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eAlternatively\u003c/strong\u003e! - If you are getting a security exception that looks something similar to:\u003c/p\u003e\r\n\u003cpre\u003eAndroid :java.lang.SecurityException: Injecting to another application requires INJECT_EVENTS permission\u003c/pre\u003e\r\n\u003cp\u003eYou should implement code to shut down the soft keyboard after text typing, otherwise the next click will be considered as being on a different application. \u003c/p\u003e\r\n\u003cp\u003eTo fix this, simply close the keyboard after typing, also add some sleep/pause to make sure the keyboard is closed, otherwise the test will break every now and then. So the final code looked like this:\u003c/p\u003e\r\n\u003cpre\u003e\u003cspan\u003e@Test\u003cbr\u003e\u003c/span\u003e\u003cspan\u003epublic void \u003c/span\u003e\u003cspan\u003elocationIsSentToRestaurantsActivity\u003c/span\u003e(){\u003cbr\u003e    String location = \u003cspan\u003e\"Portland\"\u003c/span\u003e\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eonView\u003c/span\u003e(\u003cspan\u003ewithId\u003c/span\u003e(R.id.\u003cspan\u003elocationEditText\u003c/span\u003e)).perform(\u003cspan\u003etypeText\u003c/span\u003e(location)).perform(\u003cspan\u003ecloseSoftKeyboard\u003c/span\u003e())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    try \u003c/span\u003e{                             // the sleep method requires to be checked and handled so we use try block\u003cbr\u003e        Thread.\u003cspan\u003esleep\u003c/span\u003e(\u003cspan\u003e250\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e} \u003cspan\u003ecatch \u003c/span\u003e(InterruptedException e){\u003cbr\u003e        System.\u003cspan\u003eout\u003c/span\u003e.println(\u003cspan\u003e\"got interrupted!\"\u003c/span\u003e)\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e}\u003cbr\u003e    \u003cspan\u003eonView\u003c/span\u003e(\u003cspan\u003ewithId\u003c/span\u003e(R.id.\u003cspan\u003efindRestaurantsButton\u003c/span\u003e)).perform(\u003cspan\u003eclick\u003c/span\u003e())\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eonView\u003c/span\u003e(\u003cspan\u003ewithId\u003c/span\u003e(R.id.\u003cspan\u003elocationTextView\u003c/span\u003e)).check(\u003cspan\u003ematches\u003cbr\u003e\u003c/span\u003e\u003cspan\u003e            \u003c/span\u003e(\u003cspan\u003ewithText\u003c/span\u003e(\u003cspan\u003e\"Here are all the restaurants near: \" \u003c/span\u003e+ location)))\u003cspan\u003e;\u003cbr\u003e\u003c/span\u003e}\u003c/pre\u003e\r\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eInterruptedException\u003c/strong\u003e\u003c/em\u003e is used to indicate that the current thread has been interrupted by an external thread while it was performing some blocking operation (e.g. interruptible IO, wait, sleep)\u003c/p\u003e\r\n\u003cp\u003eUsing the provided examples, the linked resources on the helpful resources page, and your research skills, continue to implement both local and instrumentation unit tests.\u003c/p\u003e\r\n\u003ch2\u003eAdditional Resources\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eAndroid Developers Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/training/testing/ui-testing/espresso-testing.html\"\u003eTesting UI for a Single App\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://google.github.io/android-testing-support-library/docs/espresso/\"\u003eEspresso Documentation\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\n\u003ca href=\"https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/\"\u003eCheat Sheet\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor Matchers, ViewActions and ViewAssertions\u003c/li\u003e\r\n\u003cli\u003eAndroid Developers Guide on\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://developer.android.com/training/testing/ui-testing/espresso-testing.html\"\u003eTesting UI for a Single App\u003c/a\u003e\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/Vinge1718/Restaurant/tree/3_Espresso\"\u003e\u003ci class=\"glyphicon glyphicon-folder-open\"\u003e\u003c/i\u003e\u003cspan\u003e \u003c/span\u003eExample GitHub Repo for MyRestaurants after these changes\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cdiv\u003e\r\n\u003ch2\u003eTerminology\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eInstrumentation Testing:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eTesting for user interfaces that requires an actual emulator or device to simulate user interaction with the application.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003cli\u003e\r\n\u003cp\u003e\u003cstrong\u003eEspresso:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eA framework designed to test user interfaces with instrumentation tests.\u003c/p\u003e\r\n\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eTips\u003c/h2\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eInstrumentation test classes should have names that reflect the class they are testing. (For instance, instrumentation tests that correspond to the MainActivity will reside in a class called MainActivityInstrumentationTest).\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false},{"exportId":"tuesday-flexible-ui-app-of-choice-three-day-project","title":"Tuesday:Flexible UI App of Choice (Three-Day Project)","type":"WikiPage","content":"\u003ch1\u003eFlexible UI App of Choice (Three-Day Project)\u003c/h1\u003e\r\n\u003cdiv\u003e\r\n\u003cp\u003e\u003cstrong\u003eGoal:\u003c/strong\u003e\u003cspan\u003e \u003c/span\u003eYou have the next three days to practice everything we've learned thus far, paying special attention to flexible UIs and alternative resources, in order to create yet another impressive, functional portfolio piece. Make use of this extended period of in-class time on a single application to make something you'll be proud to show off!\u003c/p\u003e\r\n\u003ch2\u003eWarm Up\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eTuesday\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eDiscuss with your partner what gestures and animations you've implemented into your apps so far; how did it go?\u003c/li\u003e\r\n\u003cli\u003eWhat animations or gestures would you still like to try out?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eWednesday\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eWhen does it make sense to refactor activities into fragments?\u003c/li\u003e\r\n\u003cli\u003eHow does context change when we refactor code from activities into fragments?\u003c/li\u003e\r\n\u003cli\u003eHow can fragments and activities communicate with one another?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003eCode\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003ch3\u003eMyRestaurants Continued\u003c/h3\u003e\r\n\u003ch4\u003eTuesday\u003c/h4\u003e\r\n\u003cp\u003eFollow along with last night's homework in order to refactor several of our existing activities into the fragments required to later integrate both portrait and landscape-orientation layouts.\u003c/p\u003e\r\n\u003ch4\u003eWednesday\u003c/h4\u003e\r\n\u003cp\u003eFollow along with last night's homework to add alternative resources that will provide special layouts and functionality when the user's device is oriented in a landscape position.\u003c/p\u003e\r\n\u003ch3\u003eFlexible UI Project of Choice\u003c/h3\u003e\r\n\u003cp\u003eAs we near the end of our course, spend the next three days creating an in-depth and functional application to add to your growing portfolios. Take time to brainstorm something you'd be proud to show off to future employers.\u003c/p\u003e\r\n\u003cp\u003ePossible project ideas include:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eA journaling app (either a general journal, or specifically be a\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.myfitnesspal.android\u0026amp;hl=en\"\u003ediet\u003c/a\u003e,\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=net.daylio\u0026amp;hl=en\"\u003emood\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eor\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.bliss.phonegap\u0026amp;hl=en\"\u003egratitude\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ejournal).\u003c/li\u003e\r\n\u003cli\u003eA habit-tracker like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://play.google.com/store/apps/details?id=com.oristats.habitbull\u0026amp;hl=en\"\u003eHabitBull\u003c/a\u003e.\u003c/li\u003e\r\n\u003cli\u003eA budget tracker that allows you to manually enter expenses and see how much you spent in each category at the end of the month.\u003c/li\u003e\r\n\u003cli\u003eAnything else you and your partner can dream up!\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003eMake sure your app includes the following features:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eFlexible UIs and fragments. Moving forward, most code should exist in fragments (as seen in\u003cspan\u003e \u003c/span\u003e\u003ca href=\"pages/tuesday-flexible-uis-fragments\" target=\"_blank\"\u003eFlexible UIs: Fragments\u003c/a\u003e).\u003c/li\u003e\r\n\u003cli\u003eAn easy-to-navigate UI for both portrait and landscape orientations.\u003c/li\u003e\r\n\u003cli\u003eSome sort of list view. When an individual item on the list is clicked, the user should see a detail view.\u003c/li\u003e\r\n\u003cli\u003eIs backed by Firebase.\u003c/li\u003e\r\n\u003cli\u003eIncludes gesture listeners.\u003c/li\u003e\r\n\u003cli\u003eIncludes alternate resources.\u003c/li\u003e\r\n\u003cli\u003eMakes use of animations throughout.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eFurther Exploration\u003c/h3\u003e\r\n\u003cp\u003eIf you and your partner are able to fulfill the requirements listed above, try spending time implementing the following:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement an API, if applicable to your app idea.\u003c/li\u003e\r\n\u003cli\u003eIntegrate a visual library like\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://github.com/bmarrdev/android-DecoView-charting\"\u003eDecoView\u003c/a\u003e\u003cspan\u003e \u003c/span\u003eto chart or visualize whatever data you're collecting, tracking and/or displaying to users.\u003c/li\u003e\r\n\u003cli\u003eInclude user authentication.\u003c/li\u003e\r\n\u003cli\u003eAt the end of day three, publish your app to Google Play.\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch2\u003ePeer Code Review\u003c/h2\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003chr\u003e\r\n\u003cp\u003e \u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eHas the project included alternative resources successfully?\u003c/li\u003e\r\n\u003cli\u003eIs at least one animation in use? Does it add to the user experience?\u003c/li\u003e\r\n\u003cli\u003eIs at least one gesture listener in use? Is it easy to tell what gesture the application expects?\u003c/li\u003e\r\n\u003cli\u003eDoes the layout change accordingly when the orientation of the screen is altered from portrait to landscape (and back again)?\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003c/div\u003e","frontPage":false}],"assignments":[{"exportId":"i1a4b96ca090be03f6f1228317e3e7019","title":"Friday: IP review","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eThe following scale will be used to grade your Independent Project based on the criteria, please submit your links to your TM.\u003c/span\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":18.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i062d05d0201b7c1fa77aa45f8f51ca06","title":"Independent Project","type":"Assignment","content":"\u003ch1\u003eIndependent Project\u003c/h1\u003e\r\n\u003cp\u003eFor each independent project in this course, you will be required to successfully implement the objectives listed below into one of the following application types, as detailed in the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\" target=\"_blank\"\u003eAndroid Independent Projects lesson\u003c/a\u003e\u003cspan\u003e \u003c/span\u003ein this course’s pre-work.\u003c/p\u003e\r\n\u003cp\u003eYou will continue to work on this same project for the first four Fridays of the course, implementing new objectives each week.\u003c/p\u003e\r\n\u003ch3\u003e1. Tracking Custom Objects\u003c/h3\u003e\r\n\u003cp\u003eTracking any sort of information/input the user provides (ie: not gathered from an application; custom to do lists, habit trackers, mood trackers, journals, etc. )\u003c/p\u003e\r\n\u003ch3\u003e2. Tracking Objects from an API\u003c/h3\u003e\r\n\u003cp\u003eIe: Rating microbrews, wine, movies, hiking trails, restaurants, etc. to keep track for your own reference.\u003c/p\u003e\r\n\u003ch3\u003e3.) Marketplace\u003c/h3\u003e\r\n\u003cp\u003eApplication to buy and sell any content of your choosing.\u003c/p\u003e\r\n\u003ch3\u003e4.) Reference\u003c/h3\u003e\r\n\u003cp\u003eJust information. Sports stats, weather, traffic delays, bands on tour, Recipes, movie reviews, etc.\u003c/p\u003e\r\n\u003cp\u003e\u003cstrong\u003eSee the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\" target=\"_blank\"\u003eAndroid Independent Projects lesson\u003c/a\u003e\u003cspan\u003e \u003c/span\u003efor more information, real-world examples, and API suggestions for each of the application types listed above.\u003c/strong\u003e\u003c/p\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eCreate an app with at least 3 activities that the user can navigate to. Build these activities out with designs, UI, and functionality as much as possible. Remember to validate form inputs. Use toasts and hide/show to communicate statuses to your user.\u003c/li\u003e\r\n\u003cli\u003eDisplay a list of information. Build this out as much as possible.\u003c/li\u003e\r\n\u003cli\u003eGather user input and pass it to another activity.\u003c/li\u003e\r\n\u003cli\u003eUse ButterKnife to bind all views.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003eImplement the\u003cspan\u003e \u003c/span\u003e\u003ccode\u003eView.OnClickListener\u003c/code\u003e\u003cspan\u003e \u003c/span\u003einterface to set click listeners to view elements.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices,\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003eespecially indenting properly, commenting complex code segments, making logically separate Git commits, including a detailed README, and removing commented-out code and logging statements before committing.\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrates an understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject works as expected\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrates concepts covered this week. If prompted, are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology\u003c/li\u003e\r\n\u003cli\u003ePrevious standards have been met.\u003c/li\u003e\r\n\u003cli\u003eThe project is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTimely project submission\u003c/li\u003e\r\n\u003cli\u003eProject README file is up to standard\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eA minimum of 20 GitHub commits on Github for this project\u003c/li\u003e\r\n\u003cli\u003eUsage of .gitignore with required files and folders ignored\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":18.0,"dueAt":"2019-05-16T18:00:00+03:00","lockAt":null,"unlockAt":null},{"exportId":"i296bc8591a7a1adbf5e07342c5adb915","title":"Independent Project","type":"Assignment","content":"\u003cp\u003eContinue building your independent project by integrating the new tools and concepts we’ve learned this week. This includes Firebase user authentication, saving and retrieving data to Firebase, employing the Firebase RecyclerAdapter, using Shared Preferences, dialogs, and integrating a SearchView widget, as outlined by the objectives below.\u003c/p\u003e\r\n\u003cp\u003eFor more details, including project examples, API suggestions, and an outline of application categories, revisit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\"\u003eAndroid Weekly Independent Projects\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson from the pre-work.\u003c/p\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for fulfillment of the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eImplement Firebase user authentication.\u003c/li\u003e\r\n\u003cli\u003eSave and retrieve data using Firebase, making sure to structure your data according to Firebase guidelines.\u003c/li\u003e\r\n\u003cli\u003eEmploy the Firebase-RecyclerAdapter to display from your database.\u003c/li\u003e\r\n\u003cli\u003eUse SharedPreferences to save an important piece of data in your app.\u003c/li\u003e\r\n\u003cli\u003eUtilize dialogs to inform users of login status, etc.\u003c/li\u003e\r\n\u003cli\u003eUse a SearchView widget to gather user input.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices,\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003eespecially indenting properly, commenting complex code segments, making logically separate Git commits, including a detailed README, and removing commented-out code and logging statements before committing.\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject works as expected\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrate concepts covered this week. If prompted, are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology\u003c/li\u003e\r\n\u003cli\u003ePrevious standards have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTimely project submittion\u003c/li\u003e\r\n\u003cli\u003eProject README file is upto standard\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eA minimum of 20 github commits on Github for this project\u003c/li\u003e\r\n\u003cli\u003eUsage of .gitignore with required files and folders ignored\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":15.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i5afe801320ced00aa32edc60350b71d8","title":"Independent Project","type":"Assignment","content":"\u003cp\u003eContinue to build upon your previous independent project by integrating the new tools and concepts we've learned this week, as listed in the objectives below.\u003c/p\u003e\r\n\u003ch2\u003eObjectives\u003c/h2\u003e\r\n\u003chr\u003e\r\n\u003cp\u003eYour code will be reviewed for fulfillment of the following objectives:\u003c/p\u003e\r\n\u003cul\u003e\r\n\u003cli\u003eIncludes two gesture listeners\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003cstrong\u003eOR\u003c/strong\u003e\u003c/em\u003e\u003cspan\u003e \u003c/span\u003etwo animations,\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003cstrong\u003eOR\u003c/strong\u003e\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eutilize the camera within your application.\u003c/li\u003e\r\n\u003cli\u003eImplements one alternate resource.\u003c/li\u003e\r\n\u003cli\u003eContinue using good coding practices,\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003eespecially indenting properly, commenting complex code segments, making logically separate Git commits, including a detailed README, and removing commented-out code and logging statements before committing.\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eRequired functionality was present by the 5:00pm Friday deadline.\u003c/li\u003e\r\n\u003cli\u003eProject demonstrates understanding of this week’s concepts. If prompted, you can discuss your code with an instructor using correct terminology.\u003c/li\u003e\r\n\u003cli\u003eProject works as expected\u003c/li\u003e\r\n\u003cli\u003eThe project demonstrate concepts covered this week. If prompted, are you able to discuss the flow of your code and the concepts behind it with an instructor using correct terminology\u003c/li\u003e\r\n\u003cli\u003ePrevious standards have been met.\u003c/li\u003e\r\n\u003cli\u003eProject is in a polished, portfolio-quality state.\u003cspan\u003e \u003c/span\u003e\u003cbr\u003e\u003cem\u003e(Suggestions for what this can mean: Intuitive, easy to follow layout. Simple yet polished styling. Form field labels where appropriate. Form fields that are validated correctly, and get cleared after submitting. Detailed, well put together readme. No typos. And much more.)\u003c/em\u003e\n\u003c/li\u003e\r\n\u003cli\u003eTimely project submittion\u003c/li\u003e\r\n\u003cli\u003eProject README file is upto standard\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\"\u003eHere is an example\u003c/a\u003e\n\u003c/li\u003e\r\n\u003cli\u003eA minimum of 20 github commits on Github for this project\u003c/li\u003e\r\n\u003cli\u003eUsage of .gitignore with required files and folders ignored\u003c/li\u003e\r\n\u003cli\u003e\n\u003cem\u003eOptional\u003c/em\u003e: Is published to Google Play.\u003c/li\u003e\r\n\u003c/ul\u003e","submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":15.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i9c76f03456b04b9e682bdecaa977712e","title":"Independent Project ","type":"Assignment","content":"\u003ch1\u003eIndependent Project\u003c/h1\u003e\r\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: Please do\u003cspan\u003e \u003c/span\u003e\u003cem\u003enot\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e.gitignore API keys or credentials for this project unless they grant access to sensitive information. Your instructor will need access to these keys in order to review your project with you.\u003c/p\u003e\r\n\u003ch2\u003eProject\u003c/h2\u003e\r\n\u003cp\u003eContinue to build upon your previous independent project by integrating the new tools and concepts we’ve learned this week, as listed in the objectives below. This includes retrieving data from an API back-end.\u003c/p\u003e\r\n\u003cp\u003eFor reference, here are the recommended APIs. All of these APIs have been successfully Remember, you may not use an API outside of the list below unless you’ve\u003cspan\u003e \u003c/span\u003e\u003cem\u003ealready\u003c/em\u003e\u003cspan\u003e \u003c/span\u003eapproved it with an instructor. Please review the guidelines regarding using unlisted APIs if you have not done so already.\u003c/p\u003e\r\n\u003ch3\u003eRecommended APIs\u003c/h3\u003e\r\n\u003cul\u003e\r\n\u003cli\u003e\u003ca href=\"https://dev.twitter.com/rest/public\"\u003eTwitter\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.linkedin.com/docs/rest-api\"\u003eLinkedin\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developers.pinterest.com/\"\u003ePinterest\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.flickr.com/services/developer/api/\"\u003eFlickr\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.meetup.com/meetup_api/\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://darksky.net/dev/\"\u003eDarkSky\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.yelp.com/developers/documentation/v2/overview\"\u003eYelp\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.github.com/v3/\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://strava.github.io/api/\"\u003eStrava\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://sunlightlabs.github.io/congress/\"\u003eSunlight Congress\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://www.petfinder.com/developers/api-docs\"\u003ePetfinder\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.brewerydb.com/developers\"\u003eBreweryDB\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://api.meetup.com/2/open_events\"\u003eMeetup\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.giantbomb.com/api\"\u003eGiant Bomb\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.walmartlabs.com/\"\u003eWalmart Labs\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.yummly.com/\"\u003eYummly\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://www.recipepuppy.com/api/\"\u003eRecipe Puppy\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"https://developer.musixmatch.com/\"\u003eMusixMatch\u003c/a\u003e\u003c/li\u003e\r\n\u003cli\u003e\u003ca href=\"http://betterdoctor.com/developers\"\u003eBetter Doctor\u003c/a\u003e\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003eMore Information\u003c/h3\u003e\r\n\u003cp\u003eFor more information on recommended APIs, including examples of which API to integrate with which project category, revisit the\u003cspan\u003e \u003c/span\u003e\u003ca href=\"https://moringacore-android.herokuapp.com/#prework3.html\" target=\"_blank\"\u003eAndroid Independent Projects\u003c/a\u003e\u003cspan\u003e \u003c/span\u003elesson\u003c/p\u003e","submissionTypes":"a text entry box or a website url","graded":true,"pointsPossible":15.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i6cf4db8b36f02a3989b9580196a6e54f","title":"Roll Call Attendance","type":"Assignment","content":null,"submissionTypes":"an external tool","graded":true,"pointsPossible":100.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"i519bb3452e8371f2e176b2c0482edc8c","title":"Wednesday: White Board Interview Practice","type":"Assignment","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\r\n\u003cp\u003e\u003cspan\u003eTake time this morning and split into groups of 5. You will be practicing for white board interviews that will be touched on more during your project period. Pick one of you to take the mock white board interview, set a toy problem for them to go through, and at the end use the rubric below to grade and give feedback.\u003c/span\u003e\u003c/p\u003e\r\n\u003c/div\u003e","submissionTypes":"a text entry box","graded":true,"pointsPossible":12.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[],"quizzes":[],"files":[{"type":"file","name":"xmlDesign_edit_screenshot.png","size":51414,"files":null},{"type":"file","name":"jar-file_transfer_SS.png","size":34671,"files":null},{"type":"file","name":"Authentication1.jpg","size":34283,"files":null},{"type":"file","name":"logcat.png","size":336010,"files":null},{"type":"file","name":"Add_Jar_As_library.png","size":211980,"files":null},{"type":"file","name":"Screenshot from 2019-02-25 12-54-41.png","size":126946,"files":null},{"type":"file","name":"constraint_to_relative_layout_android_studio.gif","size":9350035,"files":null},{"type":"file","name":"java-json.jar","size":84697,"files":null},{"type":"file","name":"Final_jar_structure.png","size":40813,"files":null},{"type":"file","name":"making-a-library-from-jar-file.png","size":27313,"files":null},{"type":"file","name":"Screenshot from 2019-02-25 13-35-23.png","size":91209,"files":null},{"type":"file","name":"Authentication1.png","size":34407,"files":null}]}